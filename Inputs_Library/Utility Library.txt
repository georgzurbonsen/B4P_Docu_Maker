

This text file contains all relevant function descriptions in the "Utility Library".


B4PDOCU.START



"get long options" :
{
	"Function Names":	[ "get long options" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
	"Description"::

		This function identifies all <i>long options</i> specified as command line parameters when starting a B4P program and assigns their names and values into a global
		variable called <b>long options[]</b>, provided at least one such long option has been identified.

		<br><br>

		Long options are defined as command line options which begin with two consecutive minus signs (--) followed by an option name.
		The option name may optionally be completed with an option value, using an equal sign followd by a string or numeric value.
		By default, the values are strings, but may be converted to boolean (if "true" or "false"), dates (if "YYYY-MM-DD", "HH:MM:SS" or "YYYY-MM-DD HH:MM:SS"),
		or numerals (if number provided).  If you need to know the ordering of the options, then check the command line arguments directly.

		<br><br>

		=== 300, 400, 300, bold_column_1
		Example 		| Member Name					| Member Value
		--test			| long options[test]				| void
		--row=1 col="2"		| long options[row]<br>long options[col]	| 1<br>2 (both numerals)
		--date="2020-12-31"	| long options[date]				| 2020-12-31 (date format)
		--ans1=true ans2="false"| long options[ans1]<br>long options[ans2]	| true<br>false (both Boolean types)
		--t1=Hi --t2="He He"	| long options[t1]<br>long options[t2]		| "Hi"<br>"He He" (both strings)
		===

		<br><br>

		Please note that <i>short options</i> (e.b. '-a') are entirely reserved for starting and execution options provided by the B4P Data Engine and 
		they will not be visible to the B4P programs.
	+++,
	"Call as":		"procedure or function",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Return value":
	[
		{ "Name": "Number of long options found",
		  "Types": [ "numeral" ],
		  "Description"::
			If no long options are provided, then 0 is returned, and the variable <b>long options[]</b> will not be created.
			+++
		}
	],
	"Examples"::
	include ( Utility Library );
	program file[] = "Example_Program.b4p";	// The own program will be called recursively. 
	                                        // Rename this filename to name of this file

	count[] = get long options();           // Identify long options with the best yield in the market

	if (count[] == 0) // Program starts here
	{
	    echo("Test 1: Start B4P program using shell command with some long options", new line);
	    system("b4p -x " + program file[] + ' --facts --decision=false --value=25.1 --time="18:30:15" ' );

	    echo("Test 2: Start B4P program using 'start()'");
	    start( program file[], '--myths', '--decision=true',  '--value=30', '--name="Jim"', '--date=2021-02-21' );
	}
	else // This part is executed in teh recursive call.
	{
	    echo("Number of long options found: ", count[] );
	    see( long options[] );
	    echo(new line);
	}
	+++,
	"Output": "automatic",
	"See also": [ "start", "system" ]
},






"directory create temp" :
{
	"Function Names":	[ "directory create temp" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
	"Description"::

		This function will create a dedicated temporary directory, located as a subdirectory where all othe other temp files 
		are located in your system.  Under Windows, the new directory is created in <b>C:\Users\Zur Bonsen Georg\AppData\Local\Temp\b4p\B4P_XXXXXX\</b>
		where XXXXXX stands for six random capital letters. Under Linux and MacOS, the new directory is created in <b>/tmp/b4p/B4P_XXXXXX/</b>.

		<br><br>
		<u>Advice</u>: It is recommended to remove that directory including all contents when you are done using it.  Do not count on referring to that
		directory in a later B4P session and do not use it to store your valuable data for later use.  The temp directory is likely cleaned up in regular time intervals.

	+++,
	"Call as":		"function",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Return value":
	[
		{ "Name": "Path name",
		  "Types": [ "string" ],
		  "Description"::
			This is the full path name to the directory name just created.  A directory separator symbol (slash or backslash) has already been added at the end.
			+++
		}
	],
	"Examples"::
	include ( Utility Library );
	dir[] = directory create temp();
	echo("Created temp directory '", dir[], "'.");

	// Do something
	table initialize ( little table, { Name, Andy, Beata, Charly, Daniela } );
	table save( little table, dir[] + "Little Table.csv"  );

	// pause; // Remove comment symbols so you can look where the file has been saved.

	directory delete recursive( dir[] ); // Clean up: Remove the temp directory
	+++,
	"Output": "automatic",
	"See also": [ "directory create", "directory delete recursive" ]
},



"choose recent file" :
{
	"Function Names":	[ "choose recent file" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
	"Description"::

		This function will either identify the <i>most recent file</i> according to a specified ordering criteria.

	+++,
	"Call as":		"function",
	"Parameter count":	"5",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Prompt text",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description"::
			A prompt text is needed if the count (provided in the last function parameter) is not 1.
			The prompt will be displayed if needed so you can select from of the <i>n</i> recent files displayed.
			+++
		},
		{ "Number": "2.",
		  "Name": "Path name",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description"::
			Specify the path name to the directory where the files to be searched are located.  No wildcards are supported here.
			+++
		},
		{ "Number": "3.",
		  "Name": "File name pattern to match",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description"::
			Specify file name pattern where the file name part may contain wildcard symbols such as
			'*' and '?'. The pattern will be used to obtain a listing of matching files which will then be prioritzed
			by the ordering criteria.  Exammple: "b4p*.txt" covers all files beginning wtih "b4p" and ending with file type ".txt".
			+++
		},
		{ "Number": "4.",
		  "Name": "Ordering criteria",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description"::
			One of the following values apply:
			=== 200, 600, noframe_1stcolbold, noheader
			oldest	| Selects the oldest file or list <i>n</i> (count) oldest files you can choose from.
			newest	| Selects the newest file or list <i>n</i> (count) newest files you can choose from.
			first	| Selects the first file or list the first <i>n</i> (count) files in alphabetical order you can choose from.
			last	| Selects the last file or list the last <i>n</i> (count) files in alphabetical order you can choose from.
			biggest	| Selects the biggest file (file size) or list the <i>n</i> biggest files you can choose from.7
			smallest| Selects the smallest file (file size) or list the <i>n</i> smallest files you can choose from.7
			===
			+++
		},
		{ "Number": "5.",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description"::
			Valid range: 1-35<br>
			If 1 is chosen, then no menu will be displayed because the first match according to the prioritization (e.g. newest file) is returned.
			+++
		}
	],
	"Return value":
	[
		{ "Name": "Identified file name",
		  "Types": [ "string" ],
		  "Description"::
			The file name contains no directory path.  If no file has been found, then a blank string is returned.
			+++
		}
	],
	"Exceptions": "If no file is found, and verbose level is not 'quiet', then an error message will warn you about no files found.  You have the choice to stop or continue",
	"Examples"::
	a[] = choose recent file( "", "Examples\", "*table*.b4p", first, 1 ); // No user interaction
	echo("First file in alphabetic order containing 'table' is ", a[] );

	a[] = choose recent file( "", "Examples\", "*table*.b4p", last, 1 ); // No user interactino
	echo("First file in alphabetic order containing 'table' is ", a[] );

	a[] = choose recent file( "Please choose one of the newest files: ", "Examples\", "*.b4p", newest, 5 );

	echo("Chosen file is: ", a[] );
	+++,
	"Output"::
	savecode
First file in alphabetic order containing 'table' is REF_Features_Table_columns.b4p
First file in alphabetic order containing 'table' is REF_Function_with_table.b4p
Found 382 files.

Please choose one of the newest files:
     1 :  REF_Function_variable_to_json.b4p         (2020-10- 3 17:57:34      0 kB)
     2 :  REF_Function_vertical.b4p                 (2020-10- 3 17:57:34      0 kB)
     3 :  REF_Function_week.b4p                     (2020-10- 3 17:57:34      0 kB)
     4 :  REF_Function_weekday.b4p                  (2020-10- 3 17:57:34      0 kB)
     5 :  REF_Function_while.b4p                    (2020-10- 3 17:57:34      0 kB)
Please select: 3
Chosen file is: REF_Function_week.b4p
	+++,
	"See also": "directory listing"
},







"abbreviate name" :
{
	"Function Names":	[ "abbreviate name" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
	"Description"::
		This function abbreviates names.  The abbreviation contains the first letters of the first, all middle and
		last names.  Multiple letters will be included for following sequences:<br>
		<b>Ch, Gh, Ll, Ph, Rh, Sch, Sh, Sp, St, Th, Zh</b>
	+++,
	"Call as":		"function",
	"Parameter count":	"1",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name to abbreviate",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description": ""
		}
	],
	"Return value":
	[
		{ "Name": "Abbreviation",
		  "Types": [ "string" ],
		  "Description": ""
		}
	],
	"Examples"::
	include ( Utility Library );
	echo( abbreviate name( "John Adams" ) );	
	echo( abbreviate name( "John F. Kennedy" ) );	
	echo( abbreviate name( "Ludwig van Beethoven" ) );
	echo( abbreviate name( "Sherlock Holmes" ) );
	+++,
	"Output": "automatic"
},





"print / compose matrix" :
{
	"Function Names":	[ "print matrix", "echo matrix", "compose matrix" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
	"Description"::
		The function <b>print matrix</b> takes a combination of strings resp. scalar values and matrices embedded in
		sets.  The output consist of mulitple rows of text where the matrices and text elements are properly aligned.
		You can print out 1 or more matrices with text (e.g. variables, mathematical operators, scalrs) inbetween.<br>
		The function <b>echo matrix</b> adds an additional 'new line' after printing out the matrix.
		The function <b>compose matrix</b> does not print out, but provides the resulting text lines in the return value.
	+++,
	"Call as":		"procedure or function",
	"Parameter count":	"Min 4",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Number format",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description"::
			This number format is used to output numerals.  See __Numeral to String Formatting Parameters__.  Keep blank for generic output of numbers.
			The number format will not be used for other types, e.g. dates and strings.  The matrix will appear wider if numbers with many digits are printed out.
			<br>Examples:</br>
			* # - Number without decimal digits, zero is shown as blank
			* 0 - Numbers without decimal digits
			* 0.00 - Numbers with 2 decimal digits
			* #,##0 - Numbers with 1000 separators
			+++
		},
		{ "Number": "2.",
		  "Name": "Element length",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": "This is the minimum width of every matrix element.  The field with the longest contents will widen the columns so no contents need to be truncated.."
		},
		{ "Number": "3.",
		  "Name": "Separator line",
		  "Direction": "input",
		  "Types": [ "string" ],
		  "Description": "Typically, use a vertical line, or for nicer formatting add one space before and behind the vertical line.  Other symbols such as spaces are also useful."
		},
		{ "Number": "4,...",
		  "Name": "Contents",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description"::
			Numerals, strings, date, Booleans, etc. are treated as text and scalers which can be used to create formulas consisting
			of both matrices and formula elements, for example constants, variables and operators.<br>
			Paramter sets are treated as matrices:<br>
			* { 1, 2, 3 } translates to a vertical matrix.
			* {{ 1, 2, 3 } tranlates to a horziontal matrix.
			* { {1}, {2}, {3} } translates to a vertical matrix.
			* { {1,2}, {3,4}, {5,6} } translates to a matrix containing 3 rows and 2 columns.
			* { A, pi, 3 } Combination of text and numbers is allowed.
			+++
		}
	],
	"Return value":
	[
		{ "Name": "Matrix",
		  "Types": [ "set" ],
		  "Description": "Every element in the set contains one line of text."
		}
	],
	"Examples"::
	include ( Utility Library );
	matrix 1[] = { { 1,20,300 }, {4, 50, 600}, {700, 8, 9} };
	matrix 2[] = { 10, 20, 30, 40 };
	matrix 3[] = horizontal( { 5, 10, 15, 20 } );
	matrix 4[] = vertical( {100,200,300,400} );

	echo matrix( "0.00", 6, " | ", "A = ", 
		matrix 1[], "+", matrix 2[], ", ", matrix 3[], " and ", matrix 4[] );

	o[] = compose matrix( "0.00", 6, " | ", "A = ", 
		matrix 1[], "+", matrix 2[], ", ", matrix 3[], " and ", matrix 4[] );

	echo("Alternative way to print the matrix:", new line, join( o[], new line ));
	+++,
	"Output": "automatic"
}



B4PDOCU.STOP