
{



"The Language" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Language Guide", "B4P Language", "B4P Program" ],
"Description 01:Overview" : [
"",
"	The B4P language is designed to solve problems with as few clearly understandable statements as possible, allowing to keep the number of statements,",
"	variables and loops as low as possible.",
"",
"	<br/><br/><img src=\"Images/LAN_Pyramid.png\" alt=\"B4P Language Pyramid\"><br/>",
"",
"	We will elaborate the pyramid from the bottom up",
"	* Continue at the bottom level beginning how to formulate numbers and text, followed by basic data types (e.g. numerals, strings)",
"	* Address the main object types __variables__ and __tables__",
"	* Covering the remaining middle layers language features.",
"	* And concluding at the top to explain the __blocks__ and __statements__",
""
 ]
	
},



"Basics" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Basic language elements",
    "Keywords":			["Values"],
"Description 01:Introduction" : [
"",
"	<img src=\"Images/LAN_Pyramid_Basics.png\" alt=\"B4P Language Pyramid - Basics\"><br/>",
"",
"",
"	The language consist of following basic elements:",
"",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	__Text__	| Any form of text with and without quotation marks around",
"	__Numbers__	| Any numeric representations",
"	__Symbols__	| All language specific symbols (e.g. operators, assignment symbols)",
"	__Comments__	| Contents not to be considered for program execution",
"	===",
"",
"	Details about the __characters__ used in B4P, including UNICODE and special input and output",
"	characters for special keys and console formatting features are addressed afterwardsx",
""
 ]
	
},




"Text" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text" ],
"Description 01:Introduction" : [
"",
"	The B4P language supports 3 different forms of text contents:",
"",
"	* __Plain text__, which is, unique to B4P, any text <u>with and without spaces</u>.",
"	* __Text inside single quotation marks__, using apostrophes ( ANSI/UNICODE 39: ') as single quotation mark symbols",
"	* __Text inside double quotation marks__, using double quotation marks ( ANSI/UNICODE 34: \")",
"",
"	These text items can be used for following purposes:",
"",
"	=== 250, 250, 250, 250",
"	Usage of string constants		| Plain text				 	| Text inside single quotation marks	| Text inside double quotation marks",
"	String values				| example					| 'example'				| \"example\"",
"	__Base variable__ names (see <sup>1</sup>)	| example[]					| 'example'[]				| \"example\"[]",
"	__Member variable__ names (see <sup>1</sup>)| example[example 2, ...]			| 'example'['example 2', ...]		| \"example\"[\"example 2\", ...]",
"	__Table names__				| [example:...]					| ['example':...]			| [\"example\":...]",
"	__Function names__, called as procedures	| example;<br>example(...);			| (Not supported)			| (Not supported)",
"__Function names__, called as functions in expressions 						| = ... example();<br>= ... example(...);	| (Not supported)			| (Not supported)",
"	__Reserved keywords__			| true, false, else, tab, escape, new line	| (Not reserved if in quotation marks)	| (Not reserved if in quotation marks)",
"	===",
"",
"	<sup>1</sup> <u>Attention</u>: Different from other programming languages, __variables__ in B4P are always specified by strings (or __expressions__ returning strings) followed by a <b>[]</b> or <b>[...]</b> sequence.",
"	It appears outlandish, but has some key advantages which are described later in this manual.",
""
 ]
	
},



"Plain Text" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Plain Text" ],
"Description 01:Introduction" : [
"",
"	Plain text can be used for",
"	* <b>String values</b>",
"	* __Variable names__",
"	* __Table names__",
"	* __Procedure names__ and __function names__",
"* __Reserved keywords__ (true, false, else, tab, escape, new line) <br> 	  These reserved keywords must always be formulated with lower-case characters, otherwise they are treated as plain text.",
"" ],
"Description 02:Rules" : [
"",
"	Following rules apply for plain text:",
"	* It may consist of any character which does not interfere with the B4P code syntax: Letters, letters combined with numbers, and special symbols not interfering with B4P code syntax (e.g. parentheses, commas, operators, etc.).",
"	** Good example: <b>A.1</b> (The single point is not a dedicated B4P symbol).",
"	** Bad example: <b>Baden-Baden</b> (The hyphen is interpreted as a minus sign and results in a successful string subtraction.  The outcome would be a blank string.",
"	* The text may contain white <i>white spaces</i> (space bar, tab, etc.)",
"	** Example 1: <b>4200 Pennsylvania Avenue</b> or <b>Number 1</b>",
"	** Example 2: <b>555 1212</b> (phone number is a text and not a __number__ because of the space inside)",
"	** Example 3: <b>1.234.567</b> (multiple decimal points between numeric digits constitute a text)",
"	* The text must be on the same line.",
"	* Multiple consecutive white spaces inside the text are interpreted as one single space character.",
"	** Example: <b>Hello&nbsp;&nbsp;&nbsp;World</b> is the same as <b>Hello World</b>.",
"	* Leading and trailing spaces are ignored.",
"	** Example: <b>echo(Hello World)</b> outputs the same as <b>echo(&nbsp;&nbsp;Hello World )</b>.",
"	* A lone point (<b>.</b>) specified without quotation marks is also interpreted as a string containing this one character as long it is not a decimal point in a numeral.",
"	** The lone point is also used to reference a current column in __partial table specifications__.",
"	** Note: Two consecutive points are used for __value ranges__ and do not consitute text contents.",
"	* Reserved keywords are automatically interpreted as part of the B4P syntax, e.g. <b>true</b> as Boolean <i>true</i>, and __else__ is also part of the B4P language.",
"	* If the text is assigned to B4P variables, then the variable assumes the subtype __softquoted string__.",
""
 ]
	,
"Examples 02:Examples" : [
"	echo( Hello World );",
"	echo(   Hello   World   );  // Same as above (Spaces outside the strings are ignored, so are multiple spaces inside)",
"	echo( One + One );          // + sign is an operator, result is 'OneOne'",
"	echo( 'One + One' );        // This one is OK.",
"	echo( Baden-Baden );        // Empty string.  Hyphen is treated as minus sign (subtraction of strings)",
"	echo( 'Baden-Baden' );      // This one is OK.",
"	echo( 1. 23 );              // This is a string because a space is inside.",
"	echo( 1 200 );              // Same here.  Use function 'clean numeral' to extract 1200 as a number from here",
"	echo( Dial 555 1212 );",
"	echo( this is on, new line, the next line );  // new line is a reserved keyword",
"	echo( Café in Zürich );     // Foreign characters inside",
"	echo( . );                  // Lone point",
"	echo( .     . . );          // A string containing 3 lone points (. . .), also showing how spaces are collapsing",
"	// echo( .. );              // Would cause an error because .. is a b4p language symbol.",
"	echo( '..' );               // This one is OK",
"	echo( new line, Line 1, new line, Line 2 ); "
 ]
	,
    "Output 02:": "automatic",
    "See also": [ "Text inside single quotation marks", "Text inside double quotation marks" ]
},


"Text Inside Single Quotation Marks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text inside single quotation marks"],
"Description 01:Introduction" : [
"",
"	Text inside single quotation marks can be used for",
"	* <b>String values</b>",
"	* __Variable names__",
"	* __Table names__",
"" ],
"Description 02:Rules" : [
"	* Use single quotation marks (apostrophes) <b>' ... '</b> to enclose the text.",
"	* Inside the quotation marks, all characters are fine, except the single quotation mark which delimits the text.",
"	* All white spaces inside the text inside quoatation marks are preserved.",
"	** Example 1: <b>'Hello&nbsp;&nbsp;&nbsp;World'</b> is not equal to <b>'Hello World'</b>",
"	** Example 2: <b>'Hello World'</b> is not equal to <b>'  Hello World  '</b>",
"	* The text must fit on the same line.",
"	** Exception: Use  __Multi-line text__ using 3 consecutive quotation marks ''' (apostrophes) as delimiatersto formulate a text requiring multiple lines.",
"	* Reserved keywords inside quotation marks are treated as text, e.g. 'true'.",
"	* Various functions and comparisons support __wildcard symbols__",
"	** Example 1: <b>ABC = 'A*'</b> returns true.",
"	* __Character entities__ like &amp;euro; or &amp;#x20ac; for the EURO symbol &euro; are supported.  They are converted quasi at compile time to target characters.",
"	* If the text is assigned to B4P variables, then the variable assumes the subtype __softquoted string__.",
""
 ]
	,
"Examples 02:Examples" : [
"	echo( 'Hello World' );",
"	echo( '  Hello   World  ' );",
"	echo( 'One + One' );",
"	echo( '\"In double quotation Marks\"' );",
"	echo( 'Price tags: &euro; 10.00, &#x20ac; 10.00, &#8364; 10.00');",
"	echo( '3 * 2 = 6' );",
"	echo( 'A cheap way to continue on&#10;the next line' ); // Not recommended. Use '...', new line, '...' instead.",
"	echo( new line, 'Line 1', new line, 'Line 2' ); "
 ]
	,
    "Output 02:": "automatic",
    "See also": [ "Plain text", "Text inside double quotation marks", "Multi-line text", "softquoted strings" ]
},



"Text Inside Double Quotation Marks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text inside double quotation marks"],
"Description 01:Introduction" : [
"",
"	Text inside double quotation marks can be used for",
"	* <b>String values</b>",
"	* __Variable names__",
"	* __Table names__",
"" ],
"Description 02:Rules" : [
"	* Use double quotation marks <b>\" ... \"</b> to enclose the text.",
"	* Inside the quotation marks, all characters are fine, except the double quotation mark which delimits the text.",
"	* All white spaces inside the text inside quoatation marks are preserved.",
"	** Example 1: <b>\"Hello&nbsp;&nbsp;&nbsp;World\"</b> is not equal to <b>\"Hello World\"</b>",
"	** Example 2: <b>\"Hello World\"</b> is not equal to <b>\"  Hello World  \"</b>",
"	* The text must fit on the same line.",
"	** Exception: Use  __Multi-line text__ using 3 consecutive quotation marks \"\"\" as delimiatersto formulate a text requiring multiple lines.",
"	* Reserved keywords inside quotation marks are treated as text, e.g. 'true'.",
"	* Various functions and comparisons support __wildcard symbols__",
"	** Example 1: <b>ABC = 'A*'</b> returns true.",
"	* __Character entities__ are not supported in texts inside double quotation marks.  Any such specification is part of the quoted text.",
"	* If the text is assigned to B4P variables, then the variable assumes the subtype __quoted string__.",
""
 ]
	,
"Examples 02:Examples" : [
"	echo( \"Hello World\" );",
"	echo( \"  Hello   World  \" );",
"	echo( \"One + One\" );",
"	echo( \"'single quotation Marks'\" );",
"	echo( \"Price tags: &euro; 10.00, &#x20ac; 10.00, &#8364; 10.00\"); // No translation of entities here",
"	echo( \"3 * 2 = 6\" );",
"	echo( \"A cheap way to continue on&#10;the next line\" ); // No translation of entitites here",
"	echo( new line, \"Line 1\", new line, \"Line 2\" ); "
 ]
	,
    "Output 02:": "automatic",
    "See also": [ "softquoted strings", "Plain text", "Text inside single quotation marks", "Multi-line text" ]
},



"Reserved Keywords" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "reserved keywords" ],
    "Keywords":			[ "reserved keyword", "escape", "tab" ],
"Description 01:Introduction to reserved keywords" : [
"	B4P has only six reserved symbols which must be specified as __plain text__ using lower-case letters and without quotation marks.",
"",
"	=== 150, 150, 700, bold_column_1",
"	Reserved Keyword 	| Meaning 		| Description",
"	tab			| Tabulator 		| Converts to a tab character (ANSI and UNICODE 9)",
"	new line		| Line Break 		| Represented as ANSI and UNICODE 10.  Under Windows, <i>Carriage Return</u> symbols are added before line feed symbols when saving contents in files.",
"	escape			| Escape chracter 	| Converts to an escape character (ANSI and UNICODE 27)",
"	true			| Boolean true  	| 'true' as boolean type and not as text",
"	false			| Boolean false		| 'false' as boolean type and not as text",
"	else			| 'else' in code syntax | To be used in association with __if__, __switch__ and other __control flow functions__.",
"	===",
"",
"	Different from other languages, flow control features like __if(__) and __while(__) are function names and not reserved keywords.",
"",
"	<br><br>",
"	Alternatively to using <b>tab</b>, you consider __special console output characters__ such as <b>&amp;tab20;</b> to advance to a specified column.",
"	",
""
 ]
	,
"Examples 01:" : [
"	echo( type(true) );",
"	echo( 1, tab, 2, tab, 3 );",
"	echo( 1st line, new line, 2nd line );",
"	echo( true = false ); // Outputs 'false' (Boolean comparison)"
 ]
	,
    "Output 01:":		"automatic",
    "See also": [ "quoted strings", "Plain text", "Text inside single quotation marks", "Multi-line text" ]

},



"Multi-Line Text" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Multi-line text" ],
    "Keywords":			[ "Multi-line strings" ],
"Description 01:Introduction" : [
"",
"	Similar to Python and other modern programming languages, B4P supports multline strings, for both",
"",
"	* __Text inside single quotation marks__, using three single quotation marks <b>'''</b> (apostrophes) as delimiters, and",
"	* __Text inside double quotation marks__, using three double quotation marks <b>\"\"\"</b> as delimiters.",
"",
"	Following rules apply for multi-line text items:",
"",
"	* The text contents are treated similarly as defined for __Text inside single quotation marks__ and __Text inside double quotation marks__.",
"	* Inside a multi-line text, 1 or 2 consecutive' or \" symbols are treated as contents.",
"	* Inside a multi-line text delimited with \"\"\": The ''' is considered part of the text.",
"	* Inside a multi-line text delimited with ''': The \"\"\" is considered part of the text.",
"	* Similar to __text inside single quotation marks__, __character entities__ are supported.",
"",
"	Multi-line string contents can start immediately after the three quotation symbols or on the next row.  Same applies for the",
"	end: The multi-line string can be ended on the same line with three quotation marks, or immediately on the following row.",
"	If you want to include new line symbols at the beginning and/or at the end of the multi-line string, then include additional",
"	blank rows.",
"",
"	<br><br>",
"	<u>Attention:</u> If the multi-line string is not properly delimited with the same triple quotation marks, then an error message",
"	will occur <u>at the end</u> of the B4P program file because B4P assumed all contents further down as part of the long string.",
"",
""
 ]
	,
"Examples 01:" : [
"special offer[] = '''",
"",
"    4 pounds of bananas cost &euro; 2.90.",
"    \"\"\" This is today's special bargain \"\"\"",
"",
"''';",
"",
"echo(\"Attention!\", special offer[], \"As long supplies last?\" );"
 ]
	,
    "Output 01:":		"automatic",
"Examples 02:" : [
"code example[] = \"\"\"",
"    /* Comments are part of the multi-line string */",
"",
"    a[] = 4;",
"    b[] = sqrt(a[]) + 1; // Square root calculation",
"    echo( \"    sqrt(4)+1 equals \", b[] );",
"\"\"\";",
"",
"echo(  code example[] );",
"echo( new line, \"Code output:\" );",
"exec( :code example[] );"
 ]
	,
    "Output 02:":		"automatic",
"Examples 03:" : [
"example[A] = \"\"\"This 1st",
"text fits on",
"3 rows\"\"\";",
"",
"example[B] = \"\"\"",
"This 2st",
"text fits on",
"3 rows\"\"\";",
"",
"example[C] = \"\"\"",
"",
"This 3rd",
"text fits on",
"5 rows (blank rows above and below)",
"",
"\"\"\";",
"",
"example[D] = \"\"\"Use Following quotation marks: \"Hello\" or 'Hello' or '''Hello'''.\"\"\";",
"",
"",
"echo(\"--------\");",
"for all variables( example[], ex[] )",
"{",
"    echo(ex[]);",
"    echo(\"--------\");",
"}"
 ]
	,
    "Output 03:":		"automatic",
    "See also":			[ "Text inside single quotation marks", "Text inside double quotation marks" ]

},


"Numbers" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Number", "Numbers" ],
"Description 01:Introduction" : [
"",
"	In the B4P language, numbers are numeric values which optionally contain decimal points.  The same applies to reading numbers from __tables__.",
"	Following rules apply:",
"",
"	* It must contain at least 1 digit (0..9)",
"	* Negative numebers start with a minus sign (see: __unary operators__)",
"	* The number must not contain spaces and/or thousand separator symbols.  Use __clean num(__) to remove such symbols automatically.",
"	* At most one decimal point may be used.  More points inside make the value look like a __plain text__.",
"	** A lone decimal describes a __plain text__ containing one character.",
"	** At least one digit must be added before or after the decimal point, e.g. <b>5.</b> or <b>.5</b> are OK, specifying 5 and 0.5.",
"	* Leading zeros in front and trailing zeros after the digits after the comma are OK",
"	* __Scientific notation__: Not supported, but see next section.",
"	**  However, use __num(__) or __clean num(__) to specify scientific notations.",
"	** Exceptions: Table entries may contain numbers in scientific notation, but use __table configure(__) to activate reading scientific notation.",
"	** Scientific notation is also supported in numbers in JSON files.  See __variable load(__) to load JSON files.",
""
 ]
	,
"Examples 01:" : [
"	echo( 1 );                   // Simple numeral",
"	echo( 1 1 + 2 2 );           // Attention: These two numbers are strings : '1 12 2' is returned, not '33' or '3 3'",
"	echo( 123.45 );",
"	echo( 0123.450 );            // Same value as above",
"	echo( 0123.450 *1);          // Operation applied (multplied by 1), therefore text representation has been dropped"
 ]
	,
    "Output 01:":		"automatic",
    "See also": [ "Numerals", "Scientific Notation" ]

},



"Scientific Notation" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Scientific Notation" ],
"Description 01:Introduction" : [
"",
"	Scientific notation is not foreseen in the B4P language itself, i.e. by specifying something like <b>1.5E-01</b> because various active",
"	data sets, for example section and code numbers would be misinterpreted.  However, B4P provides following workarounds by using the __num(__)",
"	or __clean num(__) function.  ",
"",
"	<br><br>",
"	How to formulate scientific notation:",
"	* The letter <b>E</b> or <b>e</b> must follow the mantissa value (a value with or without the using decimal point) without spaces",
"	* Adding a <b>+</b> behind is optional.  For negativ exponents, add a <b>-</b>.",
"	* Then conclude the value with ",
""
 ]
	,
"Examples 01:" : [
"a[] = 1000;",
"a[text 1] = 1E03;",
"a[text 2] = '1e+03';  // Put into quotation marks to avoid adding 3 to '1e'",
"a[num  1] = num(1E03);",
"a[num  2] = num('1E+03');",
"a[milli ] = num('1e-3');",
"a[wrong ] = num('1E 03'); // Space inside.  Only 1st digit will be recgnized ",
"see(a[])"
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Scientific Notation in Tables" : [
"",
"	By default, scientific notation in tables will be recognized as text.  However, the function __table configure(__) allows you to activate",
"	recognition of scientific notation.",
"",
""
 ]
	,
"Examples 02:" : [
"table create( table );",
"with table( table, 0, 0 ) // Partial table specification, [.] is row 0 / column 0",
"{",
"    [.] = '1.24E-05';",
"    echo( [.],   '&tab12;Type: ', subtype([.]),   '&tab40;Note: Read in as text into a string' );",
"",
"    table configure( table, scientific notation, yes );",
"    echo( [.],   '&tab12;Type: ', subtype([.]),   '&tab40;Note: Text representation still preserved' );",
"    echo( [.]+0, '&tab12;Type: ', subtype([.]+0), '&tab40;Note: Text representation destroyed by calculation' );",
"",
"    // Note: Explanatory text uses tabulation using dedicated character entities.",
"}"
 ]
	,
    "Output 02:":		"automatic",

"Description 03:Scientific Notation JSON files" : [
"",
"	Unfortunately, JSON numbers do not support scientific notation by standard.",
"	Consider handling them as text and use __num(__) to convert them to numbers.",
""
 ]
    
},




"Symbols" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Symbols" ],
"Description 01:Overview of B4P Symbos" : [
"",
"	B4P makes use of the following symbols:",
"",
"	=== 150, 250, 600, bold_column_1",
"	Symbols		| Description			| Explanation",
"{ }		| Braces			| Specify program __blocks__ <br> Put values into __parameter sets__ <br> __Indexing strings__ and __indexing parameter sets__ <br> 							  __slicing strings__ and __slicing parameter sets__",
"	( )		| Parentheses			| Used for calculations where contents inside parentheses are calculated first, and describe __function parameters__",
"[  ]		| Brackets			| Specify __variables__: Opening bracket follows after the variable name, where further hierarchical member names and array indexes can be specified <br> 							  Specify __table references__: Tables do always begin with brackets <br>",
"	,		| Comma				| Separates elements in __parameter sets__, values in __function parameters__, etc.",
"	;		| Semicolon			| Concludes and separates __statements__",
"	+ - * / 	| __Arithmetic operators__	| Used as __binary operators__, and some as unary and assignment operators",
"	&amp; &#124; !	| __Logical operators__		| Used as __binary operators__, and some as unary and assignment operators",
"	&lt; &lt;= == &gt;= &gt; != | Comparison operators | Compares one value at the left-hand side of this symbol with <u>exactly</u> one value at the right-hand side",
"	= &lt; &gt:	| __Comparison operators__	| Compares one value at the left-hand side with a __selection of multiple values__ or __value ranges__ at the right-hand side",
"	=		| __Assignment symbol__		| Inside __statements__, equal signs are interpreted as assignment symbols.  <br>Example: <b>a[] = b[] = c[]</b><br>First equal sign is the assignment symbol.  The 2nd equal sign compares two variables for being equal.",
"	..		| Range				| Used for __slicing strings__, __slicing parameter sets__, and specifying __value ranges__",
"	~		| Other operators		| Used as unary operators",
"	++ -- **	| __Ad-hoc operators__		| Used to increment, decrement and scale variables and table entries",
":		| Colon				| Separates __else__ from subsequent statement <br> Repeat operator for parameter set elements<br> 							  Instructs to access multiple table entries",
"		^		| Deep prefix/postfix symbol	| Use as __deep operators__, __variable references__, __nested partial table specifications__, and in __transactions__ to skip the __base variables__.",
"	/* */ //	| Comments			| These symbols designate comments inbetween or following till end of line",
"	&lt;== &lt;&lt;= &lt;=&gt; | __Transaction operators__ | Used for __transactions__",
"	===",
"",
"	Various symbols can be combined, for example for the __assignment operator__ <b>+=</b> to add the calculated result of an expression to the destination.",
"",
"	<br><br>",
"	<u>Note:</u> The single point (<b>.</b>) is interpreted as part of a __number__ (decimal point) if the whole item constitutes a legitimate number, or part of a __text__.",
"	Inside __table references__, single points, as long they are not in double quotation marks, may refer to current columns if a __table context__ for __partial table specifications__ with column informaiton is provided."
 ]
	

},


"Comments" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comments" ],
    "Keywords":			[ "markdown", "github markdown" ],
"Description 01:Introduction to Comments" : [
"	Documenting comments is very similar as in C/C++. The language supports following comment symbols:",
"",
"",
"	=== 150, 150, 700, bold_column_1 bold_column_2",
"	Comment Types	| Examples | Description",
"	Line comment	| // | Comment starting with double slashes and effective until end of line. The symbols for comment blocks /* and */ are ignored inside line comments.",
"	Comment block	| /* ... */ | Commented code section. <br/>/* begins commented section<br/>*/ ends commented sections<br/>Commented section is not ended prematurely with line comments.<br/>Nested comments are not supported, e.g. /* … /* … */ … */",
"	===",
"",
"	You may wonder why obvious names such as 'if', 'while' and 'for' are not considered as similar reserved keywords.  In B4P, the control flow statements",
"	are actually procedure names which then influence executing further statements or blocks.  Therefore, you can actually use 'if' as the given function."
 ]
	,
"Examples 01:" : [
"	// This is a commment",
"	// Bla Bla /* Bla Bla",
"	echo( This statement is outside a comment block );",
"	// Bla Bla */ Bla Bla"
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Github Markdown Files" : [
"	B4P <i>understands</i> markdown files (with filenames ending '.md') where it only executes code lines which inside the code blocks.  All other contents",
"	outside the code blocks are treated like comments.  Code blocks must be delimited with three accent-grave symbols ```. Multiple such code blocks in one",
"	markdown file are supported.",
"" ],
"Examples 02:" : [
"	# This is a markdown header",
"	And some text to describe it",
"	```program code",
"	echo( This statement is inside a code block );",
"	```",
"	# This is the next header",
""
 ]
	,
    "Output 02:":		"This statement is inside a block"


},



"Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Characters" ],
"Description 01:Introduction" : [
"",
"	This section provides a general introduction of the character sets as well as character input and output",
"	supported by B4P.  The topics addressed are:",
"",
"	* __Full UNICODE support__",
"	* __New line__",
"	* __Case sensitivity__",
"	* __Character entities__",
"	* __Console Input/Output__",
"	* __Special Keyboard Input Characters__",
"	* __Special Console Output Characters__",
""
 ]
	
},


"Full UNICODE Support" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Full UNICODE Support" ],
    "Keywords":			[ "UNICODE" ],
"Description 01:Overview" : [
"",
"	B4P supports the full UNICODE character set which includes",
"	* The Basic Multilingual Plane (codes 0 ... 65,535 / U+0000 ... U+FFFF), as well as",
"	* All 16 additional extended planes ( U+1FFFF ... U+10FFFF ) which includes many emojies.",
"",
"	B4P treats every UNICODE character as one single character.  For example, 'Caf&eacute;' counts 4 characters.  The full character set is available to define",
"	variable names, table names, table header names, user function names, path and file names, etc.",
"	Internally, in order to conserve memory needs for large data, all text data is stored and handled in UTF-8 format, but you don't need to worry about ths.",
"",
"	<br><br>",
"	Note that various Latin, Greek and Cyrillic characters contain which look identical, e.g. the capital letter 'A' in the Latin, Greek and Cyrillic alphabets.",
"	Even if these characters are optically identical, the actual characters are different when compared.",
"	As another example, the Greek <i>mu</i> &mu; and the <i>micro</i> &micro; symbols are different, too.",
""
 ]
	,

"Examples 01:" : [
"	inhabitants [ Zürich ] = 402000;",
"	Пётр Чайкoвский [ famous concert ] = Nutcracker; // Piotr Tschaikowski",
"	echo( inhabitants [ Zürich ] );",
"	echo( Пётр Чайкoвский [ famous concert ] );"
 ]
	,
    "Output 01:":		"automatic",
"Description 02:Loading and Saving Files" : [
"",
"	B4P will automatically detect the character format of input files, e.g. plain ANSI, WIN-1252, Unicode UTF-8, UTF16 little and big endian.",
"",
""
 ]
	
},


"New Line" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "New Line" ],
"Description 01:Overview" : [
"",
"	Inside B4P, every <b>new line</b> is counted as one character, regardless on which operating system B4P is running on.",
"	The character code is ANSI / UNICODE 10 (line feed).",
"",
"	<br><br>",
"",
"	In B4P, the <b>new line</b> can be specified with:",
"	* The __plain text__ value <b>new line</b>.  Specify it without quotation marks.",
"	* Using the __chr(__) function: <b>chr(10)</b>",
"* Using the __character entity__ <b>&#10;</b> or <b>&nl;</b>.  __Text inside single quotation marks__ is required for this.  The <b>nl</b> entity name  	  is not an official HTML entity, but supported by B4P.",
"	* Line breaks inside __multi-line text__ values.",
""
 ]
	,
"Examples 01:" : [
"	echo( Hello, new line, World, new line );	// Hello World on 2 rows, plus additional new line",
"	echo( Hello, chr(10), World, chr(10) );		// New line represented as a character codes",
"	echo( 'Hello&#10;World&#nl;' );			// New line represented as a character entities",
"	echo( 'new line' );				// This is just text and not a new line symbol",
"	echo( code( new line ) );			// Code 10, line feed",
"	echo( 'Character count: ', new line{} );	// new line contains one character"
 ]
	,
    "Output 01:":		"automatic",
"Description 02:Loading and Saving Files" : [
"",
"	B4P is able to load text files containing both \"carriage return + line feed\" (CR+LF) characters common in Windows systems",
"	and \"line feed only\" (LF) common in UNIX/LINUX/MACOS systems.  When saving contents to files, the <b>new line</b> symbol will",
"	be automatically saved as line-feed (LF) in UNIX / Linux / MacOS",
"	systems and carriage-return + line-feed (CR+LF) character pairs in Windows systems. ",
"	The legacy Macintosh \"carriage return only\" (CR) used as line separator is not supported.",
""
 ]
	
},


"Case Sensitivity" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "case sensitivity" ],
"Description 01:Introduction" : [
"",
"	B4P is a case sensitive language.  This applies to all text contents such as table, variable, function names and __reserved keywords__.",
"	In UNIX / Linux / MacOS, directory and file names are fully case sensitive.  However in Windows, file names are only case-sensitivity when creating",
"	directories or file names, but finding them is not case sensitive.",
""
 ]
	,

"Description 02:Case Conversion" : [
"",
"	B4P provides the __unary operators__ <b>+</b>, <b>-</b> and <b>!</b> to change text to upper case, lower case or just capitalize the first character.",
"	The case conversion does not respect speciic __locales__, for example special handling of the Turkish letters turkish letters &#x0130; / i / I / &#x0131;.",
"	The lower case sharp-s &#x00DF; in the German Language will not be converted to upper case or substituted by two capital S.  The B4P case conversion is presently",
"	supporting following UNICODE characters:",
"",
"	<br><br>",
"",
"	=== 300, 300, 300",
"	UNICODE Block 		| Code Range 		| Example",
"	Basic Latin 		| 00 - 7F (Hex) 	| A / a",
"	Latin 1 Supplement 	| 80 - FF (Hex) 	| &Auml; / &auml;",
"	Latin Extended A 	| 100 - 1FF (Hex) 	| &#x0102; / &#x0103;",
"	===",
"	"
 ]
	
},


"Character Entities" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Character Entities" ],
    "Keywords":			[ "Character entity", "Entity" ],
"Description 01:Introduction" : [
"",
"	Character entities are descriptive representations of characters which are not available on the keyboard.",
"	They begin with an ampersand (&amp;), followed by a descriptive string or character code and conclude with a semicolon (;).",
"	Character entities are commonly used in HTML for web pages in order to avoid ambiguities with reserved symbols (e.g. &amp;lt; for HTML tags)",
"	and to display special characters.  Character codes can be specified in both decimal and hexadecimal formats.",
"",
"	<br><br>",
"",
"	Similar to HTML, B4P supports a large number of character entities.",
"	See the description of __dump entities(__) for a complete list of currently supported character entities.",
"",
"	<br><br>",
"",
"	In addition, B4P provides <b>proprietary character entities</b> to define __special console output characters__ (e.g. text and",
"	background color and text attributes such as underscoring), as well as __special keyboard input characters__ like cursor navigation keys in",
"	form of single characters.",
"",
"	<br><br>",
"",
"	In __text inside single quotation marks__, character entities are converted into their actual characters.  The conversion takes place before program",
"	execution begins, quasi at compile time.  Character entities are not converted in __text inside double quotation marks__.",
"",
""
 ]
	,

"Examples 01:" : [
"  echo( 'Value is &ge; 100 &euro;' );  // Text inside single quotation marks",
"  echo( \"Value is &ge; 100 &euro;\" );  // Text inside double quotation marks - will show plain text",
"  echo( decode entities( \"Value is &ge; 100 &euro;\" )); // Entities decoded at run-time",
"",
"  echo( '&#x20ac;'); // EURO Sign - UNICODE hexadecimal code",
"  echo( '&#8364;' ); // EURO Sign - UNICODE decimal code"
 ]
	,
    "Output 01:":		"automatic",
    "See also": [ "encode entities", "decode entities", "dump entities", "special keyboard input characters", "special console output characters" ]

},




"Console Input / Output" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console Input/Output" ],
    "Keywords":			[ "Console", "Console Input/Output" ],

"Description 01:Console Output" : [
"",
"	Good news: The consoles under Windows, LINUX and MacOS support full UNICODE.<br>",
"	Bad news: Most console and terminal programs do not display all available UNICODE characters properly",
"",
"	<br><br>",
"",
"	All consoles support the ANSI (formerly: ASCII) chracter set.  Most consoles support additional character sets such as ",
"",
"	* Basic Latin",
"	* Latin-1 Supplement (To ensure Düsseldorf is not written as Dusseldorf - translated as \"village of fools\")",
"	* Latin Extended A",
"	* Greek (for language enthsiasts and fraternity/sorority members in North America)",
"	* Cyrillic (Russian)",
"	* A set of additional symbols (also found in win1252 character set) including the Euro currency sign",
"",
"	Some modern console programs support an increasing number of UNICODE symbols, including various Asian fonts and emojies.",
"	Unsupported symbols will automatically be shown using question marks or placeholder boxes.",
""
 ]
	,

"Description 02:Console Input" : [
"",
"	Consoles under Windows have only limited capabilities to input non-ANSI characters.  Under Windows, foreign characters are accepted, but the EURO-symbol is not.<br>",
"	<u>Hint:</u> Consider using __character entities__ to specify special characters which you do cannot find on your keyboard.",
""
 ]
	
},




"Special Keyboard Input Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Special keys" ],
    "Keywords":			[ "Special Keyboard Input Characters"],
"Description 01:Introduction" : [
"",
"	B4P has the unique capability to translate characters received with the functions __getch(__) or __input quick(__) into dedicated UNICODE",
"	characters located in the <i>Private Use Area B</i>.  This area is freely available for proprietary use and will not interfere with assignments",
"	of new characters in the future.  Every key pressed, e.g. a function or arrow key, will return a single character.",
"",
"	<br><br>",
"",
"	These characters ensure cross-platform compatibility. <br>",
"	See __Special keyboard input characters__.",
"",
"	<br><br>",
"	<u>Note:</u> You may have considered Escape sequences (which date back to Digital Equipment VT100 terminals in the late 1970's , e.g. ",
"	<b>ESC [A</b> for a cursor key) but these symbols do typically contain multiple characters (up to seven of them) and B4P will not guarantee cross platform portability. ",
""
 ]
	,

"Description 02:Function and Navigation Keys" : [
"",
"	Following table applies with function and arrow keys pressed alone.",
"",
"	=== 300, 150, 300, bold_column_1",
"	Key			| UNICODE (hex)	| Character Entity Name",
"	Insert 			| 108000	| &amp;insert;",
"	End			| 108001	| &amp;end;",
"	Arrow down		| 108002	| &amp;arrow-down;",
"	Pg dn			| 108003	| &amp;pgdn;",
"	Arrow left		| 108004	| &amp;arrow-left;",
"	Center key (Keypad 5)	| 108005	| &amp;center;",
"	Arrow right		| 108006	| &amp;arrow-right;",
"	Home			| 108007	| &amp;home;",
"	Arrow up		| 108008	| &amp;arrow-up;",
"	Pg up			| 108009	| &amp;pgup;",
"	Delete			| 10800a	| &amp;delete;",
"	F1			| 108011	| &amp;f1;",
"	F2			| 108012	| &amp;f2;",
"	F3			| 108013	| &amp;f3;",
"	F4			| 108014	| &amp;f4;",
"	F5			| 108015	| &amp;f5;",
"	F6			| 108016	| &amp;f6;",
"	F7			| 108017	| &amp;f7;",
"	F8			| 108018	| &amp;f8;",
"	F9			| 108019	| &amp;f9;",
"	F10			| 10801a	| &amp;f10;",
"	F11			| 10801b	| &amp;f11;",
"	F12			| 10801c	| &amp;f12;",
"	===	",
"" ],
"Description 03:Control Key held down" : [
"",
"",
"	Following table applies with function and arrow keys pressed while the control key is held down:",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key				| UNICODE (hex)	| Character Entity Name",
"	ctrl-Insert 			| 108100	| &amp;ctrl-insert;",
"	ctrl-End			| 108101	| &amp;ctrl-end;",
"	ctrl-Arrow down			| 108102	| &amp;ctrl-arrow-down;",
"	ctrl-Pg dn			| 108103	| &amp;ctrl-pgdn;",
"	ctrl-Arrow left			| 108104	| &amp;ctrl-arrow-left;",
"	ctrl-Center key (Keypad 5)	| 108105	| &amp;ctrl-center;",
"	ctrl-Arrow right		| 108106	| &amp;ctrl-arrow-right;",
"	ctrl-Home			| 108107	| &amp;ctrl-home;",
"	ctrl-Arrow up			| 108108	| &amp;ctrl-arrow-up;",
"	ctrl-Pg up			| 108109	| &amp;ctrl-pgup;",
"	ctrl-Delete			| 10810a	| &amp;ctrl-delete;",
"	ctrl-F1				| 108111	| &amp;ctrl-f1;",
"	ctrl-F2				| 108112	| &amp;ctrl-f2;",
"	ctrl-F3				| 108113	| &amp;ctrl-f3;",
"	ctrl-F4				| 108114	| &amp;ctrl-f4;",
"	ctrl-F5				| 108115	| &amp;ctrl-f5;",
"	ctrl-F6				| 108116	| &amp;ctrl-f6;",
"	ctrl-F7				| 108117	| &amp;ctrl-f7;",
"	ctrl-F8				| 108118	| &amp;ctrl-f8;",
"	ctrl-F9				| 108119	| &amp;ctrl-f9;",
"	ctrl-F10			| 10811a	| &amp;ctrl-f10;",
"	ctrl-F11			| 10811b	| &amp;ctrl-f11;",
"	ctrl-F12			| 10811c	| &amp;ctrl-f12;",
"	===	",
"",
"" ],
"Description 04:Shift Key held down" : [
"",
"	Following table applies with function and arrow keys pressed while the shift key is held down:",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key					| UNICODE (hex)	| Character Entity Name",
"	shift-Insert 				| 108200	| &amp;shift-insert;",
"	shift-End				| 108201	| &amp;shift-end;",
"	shift-Arrow down			| 108202	| &amp;shift-arrow-down;",
"	shift-Pg dn				| 108203	| &amp;shift-pgdn;",
"	shift-Arrow left			| 108204	| &amp;shift-arrow-left;",
"	shift-Center key (Keypad 5)		| 108205	| &amp;shift-center;",
"	shift-Arrow right			| 108206	| &amp;shift-arrow-right;",
"	shift-Home				| 108207	| &amp;shift-home;",
"	shift-Arrow up				| 108208	| &amp;shift-arrow-up;",
"	shift-Pg up				| 108209	| &amp;shift-pgup;",
"	shift-Delete				| 10820a	| &amp;shift-delete;",
"	shift-F1				| 108211	| &amp;shift-f1;",
"	shift-F2				| 108212	| &amp;shift-f2;",
"	shift-F3				| 108213	| &amp;shift-f3;",
"	shift-F4				| 108214	| &amp;shift-f4;",
"	shift-F5				| 108215	| &amp;shift-f5;",
"	shift-F6				| 108216	| &amp;shift-f6;",
"	shift-F7				| 108217	| &amp;shift-f7;",
"	shift-F8				| 108218	| &amp;shift-f8;",
"	shift-F9				| 108219	| &amp;shift-f9;",
"	shift-F10				| 10821a	| &amp;shift-f10;",
"	shift-F11				| 10821b	| &amp;shift-f11;",
"	shift-F12				| 10821c	| &amp;shift-f12;",
"	shift-TAB				| 108220	| &amp;shift-tab;",
"	===	",
"",
"",
"" ],
"Description 05:Ctrl and Shift Key held down" : [
"",
"	Following table applies with function and arrow keys pressed while the shift key is held down:",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key					| UNICODE (hex)	| Character Entity Name",
"	ctrl-shift-Insert 			| 108300	| &amp;ctrl-shift-insert;",
"	ctrl-shift-End				| 108301	| &amp;ctrl-shift-end;",
"	ctrl-shift-Arrow down			| 108302	| &amp;ctrl-shift-arrow-down;",
"	ctrl-shift-Pg dn			| 108303	| &amp;ctrl-shift-pgdn;",
"	ctrl-shift-Arrow left			| 108304	| &amp;ctrl-shift-arrow-left;",
"	ctrl-shift-Center key (Keypad 5)	| 108305	| &amp;ctrl-shift-center;",
"	ctrl-shift-Arrow right			| 108306	| &amp;ctrl-shift-arrow-right;",
"	ctrl-shift-Home				| 108307	| &amp;ctrl-shift-home;",
"	ctrl-shift-Arrow up			| 108308	| &amp;ctrl-shift-arrow-up;",
"	ctrl-shift-Pg up			| 108309	| &amp;ctrl-shift-pgup;",
"	ctrl-shift-Delete			| 10830a	| &amp;ctrl-shift-delete;",
"	ctrl-shift-F1				| 108311	| &amp;ctrl-shift-f1;",
"	ctrl-shift-F2				| 108312	| &amp;ctrl-shift-f2;",
"	ctrl-shift-F3				| 108313	| &amp;ctrl-shift-f3;",
"	ctrl-shift-F4				| 108314	| &amp;ctrl-shift-f4;",
"	ctrl-shift-F5				| 108315	| &amp;ctrl-shift-f5;",
"	ctrl-shift-F6				| 108316	| &amp;ctrl-shift-f6;",
"	ctrl-shift-F7				| 108317	| &amp;ctrl-shift-f7;",
"	ctrl-shift-F8				| 108318	| &amp;ctrl-shift-f8;",
"	ctrl-shift-F9				| 108319	| &amp;ctrl-shift-f9;",
"	ctrl-shift-F10				| 10831a	| &amp;ctrl-shift-f10;",
"	ctrl-shift-F11				| 10831b	| &amp;ctrl-shift-f11;",
"	ctrl-shift-F12				| 10831c	| &amp;ctrl-shift-f12;",
"	===	",
"",
"",
"" ],
"Description 06:ALT Key held down" : [
"",
"	Following table applies with function and arrow keys pressed while the ALT key is held down.",
"	The following character set assumes that the left-hand <b>alt</b> key is used.",
"	Note that some machines and operating system interprete the right-hand <b>alt</b> key",
"	differenty, e.g. for special characters such as the EURO symbol (&euro;).",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key				| UNICODE (hex)	| Character Entity Name",
"	alt-Insert 			| 108400	| &amp;alt-insert;",
"	alt-End				| 108401	| &amp;alt-end;",
"	alt-Arrow down			| 108402	| &amp;alt-arrow-down;",
"	alt-Pg dn			| 108403	| &amp;alt-pgdn;",
"	alt-Arrow left			| 108404	| &amp;alt-arrow-left;",
"	alt-Center key (Keypad 5)	| 108405	| &amp;alt-center;",
"	alt-Arrow right			| 108406	| &amp;alt-arrow-right;",
"	alt-Home			| 108407	| &amp;alt-home;",
"	alt-Arrow up			| 108408	| &amp;alt-arrow-up;",
"	alt-Pg up			| 108409	| &amp;alt-pgup;",
"	alt-Delete			| 10840a	| &amp;alt-delete;",
"	alt-F1				| 108411	| &amp;alt-f1;",
"	alt-F2				| 108412	| &amp;alt-f2;",
"	alt-F3				| 108413	| &amp;alt-f3;",
"	alt-F4				| 108414	| &amp;alt-f4;",
"	alt-F5				| 108415	| &amp;alt-f5;",
"	alt-F6				| 108416	| &amp;alt-f6;",
"	alt-F7				| 108417	| &amp;alt-f7;",
"	alt-F8				| 108418	| &amp;alt-f8;",
"	alt-F9				| 108419	| &amp;alt-f9;",
"	alt-F10				| 10841a	| &amp;alt-f10;",
"	alt-F11				| 10841b	| &amp;alt-f11;",
"	alt-F12				| 10841c	| &amp;alt-f12;",
"	===	",
"",
"",
"" ],
"Description 07:Ctrl + ALT Keys held down" : [
"",
"	Following table applies with function and arrow keys pressed while both Ctrl and ALT keys are held down.",
"	Note that some machines and operating system interprete the right-hand <b>alt</b> key",
"	differenty, e.g. ctrl-alt-Delete to access the task manager or to resetart the machine.",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key					| UNICODE (hex)	| Character Entity Name",
"	ctrl-alt-Insert 			| 108500	| &amp;ctrl-alt-insert;",
"	ctrl-alt-End				| 108501	| &amp;ctrl-alt-end;",
"	ctrl-alt-Arrow down			| 108502	| &amp;ctrl-alt-arrow-down;",
"	ctrl-alt-Pg dn				| 108503	| &amp;ctrl-alt-pgdn;",
"	ctrl-alt-Arrow left			| 108504	| &amp;ctrl-alt-arrow-left;",
"	ctrl-alt-Center key (Keypad 5)		| 108505	| &amp;ctrl-alt-center;",
"	ctrl-alt-Arrow right			| 108506	| &amp;ctrl-alt-arrow-right;",
"	ctrl-alt-Home				| 108507	| &amp;ctrl-alt-home;",
"	ctrl-alt-Arrow up			| 108508	| &amp;ctrl-alt-arrow-up;",
"	ctrl-alt-Pg up				| 108509	| &amp;ctrl-alt-pgup;",
"	ctrl-alt-Delete				| 10850a	| &amp;ctrl-alt-delete;",
"	ctrl-alt-F1				| 108511	| &amp;ctrl-alt-f1;",
"	ctrl-alt-F2				| 108512	| &amp;ctrl-alt-f2;",
"	ctrl-alt-F3				| 108513	| &amp;ctrl-alt-f3;",
"	ctrl-alt-F4				| 108514	| &amp;ctrl-alt-f4;",
"	ctrl-alt-F5				| 108515	| &amp;ctrl-alt-f5;",
"	ctrl-alt-F6				| 108516	| &amp;ctrl-alt-f6;",
"	ctrl-alt-F7				| 108517	| &amp;ctrl-alt-f7;",
"	ctrl-alt-F8				| 108518	| &amp;ctrl-alt-f8;",
"	ctrl-alt-F9				| 108519	| &amp;ctrl-alt-f9;",
"	ctrl-alt-F10				| 10851a	| &amp;ctrl-alt-f10;",
"	ctrl-alt-F11				| 10851b	| &amp;ctrl-alt-f11;",
"	ctrl-alt-F12				| 10851c	| &amp;ctrl-alt-f12;",
"	===	",
"",
"",
"" ],
"Description 08:ALT + Shift Keys held down" : [
"",
"	Following table applies with function and arrow keys pressed while both ALT and Shift keys are held down.",
"	Note that some machines and operating system interprete the right-hand <b>alt</b> key",
"	differenty.",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key					| UNICODE (hex)	| Character Entity Name",
"	alt-shift-Insert 			| 108600	| &amp;alt-shift-insert;",
"	alt-shift-End				| 108601	| &amp;alt-shift-end;",
"	alt-shift-Arrow down			| 108602	| &amp;alt-shift-arrow-down;",
"	alt-shift-Pg dn				| 108603	| &amp;alt-shift-pgdn;",
"	alt-shift-Arrow left			| 108604	| &amp;alt-shift-arrow-left;",
"	alt-shift-Center key (Keypad 5)		| 108605	| &amp;alt-shift-center;",
"	alt-shift-Arrow right			| 108606	| &amp;alt-shift-arrow-right;",
"	alt-shift-Home				| 108607	| &amp;alt-shift-home;",
"	alt-shift-Arrow up			| 108608	| &amp;alt-shift-arrow-up;",
"	alt-shift-Pg up				| 108609	| &amp;alt-shift-pgup;",
"	alt-shift-Delete			| 10860a	| &amp;alt-shift-delete;",
"	alt-shift-F1				| 108611	| &amp;alt-shift-f1;",
"	alt-shift-F2				| 108612	| &amp;alt-shift-f2;",
"	alt-shift-F3				| 108613	| &amp;alt-shift-f3;",
"	alt-shift-F4				| 108614	| &amp;alt-shift-f4;",
"	alt-shift-F5				| 108615	| &amp;alt-shift-f5;",
"	alt-shift-F6				| 108616	| &amp;alt-shift-f6;",
"	alt-shift-F7				| 108617	| &amp;alt-shift-f7;",
"	alt-shift-F8				| 108618	| &amp;alt-shift-f8;",
"	alt-shift-F9				| 108619	| &amp;alt-shift-f9;",
"	alt-shift-F10				| 10861a	| &amp;alt-shift-f10;",
"	alt-shift-F11				| 10861b	| &amp;alt-shift-f11;",
"	alt-shift-F12				| 10861c	| &amp;alt-shift-f12;",
"	===	",
"",
"",
"" ],
"Description 09:Ctrl + ALT + Shift Keys held down" : [
"",
"	Following table applies with function and arrow keys pressed while both ALT and Shift keys are held down.",
"	Note that some machines and operating system interprete the right-hand <b>alt</b> key",
"	differenty.",
"",
"	=== 300, 100, 300, bold_column_1",
"	Key					| UNICODE (hex)	| Character Entity Name",
"	ctrl-alt-shift-Insert 			| 108700	| &amp;ctrl-alt-shift-insert;",
"	ctrl-alt-shift-End			| 108701	| &amp;ctrl-alt-shift-end;",
"	ctrl-alt-shift-Arrow down		| 108702	| &amp;ctrl-alt-shift-arrow-down;",
"	ctrl-alt-shift-Pg dn			| 108703	| &amp;ctrl-alt-shift-pgdn;",
"	ctrl-alt-shift-Arrow left		| 108704	| &amp;ctrl-alt-shift-arrow-left;",
"	ctrl-alt-shift-Center key (Keypad 5)	| 108705	| &amp;ctrl-alt-shift-center;",
"	ctrl-alt-shift-Arrow right		| 108706	| &amp;ctrl-alt-shift-arrow-right;",
"	ctrl-alt-shift-Home			| 108707	| &amp;ctrl-alt-shift-home;",
"	ctrl-alt-shift-Arrow up			| 108708	| &amp;ctrl-alt-shift-arrow-up;",
"	ctrl-alt-shift-Pg up			| 108709	| &amp;ctrl-alt-shift-pgup;",
"	ctrl-alt-shift-Delete			| 10870a	| &amp;ctrl-alt-shift-delete;",
"	ctrl-alt-shift-F1			| 108711	| &amp;ctrl-alt-shift-f1;",
"	ctrl-alt-shift-F2			| 108712	| &amp;ctrl-alt-shift-f2;",
"	ctrl-alt-shift-F3			| 108713	| &amp;ctrl-alt-shift-f3;",
"	ctrl-alt-shift-F4			| 108714	| &amp;ctrl-alt-shift-f4;",
"	ctrl-alt-shift-F5			| 108715	| &amp;ctrl-alt-shift-f5;",
"	ctrl-alt-shift-F6			| 108716	| &amp;ctrl-alt-shift-f6;",
"	ctrl-alt-shift-F7			| 108717	| &amp;ctrl-alt-shift-f7;",
"	ctrl-alt-shift-F8			| 108718	| &amp;ctrl-alt-shift-f8;",
"	ctrl-alt-shift-F9			| 108719	| &amp;ctrl-alt-shift-f9;",
"	ctrl-alt-shift-F10			| 10871a	| &amp;ctrl-alt-shift-f10;",
"	ctrl-alt-shift-F11			| 10871b	| &amp;ctrl-alt-shift-f11;",
"	ctrl-alt-shift-F12			| 10871c	| &amp;ctrl-alt-shift-f12;",
"	===	",
"",
""
 ]
	
},




"Special Console Output Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Special Console Output Characters" ],
    "Keywords":			[ "Special output characters" ],
"Description 01:Introduction" : [
"",
"	B4P is also supporting a set of dedicated UNICODE characters for formatting text contents before outputting the with standard functions",
"	such as __echo(__), __format print(__) and __print(__).  Typical examples are changing text and background color, enabling underscore and",
"	some cursor navigation symbols.",
"",
"	<br><br>",
"	These characters ensure cross-platform compatibility. <br>",
"	See __Special console output characters__.",
"",
"	<br><br>",
"	<u>Note:</u> You may have considered Escape sequences (which date back to Digital Equipment VT100 terminals in the late 1970's , e.g. ",
"	<b>ESC [A</b> for cursor movements) but these symbols do typically contain multiple characters and B4P will not guarantee cross platform portability. ",
""
 ]
	,


"Description 02:Tab Features" : [
"",
"	The tab character( B4P: reserved keyword __tab__ ) provides fixed tab positions in steps of eight characters.  In addition to this, B4P provides",
"	a set of reserved characters and entitites to advance to a specific position.",
"",
"	<br><br>",
"	This feature is also suitable for batch or redirected output because it converts these characters variable number of spaces.",
"",
"	=== 400, 200, 400, bold_column_1",
"	Functionality			| UNICODE (hex)		| Character Entity Name",
"	Tab position 1			| 103001		| &amp;tab1;",
"	Tab position 2			| 103002		| &amp;tab2;",
"	...				| ...			| ...",
"	Tab position 300		| 10312c		| &amp;tab300;",
"	===	",
""
 ]
	,



"Description 03:Formatting Features" : [
"",
"	Some functions, especially blinking text, are not supported on all terminals. ",
"",
"	=== 400, 200, 400, bold_column_1",
"	Functionality			| UNICODE (hex)		| Character Entity Name",
"	Reset console			| 100000		| &amp;reset;",
"	Underscore toggle/off/on	| 100010-100012		| &amp;underscore; &amp;underscore off; &amp;underscore on;",
"	Boldface toggle/off/on		| 100014-100016		| &amp;boldface; &amp;boldface off; &amp;boldface on;",
"	Blinking toggle/off/on		| 100018-10001a		| &amp;blinking; &amp;blinking off; &amp;blinking on;",
"	Reverse toggle/off/on		| 10001c-10001e		| &amp;reverse; &amp;reverse off; &amp;reverse on;",
"	===	",
""
 ]
	,


"Description 04:Console Colors" : [
"",
"	Following text and background colors are supported on the console:",
"	Inside the entities, color names in lower-case letters refer to text color, and color names in upper-case letters refer to background color.",
"	The color names on the left hand column are also valid names for the functions __text color(__) and __background color(__).",
"",
"",
"	=== 200, 200, 400, 200, bold_column_1",
"	Color name			| UNICODE (hex)		| Character Entity Names				| RBG Color Code",
"	previous			| 101120, 102120	| &amp;previous; &amp;PREVIOUS;				| Previous color",
"	default				| 101121, 102121	| &amp;default; &amp;DEFAULT;				| Default console color",
"					|			|							|",
"	black				| 101000, 102000	| &amp;black; &amp;BLACK;				| 0,   0,   0",
"	very dark gray			| 101001, 102001	| &amp;very dark gray; &amp;VERY DARK GRAY;		| 64,  64,  64",
"	dark gray			| 101002, 102002	| &amp;dark gray; &amp;DARK GRAY;			| 85,  85,  85",
"	gray				| 101003, 102003	| &amp;gray; &amp;GRAY;					| 128, 128, 128",
"	light gray			| 101004, 102004	| &amp;light gray; &amp;LIGHT GRAY;			| 192, 192, 192",
"	very light gray			| 101005, 102005	| &amp;very light gray; &amp;VERY LIGHT GRAY;		| 224, 224, 224",
"	white				| 101006, 102006	| &amp;white; &amp;WHITE;				| 255, 255, 255",
"					|			|							| ",
"	dark red			| 101010, 102010	| &amp;dark red; &amp;DARK RED;				| 170,   0,   0",
"	red				| 101011, 102011	| &amp;red; &amp;RED;					| 255,   0,   0",
"	light red			| 101012, 102012	| &amp;light red; &amp;LIGHT RED;			| 255, 128, 128",
"					|			|							| ",
"	dark scarlet			| 101014, 102014	| &amp;dark scarlet; &amp;DARK SCARLET;			| 170,  43,   0",
"	scarlet				| 101015, 102015	| &amp;scarlet; &amp;SCARLET;				| 255,  64,   0",
"	light scarlet			| 101016, 102016	| &amp;light scarlet; &amp;LIGHT SCARLET;		| 255, 160, 128",
"					|			|							|",
"	dark mandarin			| 101018, 102018	| &amp;dark mandarin; &amp;DARK MANDARIN;		| 170,  86,   0",
"	mandarin			| 101019, 102019	| &amp;mandarin; &amp;MANDARIN;				| 255, 128,   0",
"	light mandarin			| 10101a, 10201a	| &amp;light mandarin; &amp;LIGHT MANDARIN;		| 255, 192, 128",
"					|			|							| ",
"	dark orange			| 10101c, 10201c	| &amp;dark orange; &amp;DARK ORANGE;			| 170, 128,   0",
"	orange				| 10101d, 10201d	| &amp;orange; &amp;ORANGE;				| 255, 192,   0",
"	light orange			| 10101e, 10201e	| &amp;light orange; &amp;LIGHT ORANGE;			| 255, 224, 128",
"					|			|							| ",
"	dark mango			| 101020, 102020	| &amp;dark mango; &amp;DARK MANGO;			| 170, 150,   0",
"	mango				| 101021, 102021	| &amp;mango; &amp;MANGO;				| 255, 224,   0",
"	light mango			| 101022, 102022	| &amp;light mango; &amp;LIGHT MANGO;			| 255, 240, 128",
"					|			|							| ",
"	dark chrome			| 101024, 102024	| &amp;dark chrome; &amp;DARK CHROME;			| 170, 160,   0",
"	chrome				| 101025, 102025	| &amp;chrome; &amp;CHROME;				| 255, 240,   0",
"	light chrome			| 101026, 102026	| &amp;light chrome; &amp;LIGHT CHROME;			| 255, 248, 128",
"					|			|							| ",
"	dark yellow			| 101028, 102028	| &amp;dark yellow; &amp;DARK YELLOW;			| 170, 170,   0",
"	yellow				| 101029, 102029	| &amp;yellow; &amp;YELLOW;				| 255, 255,   0",
"	light yellow			| 10102a, 10202a	| &amp;light yellow; &amp;LIGHT YELLOW;			| 255, 255, 128",
"					|			|							| ",
"	dark lemon			| 10102c, 10202c	| &amp;dark lemon; &amp;DARK LEMON;			| 150, 170,   0",
"	lemon				| 10102d, 10202d	| &amp;lemon; &amp;LEMON;				| 224, 255,   0",
"	light lemon			| 10102e, 10202e	| &amp;light lemon; &amp;LIGHT LEMON;			| 240, 255, 128",
"					|			|							| ",
"	dark granny			| 101030, 102030	| &amp;dark granny; &amp;DARK GRANNY;			| 127, 170,   0",
"	granny				| 101031, 102031	| &amp;granny; &amp;GRANNY;				| 192, 255,   0",
"	light granny			| 101032, 102032	| &amp;light granny; &amp;LIGHT GRANNY;			| 224, 255, 128",
"					|			|							| ",
"	dark chartreuse			| 101034, 102034	| &amp;dark chartreuse; &amp;DARK CHARTREUSE;		| 86, 170,   0",
"	chartreuse			| 101035, 102035	| &amp;chartreuse; &amp;CHARTREUSE;			| 128, 255,   0",
"	light chartreuse		| 101036, 102036	| &amp;light chartreuse; &amp;LIGHT CHARTREUSE;		| 192, 255, 128",
"					|			|							| ",
"	dark green			| 101038, 102038	| &amp;dark green; &amp;DARK GREEN;			| 0, 170,   0",
"	green				| 101039, 102039	| &amp;green; &amp;GREEN;				| 0, 255,   0",
"	light green			| 10103a, 10203a	| &amp;light green; &amp;LIGHT GREEN;			| 128, 255, 128",
"					|			|							| ",
"	dark spring green		| 10103c, 10203c	| &amp;dark spring green; &amp;DARK SPRING GREEN;	| 0, 170,  86 ",
"	spring green			| 10103d, 10203d	| &amp;spring green; &amp;SPRING GREEN;			| 0, 255, 128",
"	light spring green		| 10103e, 10203e	| &amp;light spring green; &amp;LIGHT SPRING GREEN;	| 128, 255, 192",
"					|			|							| ",
"	dark turquoise			| 101040, 102040	| &amp;dark turquoise; &amp;DARK TURQUOISE;		| 0, 170, 128",
"	turquoise			| 101041, 102041	| &amp;turquoise; &amp;TURQUOISE;			| 0, 255, 192",
"	light turquoise			| 101042, 102042	| &amp;light turquoise; &amp;LIGHT TURQUOISE;		| 128, 255, 224",
"					|			|							| ",
"	dark cyan			| 101044, 102044	| &amp;dark cyan; &amp;DARK CYAN;			| 0, 170, 170",
"	cyan				| 101045, 102045	| &amp;cyan; &amp;CYAN;					| 0, 255, 255",
"	light cyan			| 101046, 102046	| &amp;light cyan; &amp;LIGHT CYAN;			| 128, 255, 255",
"					|			|							| ",
"	dark sky blue			| 101048, 102048	| &amp;dark sky blue; &amp;DARK SKY BLUE;		| 0, 150, 170",
"	sky blue			| 101049, 102049	| &amp;sky blue; &amp;SKY BLUE;				| 0, 224, 255",
"	light sky blue			| 10104a, 10204a	| &amp;light sky blue; &amp;LIGHT SKY BLUE;		| 128, 241, 255",
"					|			|							| ",
"	dark aquamarine			| 10104c, 10204c	| &amp;dark aquamarine; &amp;DARK AQUAMARINE;		| 0, 128, 170",
"	aquamarine			| 10104d, 10204d	| &amp;aquamarine; &amp;AQUAMARINE;			| 0, 192, 255",
"	light aquamarine		| 10104e, 10204e	| &amp;light aquamarine; &amp;LIGHT AQUAMARINE;		| 128, 224, 255",
"					|			|							| ",
"	dark azur			| 101050, 102050	| &amp;dark azur; &amp;DARK AZUR;			| 0, 107, 170",
"	azur				| 101051, 102051	| &amp;azur; &amp;AZUR;					| 0, 160, 255",
"	light azur			| 101052, 102052	| &amp;light azur; &amp;LIGHT AZUR;			| 128, 208, 255",
"					|			|							| ",
"	dark ocean			| 101054, 102054	| &amp;dark ocean; &amp;DARK OCEAN;			| 0,  86, 170",
"	ocean				| 101055, 102055	| &amp;ocean; &amp;OCEAN;				| 0, 128, 255",
"	light ocean			| 101056, 102056	| &amp;light ocean; &amp;LIGHT OCEAN;			| 128, 192, 255",
"					|			|							| ",
"	dark sapphire			| 101058, 102058	| &amp;dark sapphire; &amp;DARK SAPPHIRE;		| 0,  64, 170",
"	sapphire			| 101059, 102059	| &amp;sapphire; &amp;SAPPHIRE;				| 0,  96, 255",
"	light sapphire			| 10105a, 10205a	| &amp;light sapphire; &amp;LIGHT SAPPHIRE;		| 128, 176, 255",
"					|			|							| ",
"	dark lapis			| 10105c, 10205c	| &amp;dark lapis; &amp;DARK LAPIS;			| 0,  43, 170",
"	lapis				| 10105d, 10205d	| &amp;lapis; &amp;LAPIS;				| 0,  64, 255",
"	light lapis			| 10105e, 10205e	| &amp;light lapis; &amp;LIGHT LAPIS;			| 128, 160, 255",
"					|			|							| ",
"	dark royal blue			| 101060, 102060	| &amp;dark royal blue; &amp;DARK ROYAL BLUE;		| 0,  22, 170",
"	royal blue			| 101061, 102061	| &amp;royal blue; &amp;ROYAL BLUE;			| 0,  32, 255",
"	light royal blue		| 101062, 102062	| &amp;light royal blue; &amp;LIGHT ROYAL BLUE;		| 128, 144, 255",
"					|			|							| ",
"	dark blue			| 101064, 102064	| &amp;dark blue; &amp;DARK BLUE;			| 0,   0, 170",
"	blue				| 101065, 102065	| &amp;blue; &amp;BLUE;					| 0,   0, 255",
"	light blue			| 101066, 102066	| &amp;light blue; &amp;LIGHT BLUE;			| 128, 128, 255",
"					|			|							| ",
"	dark admiral			| 101068, 102068	| &amp;dark admiral; &amp;DARK ADMIRAL;			| 43,   0, 170",
"	admiral				| 101069, 102069	| &amp;admiral; &amp;ADMIRAL;				| 64,   0, 255",
"	light admiral			| 10106a, 10206a	| &amp;light admiral; &amp;LIGHT ADMIRAL;		| 160, 128, 255",
"					|			|							| ",
"	dark ultramarine		| 10106c, 10206c	| &amp;dark ultramarine; &amp;DARK ULTRAMARINE;		| 64,   0, 170",
"	ultramarine			| 10106d, 10206d	| &amp;ultramarine; &amp;ULTRAMARINE;			| 96,   0, 255",
"	light ultramarine		| 10106e, 10206e	| &amp;light ultramarine; &amp;LIGHT ULTRAMARINE;	| 176, 128, 255",
"					|			|							| ",
"	dark violet			| 101070, 102070	| &amp;dark violet; &amp;DARK VIOLET;			| 86,   0, 170",
"	violet				| 101071, 102071	| &amp;violet; &amp;VIOLET;				| 128,   0, 255",
"	light violet			| 101072, 102072	| &amp;light violet; &amp;LIGHT VIOLET;			| 192, 128, 255",
"					|			|							| ",
"	dark purple			| 101074, 102074	| &amp;dark purple; &amp;DARK PURPLE;			| 107,   0, 170",
"	purple				| 101075, 102075	| &amp;purple; &amp;PURPLE;				| 160,   0, 255",
"	light purple			| 101076, 102076	| &amp;light purple; &amp;LIGHT PURPLE;			| 208, 128, 255",
"					|			|							| ",
"	dark electric			| 101078, 102078	| &amp;dark electric; &amp;DARK ELECTRIC;		| 128,   0, 170",
"	electric			| 101079, 102079	| &amp;electric; &amp;ELECTRIC;				| 192,   0, 255",
"	light electric			| 10107a, 10207a	| &amp;light electric; &amp;LIGHT ELECTRIC;		| 224, 128, 255",
"					|			|							| ",
"	dark phlox			| 10107c, 10207c	| &amp;dark phlox; &amp;DARK PHLOX;			| 150,   0, 170",
"	phlox				| 10107d, 10207d	| &amp;phlox; &amp;PHLOX;				| 224,   0, 255",
"	light phlox			| 10107e, 10207e	| &amp;light phlox; &amp;LIGHT PHLOX;			| 240, 128, 255",
"					|			|							| ",
"	dark magenta			| 101080, 102080	| &amp;dark magenta; &amp;DARK MAGENTA;			| 170,   0, 170",
"	magenta				| 101081, 102081	| &amp;magenta; &amp;MAGENTA;				| 255,   0, 255",
"	light magenta			| 101082, 102082	| &amp;light magenta; &amp;LIGHT MAGENTA;		| 255, 128, 255",
"					|			|							| ",
"	dark pink			| 101084, 102084	| &amp;dark pink; &amp;DARK PINK;			| 170,   0, 128",
"	pink				| 101085, 102085	| &amp;pink; &amp;PINK;					| 255,   0, 192",
"	light pink			| 101086, 102086	| &amp;light pink; &amp;LIGHT PINK;			| 255, 128, 224",
"					|			|							| ",
"	dark carmine			| 101088, 102088	| &amp;dark carmine; &amp;DARK CARMINE;			| 170,   0,  86",
"	carmine				| 101089, 102089	| &amp;carmine; &amp;CARMINE;				| 255,   0, 128",
"	light carmine			| 10108a, 10208a	| &amp;light carmine; &amp;LIGHT CARMINE;		| 255, 128, 192",
"					|			|							| ",
"	dark cold red			| 10108c, 10208c	| &amp;dark cold red; &amp;DARK COLD RED;		| 170,   0,  43",
"	cold red			| 10108d, 10208d	| &amp;cold red; &amp;COLD RED;				| 255,   0,  64",
"	light cold red			| 10108e, 10208e	| &amp;light cold red; &amp;LIGHT COLD RED;		| 255, 128, 160",
"					|			|							| ",
"	dark brown			| 101090, 102090	| &amp;dark brown; &amp;DARK BROWN;			| 100,  50,   0",
"	brown				| 101091, 102091	| &amp;brown; &amp;BROWN;				| 150,  75,   0",
"	light brown			| 101092, 102092	| &amp;light brown; &amp;LIGHT BROWN;			| 203, 166, 128",
"					|			|							| ",
"	dark beige			| 101094, 102094	| &amp;dark beige; &amp;DARK BEIGE;			| 164, 164, 147",
"	beige				| 101095, 102095	| &amp;beige; &amp;BEIGE;				| 245, 245, 220",
"	light beige			| 101096, 102096	| &amp;light beige; &amp;LIGHT BEIGE;			| 251, 251, 238",
"					|			|							| ",
"	dark tan			| 101098, 102098	| &amp;dark tan; &amp;DARK TAN;				| 140, 120,  94",
"	tan				| 101099, 102099	| &amp;tan; &amp;TAN;					| 210, 180, 140",
"	light tan			| 10109a, 10209a	| &amp;light tan; &amp;LIGHT TAN;			| 233, 218, 198",
"					|			|							| ",
"	dark salmon			| 101098, 102098	| &amp;dark salmon; &amp;DARK SALMON;			| 170,  97, 110",
"	salmon				| 101099, 102099	| &amp;salmon; &amp;SALMON;				| 255, 145, 164",
"	light salmon			| 10109a, 10209a	| &amp;light salmon; &amp;LIGHT SALMON;			| 255, 201, 210",
"	==="
 ]
	,


"Description 05:Console Theme Colors" : [
"",
"	In addition to static colors, theme colors can be chosen.  When B4P starts, some initial colors are assigned, ",
"	however they can be reassigned to different colors by changing the color names or hexadecimal RGB values (#RRGGBB format)",
"	in <b>console[theme colors,</b><i>theme color name</i><b>] = </b><i>New color name</i>;",
"",
"	<br><br>",
"	The theme colors listed in the 1st column below can also be used with the functions __text color(__) and __background color(__).",
"",
"	=== 200, 200, 400, 200, bold_column_1",
"	Theme color name		| UNICODE (hex)		| Character Entity Names				| RBG Color Code",
"	neutral				| 101100, 102100	| &amp;neutral; &amp;NEUTRAL;				|",
"	high				| 101101, 102101	| &amp;high; &amp;HIGH;					|",
"	medium				| 101102, 102102	| &amp;medium; &amp;MEDIUM;				|",
"	low				| 101103, 102103	| &amp;low; &amp;LOW;					|",
"					|			|							|",
"	bad				| 101104, 102104	| &amp;bad; &amp;BAD;					|",
"	warning				| 101105, 102105	| &amp;warning; &amp;WARNING;				|",
"	info				| 101106, 102106	| &amp;info; &amp;INFO;					|",
"	ok				| 101107, 102107	| &amp;ok; &amp;OK;					|",
"					|			|							|",
"	start				| 101108, 102108	| &amp;start; &amp;START;				|",
"	active				| 101109, 102109	| &amp;active; &amp;ACTIVE;				|",
"	pause				| 10110a, 10210a	| &amp;pause; &amp;PAUSE;				|",
"	done				| 10110b, 10210b	| &amp;done; &amp;DONE;					|",
"					|			|							|",
"	accent 1			| 10110c, 10210c	| &amp;accent 1; &amp;ACCENT 1;				|",
"	accent 2			| 10110d, 10210d	| &amp;accent 2; &amp;ACCENT 2;				|",
"	accent 3			| 10110e, 10210e	| &amp;accent 3; &amp;ACCENT 3;				|",
"	accent 4			| 10110f, 10210f	| &amp;accent 4; &amp;ACCENT 4;				|",
"					|			|							|",
"	deco 1				| 101110, 102110	| &amp;deco 1; &amp;DECO 1;				|",
"	deco 2				| 101111, 102111	| &amp;deco 2; &amp;DECO 2;				|",
"	deco 3				| 101112, 102112	| &amp;deco 3; &amp;DECO 3;				|",
"	deco 4				| 101113, 102113	| &amp;deco 4; &amp;DECO 4;				|",
"	===	"
 ]
	,


"Description 06:Other Special Output Characters" : [
"",
"	A limted number of navigation key characters can also be used as output characters in roder to move the cursor:",
"",
"	=== 200, 200, 400, 200, bold_column_1",
"	Key Character		| UNICODE (hex)	| Character Entity Name	| Action",
"	Arrow up		| 108008	| &amp;arrow-up;	| Cursor up 1 row",
"	Arrow down		| 108002	| &amp;arrow-down;	| Cursor down 1 row",
"	Arrow left		| 108004	| &amp;arrow-left;	| Cursor left 1 row",
"	Arrow right		| 108006	| &amp;arrow-right;	| Cursor right 1 row",
"	Home			| 108007	| &amp;home;		| Cursor to 1st column",
"	ctrl-Home		| 108107	| &amp;ctrl-home;	| Cursor to top left",
"	===",
""
 ]
	



},





"Basic Data Types" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Basic data types", "Types", "Subtypes" ],
"Description 01:Basic Data Types" : [
"",
"	<img src=\"Images/LAN_Pyramid_Basic_Types.png\" alt=\"B4P Language Pyramid - Basic Data Types\"><br/>",
"",
"	B4P supports six basic data types for storing data in B4P __variables__ and in all calculation paths.",
"	However, __tables__ store all data in text form, including __numbers__.  Numerals written to tables are converted into numbers in text form, and",
"	numbers read are converted into numerals.",
"",
"	<br><br>",
"	Strings, numerals and dates are also categorized in two subtypes each which are desribed in the following sections.",
"",
"	* __Strings__",
"	** __Softquoted strings__",
"	** __Quoted strings__",
"	* __Numerals__",
"	** __Numerals__ with text representations",
"	** __Plain numerals__",
"	* __Dates__, able to contain dates, times or both",
"	** __Dates__ with text representations",
"	** __Plain dates__",
"	* __Booleans__",
"	* __Parameter sets__",
"	** They contain multiple elements of values of any data type, including nested parameter sets.  Empty sets (0 elements) are supported.",
"	* __Voids__",
""
 ]
	
  },



  "Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data type strings" ],
    "Keywords":			[ "string", "strings" ],
"Description 01:Introduction" : [
"",
"	Strings in B4P consist of 0, 1 or any number of UNICODE characters.  Every character counts as 1 character, regardless if it is an ANSI or",
"	non-ANSI (e.g. foreign) character.  The string length is limited to a specific value, but only by the available system memory.",
"",
"	<br><br>",
"	B4P supports following three subtypes:",
"	* __Quoted strings__, and",
"	* __Softquoted strings__.",
"",
"	Simple rules: B4P handles __Text inside double quotation marks__ as __quoted strings__ where all contents are considered <i>as given</i>. <br>",
"	And __text inside single quotation marks__ as well as __plain text__ are handled as __softquoted strings__.",
""
 ]
	
  },

  "Softquoted Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Data subtype softquoted strings" ],
    "Keywords":			[ "Softquoted string", "Softquoted strings" ],
"Description 01:Introduction" : [
"",
"",
"	The data subtype <b>quoted string</b> is applied in following cases:",
"",
"	* __Plain text__ or __text inside single quotation marks__ is written into B4P __variables__.",
"	* __Plain text__ or __text inside single quotation marks__ is used in B4P __expressions__ and __comparisons__.",
"",
"	Following features apply to <b>softquoted strings</b> only:",
"",
"* Symbols like '*' or '?' are treated as __wildcards__ for __comparisons__ and when the equal sign = or not-equal sign &lt;&gt; is used<br>  	  <u>Note:</u> This is not the case for the other comparison operators such as  == and !=.",
"	* __Accessing tables__: A single point may be used to access the current coolumn if the __table context__ allows this.",
"	* __Shifted table column specifications__: Table header names may be prefixed with one or more &lt; or &gt; to access neighboring columns.",
"	* Some functions support dedicated values in place of column header names in their parameeters, e.g. <b>'#row'</b> or <b>'*'</b> in specific function parameters such as in __table lookup(__) and __table consolidate(__).",
"" ],
"Examples 01:With Text Inside Single Quotation Marks" : [
"	a[] = 'Hello World';",
"	b[] = 'Hello   World';",
"	c[] = '  Hello World  ';",
"	echo( 'a[] = \"', a[], '\"');",
"	echo( 'b[] = \"', b[], '\"');",
"	echo( 'c[] = \"', c[], '\"');",
"	echo( 'Subtype of a[] is ', subtype( a[] ) );",
"	echo( \"Simple comparison returning 'true': \", Hello = '*llo' ); // softquoted strings support wildcards"
 ]
	,
    "Output 01:Output:":		"automatic",

"Examples 02:With Plain Text" : [
"	a[] = Hello World;",
"	b[] = Hello   World;",
"	c[] =   Hello World  ;",
"	",
"	echo( 'a[] = \"', a[], '\"');",
"	echo( 'b[] = \"', b[], '\"');",
"	echo( 'c[] = \"', c[], '\"');",
"	echo( 'Subtype of a[] is ', subtype( a[] ) );",
"	echo( \"Simple comparison returning 'true': \", Hello = '*llo' ); // softquoted strings support wildcards",
"",
"	echo;",
"	echo(\"Following texts are read as softquoted strings\");",
"	a[] = 07.04.2020;         // String constant, because it contains two points",
"	b[] = 555 1212;           // Contains a space",
"	c[] = 1 Main St.;         // This is a valid string constant",
"	d[] = mike@example.com;   // Valid, too.  See note below.",
"",
"	echo( 'a[] = \"', a[], '\"  Subtype: ', subtype(a[]));",
"	echo( 'b[] = \"', b[], '\"  Subtype: ', subtype(b[]));",
"	echo( 'c[] = \"', c[], '\"  Subtype: ', subtype(c[]));",
"	echo( 'd[] = \"', d[], '\"  Subtype: ', subtype(d[]));",
"",
"	echo;",
"	echo(\"Combine softquoted and quoted string:\");",
"	a[] = Hello + ' World';",
"	b[] = Hello + \" World\";",
"	echo( 'a[] = \"', a[], '\"  Subtype: ', subtype(a[])); // softquoted string",
"	echo( 'b[] = \"', b[], '\"  Subtype: ', subtype(b[])); // quoted string",
""
 ]
	,
    "Output 02:Output:":		"automatic"

  },

  "Quoted Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Data subtype quoted strings" ],
    "Keywords":			[ "Quoted string", "Quoted strings" ],
"Description 01:Introduction" : [
"",
"	The data subtype <b>quoted string</b> is applied in following cases:",
"",
"	* __Text inside double quotation marks__ is written into B4P __variables__.",
"	* __Text inside double quotation marks__ is used in B4P __expressions__ and __comparisons__.",
"	* Unless specified otherwise, almost all B4P functions which return values of type __string__ are of subtype <b>quoted strings</b>.",
"	* The contents in quoted strings are always considered as given , including:",
"	** No symbols like '*' or '?' are treated as wildcard symbols for comparisons",
"" ],
"Examples 01:With Text Inside Double Quotation Marks" : [
"	a[] = \"Hello World\";",
"	b[] = \"Hello   World\";",
"	c[] = \"  Hello World  \";",
"",
"	echo( 'a[] = \"', a[], '\"');",
"	echo( 'b[] = \"', b[], '\"');",
"	echo( 'c[] = \"', c[], '\"');",
"	echo( 'Subtype of a[] is ', subtype( a[] ) );",
"	echo( \"Simple comparison returning 'false': \", Hello = \"*llo\" ); // quoted strings support no wildcards"
 ]
	,
    "Output 01:Output:":		"automatic"


  },



  "Indexing Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Indexing strings" ],
"Description 01:Strings - Simple Indexing" : [
"",
"	<i>Simple indexing</i> is used to retrieve single characters from the string.  Indexing begins with 0 which refers to the 1st",
"	character.  The index value is specified in braces and shall not be confused with a parameter set as such.",
"",
"	<br><br>",
"	Following rules apply to the indexing strings:",
"	* The index must always be a numeric value.",
"	* Specifying just braces <b>{}</b> without an index will retrieve the length (character count) of the string.  Alternatively, use __length [string function]__.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.",
"	* __Negative indexing__ is supported. -1 refers to the last character in the string. -2, -3, etc. refer to the previous ones, and so forth.",
"	* Empty sets are returned when accessing with index values which lie out of bounds.  Example: <b>{a,b,c}{5}</b> returnss <b>{}</b> (empty set).",
"	* Updating individual elements on the left hand side of assignments is not possible.  Wrong exmaple: <b>a[]{3} = 'E';</b>.",
"" ],
"Examples 01:" : [
"	echo( abcde{} );     // Returns 5 (character count)",
"	echo( abcde{0} );   // Access the 1st element",
"	echo( abcde{-2} );  // Access the 2nd last element",
"	echo( abcde{10} );  // Attempts to access characters outside the string returns blank strings.",
"	echo( abcde{-10} ); // Same case here."
 ]
	,

    "Output 01:Output:":		"automatic"

  },



  "Slicing Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Slicing strings", "Extracting substrings" ],
"Description 01:Introduction" : [
"",
"	Instead of specifying single index values to retrieve single characters, substrings can be retrieved by listing muliple values and/or ranges.",
"	In some other programming langauges, this feature is known as slicing.",
"	The range operator '..' is available to specify a range.  If no value prcedes the range operator, than 0 is assumed.  If no value follows",
"	the range operator, then the last character is assumed.  The result will always be a string.",
"	Negative indexing is supported.",
"	" ],
"Examples 01:" : [
"	echo( abcdefg { 0,2,4,2,0 } );    // Returns 'aceca'",
"	echo( abcdefg { 3..5 } );         // Returns 'def'",
"	echo( abcdefg { 5..3 } );         // Empty string.  Ranges cannot be listed in reverse direction",
"	echo( abcdefg { -3..-1 } );       // Returns 'efg' - Last 3 characters",
"	echo( abcdefg { 4..-1 } );        // Same result",
"	echo( abcdefg { 3..99 } );        // Returns 'defg'",
"	echo( abcdefg { -99..2 } );       // Returns 'abc'",
"	echo( abcdefg { 0..2,5,1..3 } );  // Combinations",
"	echo( abcdefg { 3.. } );          // Returns 'defg'",
"	echo( abcdefg { ..3 } );          // Returns 'abcd'",
"	echo( abcdefg { .. } );           // Returns full string",
"	echo( abcdefg { ..,.. } );        // Returns full string twice: abcdefgabcdefg"
 ]
	,

    "Output 01:":		"automatic"
  },




  "Numerals" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types numerals" ],
    "Keywords":			[ "numeral", "numerals", "plain numeral", "plain numerals"  ],
"Description 01:Numerals" : [
"",
"	B4P handles all numerals as double precision floating point numbers.  This means that numerals can handle both whole numbers and",
"	numbers with decimal digits behind.  Two subtypes are suppported:",
"",
"	* <b>Numerals</b> with text represenatations",
"	* <b>Plain numerals</b>",
"",
"	Numerals picked up from the B4P program code or read in from tables will initially carry along their original",
"	text representations, for example 0123.40. They are useful in case the leading and trailing zeros in numbers (like in postal codes and ",
"	section numbers in document structures) need to be preserved.  The string representation will be discarded immediately when any kind",
"	of algorithmic operations is applied, for exmaple additions (including adding 0) and even negations.  In all these cases, the",
"	subtype changes from <b>numeral</b> to <b>plain numeral</b>.",
"",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 123.45;",
"	a[1] = 007;",
"	a[2] = 20.20;",
"	a[3] = num( '1.5E-3' ); // String representation will not be included here",
"	a[4] = 0.00;",
"",
"	for all variables( a[], b[] )",
"	{",
"	    c[] = str(b[]);  // Recover string representation",
"	    d[] = b[] + 0;       // String representation gets dropped because a calculation has been made",
"	    e[] = str(d[]);  // Convert back to string representation",
"",
"	    echo;",
"	    echo(\"For following numeral        : \", b[], \" subtype: \", subtype(b[]) );",
"	    echo(\"   String representation     : \", c[], \" subtype: \", subtype(c[]) );",
"	    echo(\"   Converted to plain numeral: \", d[], \" subtype: \", subtype(d[]) );",
"	    echo(\"   Back to string again      : \", e[], \" subtype: \", subtype(e[]) );",
"	}"
 ]
	,
    "Output 01:":		"automatic"

  },


  "Dates" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types dates" ],
    "Keywords":			[ "date", "dates", "plain date", "plain dates"  ],
"Description 01:Dates" : [
"",
"",
"	The date type can store dates (beginning 1990-01-01), time of day (down to the second), combination of both (date and time) and an empty",
"	values called <b>blank dates</b>.",
"",
"	B4P handles all numerals as double precision floating point numbers.  This means that numerals can handle both whole numbers and",
"	numbers with decimal digits behind.  Two subtypes are suppported:",
"",
"	* Dates with text represenatations",
"	* Plain dates (don't confuse with blank dates)",
"",
"",
"	This data type can store pure dates (beginning 1990-01-01), time of day (down to the second), combination of both date and time of day, or <i>blank dates</i> which ",
"	are blank values neither containing dates or times.",
"",
"	Following sub-types are supported for dates:",
"",
"	<br>",
"",
"	Dates read in from tables (if reading data as dates is activated with the function __table configure(__)) will automatically include their",
"	text representations.  The string representation will be discarded immediately when any kind of algorithmic operation",
"	is applied, even if 0 days are added.  No discardings take place on direct assignments",
"	and transactions without calculations done, e.g. <b>a[] = b[];</b>.",
"",
"	In B4P code, dates are created using the following functions listed below and the dates are created as plain dates without memorized text representation.",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Function name 	| Description",
"	__date(__)    	| Depending on the string value provided, it returns a date, date and time, time only, or blank date.",
"	__pure date(__) | Works like date, but ignores any time of day information.  Output is either a date or blank date.",
"	__date time(__) | Works like date.  If input is not a blank, and if no time of day is provided, then 00:00:00 (midnight) is assumed as time of day.",
"	__time(__)	| This function will only use the time information.  If the paramter contains a date only, then a blank date wil be returned.",
"	===	",
"",
"	Simple and valid examples are: <b>date( 14.07.2020 ), date( \"2020-07-04\" ), date( today )</b>. The values provided in the date functions are string constants.",
"	Please note that quotation marks (no matter if single or double) are required for the 2nd example because of the hyphens which would otherwise be treated as",
"	minus signs where 7 and 4 are subtracted from 2020.",
""
 ]
	,

"Examples 01:" : [
"	// Following assignments are still strings (text)",
"	a[0] = \"July 14. 2021\";",
"	a[1] = '20:15:00';",
"	a[2] = \"2022 August 01 22:15\";",
"	a[3] = today;  // Must be lower case",
"	a[4] = now;    // \"",
"	a[5] = '' ;    // Blank date",
"",
"	for all variables( a[], b[] )",
"	{",
"	    // The 'date' function converts input strings (text) into plain dates without preserving text",
"",
"	    c[] = date( b[] ); ",
"	    d[] = pure date( b[] );",
"	    e[] = time ( b[] );",
"",
"	    echo(new line, \"For input value      : \", b[] );",
"	    echo(\"  Date: \", c[],\"  Date only: \", d[], \"  Time only: \", e[]);",
"	}",
"	echo( new line, Additional Features );",
"",
"	echo(date(\"2020 / 12 / 31 15:00\")+1);		// Date and time",
"	echo(date time(\"2020-12-31\"));			// Add a time (default 00:00:00)",
"	echo(time(\"2020-12-31 15:00\"));			// Time",
"	echo(time(\"2020-12-31 15:00\")+1/24);		// Time, 1 hour later",
"	echo(pure date(\"31. Dezember 2021\")+1);		// Numeral"
 ]
	,
    "Output 01:":		"automatic"



  },



"Booleans" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types booleans" ],
    "Keywords":			[ "boolean", "booleans"  ],
"Description 01:Voids" : [
"",
"	The boolean data type takes two values which are __reserved keywords__: <b>true</b> and <b>false</b>.  Boolean results are provided with comparisons.<br>",
"	<u>Attention</u>: The keywords are case-sensitive. <b>True</b> and <b>TRUE</b> are a string values, as well as <b>'true'</b> and <b>\"false\"</b>.",
"",
"",
"" ],
"Examples 01:" : [
"	echo(true, \" / \", type(true));        // Boolean true",
"	echo(True, \" / \", type(True));        // This is a string value (T is upper case.)",
"	echo(5 > 6, \" / \", type(5 > 6));      // Boolean false ",
"	echo(true & false);                   // Logical AND",
"	echo(true | false);                   // Logical OR"
 ]
	,

    "Output 01:":		"automatic"

},





"Voids" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types voids" ],
    "Keywords":			[ "void", "voids"  ],
"Description 01:Voids" : [
"",
"	The void data type typically indicates an invalid value returned from a function or a variable with undefined values.",
"	The following table lists few approaches how to obtain a void value intentionally.",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Method	 		| Description",
"	__null(__)    		| Call the null function",
"	Undefined array member	| Create an array implicity, e.g. by assigning a[1] = 1;  Read-accessing a[0] will return <i>void</i>",
"	Reading JSON data	| Intermediate nodes carry no values and are <i>void</i>.  End nodes with value 'null' are also interpreted as <i>void</i>.",
"	===",
"",
"	Please try to use void values as little as possible in your B4P programs."
 ]
	,

"Examples 01:" : [
"	a[1] = 1;",
"	echo( a[0] );",
"	echo( null() );",
"	echo( type(null()) );"
 ]
	,

    "Output 01:":		"automatic"

},



"Parameter sets" :
 {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets" ],
    "Keywords":			[ "parameter set", "parameter sets"  ],
"Description 01:Parameter Sets" : [
"",
"	Parameter sets is be considered as the sixth Basic Data Type which allows to hold 0, 1 or more elements.",
"	Each element is again a value of any of the six Data Types, including nested parameter sets.",
"",
"	In the program code, sets can be defined with any number of values or expressions inside braces <b>{ }</b> and separated with commas. Nested parameter sets are supported.",
"",
"	=== 250, 750, noframe_1stcolbold, noheader",
"	Number of elements		| At least zero (empty set)",
"	Empty sets			| Empty parameter sets { } are not the same as blank or void values",
"	Mixed data types		| A parameter set may contain data of different types, e.g. { 1, Abc, true, date(31.12.2020) }",
"	Nesting				| Parameter sets support nesting, e.g. { { 1, 2 }, { 3, 4 }, 5 }",
"	Nested empty sets		| Nested empty sets are allowed.  E.g. { {} } is not the same as { } or { { {} } }.",
"	Sequence of elements		| The sequence of elements is preserved, i.e. {a,b,c,d} and {d,c,b,a} are different.<br>Comparing them with '=' returns true (ordering does not care), but with '==' returns false (elements must be in same order).",
"	Mulitple identical elements 	| Parameter sets may contain multiple identical elements, e.g. { a, b, a, a, c, c }.  You can use the __trim(__) function to eliminate duplicates.",
"	Embedding			| A paramter set can be embedded into another parameter set, e.g. a[] = {1,2}; b[] = {a[]};",
"	__Indexing Parameter Sets__	| One element can be extracted by indexing.  1st element begins wtih 0. Example:  a[] = {a,b,c,d}{1}; Here, the 1st element is accessed, a[] gets value 'b'.",
"	__Negative indexing__		| Negative indexing supported here. a[] = { a,b,c,d,e }{-2} assigns 'd' to a[].",
"	__Slicing Parameter Sets__	| Specify multiple index values and ranges to extract subsets.",
"	Arithmetics			| A broad range of arithmetic operators are available to manipulate parameter sets, for example intersections and unions.",
"	===	"
 ]
	,

"Examples 01:" : [
"	a[] = { 1, a, 2, {b,c}, true, date(today) };",
"	echo( a[], \" / \", type(a[]) );",
"	echo( \"First element: \", a[]{0}, \" and last element: \", a[]{1} );"
 ]
	,

    "Output 01:":		"automatic"

  },


  "Indexing Parameter Sets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets indexing" ],
    "Keywords":			[ "Indexing parameter sets", "Indexing elements", "Length of parameter sets" ],
"Description 01:Parameter Sets - Simple Indexing" : [
"",
"	<i>Simple indexing</i> is used to retrieve single elements from the parameter set.  Indexing begins with 0 which refers to the 1st",
"	parameter set element.  The index value is specified in braces and shall not be confused with a parameter set as such.",
"	<i>Cascaded indexing</i> for retrieving elements from nested parameter sets is also supported. ",
"",
"	<br><br>",
"	Following rules apply to the indexing parameter sets:",
"	* The index must always be a numeric value.",
"	* Specifying just braces {} without an index will retrieve number of elements (nested elements count 1) of the parameter set.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.",
"	* __Negative indexing__ is supported. -1 refers to the last element. -2, -3, etc. refer to the previous elements.",
"	* Blanks are returned when accessing with index values which lie out of bounds.  Example: <b>Hello{5}</b> returns a blank value.",
"	* Updating individual characters on the left hand side of assignments not possible.  Exmaple: <b>a[]{3} = 123;</b>",
"",
"" ],
"Examples 01:" : [
"	echo( { a,b,c,d      } {0} );                     // Access the 1st element",
"	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]",
"	echo( \"Last element            : \", a[]{-1} );    // Retrieve the last element",
"	echo( \"Next element to the left: \", a[]{-2} );    // Retrieve the 2nd last element",
"	echo( \"Cascaded indexing       : \", a[]{3}{2} );  // retrieve 3rd element, and inside the subset the 2nd element (cascaded indexing)",
"	echo( \"# elements in           : \", a[]{} );      // Number of elements",
"	echo( \"# elements in nested set: \", a[]{-2}{} );  // Number of elements in subset (cascaded indexing)",
"	echo( \"Out of bounds case      : \", a[]{99} );    // Empty is returned if index lies out of bounds"
 ]
	,

    "Output 01:":		"automatic",

"Description 02:Parameter Sets - Simple Indexing in Write Accesses" : [
"",
"	<i>Simple indexing</i> also works with write accesses in __assignments__.  The target variable must contain an existing parameter set.  Values of other types",
"	are not allowed and will cause error messages.  Any data type may be assigned. For example, a numeric element can be replaced by a string or parameter set",
"	(a subset).  Using multiple indexes as allowed for read accesses is not possible (e.g. [a]{1,2} = {A,B};).",
"" ],
"Examples 02:" : [
"	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]",
"	a[]{1} = B;",
"	a[]{-1} = {G,H,I};",
"	echo( \"Modified value in a[] = \", a[] );"
 ]
	,

    "Output 02:":		"automatic"

  },




  "Slicing Parameter Sets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Slicing Parameter sets" ],


"Description 01:Parameter Sets - Extracting Subsets" : [
"",
"	Instead of specifying single index values to retrieve single elements, subsets can be retrieved by listing muliple values and/or ranges.",
"	In some other programming langauges, this feature is known as slicing.",
"	The range operator '..' is available to specify a range.  If no value prcedes the range operator, than 0 is assumed.  If no value follows",
"	the range operator, then the last character is assumed.  The range operator '..' is available to specify a range.  ",
"	The result will always be returned in a parameter set, even if the subset specified results in just one element, e.g. <b>{a,b,c}{1..1}</b> returns <b>{b}</b> and not <b>b</b>.",
"	Negative indexing is supported.",
"" ],
"Examples 01:" : [
"	a[] = { a,b,c, {d,e,f}, g };                          // Assign a parameter set to variable a[]",
"	echo( \"4 elements              : \", a[]{3,1,2,1} );   // Retrieves 4 elements (2 of them repeating here)",
"	echo( \"2nd to 2nd last         : \", a[]{1..3} );      // Use a range",
"	echo( \"2nd to 2nd last         : \", a[]{1..-2} );     // Same output",
"	echo( \"2nd to 2nd last         : \", a[]{-4..3} );     // Same output (-4 = 4th last or 2nd element)",
"	echo( \"1st element             : \", a[]{0..0} );      // Return 1st element, but in a subset and not alone",
"	echo( \"Combinations            : \", a[]{2..4,1} );    // Combination of simple values and ranges",
"	echo( \"First three elements    : \", a[]{..2} );       // Returns first 3 elements",
"	echo( \"Last three elements     : \", a[]{-3..} );      // Returns last 3 elements (negative indexing used here)",
"	echo( \"Entire parameter set    : \", a[]{..} );        // Returns entire parameter set",
"	echo( \"2nd element as subset   : \", a[]{1..1} );      // Must specify 1..1 (a range) to distinguish from __parameter set indexing__."
 ]
	,

    "Output 01:":		"automatic"
  },



  "Parameter sets - Value Ranges" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value ranges" ],
    "Keywords":			[ "parameter set value ranges"],
"Description 01:Parameter Sets - Simple Values" : [
"",
"	Simple parameter set values are 0, 1 or more values of any types, regardless if values, variables, expressions or subsets, embedded inside braces",
"	and separated with commas. Example:  {} (empty set),  { 1, a, {} } (contains 2 values and nested a empty set), and { {1,2},{3,4} } describing a",
"	nested parameter set which looks like a 2-dimensional matrix and can be used as such."
 ]
	,


"Description 02:Parameter Sets - Value Ranges (Numerals)" : [
"",
" 	Simple parameter sets become cumbersome when describing a sequence of incrementing values, e.g. { 1,2,3,4,5,6,7,8,9,10 }, especially much bigger",
"	ones.  One way to do this is with a loop, but is cumbersome.  Alternatively, value ranges can be specified.  A range consists of a starting value",
"	and an ending value with '..' inbetween, e.g. { 1..10 }.  The increment is 1, unless a <i>second value</i> in the middle is specified, e.g. { 2..4..10 }",
"	to describe the 2nd value.  It may be bigger (for counting up), smaller (for counting down), but not equal to the 1st value (error message occurs).",
"",
"	<br><br>",
"	A mixup of numerals and other types inside a range specification is invalid."
 ]
	,

"Examples 02:" : [
"	print(\"Start with the classic way : \");",
"	a[] = {};",
"	for (i[]=1, i[]<=10, i[]++) a[] += {i[]};",
"	echo(a[]);",
"",
"	echo(\"And the easy way           : \", {1 .. 10});",
"	echo(\"Steps of 2.5               : \", {1 .. 3.5 .. 10});",
"	echo(\"Steps of -1: Right way     : \", {10 .. 9 .. 1});",
"	echo(\"Steps of -1: Wrong way     : \", {10 .. 1}); // Returns empty set",
"	echo(\"Combination of 2 ranges    : \", {2..4..10, 20..40..100} );",
"	echo(\"Build a 3x3 matrix         : \", {{11..13},{21..23},{31..33}} );"
 ]
	,

    "Output 02:":		"automatic",


"Description 03:Parameter Sets - Value Ranges (Strings)" : [
"",
"	Value ranges are also supported for strings.  The string values may consist of one or more characters.  The intial value, optionally <i>second value</i>",
"	and final values must contain strings with same number of characters and <u>only one character in the same position changing</u>.",
"	An exception applies if the string contains numeric digits.  Here, up to 8 digits are allowed.  This allows counting from smaller numbers (fewer digits)",
"	to larger numbers (more digits).  Minus signs are not considered as part of numbers. A mixup of strings and other types inside a range specification is invalid.",
"	",
"	<br>",
"	Following exampls are invalid: ",
"	<br>{1 .. '5'}  (Type mixup)",
"	<br>{Option A .. option C } (1st and last characters are different)",
"	<br>{Option A .. Option   } (final value has fewer characters),",
"	<br>{Option A .. Option AA} fails because final value has more characters, and",
"	<br>{Point -3 .. Point 3  } fails because minus sign is an extra character.",
"	<br>Valid examples: See below",
"" ],
"Examples 03:" : [
"	echo(\"Start simple               : \", {a..z});",
"	echo(\"Every 2nd letter           : \", {a..c..z});",
"	echo(\"1 letter in string         : \", {'Article A:' .. 'Article F:'} );",
"	echo(\"Combination of 2 ranges    : \", {2..4..10, 'Article A:' .. 'Article F:'} );",
"	echo(\"Numbers in strings         : \", {'Chapter 9:' .. 'Chapter 12:'} );",
"	echo(\"Numbers in strings         : \", {'Chapter 09:' .. 'Chapter 12:'} );"
 ]
	,

    "Output 03:":		"automatic",


"Description 04:Parameter Sets - Value Ranges (Dates)" : [
"",
"	Unique to Beyodn4P, Value ranges are also supported for dates and times.  If the value consists of",
"	both date and time value, then the range may only be applied either on the date (with time kept",
"	unchanged) or time (with date kept unchanged).",
"",
"	<br><br>",
"	For dates, the default increment is +1 day.  For times, the default increment is +1 hour.  Use the <second value>",
"	to influence the interval.  Both positive and negative intervals are allowed.  Time counting must not pass",
"	across midnights to cover additional days.",
"",
"" ],
"Examples 04:" : [
"	echo(\"Dates                       : \", { date(30.03.2016) .. date(02.04.2016) });",
"	echo(\"Dates, 3 day intervals      : \", { date(01.04.2016) .. date(04.04.2016) .. date(10.04.2016) });",
"	echo(\"Today to yesterday - bad    : \", { date(today) .. date(today)-1 });",
"	echo(\"Today to yesterday - OK     : \", { date(today) .. date(today)-1 .. date(today)-1 });",
"	echo(\"Times, 1 hour intervals     : \", { time(\"12:15:00\")..time(\"15:15:00\") });",
"	echo(\"Times, 5 minute intervals   : \", { time(\"12:15:00\")..time(\"12:20:00\")..time(\"12:30:00\") });",
"	echo(\"30 seconds back - bad       : \", { time(now) .. time(now)-30/(24*60*60) });",
"	echo(\"30 seconds back, 10s interv.: \", { time(now) .. time(now)-10/(24*60*60) .. time(now)-30/(24*60*60) });",
"	echo(\"Changing dates              : \", { date(\"05.06.2016 10:00:00\")..date(\"08.06.2016 10:00:00\") });",
"	echo(\"Changing times, seconds     : \", { date(\"05.06.2016 10:00:00\")..date(\"05.06.2016 10:00:01\")..date(\"05.06.2016 10:00:03\") });",
"",
""
 ]
	,

    "Output 04:":		"automatic"

  },


  "Parameter sets - Value Repetitions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value repetitions" ],
    "Keywords":			[ "parameter set value repetitions", "value repetition", "value repetitions"],
"Description 01:Parameter Sets - Value Repetitions" : [
"",
"	Large parameter sets with same values repeating can be built up with value repetitions.  Repetitions are specified by numeric values following",
"	a colon symbol and following the paramter set element to repeat.  Multiple repetitions may be specified inside a parameter set value.",
"" ],
"Examples 01:" : [
"",
"	echo({ 5:0 } );              // Generates { 0,0,0,0,0 }",
"	echo({ 2:3,3:2 } );          // Generates { 3,3,2,2,2 }",
"	echo({ 0.9:A } );            // Generates { A }  Rounded up",
"	echo({ 0.1:A } );            // Generates { }  Rounded down",
"	echo({ 2:Hello } );          // Generates { Hello,Hello}",
"	echo({ 0:Hello } );          // Generates { }",
"	echo({ -2:Hello } );         // Generates { }",
"	echo({ 3:{a,b} } );          // Generates { {a,b},{a,b},{a,b} }",
"	echo({ 2:{3:1} } );          // Generates { {1,1,1},{1,1,1} }",
"	echo({ 2:{1..4} } );          // Generates { {1,2,3,4},{1,2,3,4} }"
 ]
	,

    "Output 01:":		"automatic"

},




"Blocks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Blocks",
"Description 01:Introduction" : [
"",
"	In B4P, the <b>Superstructure</b> defines the different kinds of __statements__ and how they are put together and how they are integrated in <b>blocks</b>",
"	in order to write B4P programs, and, as advanced users, your own function libraries.",
"" ],
"Description 02:Blocks and Statements" : [
"",
"	<br/><img src=\"Images/LAN_Top_Level.png\" alt=\"B4P Top Level\"><br/>",
"",
"	You will recognize that this language structure has overall similarities to C/C++ and Java.",
"	* All B4P programs consist of 1 or more __Statements__ or <b>Blocks</b> in any order.",
"	* All <b>Blocks</b> are encapsulated with braces <b>{</b> ... <b>}</b> .",
"	* Nested blocks are allowed.",
"	* All __statements__ are delimited with semicolons <b>;</b> .",
""
 ]
	
},



"Statements" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Statements",
    "Keywords":			[ "Statement" ],
"Description 01:Introduction" : [
"",
"	B4P supporst 5 different variants of statements described below.",
"",
"	<br><br><img src=\"Images/LAN_Statements.png\" alt=\"B4P Statements\"><br/>",
"",
"* __Procedure Calls__ are actually B4P functions called without making use of the return values they may provide.  Several functions allow  	  them to be called as procedure calls, others do not.",
"* __Control Flow Procedure Calls__ are a variant of procedure calls which decide whether and how frequently the following statement or block will be executed.  	  Examples are: __if__, __while__, __switch__ / __case__, __break__, etc., and several more specific ones like __for all table rows__.",
"	* Assignments consist of a __LHS expression__ followed by the assignment symbol <b>=</b> (equal sign) and concluded with a __RHS expression__.",
"* __Standalone Ad-hoc Operations__ are __left-hand expressions__ with __ad-hoc operators__ specied before (prefix) or after (postfix) them in order to apply  	  simple operations such as incrementing, decrementing and scaling.",
"	* __Transactions__ are more complex variants than assignments where the whole variable contents including member and sub-member variables or table rows are involved.",
"",
"	__LHS Expressions__ refer to expresions on the <i>Left-Hand Side</i> of the assignment symbol ( <b>=</b> ), intending to describe a destination variable or a destination location in a table.<br>",
"	__RHS Expressions__ refer to expresions on the <i>Right-Hand Side</i> of the assignment symbol ( <b>=</b> ), intending is to retrive, caluculate and/or return values.",
"",
""
 ]
	
},








"Directories and Files" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Directory and files" ],
    "Keywords":			[ "directories", "files"],
"Description 01:Introduction" : [
"",
"	Special care has been taken with accessing directories and files as well as specifying directory and",
"	file names in order to achieve an optimum cross-platform portability, able to run on Windows, UNIX/Linux and MacOS platforms.",
"	They cover issues as little as directory separator symbols in path names, using the right line break character sequences,",
"	chosen character sets and country-specific differences in files considered highly standardized and generic which they are not.",
"",
"	<br><br>",
"	Following aspects are described next:",
"",
"	* Path and File Names",
"	* Loading files - character sets",
"	* Saving files - character sets",
"	* CSV file format - local differences",
""
 ]
	
},



"Path and File Names" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "path names" ],
    "Keywords":			[ "path name", "path names", "file name", "file names" ],
"Description 01:Introduction to portable Path Names" : [
"",
"	The different operating systems (Windows, Linux, MacOS) use different conventions to specify drives, directory path names",
"	and file names.  Directory separators (slash or backslash) is one example.  FUll case sensitivity of path and file names in LINUX and MACOS",
"	environments is another example. B4P supports various measures in order to make path and file naming more portable for the applications.",
"",
"	* Both directory separator symbols \"/\" (UNIX/ / LINUX style) and \"\\\" (WINDOWS style) are supported.  They will be changed to the right symbol automatically before accessing directories and files in the present operating system.",
"	* Returned directory and file names, e.g. in directory listings, __search files(__) function, etc. will use the directory separator native to the operating system (e.g. \"/\" under LINUX).",
"	* Under LINUX and MACOS, the file names are fully case sensitive.",
"	* Under Windows, case sensitivity only applies to creating new directory and file names.",
"	* Please avoid using following special symbols in file names:",
"	** : Colon - Used to specify drives in Windows environments",
"	** \", ' quotation marks - Not valid as part of file name.  Quotation marks may be needed at command level to specify path and file names containing spaces, but not to be done in B4P code.",
"	** *, ? wildcard symbols specific for directory and file names",
"	** , comma - B4P uses commas to specify multiple file names, e.g. in the __directory listing(__) function",
"	** & ampersand - Typically a control symbol for operating system command shells",
"	** &lt;, &gt;, | - Rediction and piping",
"	** /, \\ - Directory separators",
"	* Further OS-specific restrictions on path and file names may apply",
"	* __Wildcard symbols__ are resolved by B4P and not by the operating system.",
""
 ]
	

},




"Loading Files - Character sets" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "loading files" ],
"Description 01:Introduction" : [
"",
"	Beyond4P checks all files (programs and data) opened for <i>Byte Order Marks</i> (BOM) at the beginning of the file.  The BOM is a UNICODE character and used to differentiate between",
"	UTF-16 big endian, UTF-16 little endian and UTF-8 file formats.  All formats are supported, whereas UTF-8 is by far the most common UNICODE data storage format",
"	as it is compatible to various legacy systems supporing 8-byte character sets only.",
"",
"	<br><br>",
"	<b>Data transparency:</b> The byte order marks will be recognized and then discarded, i.e. not passed on as special characters to the application.",
"	<br><br>",
"",
"	How BOM's are checked in files loaded or opened:",
"	* If the 2 byte sequence FE FF (hexadecimal) is found, then the text file is in UTF-16 big endian format. ",
"	* If the 2 byte sequence FF FE (hexadecimal) is found, then the text file is in UTF-16 little endian format.",
"	* If the 3 byte sequence EF BB BF (hexadecimal) is found, then the text file is in UTF-8 format.",
"	* Some files contain multiple identical BOMs. They have been sighted in export files from relational databases.",
"",
"	In case no BOM is found, following checks will be applied throughout the first ca. 4000 – 8000 bytes in the file (and not the entire file for performance reasons):",
"	* NULL-characters / 00 (hexadecimal) in even numbered positions (first byte in file is position 0): File is UTF-16, big endian format.  <br>Example: 00 31   00 30   00 20   20 AC   00 0D   00 0A  (10 € followed by new line sequence CR+LF). <br>Even for <i>difficult</i> contents such as pure Chinese text, the UTF-16 will be identified from space symbols (00 20), numeric digits and CR+LF symbols.",
"	* NULL-characters / 00 (hexadecimal) in odd numbered positions: File is UTF-16, little endian format.  <br>Example: 31 00   30 00   20 00   AC 20   0D 00   0A 00  (10 € followed by new line sequence CR+LF)",
"",
"	If the criteria above do not apply, then the file will be checked for typical UTF-8 patterns in the first 4000-8000 bytes, provided the file contains non-ANSI characters.",
"",
"	* Presence of non-ANSI symbols which make up typical UTF-8 byte patterns.  These are 2, 3 or 4 symbols with specific binary patterns.",
"	* Presence of non-ANSI symbols which do not match with UTF-8 byte patterns, e.g. simple 8-bit text in a ISO 8859-1 or WIN 1252 format with single non-ANSI characters",
"	* If the 1st criteria applies, but the 2nd does not, then the file is in UTF-8 format.",
"	* If the 2nd criteria applies, but the 1st does not, then the assumption will be non-UNICODE file format WIN 1252 which is the West European 8-bit character set.",
"",
"	If the input file is in HTML format, then the \"charset=…\" commands will be checked accordingly.  JSON files are assumed in UTF-8 format by default.",
"	Ambiguities may still apply in the following case:",
"	* 1 line of UTF-16 text containing foreign characters only and new line sequence, e.g. one sentence in Greek, Cyrillic or Chinese (without digits, spaces, new lines).",
"	* 8-bit text file without non-ANSI character in the first 4000-8000 bytes (lots of English text in a huge file, a foreign word such as Café follows in a concluding sentence at the end of the file.",
"",
"	Ambiguities need to be resolved with the system variable <b>local settings [ input file character set ]</b>.",
"	As long no clear character format has been identified (e.g. UTF-16 or UTF-8), then the local settings will be referenced.  The initial default value is win1252 (American and West European character set).",
"",
"	<br><br>",
"	Supported character sets summarized<br>",
"",
"	=== 200, 300, 500",
"	Character Set | Format | Description",
"	ANSI 		| 8 bits, 7 of them used 	| Traditional ANSI characters.  All non-ANSI characters, including foreign characters, the Euro symbol, etc. are converted into question marks. <br>Examples: E  e",
"	iso8859-1	| 8 bits			| ANSI characters plus West European character set in the range between ex A0 (160) and hex FF (255). <br> This format does not support Windows proprietary character range between hex 80 (128) and hex 9F (159) which affects the Euro symbol (€). <br>Examples: E  e  É  é",
"	win1252		| 8 bits, <br> default setting for Windows | Same as above, but includes Windows proprietary character range so additional punctuation symbols as well as the Euro symbol (€) will be handled correctly. <br>Examples: E  e  É  é  €",
"	utf-8		| 8 bits			| UNICODE format.  Characters can take 1, 2, 3 or 4 byes.<br>Examples: E  e  É  é  €  Ə  ə  中国  𐌄 (also applicable in next rows below)",
"	utf-16		|16 bits (little endian)	| UNICODE format. Every character contains precisely 2 bytes, starting with the least significant byte.  Surrogate pairs are used for characters outside Basic Multilingual Plane.",
"	utf-16 big endian | 16 bits (big endian)	| UNICODE format like above, but the two bytes are swapped. Surrogate pairs are used for characters outside Basic Multilingual Plane.",
"	===",
"",
"	Note: Microsoft Excel does not understand utf-16 big endian, but understands the remaining UNICODE formats.  Use this format only if the recipient (e.g. a UNIX server) operates on big endian format only.",
"",
"	<br><br>",
"	JSON files are always loaded assuming that UTF-8 format is used."
 ]
	

},



"Saving Files - Character sets" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "saving files" ],
"Description 01:Introduction" : [
"",
"	The chosen file format either depends on the format specified in a parameter in the __table save(__) function call, ",
"	or it refers to the default setting stored in the __system variable__ <b>local settings [ output file character set ]</b>. If not modified by the user, ",
"	this file contains the value UTF-8. Files saved in UNICODE-format (UTF-8 and UTF-16 formats) will always begin start with corresponding Byte Order Marks.",
"	This allows other applications to recognize and interpret the contents correctly.  This does effectively apply to Excel when reading comma or tab separated",
"	file formats (.csv format).<br>",
"	<br>Text files under Windows contain \"carriage return + line feed\" line breaks. ",
"	<br>Text files under LINUX contain \"line feed\" line breaks.",
"	<br>You can change the setting with by setting system variable <b>runtime settings [ crlf ]</b> to true (enabled) or false (disabled)",
"",
"	<br><br>",
"	JSON files are always saved in UTF-8 format.",
""
 ]
	

},



"CSV File Format" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "CSV" ],
    "Keywords":			[ "CSV" ],
"Description 01:CSV File Format" : [
"",
"	The CSV (Comma Separated Values) is a simple structured text file format existing since the nostalgic 1970's along with the introduction of FORTRAN 77 and is supported by",
"	Beyond4P, along with HTML/MHTML, XML and JSON.",
"",
"	<br><br>",
"	THe biggest drawback is the ignorance towards country settings.  CSV generated from Excel files use symbols such as",
"	* List separator (could be commas, semicolons, tab stops, etc.)",
"	* Decimal point (as used in US, GB, CH) or decimal comma (as used in DE)",
"	* Thousand separator (various symbols and blanks exist)",
"",
"	The files can be loaded with and without specifying the list separators.  If no list separator is specified, then Beyond4P tries to automatically detect the",
"	applicable separators by checking for commas, semicolons and tabs.",
"",
"	Regarding decimal symbols, the standard function __table load(__) will check for numerals in text and CSV files (but not HMTL files and likes) with decimal ",
"	commas and convert them to decimal points.  The new function __table load unchanged(__) will not do the conversion.  You may need this if you need to",
"	discriminate between actual numbers and other numeric data separated with commas but not considered as regular numeric data. ",
"	<br/>Consider using the __clean num(__)",
"	function to prepare numbers containing commas (and possibly more, such as thousand separators, currency symbols, etc.).",
"	<br/>Consider using __table save with local decimal separator(__) to save CSV files using the decimal separator symbol applicable with your country settings (comma or point).",
"	<br/>Consider using __table save with decimal comma(__) to make sure all numbers use decimal commas.",
"	<br>The original function __table save(__) saves numbers with decimal points, regardless of the applicable country settings.",
"	",
"	<br><br>",
"",
"	Notice on files with fixed column widths: The best is to load these files with \"new line\" as separator symbol so the table contains one item per row.",
"	Then create additional columns with dedicated data items using the __left(__) / __middle(__) / __right(__) functions where you can specify numeric column positions, ",
"	and remove redundant white space symbos with the __trim(__) function.",
"	"
 ]
	
},






"Miscellaneous Features" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Miscellaneous Features" ],
"Description 01:Introduction" : [
"",
"	Miscellaneous features descrbed next include:",
"",
"	* __Negative Indexing__",
"	* __Locales__",
"	* Setting __verbose levels__ to facilitate monitoring and debugging program execution, and ",
"	"
 ]
	
},




"Negative Indexing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "negative indexing" ],
"Description 01:Introduction" : [
"",
"	Python, a common programming language, supports negative indexing for arrays.  B4P applies negative indexing on a broader range.  Typically, the -1",
"	refers to the last element, with -2, -3, etc. referring to the elements further up (or leftward).  At present, negative indexing is used in the following:",
"",
"	* Arrays (-1 = last element)",
"	* Table row numbers (-1 = last row)",
"	* Table column number (-1 = last column.  Few exceptions exists where -1 refers to a vacant column after the last one, and is documented so if it applies)",
"	* Parameter set elements (-1 = last parameter set element)",
"	* Function parameters (in selected functions where documented)",
"",
"	Negative numbers must be at least big enough in order to access the first element / row / column.  Going further will result in exceptions (error messages).",
""
 ]
	,
"Examples 01:Programming example" : [
"	array( a[], { ha, he, hi, ho, hu } );",
"	structure( b[], { reptile, mammal, bird, fish }, { turtle, deer, swallow, dorade } );",
"	c[] = { Hah, Heh, Hih, Hoh, Huh };",
"",
"	echo( a[-2], \"  \", a[-1] ); // ho, hu",
"	echo( b[-2], \"  \", b[-1] ); // deer, turtle (last two acc. to alphabetic order of structure members)",
"	echo( c[]{-2}, \"  \", c[]{-1} ); // Hoh, Huh",
"",
"	echo(new line, \"Example with tables:\");",
"	table initialize( t, { { Last Name, First Name, Street, City, Country }, ",
"	    { Adams, Abel, Main St, S. Francisco, USA }, { Billson, Bill, South St, London, UK } } );",
"",
"	echo( [t:-2,-1] ); // Last row, 2nd last column.  It's 'London'.",
"	echo( [t:-1,-1] ); // Last row, last column.  It's 'UK'.	"
 ]
	,
    "Output 01:Outcome": "automatic"
},




"Locales" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Locales" ],
    "Keywords":			[ "list of Locales", "locale" ],
"Description 01:Introduction" : [
"",
"	Beyond4P is able to support different locales (regional and language specific settings) which are managed in ",
"	a file called \"List of locales.csv\".  This file comes along with the installation package and will be referenced automatically",
"	whenever locale information is needed to carry out a particular function, e.g. converting a __date__ to a __string__.",
"",
"	<br><br>",
"	The locale settings influence information processing such the following described below:",
"",
"	* Region-specific number formats (choice of decimal and thousand separator symbols)",
"	* Date formats (e.g. MM/DD/YYYY or DD/MM/YYYY as default)",
"	* Weekday and month names in different languages",
"	* Using the right list separator for loading and saving CSV files for interaction with Excel (some countries-specific installations use comma, others use semicolon)",
"	* Currency names and symbols",
""
 ]
	,
"Description 02:Specifying locales" : [
"	Locales typical comprise of a combination of abbreviated language name followed by country name with an underscore symbol inbetween, e.g. \"de_CH\" for",
"	<b>German language, Switzerland</b>.  You may also specifc country or language names only, however they create ambiguitiess with countries where more than",
"	one language is spoken (or better: supported, e.g. Canada), and languages which are spoken in several countries (e.g. English).",
"",
"	<br><br>",
"	For all functions asking for <i>locale</i> parameters, you can specify the locale, the language or the country.  No case sensitvity applies, meaning that",
"	both \"en_US\" and \"EN_us\" are accepted, as well as \"USA\" and \"usa\".  If only the language or the country is chosen, then the first match applies.",
"	Therefore, make it a habit to specify locales precisely using the pair of abbreviations.",
"",
"	<br><br>",
"	Special values:",
"	* none = Apply no locale specific context",
"	* local = Apply presently appliable settings, either set during program installation, or modified with __set locale(__) function call.",
"",
""
 ]
	,
"Description 03:Functions asking for locales" : [
"",
"	* __str(__), __soft(__): 2nd function parameter",
"	* __set locale(__): 1st function parameter (must be a locale value, not country or language name alone=)",
""
 ]
	,
"Description 04:Supported locales" : [
"",
"	=== 100, 100, 100, 700",
"	Locale		| Language	| Country		| Explanation",
"	none		| none		| none			| Suppresses thousand separator, date is in universally recognized YYYY-MM-DD format",
"	en_US		| English	| USA			| Decimal point, 1000-comma, M/D/YYYY",
"	en_GB		| English	| Great Britain		| Decimal point, 1000-comma, DD/MM/YYYY",
"	en_UK		| English	| Great Britain		| Decimal point, 1000-comma, DD/MM/YYYY (Same as en_GB)",
"	en_CA		| English	| Canada		| Decimal point, 1000-comma, DD/MM/YYYY",
"	en_DE		| English	| Germany		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_CH		| English	| Switzerland		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_AT		| English	| Austria		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_FR		| English	| France		| Decimal comma, 1000-space, DD/MM/YYYY, weekday and month names are in English",
"	en_SE		| English	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD, weekday and month names are in English",
"	en_IN		| English	| India			| Decimal point, 1000-comma, D/M/YYYY, weekday and month names are in English, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89 ",
"	in_IN		| Indian	| India			| Decimal point, 1000-comma, D/M/YYYY, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89",
"	hi_IN		| Hindi		| India			| Decimal point, 1000-comma, D/M/YYYY, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89",
"	de_CH		| German	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY",
"	de_CH_HP	| German	| Switzerland		| For HP machines with other settings: Decimal point, 1000-separator with UNICODE 2817 (Typographical Right Single Quotation Mark)",
"	de_DE		| German	| Germany		| Decimal comma, 1000-point, YYYY-MM-DD",
"	de_AT		| German	| Austria		| Decimal comma, 1000-space, DD.MM.YYYY",
"	de_IT		| German	| Italy			| Decimal comma, 1000-point, DD.MM.YYYY, weekday and month names are in German",
"	fr_CA		| French	| Canada		| Decimal point, 1000-space, YYYY-MM-DD, weekday and month names are in French",
"	fr_FR		| French	| France		| Decimal comma, 1000-space, DD.MM.YYYY",
"	fr_CH		| French	| Switzerland		| Decimal comma, 1000-space, DD.MM.YYYY, weekday and month names are in French",
"	fr_BE		| French	| Belgium		| Decimal comma, 1000-space, D/MM/YYYY, weekday and month names are in French",
"	it_IT		| Italian	| Italy			| Decimal comma, 1000-point, DD/MM/YYYY",
"	it_CH		| Italian	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY, weekday and month names are in Italian",
"	it_CH_HP	| Italian	| Switzerland		| For HP machines with other settings: Decimal point, 1000-separator with UNICODE 2817 (Typographical Right Single Quotation Mark)",
"	es_ES		| Spanish	| Spain			| Decimal point, 1000-comma, D/MM/YYYY",
"	es_US		| Spanish	| USA			| Decimal point, 1000-comma, M/D/YYYY, weekday and month names are in Spanish",
"	sv_SE		| Swedish	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD",
"	nl_NL		| Dutch		| Netherlands		| Decimal comma, 1000-point, DD-MM-YYYY",
"	===",
""
 ]
	

},





"Verbose Levels" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "verbose" ],
    "Keywords":		[ "verbose levels" ],
"Description 01:Verbose Level Settings" : [
"",
"	The __system variable__ <b>runtime settings[verbose]</b> rules the amount of additional console output messages to be generated which",
"	could be helpful for developing the code and monitoring program execution.  The default verbose setting is <b>low</b>.  This setting can be changed anytime.",
"	In addition, if the B4P program is called from command line, the command line switches <b>-q</b> and <b>-w</b> will set this setting to <b>quiet</b>.",
"",
"	<br><br>",
"	Following verbose settings are supported:",
"",
"	<b>quiet</b><br>",
"	* No additional output is generated other than explicitly instructed in the B4P programs, e.g. using __echo(__) or __print(__).",
"	* However, error messages and important warning messages will definitely appear.",
"",
"	<b>low</b>: in addition to 'quiet' (default setting):",
"",
"	* Outputs progress info (percentage figures shown) if selected functions are processing big amount of data (e.g. large tables, large variable trees)",
"	* Short feedback messages on tables and variables loaded and saved (name of file, number of rows, etc.)",
"	* Info about standard B4P library files loaded (e.g. Support Library)",
"	* Some warnings, e.g. obsolete character sets found in input files",
"",
"	<b>medium</b>: in addition to 'low':",
"",
"	* Outputs the function names for the more sophisticated functions (e.g. __table consolidate(__) is included, but __abs(__) is not in order to avoid excessive messages) with first few paramters",
"	* Informs about the intermediate processing steps inside selected functions, e.g. __table load excel file(__)",
"",
"	<b>high</b>: in addition to 'medium':",
"",
"	* In addition to the function names printed out, all parameters provided will also be shown.",
"	* Further information on intermediate processing steps inside selected functions, e.g. __table merge(__)",
""
 ]
	
},




"Language Pitfalls" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Language pitfalls", "Hijacking parameters", "Hijack" ],
"Description 01:Introduction" : [
"",
"	The syntactic and semantic structure of B4P allow powerful features such as multiple-word naming for variables, functions and tables, as well as",
"	other benefits.  However, even experienced programmers trip into some pitfalls.  This section makes you aware of the most the most common pitfalls.",
"" ],
"Description 02:Brackets follow Variable Names" : [
"",
"	In regular programming languages, keywords are treated as reserved keywords or variables.  In B4P, they are __plain text__.  To use these strings",
"	to access variables, do not forget to add <b>[]</b> behind it.  No differnece applies if you access a subscript of an array or a structure, e.g. <b>a[10]</b>.",
"",
"" ],
"Description 03:For loops - Different from C/C++ and Java" : [
"",
"	In conventional languages, the three key statements inside for loops are separated by semicolons, e.g. <b>for( a = 1; a < 10; a++ )</b>.  To make things",
"	even wordse, multiple statements inside the three statements are separted by commas.",
"",
"	<br><br>",
"",
"	In B4P, __for(__) is treated like a __procedure call__ where parameters are separated with commas and not with semicolons.  This function accepts",
"	__code pieces__ as parameters.  Multiple statements inside a parameter are separated with semicolons. Right formulation: <b>for ( a[]=1, a[]<10, a[]++)</b>.",
"" ],
"Description 04:Comparison Operators Hijack Parameters" : [
"",
"	If you are comparing things using the <b>=</b> or <b>&lt;&gt;</b> symbols, note that these two __comparison operators__ (but not <b>==</b> and <b>!=</b>) can expect",
"	more than 1 operand.  For example, <b>a[] = 2,3,5,7,11 </b> is a legitimate expression to compare a[] with five different prime numbers.",
"",
"	<br><br>",
"",
"	With b[] = 6, the expression <b>a[] = { 1, b[]=5, 6, 7, 8 }</b> is actually resulting <b>{ 1, true }</b> because the comparison has hijacke the remaining",
"	parameters in the parameter set.  Add parenthese to avoid this, e.g. <b>a[] = { 1, (b[]=5), 6, 7, 8 }</b> which returns <b>{1, false, 6, 7, 8}</b>.",
"",
"" ],
"Description 05:Memory Effect on Table Headers" : [
"",
"	Please see the details on the __Memory Effect__	when referencing table heades with string values as they are normally",
"	checked once and the column number will be memorized for future use in order accelerate performance significantly.",
"",
"" ],
"Description 06:Forgetting colon before 'else'" : [
"",
"	Since B4P's unique cababilties of supporting multi-word identifiers for variables, tables and function names, one drawback needs to be covercome:",
"	Whenever single __statements__ follows __else__, then a colon is needed to keep them separated.  ",
"	* Correct: <b>... else : a[] = 1;</b>",
"	* Misleading: <b>... else a[] = 1;</b> Here, 1 is assigned to a variable called <b>else a</b>.",
"	* No issues with __blocks__: <b>... else { a[] = 1; } </b>",
"" ],
"Description 07:Error message refers to end of program unexpectedly" : [
"",
"	You may likely have forgotten a closing parenthesis after the function beginning with <b>table process ...</b> and other functions which expect",
"	a code piece in the last parameter.  With the missing closing parameter, B4P tries to include the entire remaining code into that function",
"	parameter.",
"",
"	<br><br>",
"	Action: Go back to that function call and ensure that all closing parentheses are included. Example:<br><br>",
"	<b>table process selected rows(table, [sine] = sin( [angle] );   </b> // Attention: One parenthesis is missing!<br>",
"	<b>table process selected rows(table, [sine] = sin( [angle] ) ); </b> // This one is OK",
""
 ]
	
}







,



"Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable", "Variables"  ],
"Description 01:Introduction to Variables" : [
"",
"	B4P provides a unique storage model for variables.  You can create simple variables like in any programming language, but also",
"	define structures with named variable members and values as well as arrays. You can build up large and sophisticated variable trees containing",
"	a free combination of different array and structures and work with them, without elaborate declarations needed.",
"",
"	<br/><br/><img src=\"Images/LAN_Variables.png\" alt=\"Variables\"><br/>",
""
 ]
	
},




"Variables - Naming Rules" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable names" ],
"Description 01:Overview" : [
"	Different than in common programming languages, variables in B4P may appear outlandish, but there is a reason for this:",
"",
"	=== 230, 10, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| ]",
"	- String value or expression	|	|",
"	  as variable name		|	|",
"	===",
"",
"	All variable names must follow with 2 bracket symbols <b>[ ]</b>.  For __simple variables__, no additional info needs to be spefified inside the",
"	brackets.  For for structures and arrays, member names or array index numbers need to be specified inside them.  This format provides the freedom",
"	to use any variable name, even with special symbols, and you can reference variables indirectly by picking up variable names from other variables",
"	or expressions.  And the contents inside the bracket allows for additional freedoms other programming languages do not provide.",
"",
"	<br><br>",
"",
"	Naming variables:",
"	* The naming rule applies to __base variables__ as well as __member variables__ in __structures__.",
"	* Table names must be of type __string__ and may take practially any contents, even spaces, special symbols and foreign and non-ANSI characters",
"	* Table names may be referenced as string constants (with or without single or double quotation marks) or as expressions returing strings (e.g. variables, string calculations, etc.)",
"	* Multiple consecutive spaces (and tabs) in names not put into quotation marks will collapse to 1 space.  Example: <b>Last&nbsp;&nbsp;&nbsp;Name</b> collapses to <b>Last Name</b>.",
"	* Quotation marks must be used for table name if they contain special symbols which confuse with B4P code syntax, e.g. hyphens misinterpreted as minus signs.",
"	* Names may or end with numbers, even with spaces inbetween, e.g. <b>4200 Pennsylvania Ave.</b>.",
"	* Blank variable names are also allowed, e.g. <b>''[]</b>.",
"	** <u>Attention:</u> Inside __structures__, blank member names will be referred as default __member variables__, e.g. <b>names[''] = All others;</b>.",
"	* Any __expression__ returning a string is allowed, e.g. <b>(\"Hel\" + \"lo\")[]</b> are allowed.",
"	* Indirect variable referencingis are upported,",
"	** In __LHS expressions__ where parentheses are mandatory.  Example:  <b>(a[])[] = 1;</b> where 1 is written to the variable name as stored in variable a[]. ",
"	** in __RHS expressions__ where parentheses are optional.  Example: <b> echo( a[][] );</b> meaning writing 1 to variable with name retrieved from variable a.",
"",
"	<br><br>",
"	Declaring variables:",
"	* No explicit variable declarations are required, unless you want to fully initialize arrays or structures using __dim(__), __array(__), __structure(__) or similar functions.",
"	* Variables are declared with their first assignment",
"	* If no __variable protections__ apply, the values of different (i.e. changing) __basic data types__ can be written.",
"",
"	See also next section on __variable scopes__ (global, regional, local and sysstem variables).",
""
 ]
    
},




"Creating Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Creating Variables" ],
"Description 01:Overview" : [
"	B4P requires no variable declarations.  Variables are created at their first __assignments__.  The __type__ may change dynamically.  It is allowed",
"	to assign a number, and later on a value of a different type.  This may however be restricted if __protection settings__ are applied.",
""
 ]
	,
"Examples 01:" : [
"	a[] = 123;",
"	a variable[] = 456;",
"	a   variable[] = 789; 	// redundant spaces collapse to 1 space if not put in quotation marks",
"	\"Total Value [€]\"[] = 98.95;",
"",
"	b[] = City;",
"	(b[])[] = Milano; // Write access: Don't forget the parentheses in LHS expressions",
"	",
"	echo( a[] );",
"	echo( a  variable[] );",
"	echo( \"Total Value [€]\"[] );",
"	echo( b[] ); // City",
"	echo( City[], ' and ', b[][] ); // 2 x Milano",
"",
"	b[] = 555.55; // Contained 'City' before.  Assign a number.",
"	echo( b[] ); // 555.55"
 ]
	,
    "Output 01:": "automatic"

},







"Variable Scopes" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable scopes" ],
"Description 01:Introduction" : [
"",
"	B4P variables are created (also known as <i>declared</i>) at their first assignments.  For example, <b>a[] = 1;</b> creates the variable",
"	<b>a</b> and assigns the numeric value 1 to it.  3 different variable scopes exist:",
"",
"	* __Global variables__: Visible througout entire program execution",
"	* __Local variables__: Visible within a local context such as code inside a user-defined procedure or function",
"	* __Regional variables__: Local variables made visible in the code of user-defined functions being called",
"	* __System variables__: Set of variables with system-related information and configuration settings you can change"
 ]
	
},

"Global Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Global variables" ],
"Description 01:Introduction" : [
"",
"	If the variable is created in the B4P program file started first, and this happens outside user-defined procedures and functions, then it will be",
"	a global variable.  Global variables are visible during the entire program execution, even while running user-defined functions or other B4P programs",
"	using the __start(__) or __include(__) function.",
"",
"	<br><br>",
"	Global variables can also be created inside __user-defined procedures__ and __user-defined functions__, as well as in B4P programs which have been started from other",
"	B4P programs using __start(__) or __include(__) functions if they are put into a code block following the __global(__) function.",
"",
"	<br><br>",
"	Global varibles will exist until the B4P program has ended or the variable has been been deleted explicityl with the function __delete(__).",
""
 ]
	,
"Examples 01:Defining global variables inside user functions:" : [
"	g[] = 4;",
"	define procedure( foo )",
"	{",
"	    global",
"	    {",
"	        a[] = 5;",
"	    }",
"	    global() b[] = 6; // Alternative formulation for 1 statement",
"	    echo( g[] ); // Global variables are always visible.",
"	}",
"",
"	foo;",
"	echo( a[] );",
"	echo( b[] );"
 ]
	,
    "Output 01:": "automatic",
    "See also": "global"
},



"Local Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Local variables" ],
"Description 01:Introduction" : [
"	Variables created inside __user-defined procedures__ and __user-defined functions__, as well as in B4P programs which have been started from other",
"	B4P programs using __start(__) or __include(__) functions, will be local variables.  Local variables are only visible locally, i.e.",
"	* Inside the presently running user-defined procedure or function",
"	* Inside a B4P program started with __start(__) or __include(__) from a different B4P program (or the same one because recursive calls are allowed).",
"	The local variables are not visible if a further procedure, function or B4P program is called.",
"",
"	<br><br>",
"	Variables may be deleted using the __delete(__) function.  Local variables will be deleted automatically when leaving (returning from) user-defined",
"	procedures and functions or called programs.",
""
 ]
	,
"Examples 01:Demonstrating global and local variables" : [
"	define procedure( foo, { { a, numeral } } )",
"	{",
"	    if (a[] < 4) // If a[] exists a local variable, then the local variable will be used preferentially.",
"	    {",
"	        foo( 4 ); // Recursive call",
"	        a[] = 5;",
"	        echo( a[] ); // Called 3rd: 5",
"	    }",
"",
"	    echo( a[] ); // Called 1st and 4th: 4",
"	    a[] = 3;",
"	    echo( a[] ); // Called 2nd and 5th: 3",
"	}",
"",
"	a[] = 1;",
"	foo( 2 );",
"	echo(a[] ); // Called 6th: 1 (Global variable)"
 ]
	,
    "Output 01:": "automatic",
    "See also": "local"
},



"Regional Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Regional variables" ],
"Description 01:Introduction" : [
"	Local variables created inside __user-defined procedures__ and __user-defined functions__, as well as in B4P programs can be made visible as regional",
"	variable in the code of user-defined functions called from here.  This approach is useful if you want to provide numerous variables to the function, ",
"	but don't want to create processing overhead for passing them as function parameters, nor using global variables as other side effects cannot be",
"	avoided.",
""
 ]
	,
"Examples 01:Demonstrating regional variables" : [
"	define procedure( zoo )",
"	{",
"	    echo('Zoo in ', city[], ' ', country[]);",
"	    city[] = Cambridge;                  // city and country are regional variables",
"	    country[] = United Kingdom;",
"	    echo( \"   Scope of country[] in 'zoo': \", scope(country[]), \" and city[]: \", scope( city[]) );",
"	}",
"",
"	define procedure( bar )",
"	{",
"	    country[] = USA;                     // country is a local variable, but city is not",
"	    echo('Bar in ', city[], ' ', country[]);",
"",
"	    regional  // Alternative formulation",
"	    {",
"	        zoo;",
"	    }",
"	    echo('Bar in ', city[], ' ', country[]); // Cambridge, UK",
"	    echo( \"   Scope of country[] in 'bar': \", scope(country[]), \" and city[]: \", scope( city[]) );",
"",
"	}",
"",
"	define procedure( foo )",
"	{",
"	    city[] = Boston;",
"	    regional() bar;",
"	    echo('Foo(d) in ', city[]); // Cambridge",
"	}",
"",
"	// Main program",
"	foo;"
 ]
	,
    "Output 01:": "automatic",
    "See also": "regional"
},




"System Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "system variables" ],
    "Keywords":			[ "system variable" ],
"Description 01:Introduction" : [
"	System variables are predefined variables which contain system-related information (e.g. <b>system info[user name]</b>) or configuration settings. e.g.",
"	<b>runtime settings[verbose]</b>.  For most system variables, __variable protections__ apply which may permit read-accesses, or impose restrictions",
"	on write accesses, e.g. limiting values to write to a selection of permitted values.  See the __list of system variables__ for existing system variables."
 ]
	,
"Examples 01:Demonstrating system and local variables" : [
"	define procedure( foo, { { system info, numeral } } )",
"	{",
"		// Local variable system info[] is not accessible here because system",
"		// variables are treated preferentially over local and global variables.",
"		echo( \"This is a \", scope( system info[]), \" variable.\" );",
"		echo( system info[operating system] );",
"	}",
"",
"	foo( 123 );"
 ]
	,
    "Output 01:": "automatic"
},


"List of System Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "list of system variables" ],
"Description 01:" : [
"",
"	=== 300, 100, 100, 500, bold_column_1",
"	Variable Name				| Variable Type	| Protection Settings	| Description",
"	command line arguments[]		| numeral	| read only		| Number of command line arguments, at least 1",
"	&nbsp;&nbsp;...[0]			| string	| full access		| 1st command line argument (typically the name of the B4P program file)",
"	&nbsp;&nbsp;...[1, 2, ...]		| string	| full access		| Additional command line arguments if available",
"	===",
"	<br>",
"	=== 300, 100, 100, 500, bold_column_1, noheader",
"	local settings[]			| void		| locked		| <b>Following variables refer to local settings</b>",
"	&nbsp;&nbsp;...[locale]			| string	| read only		| Configured locale as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[country name]		| string	| read only		| Configured country as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[language]		| string	| read only 		| Configured language as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[currency symbol]	| string	| limited access	| Currency symbol as configured in locale settings",
"	&nbsp;&nbsp;...[decimal separator]	| string	| limited access	| Typically 1 chracter, e.g. '.', ','",
"	&nbsp;&nbsp;...[thousand separator]	| string	| limited access	| Typically 1 chracter, e.g. ',', '.', ' ', \"'\"",
"	&nbsp;&nbsp;...[date format]		| string	| limited access	| E.g. \"DD.MM.YYYY\", \"MM/DD/YY\", etc.  See __date to string formatting parameters__.",
"	&nbsp;&nbsp;...[date format short]	| string	| limited access	| E.g. \"DMY\" or \"MDY\", used for resolving ambiguities in extracting dates from strings",
"	&nbsp;&nbsp;...[date separator]		| string	| limited access	| Typically 1 chracter, e.g. '.', '/', '-'",
"	&nbsp;&nbsp;...[time format]		| string	| limited access	| E.g. \"HH:II:SS\" Note the \"I\" for minute digits. See __date to string formatting parameters__.",
"	&nbsp;&nbsp;...[time separator]		| string	| limited access	| Typically 1 chracter, e.g. ':'",
"	&nbsp;&nbsp;...[list separator]		| string	| limited access	| Typically 1 chracter, e.g. ',', ';'. Used for CSV file format.  Excel uses different symbols around the world.",
"	===",
"	<br>",
"	=== 300, 100, 100, 500, bold_column_1, noheader",
"	libraries[]				| boolean	| prevent deleting	| This system variable is reserved for libraries to add structured info such as version and other important info.  It helps to unclutter the global variable space.",
"	===",
"	<br>",
"	=== 300, 100, 100, 500, bold_column_1, noheader",
"	runtime settings[]			| void		| locked		| <b>Following variables refer to run-time settings</b>",
"&nbsp;&nbsp;...[crlf]			| boolean	| limited access	| If true, then new-lines in files saved will be CR+LF, otherwise just line feed (LF).  For Linux and MACOS  											  releases, this variable is true, for Windows it is false.",
"	&nbsp;&nbsp;...[epsilon]		| numeral	| limited access	| __Epsilon__ as numeric tolerance value used for comparisons.  E.g. values below epsilon may be interpreted as zero.  Inital value is 1E-09.",
"	&nbsp;&nbsp;...[exit directly]		| boolean	| limited access	| Normally false, i.e. user must press [Enter] to finally leave the program and the console window may close.  If set to true, then B4P programs exist directly.",
"	&nbsp;&nbsp;...[search files ignore case]| boolean	| limited access	| Normally true under Windows and false under Linux/MACOS.  In Windows systems, finding files is not case sensitive.",
"&nbsp;&nbsp;...[input file character set]| string	| limited access	| Default character set assumed if text file are loaded, are not of UTF-16 type and have no byte order marks,  and too few special symbols were inside to recognize the files properly.  Presently, its <b>win-1252</b> for Windows and <b>utf-8</b> for Linux/MACOS systems.<br> 											  Following character sets are supported: <b>ansi, iso8859-1, win1252, utf-8, utf-16, utr-16 big endian</b>.",
"	&nbsp;&nbsp;...[output file character set]| string	| limited access	| Default character set assumed for saving files if no other format specified.  Presently it's <b>utf-8</b>.",
"	&nbsp;&nbsp;...[memorize table columns]	| boolean	| limited access	| See __memory effect__ regarding table header names begin memorized. Set to false to deactivate memorizing.",
"	&nbsp;&nbsp;...[prompt]			| string	| limited access	| Current prompt as used in the __interactive mode__.  Change it using the __prompt(__) function.",
"	&nbsp;&nbsp;...[registry my space]	| string	| limited access	| Obsolete.",
"	&nbsp;&nbsp;...[verbose]		| string	| limited access	| Verbose levels.  See __verbose__ for more details.",
"	&nbsp;&nbsp;...[found main]		| boolean	| read only		| true if B4P was started without a specified B4P program file, but has found 'main.b4p' in the current or starting directory.",
"	===",
"	<br>",
"	=== 300, 100, 100, 500, bold_column_1, noheader",
"	system info[]				| void		| locked		| <b>Following variables refer to operating-system specific characeristics</b>",
"	&nbsp;&nbsp;...[app data directory]	| string	| read only		| Local machine application data directory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config\"",
"	&nbsp;&nbsp;...[app data directory b4p]	| string	| read only		| Local machine application data directory with B4P subdirectory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[user app data directory]     | string	| read only		| User application data directory<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config\"",
"	&nbsp;&nbsp;...[user app data directory b4p] | string	| read only		| User application data directory with B4P subdirectory<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[bin directory]		| string	| read only		| Location of binary executable file<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[program directory]	| string	| read only		| Program directory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/usr/local/etc\"",
"	&nbsp;&nbsp;...[program directory b4p]	| string	| read only		| Program directory with B4P subdirectory<br>Windows: \"C:\\Program Files\\b4p\"<br>Linux/MACOS: \"/usr/local/etc/b4p\"",
"	&nbsp;&nbsp;...[temp directory]		| string	| read only		| Directory for temporary data storage:<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\\TEMP\"<br>Linux/MACOS: \"/tmp\"",
"	&nbsp;&nbsp;...[user directory]		| string	| read only		| User directory after login:<br>Windows: \"C:\\Users\\<i>user name</i>\\\"<br>Linux/MACOS: \"/home/<i>user name</i>\"",
"	&nbsp;&nbsp;...[directory separator]	| string	| read only		| Windows: '\\' and Linux/MACOS: '/'",
"	&nbsp;&nbsp;...[operating system]	| string	| read only		| e.g. \"Windows\", \"Linux\", \"MACOS\"",
"	&nbsp;&nbsp;...[operating system product] | string	| read only		| e.g. specific Windows OS product like \"Windows 10 Pro\" or Linux distribution name like \"Ubuntu\"",
"	&nbsp;&nbsp;...[user name] 		| string	| read only		| Your login user name",
"	&nbsp;&nbsp;...[user domain] 		| string	| read only		| Your user domain",
"	&nbsp;&nbsp;...[host name]		| string	| read only		| Name of your system",
"&nbsp;&nbsp;...[privileges]		| string	| read only		| Your privilege level for the operating system: <br> <b>standard</b>: Standard user privileges <br> <b>elevated</b>: Enhanced privileges, entitled to install software <br> 											  <b>administrator</b>: Administrator privileges.  Applicable if program is started with administration rights (e.g. 'sudo' added in front in Linux/MACOS systems)",
"	&nbsp;&nbsp;...[operating system version] | string	| read only		| Version number of installed operating system",
"	===",
"	<br>",
"	=== 300, 100, 100, 500, bold_column_1, noheader",
"	time stamp[]				| void		| read only		| Provides date and time at start-up. Example under Windows: \"Sat Oct 10 10:17:34 2020\"",
"	version info[]				| void		| read only		| Provides B4P version and release info",
"	===",
""
 ]
	
},




"Variable Attributes" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable attributes" ],
"Description 01:Introduction" : [
"	In B4P, every variable stored contains following information which help to describe the data stored and the variable form:",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Attribute       | Description ",
"	Variable Name   | A string of choice.  Exception: Array members have no names as they are just numbered",
"	Value		| Stored value (Base Variable)",
"	Data Type       | Variables can assume any __Basic Data Types__ and __subtypes__ such as __string__, __numeral__, etc.",
"	Variable Form   | Distinguishes whether the variable is a __simple variable__, an __array__ or a __structure__, or a simple variable containing __zero members__",
"	Members		| Contains all member variables (in __arrays__ and __structures__).  Every member is treated like an individual variable, too.",
"	Member count	| Number of existing members (0 for simple variables)",
"	Protection Setting | Applies rules on accessing and/or modifying these variables, e.g. read-only, prevent deleting, etc.  See function __protect(__)",
"	Locked          | Variables may be temporarily locked during the time while an assignment on that variable is executed or a __reference__ is pointing on this variable.  Locked variables cannot be deleted.",
"	==="
 ]
	
},



"Variable Forms and Trees":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable forms", "base variable", "base variables", "member variable", "member variables" ],
"Description 01:Introduction" : [
"",
"	B4P lets you create variable trees which consist of __structures__, __arrays__ or free combinations of both and with quasi unlimited",
"	number of hierarchical levels.  Availabe memory space is the only limitation.  The illustartion below shows the impressive structures",
"	you can build up rapidly with a few write accesses:",
"",
"	<br/><img src=\"Images/Description_Variable_Forms_and_Trees.jpg\" alt=\"Illustration of a variable tree\"><br/>"
 ]
	,

"Description 02:Building Variable Trees with Member Variables using Arrays and Structures" : [
"",
"	With Beyond4P, you can create simple variables as well as arrays (containing numbered member variables) and structures (containing named member",
"	variables).  Full nesting flexibility is supported: Arrays and structures may contain further structures and/or arrays as you wish.",
"	In short, the variable storage model is a tree structure which can hold data in the root node (base variable), intermediate nodes (e.g. member",
"	variable also containing sub-members) and leaf nodes (final member variables without further members defined).",
"",
"	=== 200, 600, 200, noframe_1stcolbold",
"	Variable Form | Description | Example",
"	__Simple Variables__ | Simple variables hold one base variable value of any data type (numeral, string, date, boolean, void and paramter set) and contain no members. | last name[]",
"        __Arrays__           | In addition to the base variable, arrays a defined number of numerically indexed members | member [1], member[3]",
"	__Structures__       | In addition to the base variable, structures contain one or more named member variables | animal[dog], animal[cat]",
"	__Zero Members__     | Very similar to simple variables.  Contains base variable and zero members, but has previously had array or structure members which have been deleted meanwhiel.  The variable form changes to __structure__ if a structure element is added, or to __array__ if an array member is added.",
"	==="
 ]
	
  },

  "Simple Variables" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple variables" ],
    "Keywords":			[ "simple variables", "simple variable" ],
"Description 01:Simple Variables" : [
"",
"	Simple variables contain only one value and posesses no further member variables in form of structures or arrays.  Syntax:",
"",
"",
"	=== 230, 10, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| ]",
"	- String value or expression	|	|",
"	  as variable name		|	|",
"	===",
""
 ]
	,

"Examples 01:" : [
"	a[] = Hello;",
"	(a[])[] = Hi; // Parentheses required on left hand side, ",
"	              // otherwise seen as \"right hand\" expression and not \"left hand\" expression",
"	(a[] + ' World')[] = Ahoi;",
"	echo(\"a[]     = \", a[] );",
"	echo(\"a[][]   = \", a[][] ); // Here it's OK",
"	echo(\"Hello[] = \", Hello[] );",
"	echo(\"Hello World[] = \", Hello World[], new line );",
"",
"	'1'[] = One; // Even these variable names are valid !",
"	' '[] = Space;",
"	''[] = Blank;",
"	'a[]'[] = aaaah;",
"	echo('1'[], \" \", ' '[], \" \", ''[], \" \", 'a[]'[], new line );",
"",
"	me too[] = Hmm;",
"	me  too[] = Me;   // Plain text ignores redundant spaces, same as 'me too'",
"	'me  too'[] = Mee too;",
"	echo( me too[], \", \", me  too[], \", \", 'me  too'[] );"
 ]
	,
    "Output 01:":		"automatic"


  },

  "Arrays" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "arrays" ],
    "Keywords":			[ "array", "arrays", "array member", "array members", "spontaneous array creation" ],
"Description 01:Arrays" : [
"",
"	Arrays are variables with members which are only referenced numerically using an index value.  Arrays support negative indexing, meaning that -1, -2, etc. references",
"	the last, 2nd last and further array elements.  A variable cannot be an array and a structure at the same time, i.e referencing an array with a member name",
"	causes an error.",
"",
"",
"	=== 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Index			 		| ]",
"	- String value or expression	|	| - Numeral or numeric expression	|",
"	  as variable name		|	|   as index number			|",
"	===",
"",
"",
"",
"	<br/><br/>",
"	Syntax for referencing arrays:  <b>Variable Name [ index ]  </b>",
"	<br/><br/>",
"",
"	Following rules apply to the index:",
"	* The index must always be a numeric value.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[4.99]</b> accesses the same member as <b>a[5]</b>.",
"	* Negative index values are supported. -1 refers to the last element in the array. -2, -3, etc. refer to the next members above.",
"	* Exceptions are asserted when attempting to read non-existing members",
"	* Arrays will be extended when attempting to write using index values bigger than the current array size.",
"",
"",
"	<br><br>",
"	Following approaches are available to create arrays:",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	dim...() function family | Functions such as __dim(__), __redim(__), __dim protect(__) and __redim protect(__) initialize arrays with a specified number of elements and initial values.",
"	array...() | Functions like __array(__) and __array protect(__) create arrays with initial values provided in parameter sets.",
"	Direct referencing | (Spontaneous array creation) Assigning a simple variable with an index will automatically create an array with members 0...<i>index</i> where the members inbetween are not initialized and return __void__ values.",
"	===",
"",
"	<br><br>",
"	Individual member variables may be deleted using the __delete(__) function.  If a member in the beginning or middle of the arrary is deleted, then all other members move up accordingly.",
"",
"",
""
 ]
	,
"Examples 01:" : [
"	",
"	echo(\"Initialize variable with dim function:\");",
"	dim( a[], 5, '.' );",
"	see( a[] );",
"",
"	echo(new line, \"Initialize variable with array function:\");",
"	array( a[], { Ha, He, Hi, Ho, Hu, Ahoi } );",
"	see( a[] );",
""
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Nesting" : [
"	Nesting is supported: Every array element may be a simple variable, a further array of any size or a structure.",
"	A (m x n) multi-dimensional array is a nested array with <i>m</i> members and each member containing <i>n</i> sub-members.",
"	Since Beyond4P variable structure is a tree with values possible in both root, intermediate and end nodes, the base variables as well as",
"	member variables of those containing sub-members are preserved.",
"",
"",
"	<br>Nested arrays:",
"	=== 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Index			 		| ,	| Index					| ]",
"	- String value or expression	|	| - Numeral or numeric expression	|	| - Numeral or numeric expression	|",
"	  as variable name		|	|   as index number			|	|   as index number			|",
"	===",
"	* Nesting structures in arrays and vice versa is also allowed.",
"	* For deeper nesting, specify addtional index numbers and/or member names separated with commas.",
""
 ]
	,

"Examples 02:" : [
"",
"	echo(\"Initialize a 2-dimensional array:\");",
"	dim( a[], {2,3}, '0' );",
"	see( a[] );",
"",
"	echo(new line, \"Initialize two arrays (2nd one is nested) implicitly:\");",
"	b[2] = true;",
"	b[1,2] = 123;",
"	see( b[] );",
""
 ]
	,
    "Output 02:":		"automatic"

  },

  "Structures" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "structures" ],
    "Keywords":			[ "structure", "default members", "default member", "structure members", "structure member" ],
"Description 01:Structures" : [
"",
"	Structures are variables with members which are referenced by <i>member names</i>.  Structures are useful for following pruposes: 1) managing",
"	your variables in a structured manner, and 2) providing a form of associative storage.  Beyond4P maintains the members in alphabetical order automaatically",
"	and uses a very fast bisectional algorithm to find the specified variable.  For example, max. 16 internal queries are needed to",
"	access a a member with a given member name in a structure containing more than 65,536 members.",
"",
"",
"	=== 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Member Name		 		| ]",
"	- String value or expression	|	| - String value or expression		|",
"	  as variable name		|	|   as variable member name		|",
"	===",
"	<br>",
"	* Existing structures may be index like arrays where the indexing reflects the alphabetic order of the member names.",
"	* Numeric indexing (like in arrays) is allowed to access <u>existing</u> members, e.g. 0..9 (and -1..-10 with __negative indexing__).",
"",
"",
"	Similar to arrays, existing structures may also be referenced with numeric <i>index</i> values.  This is useful when using loops to process",
"	through the structure rapidly.  Please note that the structure is always held in an alphabetic order.  Negative indexing is also supported, where",
"	-1 refers to the last element (last in alphabetical order), and -2, etc., to the next ones above.",
"",
"	<br><br>",
"	Following approaches are avialable to create structures:",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	structure...() | Functions like __structure(__) and __structure protect(__) create structures with intial member names and values provided in two parameter sets.",
"	Direct referencing | Assigning a simple variable with a member name will initialize it with a structure.  This will not be possible if the variable is already an array.",
"	==="
 ]
	,
"Examples 01:" : [
"	",
"	echo(\"Initialize a structure directly\");",
"	a[dog] = Hund;",
"	a[cat] = Katze;",
"	a[gnu] = Gnu;",
"	echo(a[cat]);",
"	see( a[] );",
"",
"	echo(new line, \"Initialize with the structure function\");",
"	structure( leg count[], { snake, bird, dog, fly, tick }, { 0, 2, 4, 6, 8 } );",
"	see( leg count[] );",
""
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Nesting" : [
"	Nesting is supported: Every structure element may be a simple variable, a further structure or array of any size.",
"	Since Beyond4P variable structure is a tree with values possible in both root, intermediate and end nodes, the base variables as well as",
"	member variables of those containing sub-members are preserved.",
"",
"",
"	<br>Nested structures:",
"	=== 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Member Name				| ,	| Member Name				| ]",
"	- String value or expression	|	| - String value or expression		|	| - § value or expression		|",
"	  as variable name		|	|   as variable member name		|	|   as variable member name		|",
"	===",
"	<br>",
"	* Numeric indexing (like in arrays) is allowed to access <u>existing</u> members, e.g. 0..9 (and -1..-10 with __negative indexing__).",
"	* Nesting arrays in structures and vice versa is also allowed.",
"	* For deeper nesting, specify addtional member names and/or index numbers separated with commas",
"",
""
 ]
	,

"Examples 02:" : [
"	",
"	echo(\"Initialize a nested structure containing structure and array\");",
"",
"	city[] = Paris;",
"	array( city[district], {ignoe 0, Louvre, Bourse, Temple, Hotel de Ville, etc. } );",
"	city[district,2,area] = 99; // 99 hectars",
"	city[district,2,inhabitants] = 19500;",
"	echo(\"1st  district = \", city[district,1], \"   last district = \", city[district,-1] );",
"",
"	see( city[] );"
 ]
	,
    "Output 02:":		"automatic",

"Description 03:Default Members" : [
"",
"	Normally, attempting to access a structure with a non-existing element name will cause an error.  Beyond4P supports default members",
"	which will be returned in case of no matches.  Assign the default value using a blank string ('') as member name and that's it.",
""
 ]
	,

"Examples 03:" : [
"	",
"	echo(\"Demonstrate default values\"); // a[''] is defined below and is used as default variable.",
"",
"	structure( a[], { cow, horse, pig, sheep, '' }, { Kuh, Pferd, Schwein, Schaf, No translation } );",
"	echo( \"cow : \", a[horse] );",
"	echo( \"goat: \", a[goat] );",
""
 ]
	,
    "Output 03:":		"automatic",
"Description 04:Referencing structures with numbers" : [
"	Similar to arrays, structure members can also be referenced with index numbers.",
"	The only difference is that the members will be rearranged in alphabetical order whenever a new member is added." ],
"Examples 04:" : [
"    names[Mozart] = Wolfgang Amadeus Mozart;",
"    names[Williams] = John Williams;",
"    names[Strauss] = Johan Strauss;",
"    names[Bach] = Johan Sebastian Bach;",
"    names[Beethoven] = Ludwig van Beethoven;",
"",
"    for (i[] = 0, i[] < member count(names[]), i[]+=1)",
"    {",
"        echo(i[], \": \", names[i[]]);",
"    }",
"",
"    echo(\"names[2] = \", names[2] );",
"    names[Bartok] = Bela Bartok;",
"    echo(\"names[2] = \", names[2] ); // List of names has shifted down",
"",
"    echo(\"Last entry is \", names[-1] ); // Negative indexing	"
 ]
	,
    "Output 04:": "automatic"
  },


"Zero Members Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "zero members" ],
"Description 01:Zero Members" : [
"",
"	Zero members avariables are very closely related to simple variables.",
"	The only difference is that these variables have contained __array__ or __structure__ members before, but all members have",
"	been deleted meanwhile.  In some application cases, e.g. loading variables from JSON files, zero members may be useful to distinguish",
"	between loading empty arrys and no arrays at all.",
""
 ]
	,

"Examples 01:" : [
"	",
"	echo(\"Distinguish between simple and zero members variables\");",
"	a[] = Hi;",
"	echo(identify(a[0])); // simple",
"",
"	a[0] = Ho;",
"	echo(identify(a[0])); // array",
"",
"	delete(a[0]);",
"	echo(identify(a[0])); // not found",
"	echo(identify(a[])); // zero members",
"",
"	a[dog] = Hund;",
"	echo(identify(a[])); // structure",
"",
""
 ]
	,
    "Output 01:":		"automatic"

},



"Parameter Sets Specifying Members" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "specifying members with parameter sets" ],
"Description 01:Introduction" : [
"",
"	Variable members can either be specified with constant values, and expressions such as variables.",
"	This provides flexibility, but sometimes you need the flexibility to access different members",
"	in differently deep levels dynmically.  This is best done with using parameter sets which make up",
"	a part of the sequence of member names and/or index numbers or the whole one. See the following example:"
 ]
	,
"Examples 01:" : [
"	var[me,you,we,they] = those people;",
"	var[me,you,we,us] = we the people;",
"	var[me,you,we] = all of us;",
"	var[] = grandfather;",
"",
"	a[] = you;",
"	b[] = we;",
"	echo( var[ me, a[], b[] ] );",
"",
"	c[] = { you, we, us };",
"	echo( var[me, c[]] );	// Use parameter set to specify sub-members behind 'me'",
"",
"	c[] = {me} + c[];",
"	echo( var[c[]] );	// Use parameter set to specify all nested members",
"",
"	c[] = c[]{0..2}; 	// me, you we only",
"	echo( var[c[]]  );      // Use paramter set to specify first part of all nested members",
"",
"	echo( var[ {} ] );	// Empty set refers to base variable",
"	echo( var[ {}, {me, you}, {}, {we, they} ] );	// Combinations like this one are OK",
"	// Empty sets in the middle of the 'path' are considered as 'same location'"
 ]
	,
    "Output 01": "automatic"
},



"References to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "references to variables", "variable references", "variable reference", "reference", "references" ],
"Description 01:Introduction" : [
"",
"",
"	In several cases, sophisticated variable structures with multiple levels, e.g. a[b,c,d,e] need to be referenced repeatedly where every reference checks for the existence of",
"	of the base variable name and all names a through e.  To address this problem, B4P provides the feature called <i>refrences to variables</i> which allows you to define ",
"	variables which poinnt to other base variables, regardless if they are base variables, intermediate or leaf members inside variable structures.",
"",
"	<br><br>",
"	References to variables in B4P have similarities with references in other modern programming languges such as C++, C# and Java.  References are not pointers, i.e. any for of",
"	mingling up pointers with pointer arithmetics is not supported here. ",
"",
"	<br><br>",
"	Destination variables which are pointed by references carry along a kind of blocking notice which forbids deleting them until all references applied on them have been",
"	released again.  This protection mechanism avoids working with disconnected references pointing to nowhere.  Automatic releases will happen with locally defined references to",
"	variables in program, procedure and function blocks when leaving.  The remaining references will be released in a coordinated manner when the program ends execution.",
""
 ]
	,
"Description 02:References in Function Parameters" : [
"	Some B4P functions and user-defined functions can accept parameters as references to variables, too.  These parameters provide access to the base variable as well as",
"	to all mebmer variables."
 ]
	
},

"Simple References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple references to variables" ],
    "Keywords":			[ "simple references" ],
"Description 01:Introduction" : [
"",
"	The following exmaple shows how a simple reference is designed and describes how to use the '^' symbol to do a reference.",
"",
"	<br/><img src=\"Images/Description_Variables_Simple_References.jpg\" alt=\"Simple References to Variables\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"	ref1[] =^ a[]; // ref1[] references a[]",
"",
"	a[]    = Hi;",
"	echo( a[],\", \",ref1[] ); // Outputs \"Hi, Hi\"",
"",
"	ref1[] = He;",
"	echo( a[],\", \",ref1[] ); // Outputs \"He, He\""
 ]
	,
    "Output 01:": "automatic"
},

"Through-Referencing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "through-referencing" ],
"Description 01:Introduction" : [
"",
"	Note that the variable name used to establish a reference must either be vacant (no variable defined yet) or just a __simple variable__ containing no members.",
"	This rules is insofar relevant because member (and subname) names and array index numbers specified in the references will be applied on the target variables directly.",
"	The following examples shows a typical through-referencing:",
"",
"	<br/><img src=\"Images/Description_Variables_Through_References.jpg\" alt=\"Through-Referencing\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]     = Hello;",
"	ref1[]  =^ a[]; // ref1[] references a[]",
"",
"	ref1[b] = Ho;   // Both assignments build members on a[]",
"	a[c]    = Hi;",
"",
"	echo( a[b],\", \",ref1[b] ); // Ho, Ho",
"	echo( a[c],\", \",ref1[c] ); // Hi, Hi"
 ]
	,
    "Output 01:": "automatic"
},


"Redirecting References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "redirecting references" ],
"Description 01:Introduction" : [
"",
"	<br/><img src=\"Images/Description_Variables_Redirecting_References.jpg\" alt=\"Redirecting References\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]     = Hello;",
"	a[b]	= Hi;",
"",
"	ref1[]  =^ a[]; // ref1[] references a[]",
"	echo( ref1[] ); // Hello",
"",
"	ref1[]  =^ a[b];",
"	echo( ref1[] ); // Hi",
"",
"	a[b]    = Ho;	",
"	echo( ref1[] ); // Ho"
 ]
	,
    "Output 01:": "automatic"
},

"Copying References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "copying references" ],
"Description 01:Introduction" : [
"",
"	Two flavors of copying references exist:",
"	* If <b>=^</b> is used, then the referencing process passes through all intermediate references and establishes the link to the target variable directly.",
"	* If <b>=^^</b> is used, then the reference will be made on the specified intermediate reference.",
"	The 1st choice ensures that all referncing are fast and direct.  The 2nd choice provides the flexibiltiy to make modifications on the intermediate",
"	references such as redirecting only the intermediate reference and not all intial references attached to them.",
"",
"	<br/><img src=\"Images/Description_Variables_Copying_References.jpg\" alt=\"Copying References\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"	a[b]   = Hi;",
"",
"	ref1[] =^ a[b]; 	// References a[b]",
"	ref2[] =^  ref1[];	// References a[b] directly",
"	ref3[] =^^ ref2[];	// References ref2[]",
"	ref4[] =^  ref3[];	// References a[] directly",
"",
"	ref3[] = He;",
"	echo( a[b],\", \",ref1[],\", \",ref2[],\", \",ref3[] );    // 4 x He",
"",
"	a[c]   = Ho;		// Visible in ref[2] and ref[3]",
"	ref2[] =^  a[c];	// Detach ref2[] from a[b] and link to a[c]",
"",
"	echo( ref1[],\", \",ref2[],\", \",ref3[],\", \",ref4[] );    // He, Ho, Ho, He"
 ]
	,
    "Output 01:": "automatic"
},

"Releasing References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Releasing references" ],
"Description 01:Introduction" : [
"",
"	Following methods are available to release references:",
"	* Function call __release(__): 	Specify references to variables directly.  Example: <b>release ( ref1[ ], ref2[ ], ref3[ ] );</b>",
"	* Function call __release all(__): All locally defined references to variables will be released.  When called from the main program (neither function nor other program called), then all globally defined references will be released.",
"	* Function call __release all(__): Specify references to variables directly, or variables which contain one or more members / sub-members which are references to variables.  All of them will be released.",
"	* Exiting a user-defined procedure or function, or a B4P program called wiht __start(__) or __include(__): All locally defined references to variables will be released.",
"	* __Redirecting references__: The original reference will be leased and moved to a different variable.",
"",
"	<br/><img src=\"Images/Description_Variables_Releasing_References.jpg\" alt=\"Releasing References\"><br/>",
"",
"	<u>Note</u>: Please note that the target variables remain unaffected while releasing the references.  Once all references on a target variable are released, then the target variable may be deleted.",
"",
"	<br><br>",
"	Released references will not be deleted but mutate to simple variables containing void values.",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"",
"	ref1[] =^ a[];",
"	echo( ref1[] );",
"",
"	release( ref1[] );",
"	echo( ref1[] );"
 ]
	,
    "Output 01:": "automatic"
},




"References in Member Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "References in member variables" ],
"Description 01:Introduction" : [
"",
"	The past examples have been made with simple references.  However B4P also allows declaring member variables in structures and arrays as references.",
"	Here, a similar rule applies that references can only be made on member variables which are not yet existing or do not contain their own sub-members.",
"	Two code examples below illustrate this powerful feature.",
"" ],
"Description 02:Example 1" : [
"",
"	In the following example, 3 members in variable c[] point to variable a[] and a[g] accordingly.  In addition, a[g] is a reference which",
"	referst to c[]. An \"eight-loop\" has been created, and the code example demonstrates that you can walk the path through the loop multiple times.",
"	",
"	<br/><img src=\"Images/Description_Variables_References_in_Member_Variables_1.jpg\" alt=\"References in Member Variables 2\"><br/>",
""
 ]
	,
"Examples 02:" : [
"// Black part in illustration",
"",
"a[] = Ha;",
"a[b] = He;",
"c[] = Hi;",
"",
"// Greeen part in illustration",
"",
"c[d] = ^a[];",
"c[e] = ^a[b];",
"c[f] = ^c[e]; // references to a[b]",
"echo( c[d],\", \", c[e] ); // Ha,He",
"",
"// Blue part of illustration",
"",
"a[g] = ^c[];",
"echo( a[g],\", \", a[g,d] ); // Hi, Ha",
"",
"// You can loop around multiple times if you wish:",
"",
"echo( a[g,d,b] ); // He",
"echo( a[g,d,g],\", \", a[g,d,g,d], \", \", a[g,d,g,d,g] ); // Hi, Ha, Hi"
 ]
	,
    "Output 02:": "automatic",
"Description 03:Example 2" : [
"",
"",
"	In the following example, 3 members in variable c[] point to variable a[] and a[g] accordingly.  In addition, a[g] is a reference which",
"	referst to c[]. An \"eight-loop\" has been created, and the code example demonstrates that you can walk the path through the loop multiple times.",
"	",
"	<br/><img src=\"Images/Description_Variables_References_in_Member_Variables_2.jpg\" alt=\"References in Member Variables 2\"><br/>",
""
 ]
	,
"Examples 03:" : [
"",
"// Black part in illustration",
"",
"array( a[ ],{Ha,He,Hi,Ho} );",
"",
"// Green part in illustration",
"",
"a[0] =^  a[3];",
"a[1] =^^ a[0]; // a[1] refers to a[0] (and not to a[3] directly)",
"",
"echo( a[0],\", \", a[1] ); // Ho, Ho",
"",
"// Blue part in illustration",
"",
"a[0] =^ a[2];",
"echo( a[0],\", \", a[1] ); // Hi, Hi"
 ]
	,
    "Output 03:": "automatic",
"Description 04:Avoid Tail-Biting" : [
"",
"	Be aware that you do not build up references resembling infinite loops because B4P will start circling around through 1 or more variables.",
"	See the following code examples with one variables and the tail-biting effect with two variables."
 ]
	,
"Examples 04:" : [
"	// Bad example 1: 1 dog runs in a circle, attempting to bite its own tail ",
"	a[] = a[];",
"",
"	// Bad example 2: 2 dogs run in a circle, attempting to bite each other's tails",
"	x[] = 5;",
"	y[] =^x[];",
"	x[] =^y[];"
 ]
	

},


"Protecting Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "protecting variables" ],
    "Keywords":			[ "protecting setting", "variable protection", "protection settings", "variable protections" ],
"Description 01:Introduction" : [
"",
"	The functions __protect(__), __dim protect(__), __redim protect(__), __array protect(__), and structure protect(__) are available apply",
"	protection rules on the target variables.  It is always possible to change protection settings on local variable.  For global variables, this",
"	is only allwed in the global context (i.e. not in the code of user-defined procedures and functions and B4P programs started with __start(__) or __include(__)).",
"	Protection settings of system variables cannot be altered. If not specified otherwise, all newly created variables bear the protection setting <i>full access</i>.",
"",
"	The follwoing table provides an overview of the available protection settings and their functional impacts:",
"",
"	=== 400, 100, 100, 100, 100, 100, 100",
"	Protection Settings			| full access		| prvent deleting	| limited access			| read only		| locked		| tightly locked",
"	Read variables				| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| -			| -",
"	Read member variables <sup>1</sup>	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| -",
"	Use as input parameter to functions	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| -			| -",
"	Write variables				| &#x2714;		| &#x2714;		| Data of same type only <sup>2</sup>	| -			| -			| -",
"	Write member variables <sup>1</sup>	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| -",
"	Use as I/O paramters to functions	| &#x2714;		| &#x2714;		| -					| -			| -			| -",
"	Delete varibles				| local variables only	| -			| -					| -			| -			| -",
"	Create / add member variables		| &#x2714;		| &#x2714;		| -					| -			| -			| -",
"	Modify __variable forms__ <sup>3</sup>	| &#x2714;		| -			| -					| -			| -			| -",
"	Create arrays				| &#x2714;		| &#x2714; <sup>4</sup>	| -					| -			| -			| -",
"	Do __Transactions__			| &#x2714;		| -			| -					| -			| -			| -",
"	Use __protect(__) to check settings	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| &#x2714;",
"	===",
"	<sup>1</sup> Provided no additional protection seetings restrict usage of the member variables.<br>",
"	<sup>2</sup> E.g. forbidden to overwrite string contents with numeric contents.  Additional restrictions may apply on system variables, e.g. only specific values may be written.<br>",
"	<sup>3</sup> E.g. converting structures to arrays and back using __array to structure(__) or __structure to array(__) functions.<br>",
"	<sup>4</sup> Only possible if variable contains no other members so far.<br>",
"" ],
"Description 02:Variables temporarily locked with Blocking Notices" : [
"",
"	Variables may be temporarily locked with blocking notices in order to prevent adverse system behavior if they are deleted.  All other accesses are possible.  Blocking notices",
"	are temporarily applied in following cases:",
"	* Target variable is blocked during the time an assignment is calculated",
"	* A __transaction__ is applied between target and source variable",
"	* The variable is referenced as an I/O or reference function parameter to a B4P or user-defined function",
"	* __References to variables__ refer to the affected variable.",
"	Only if all block notices are removed again (assignment resp. transactions completed, function execution finished, references released), then the variable may be deleted again.",
""
 ]
	
}


 	
,

"Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "tables" ],
"Description 01:Introduction" : [
"",
"	Tables are the key objects on which this programming language has been developed for, namely to process tables of any size",
"	effectively and efficiently with minimum amount of coding and delivering maximum possible execution performance.  An extensive",
"	function library with rich features is available to process and verify tables.",
"",
"	<br><br>",
"	All tables are 2-dimensional data structures which hold all information as strings (text), including numeric values,",
"	boolean values, dates and parameter sets.  Different access methods are avaialble when accessing table contents directly.",
"",
"	<br/><img src=\"Images/LAN_Tables.png\" alt=\"Tables\"><br/>",
"",
""
 ]
	
}, 

"Tables - Example File" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Tables - Example used in the Following Sections" ],
"Description 01:A list of CCities" : [
"",
"	The table \"Cities.csv\" shown below will be used to demonstrate the various examples on accessing tables."
 ]
	,
"Examples 01:" : [
"	include( Support Library );",
"	table load( table, \"Examples\\Cities.csv\" );",
"	table list( table );"
 ]
	,
    "Output 01:": "automatic"
},


"Tables - Naming Rules" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table names" ],
"Description 01:Table Naming Rules" : [
"	* All tables are identified with table names which are string values",
"	* You can either use table names with or without quotation marks.",
"	* Similar to variable names, speaces are supported.  Use quotation marks if the name contains multiple consecutive spaces and/or special symbols",
"	** Multiple consecutive white spaces in strings without quotation marks reduce to one space.",
"	* You can also specify an __RHS Expression__ which returns a string containing the retrieved or calculated name",
"	* Names may begin or end with numbers, even with spaces inbetween, e.g. <b>4200 Pennsylvania Ave.</b>.",
"	* Blank table names are also allowed, e.g. <b>['':0,0]</b>, but not recommended if you want to keep code quality high.",
""
 ]
    
},


"Table Properties" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table properties" ],
"Description 01:Table Properties" : [
"* All tables are global, i.e. accessible by called procedure and functions, no matter in which code file they are running, and retained if created  	  inside user-defined procedures and functions and then returned.",
"* The tables are fully stored and managed in working memory (dynamic RAM).  In case you work with very large tables and your system has not enough memory space,  the the operating system will move data to the <i>page file</i> in order to provide additional space.  With the very large memory space available  	  systems, this should not be an issue for most applications.  B4P uses full 64-bit performance, so you will not encounter the 4GB limit.",
"	* Row counting starts with 0 (row 0 is the header row).",
"	* Tables may contain any number of rows, including 0 (= no) row.",
"	* __Negative indexing__ is supported for referencing row numbers.  -1 refers to the last row in the table, -2 to the next one above, etc.",
"	* Blank rows are allowed <br>",
"	* Column counting starts with 0.",
"	* __Negative indexing__ is supported for referencing column numbers.  -1 refers to the last column in the table, -2 to the next one to the left, etc.",
"	* The rows may contain different number of columns.",
"	* The number of entries in a table row may exceed the number of header entries, but in this case these entries cannot be identified by column header names.  They can only be accessed with column numbers.",
"	* Blank columns are allowed",
"	* Multiple identical column header names are allowed, but referencing them by names will always match with the first occurrence (from left to right).",
"* Tables loaded, e.g. from HTML, XML, Excel, contain no formatting attributes (e.g. font size, frame and cell background color, alignments, typefaces like bold, underline, etc.).   	  However, before saving the tables, you may want to append formatting attributes which will then be parts of the data contents. See the section on __styles__.",
"	* Regarding tables loaded from Excel files: The calculated values will be loaded and not the underlying formulas.",
"	* The function __table configure(__) is available to change table-specific properties."
 ]
	
},

"Creating Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Creating tables" ],
"Description 01:Creating tables" : [
"",
"	Various methods are available to create tables:<br>",
"	* Function calls such as __table create(__), __table initialize(__), etc.",
"	* Loading data into tables, e.g. with __table load(__), table load excel file(__)",
"	* Copying tables, e.g. with __table copy table(__), or using other functions which create new tables as output, e.g. __directory listing(__).",
"",
"	The next sections describe the synatax which allows for straightforward and powerful access to table contents, be it simple values, whole (or parts of) rows and",
"	columns, or a combination of both (e.g. accessing a matrix from the table).",
"	<br><br>"
 ]
	

},




"Accessing Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "accessing tables" ],
    "Keywords":			[ "table access methods", "table references", "table reference" ],
"Description 01:Introduction" : [
"",
"	B4P provides the following four <i>table access methods</i> to access table contents:",
"	* __Simple table access__ to access individual table cells",
"	* __Horizontal table access__ to access multiple cells in a specified row:",
"		** a selection of different columns,",
"		** a range containing mulitiple consecutive columns, and",
"		** all cells in the entire row.",
"	* __Vertical table access__ to access multiple cells in a specified column:",
"		** a selection of different rows,",
"		** a range containing mulitiple consecutive rows, and",
"		** all cells in the entire column.",
"	* __Matrix table access__ is the combination of the both:",
"		** a selection of different cells over the table",
"		** a range containing multiple rows and columns",
"		** all cells in the entire table.",
"",
"	In addition to these basic acces modes, __transactions__ and various functions do also provide powerful means to access the tables.",
""
 ]
	,

"Description 02:Reading Contents" : [
"",
"	Data can only read from tables if they are existing or initialized.",
"	<br><br>",
"",
"	By default, following read access rules apply:",
"	* Numeric contents (excl. scientific notation) will be read as numerals",
"	* Text contents (incl. blanks) will be read as strings",
"	* Dates, 'true', 'false', etc. will also be read as string.",
"",
"	However, the function __table configure(__) lets you decide whether to read dates, booleans, etc. as dates and not as",
"	strings.  Oppositely, this function can also force reading numbers as strings.",
"",
"	<br><br>",
"	Attempting to read values which lie outside the table (except if referencing above the header row or left of the first column) ",
"	will return blanks (empty strings).",
""
 ]
	,	

"Description 03:Writing Contents" : [
"",
"	Data can only written to tables if the tables are existing or initialized.",
"	<br><br>",
"",
"	All data written to tables will be converted to strings first. This also includes for numbers, dates, times, parameter sets, etc.",
"	For boolean values, the text values 'true' and 'false' will be used.  If you want to read the text values 'true' and 'false' as booleans,",
"	the use __table configure(__) to activate this: <b>table configure(<i>table name</i>, read booleans, yes );</b>",
"",
"	<br><br>",
"	Attempting to write values which lie outside the table (except if referencing above the header row or left of the first column) will work successfully.",
"	If necessary, the size of the table will be extended accordingly.  Valid example: <b>[ table: 999, 999] = \"nine nine nine\";</b> ",
"" ],
"Description 04:Advanced Features" : [
"",
"	Following features are supported to facilitate accessing table contents:",
"	* __Partial Table Specifications__ provide table contexts so tables can be accessed with just the column name or number,",
"	* __Shifted Table Column Specifications__: Neighboring columns can be accessed if a particular header name is known, but want to access the next column to the left or right instead,",
"	* __Header Name Exception Handling__ to define direct actions without asserting exceptions if the header name has not been found, and",
"	* __Lookup Access Exception Handling__ to define default table rows in case the table row cannot be found by matching the contents.",
""
 ]
	
},


"Simple Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple table access" ],
"Description 01:Introduction" : [
"",
"	The <b>simple table access</b> is one of the four basic __table access methods__ where this one accesses exactly one cell in the table.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of strings and/or numerals.  These may be constant strings and numbers",
"	or expressions providing strings and numerals.  __Negative indexing__ is supported for both rows and columns.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a string		|	| - Header name, or		|	| - Matching contents (string), or 	|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|",
"		|				|	| - Negative column number	|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  Simple Column Specifier 2		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Matching contents (string), or 	| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| - Positive row number, or		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| - Negative row number			|",
"	===",
"",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Simple_Access_Full.jpg\" alt=\"Simple table access, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1,    5 ] );",
"	echo( [ table: -7, -10 ] );",
"	echo( [ table:  1, -10 ] );",
"	echo( [ table: -7,    5 ], new line );",
"",
"	echo( [ table: City,    5 ] );",
"	echo( [ table: City, -10 ], new line );",
"",
"	echo( [ table: City, San Francisco] ); // Exception to rule: Returns row numbers",
"	echo( [ table: 1, San Francisco] );",
"	echo( [ table: -7, San Francisco], new line );",
"",
"	echo( [ table: City, San Francisco, Famous attraction] );",
"	echo( [ table: 1, 5, 4] );",
"	echo( [ table: -7, -10, -4] );"
 ]
	,
	"Output 03:Output - Consider travelling": "automatic",

"Description 04:Rule on Column Header Names" : [
"	You have full freedom to specify the header names as you wish.  Some rules need to be followed:",
"* If the header name contains 1 or more words and optionally single spaces inbetween, and they contain no special symbol which could be interpreted by  	  B4P otherwise (e.g. hypen as minus sign), then the name can be used without quotation marks.",
"* If you want to refer a header name which is a number (e.g. 1, 24.12, etc.), then make sure to provided these numbers as strings, e.g. with quotation  	  marks or using the __str(__) function to convert numeric results to strings."
 ]
	
},



"Horizontal Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "horizontal table access" ],
    "Keywords":			[ "horizontal table accesses" ],
"Description 01:Introduction" : [
"",
"	The <b>horizontal table access</b> is one of the four basic __table access methods__ where this one accesses multiple cells in the same table row.",
"	Multiple columns can be specified with following approaches:",
"	* __Horizontal table access using parameter sets__",
"	* __Horizontal table access using wildcards__ with the colon (:) prefix",
"	* __Horizontal table access using ranges__ with the '..' or leaving out the column specification to access all exsting columns",
"",
"	The value(s) read from the table will be provided in a __parameter set__.  This does also apply if only one or even no value being retrieved.  In the latter case,",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated), ",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
""
 ]
	,
"Description 02:Read Accesses" : [
"	The value(s) read from the table will be provided in a __parameter set__, regardless of the number of cells accessed. Empty parameter sets are returned",
"	if the read access results in no matches (e.g. empty parameter set for headers specified, wildcard yields no match, specified range is in the wrong",
"	(right to left) direction."
 ]
	,
"Description 03:Write Accesses" : [
"	When writing a parameter set horizontally to a table, then the elements of the parameter set will be written.  The write access stops prematurely if",
"	one of the two conditions are met:",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated).  Writing empty parameter sets will not result in a write opration because there is nothing to write.",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
"	<u>Note</u>:If an element in the parameter set is in turn a parameter set, then it will be converted to a string in order to visualize the parameter set contents (with braces around, elements separated with commas).<br>",
"",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the horizontal table access."
 ]
	
},



"Horizontal Table Access w. Param. Sets":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using parameter sets" ],
"Description 01:Introduction" : [
"",
"	Instead of specifying one column header name (string) or column number (numeral), a parameter set can be used to specify",
"	multiple columns in order to access multiple cells in a specific row at a time.  The resulting data read out is a parameter set",
"	containing the data which corresponds to the headers specified accordingly.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of strings and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing strings and numerals, as well as parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Multiple Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a string		|	| - Parameter set containing	|	| - Matching contents (string), or 	|",
"		|				|	| header names and/or positive	|	| - Positive row number, or		|",
"		|				|	| or negative column numbers	|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	| Multiple Column Specifier 2		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Matching contents (string), or 	| 	| - Parameter set containing		|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| header names and/or positive		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| or negative column numbers		|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (string or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Parameter_Set_Full.jpg\" alt=\"Horizontal table access using parameter sets, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table: {1,4}, 5 ] );",
"	echo( [ table: {-7,-4}, -10 ], new line );",
"",
"	echo( [ table: { City, 4 }, -10 ] );",
"	echo( [ table: { City, Famous attraction }, 5 ], new line );",
"",
"	echo(\"Special case\");	",
"	echo( [ table: { }, -10 ] ); // returns empty set",
"",
"",
"	echo( [ table: { City, Famous attraction }, San Francisco ] );",
"	// No exception to rule: It retrieves \"San Francisco\" and \"Golden Gate\"",
"",
"	echo( [ table: City, San Francisco, { Famous attraction, Country } ] );"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},



"Horizontal Table Access w. Wildcards":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using wildcards" ],
"Description 01:Introduction" : [
"",
"	Alternatively to parameter sets, __wildcards__ can be specified using __softquoted strings__ (i.e. with __Text inside single quotation marks__)",
"	to compare the header row and pick up all matches.  A leading colon (<b>:</b>) is required to instruct B4P to search the table for matching",
"	contents. All headers matching to the string pattern will be included in the selecction.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The header name patterns must begin with a colon (2 consecutive colons are actually needed if the table name specified before), followed",
"	by the __softquoted string__ value.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| : Header Name Pattern		| ,	| Simple Row Specifier			| ]",
"		| Must be a string		|	| - Must be a softquoted	|	| - Matching contents (string), or 	|",
"		|				|	| string, recommended to use	|	| - Positive row number, or		|",
"		|				|	| wildcard symbols		|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  : Header Name Pattern		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Matching contents (string), or 	| 	| - Must be a softquoted 		|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| string, recommended to use		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| wildcard symbols			|",
"	===",
"	Lookup access: If a parameter set or a header name pattern is encountered in the Simple Column Specifier instead of a simple value (string or numeral), ",
"	then the 1st column found will be used to identify the row. If it contains no elements, then no lookup can be made and an empty set will be returned.",
"",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Wildcard_Full.jpg\" alt=\"Horizontal table access using wildcads, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  :'F*',   5 ] ); // 2 matches: looks for headers starting with \"F*\"",
"	echo( [ table:  :'F*', -10 ] ); // Same result",
"	echo( [ table:  :\"F*\",   5 ] ); // No match. Qquoted string, looks for header name \"F*\"",
"	echo;",
"",
"	echo( [ table: :'F*', Golden Gate] ); // Golden Gate is 1st match",
"	echo( [ table: :'F*', SFMOMA] );      // SFMOMA is not 1st match, empty set returned",
"	echo;",
"",
"	echo( [ table : : 'F*', Golden Gate, { City, Famous cultural place } ] );",
"	echo;",
"",
"	echo( [ table : City, San Francisco, :'F*' ] );",
"	echo( [ table : City, 5, :'F*' ] );",
"	echo( [ table : 1, 5, :'F*' ] );",
"	echo( [ table : -7, -10, :'F*' ] );",
"",
"	echo( \"Output entire row with wildcards:\");",
"	echo( [ table : :'*', 5 ] );",
""
 ]
	,
	"Output 03:Output - Forgot to recommend Fisherman's Wharf": "automatic"
},



"Horizontal Table Access w. Ranges":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using ranges" ],
"Description 01:Introduction" : [
"",
"	Ranges can be specified to select multiple adjacent table columns.  Ranges come in four flavors:",
"	",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	From .. To	| From starting header name or column number to ending header name or colum number",
"	.. To		| From 1st column (column 0) to ending header name or column number",
"	From ..		| From starting header name or column number to last column in table with header name",
"	..		| From 1st column (column 0) to last column in table with header name",
"	(blank)		| From 1st column (column 0) to last existing column in the current table row (ignoring the header row)",
"	===	",
"	In all cases, the data read will be in parameter sets, even if no or only 1 cell has been accessed.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	",
"	The table must be referenced inside brackets using a combination of strings and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing strings and numerals or parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Range Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a string		|	| - Starting .. Ending column	|	| - Matching contents (string), or 	|",
"		|				|	| - .. Ending column		|	| - Positive row number, or		|",
"		|				|	| - Starting column ..		|	| - Negative row number			|",
"		|				|	| - .. or (blank)		|	| 					|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  Range Column Specifier 2	| ]",
"		| Must be a string		|	| - Header name, or		|	| - Matching contents (string), or 	| 	| - Starting .. Ending column	|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| - .. Ending column		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| - Starting column ..		|",
"		|				|	|				|	|					|	| - .. or left blank		|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (string or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Range_Full.jpg\" alt=\"Horizontal table access using ranges, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1..4,    5 ] );",
"	echo( [ table:  1..-4,   5 ] );",
"	echo( [ table: City..Famous attraction, -10 ] );",
"",
"	echo( [ table:  4..1,    5 ] ); // Empty set returned (ending column is left of starting column)",
"	echo;",
"",
"	echo( [ table:  1..4, San Francisco ] );",
"	echo( [ table:  City..Famous attraction, San Francisco  ] );",
"	echo;",
"",
"	echo( [ table: ..4, 5 ] );         		// San Francisco",
"	echo( [ table: City, San Francisco, ..4 ]);	// ",
"	echo;",
"	echo( [ table: 1.., Vienna] );    		// Vienna",
"	echo( [ table: City, Vienna, City..] );",
"	echo( [ table: City.., Vienna] );",
"	echo( [ table: 1.., 10] );",
"	echo;",
"",
"	[table:table row width(table, 0)..,5] = {\"Sightseeing boat\",\"RV\"}; // Append 2 vehicles",
"	echo( [ table: .., 5 ] );		    // San Francisco",
"	echo( [ table: , 5 ] );			    // San Francisco  inclduing the boat & RV",
"	echo( [ table: City, San Francisco, .. ] ); // Without the boat",
"	echo( [ table: City, San Francisco, ] );    // With the boat & RV"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},





"Vertical Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "vertical table access" ],
    "Keywords":			[ "vertical table accesses" ],
"Description 01:Introduction" : [
"",
"	The <b>vertical table access</b> is one of the four basic __table access methods__ where this one accesses multiple cells in the same table column.",
"	Multiple columns can be specified with following approaches:",
"	* __Vertical table access using parameter sets__",
"	* __Vertical table access using wildcards__ with the colon (:) prefix",
"	* __Vertical table access using ranges__ with the '..' or leaving out the column specification to access all exsting columns",
""
 ]
	,
"Description 02:Read Accesses" : [
"	The value(s) read from the table will be provided in a __parameter set__, regardless of the number of cells accessed. Empty parameter sets are returned",
"	if the read access results in no matches (e.g. empty parameter set for headers specified, wildcard yields no match, specified range is in the wrong",
"	(right to left) direction."
 ]
	,
"Description 03:Write Accesses" : [
"	When writing a parameter set vertically to a table, then the elements of the parameter set will be written.  The write access stops prematurely if",
"	one of the two conditions are met:",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated).  Writing empty parameter sets will not result in a write opration because there is nothing to write.",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
"	<u>Note</u>:If an element in the parameter set is in turn a parameter set, then it will be converted to a string in order to visualize the parameter set contents (with braces around, elements separated with commas).<br>",
"",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the vertical table access."
 ]
	
},




"Vertical Table Access w. Param. Sets":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using parameter sets" ],
"Description 01:Introduction" : [
"",
"	Instead of specifying one row number (numeral) or matching contents (string), a parameter set can be used to specify",
"	multiple rows in order to access multiple cells in a specific column at a time.  The resulting data read out is a parameter set",
"	containing the data which corresponds to the row numbers specified accordingly.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of strings and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing strings and numerals, as well as parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Multiple Row Specifier		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Parameter set containing		|",
"		|				|	| - Positive column number, or	|	| row numbers or contents to match	|",
"		|				|	| - Negative column number	|	| with the data in the table		|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by one or more rows, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Multiple Row Specifier		| ,	|  Simple Column Specifier 2	| ]",
"		| Must be a string		|	| - Header name, or		|	| - Parameter set containing 		| 	| - Header name, or		|",
"		|				|	| - Positive column number, or	|	| row numbers or contents to match	|	| - Positive column number, or	|",
"		|				|	| - Negative column number	|	| with the data in the table		|	| - Negative column number	|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (string or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Parameter_Set_Full.jpg\" alt=\"Vertical table access using parameter sets, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, {12,4,8} ] );     // Zürich, Boston, Venice",
"	echo( [ table: -7, {-3,-11,-7} ] );",
"	echo;",
"",
"	echo( [ table: City, {12,4,8} ] );",
"	echo( [ table: City, { Zürich, Boston, Venice } ] );	// Loads own contents",
"	echo( [ table: City, { Zürich, 4, Venice } ] );		// 4 -> Boston",
"	echo;",
"	echo( [ table: City, {  } ] );				// Returns empty set",
"	echo;",
"	echo( [ table: City, { 12,4,8 }, Moving along ] ); // Tram, walking, gondola",
"	echo;",
"	",
"	echo( [ table : 1, { 12,4,8}, -1 ] );",
"	echo( [ table : -7, {-3,-11,-7}, 7 ] );"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},



"Vertical Table Access w. Wildcards":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using wildcards" ],
"Description 01:Introduction" : [
"",
"",
"	Alternatively to parameter sets, __wildcards__ can be specified using __softquoted strings__ (i.e. with __Text inside single quotation marks__)",
"	to compare the entries in the specified column and pick up all row numbers with matching comparisons.  A leading colon (<b>:</b>) is required ",
"	to instruct B4P to search the table for matching contents.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The header name patterns must begin with a colon (2 consecutive colons are actually needed if the table name specified before), followed",
"	by the softquoted string value.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier		| ,	| : Contents Search Pattern		| ]",
"		| Must be a string		|	| - Matching contents (string), or	|	| - Must be a softquoted  		|",
"		|				|	| - Positive row number, or		|	| string, recommended to use		|",
"		|				|	| - Negative row number			|	| wildcard symbols			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| : Contents Search Pattern		| ,	| Simple Column Specifier		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Must be a softquoted  		| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| string, recommended to use		|	| - Positive column number, or		|",
"		|				|	| - Negative column number	|	| wildcard symbols			|	| - Negative column number		|",
"	===",
"	Lookup access: If a parameter set or a header name pattern is encountered in the Simple Column Specifier instead of a simple value (string or numeral), ",
"	then the 1st column found will be used to identify the row. If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Wildcard_Full.jpg\" alt=\"Vertical table access using wildcads, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, :'*n' ] );     // Cities ending with n",
"	echo( [ table: -7, :'*n*' ] );	  // Cities containing n",
"	echo( [ table:  1, :'*n,*s' ] );  // Ending with n or s",
"	echo( [ table:  1, :\"*n\" ] );     // No match (No data entry = \"*n*)",
"	echo;",
"",
"	echo( [ table:  City, :'*n' ] );     // Cities ending with n",
"	echo;",
"",
"	echo( [ table: City, :'*n', Moving along ] );",
"	echo;",
"",
"	[ table: City, 2, Moving along ] = Ambulance; // Makes more sense for the moment.",
"	echo( [ table: 1, :'*n',  -1 ] );",
"	echo( [ table: -7, :'*n',  7 ] );"
 ]
	,
	"Output 03:Output - Prefer choosing a climate friendly vehicle ...": "automatic"
},



"Vertical Table Access w. Ranges":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using ranges" ],
"Description 01:Introduction" : [
"",
"	Ranges can be specified to select multiple adjacent table rows.  Ranges come in four flavors:",
"	",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	From .. To	| From starting row number to ending row number",
"	.. To		| From 1st data row (row 1) to ending row number",
"	From ..		| From starting row number to last table row (end of table)",
"	..		| From 1st data row (row 1) to last table row (end of table)",
"	(blank)		| From top row (row 0 / header row) to last table row (end of table)",
"	===	",
"	In all cases, the data read will be in parameter sets, even if no or only 1 cell has been accessed.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	",
"	The table must be referenced inside brackets using a combination of strings and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing strings and numerals or parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier		| ,	| Range Column Specifier		| ]",
"		| Must be a string		|	| - Matching contents (string), or	|	| - Starting .. Ending row		|",
"		|				|	| - Positive row number, or		|	| - .. Ending row			|",
"		|				|	| - Negative row number			|	| - Starting row ..			|",
"		|				|	| 					|	| - .. or (blank)			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Contents Search Pattern		| ,	| Simple Column Specifier		| ]",
"		| Must be a string		|	| - Header name, or		|	| - Starting .. Ending row		| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| - .. Ending row			|	| - Positive column number, or		|",
"		|				|	| - Negative column number	|	| - Starting row ..			|	| - Negative column number		|",
"		|				|	| 				|	| - .. or (blank)			|	|					|",
"	===",
"",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (string or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Range_Full.jpg\" alt=\"Vertical table access using ranges, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, 6..12 ] );",
"	echo( [ table: -7, -9..-3 ] );",
"	echo( [ table: -7, 6..-3 ] );",
"	echo( [ table: City, 6..Zürich ] );",
"	echo( [ table:  1, Montréal..Zürich ] );",
"	echo( [ table:  1, Zürich..Montréal ] );  // Empty set - Zürich is after Montréal",
"	echo;",
"",
"	echo( [ table:  1, .. 6 ] );",
"	echo( [ table:  1, ..-9 ] );",
"	echo( [ table: City, .. Montréal ] );",
"	echo;",
"",
"	echo( [ table:  1, 12.. ] );",
"	echo( [ table:  1,  -3.. ] );",
"	echo( [ table: City, Zürich .. ] );",
"	echo;",
"",
"	echo( [ table: 1, .. ] );	// Reads all rows except header row",
"	echo( [ table: City, .. ] );	// \"",
"	echo( [ table: -7, ] );		// Note the required final comma. Reads header row, too",
"	echo( [ table: City,  ] );	// \"",
"",
"	echo( new line, \"Some lookup examples:\");",
"	echo( [ table: City, .. Montréal, Moving along ] );",
"	echo( [ table:  1,  -3.. , Famous attraction ] );"
 ]
	,
	"Output 03:Output - Hope to come back next year": "automatic"
},





"Matrix Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix table access" ],
    "Keywords":			[ "matrix table accesses" ],
"Description 01:Introduction" : [
"",
"	The <b>matrix table access</b> is one of the four basic __table access methods__ which combines both __horizontal table access__ and __vertical table access__",
"	in order to access cells in multiple rows and columns in one.  You can freely combine different ways to access the rows and columns, for example",
"	parameter sets for the rows and wildcards for the columns, and so forth."
 ]
	,
"Description 02:Principle" : [
"	The following illustrations hows how the different approaches can be freely combined horizontally and vertically.",
"",
"	<br/><img src=\"Images/Description_Table_Matrix_Access_Full.jpg\" alt=\"Matrix table access using different methods, full table specification\"><br/>"
 ]
	,

"Examples 02:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table : {1,7,4}, {12, 4, 8}] );",
"	echo;",
"",
"	echo( [ table : :'C*', :'*T*' ] );",
"	echo;",
"	// 1st horizontal match is country, therefore it checks for all countries containing 'T'",
"	// Country and City are retrieved",
"",
"	echo( [ table: ..'State/Province', 12..] );",
"	echo( [ table: 1..Inhabitants, Boston..6] );",
"	a[] = [ table: Inhabitants .. 'Alt. (m)', ]; // Read all rows incluuding the header",
"	for all parameters( a[], b[] ) echo( b[] );",
"",
"",
"	// Reading no data",
"",
"	echo;",
"	echo( [ table: :'xxx', :'yyy' ] );  // Returns 0 rews",
"	echo( [ table: :'C*', :'yyy' ] ); // Found 2 columns, but number of rows is 0.",
"	echo( [ table: :'xxx', :'*' ] ); // All rows, no column",
"	echo( [ table: {2,3,4}, {} ] );	// 3 columns, no row",
"	echo( [ table: {}, {2,3,4} ] );	 // No column, 3 rows",
"	echo( [ table: {}, {} ] ); // Nothing",
"	echo;",
"",
"	// Matrix access on one single row, column, cell.  Note: Always nested parameter sets",
"	// First level: Rows, 2nd level: COlumns",
"",
"	echo( [ table: {City}, 1..3 ] ); // One column",
"	echo( [ table: City..Inhabitants, {Venice} ] ); // One row",
"	echo( [ table: {Moving along}, {3} ] ); // One cell"
 ]
	,
    "Output 02:Output:": "automatic",

"Description 03:Read Accesses" : [
"	The value(s) read from the table will be provided in nested __parameter sets__: One complete set containing sets resembling rows which in turn",
"	contain the columns in their rows.<br>",
"	Example: <b>{ { Row 1 Column 1, Row 1 Column 2 }, { Row 2 Column 1, Row 2 Column 2 } } </b>.",
"	Even if the matrix access results in a single row, single column or even single cell, all such values are returned in nested parameter sets.",
"	Example: <b>[ table: { City }, { 4 } ]</b> returns <b>{ { Boston } }</b>.",
"	If the read access results in no matches (e.g. empty parameter sets provided to specify rows or columns, wildcard patterns yielding no matches",
"	and/or ranges in wrong direction), then empty sets will be returned.",
""
 ]
	,
"Description 04:Write Accesses" : [
"	Write access using matrix access method appears tricky but is not.  The most simple approach is to specify staring ranges for rows and columns",
"	and do the writing, e.g. <b>[ table: 3.., 4.. ]</b>.  Write access begins in row 4 and column 3.",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the vertical table access."
 ]
	,
"Examples 04:Programming examples" : [
"	include( Support Library );",
"	table initialize( table, { { A0 .. O0 } } );",
"	[ table: .., 1..15 ] = '.'; // Initialize with points",
"",
"	// Writing some data (actually on row 3 and 5)",
"",
"	a[] = { { 3, 4, 5, 6 }, {}, { 23, 24, 25 } };",
"",
"	[ table: 2.., 3.. ] = a[]; // Write all values (as long if inside the table",
"	[ table: J0..K0, 3.. ] = a[];  // Note: Limited to 2 columns (5,6 and 25 are not written)",
"	[ table: N0.., 10.. ] = a[]; // Writes beyond the existing headers (note 2 unnamed columns added)",
"",
"	table list( table );",
"",
"	echo(\"Further write accesses:\");",
"	table initialize( table, { { A0 .. O0 } } );",
"	[ table: .., 1..15 ] = '.'; // Initialize again",
"",
"	[ table: ..1, ..2] = { { aa, bb, cc }, { dd, ee, ff }, { gg, hh, ii } }; // Only 4 elements written",
"	[ table: 2.., -3.. ] = { 1,2,3,4,5 }; // Last 3 rows",
"	[ table: 10.., -3.. ] = {{ 1,2,3,4,5 }}; // Only 1 row",
"	[ table: H0.., 1.. ] = { {1},{2},{3},{4},{5} }; // Only 1 column",
"	[ table: B0..D0, 6..8 ] = X; // 1 value written everywhere",
"",
"	[ table: { N0, M0, K0 }, {3,2,1}  ] = a[]; // Write in opposite directions",
"",
"	table list( table );"
 ]
	,
    "Output 04:Output:": "automatic"
},



"Partial Table Specifications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "partial table specifications" ],
    "Keywords":			[ "table context" ],
"Description 01:Introduction" : [
"",
"	<b>Partial table specifications</b> provide a method to access table contents in a simpler way, for example by only mentioning the",
"	table column.  This is only possible if a current <b>table context</b> is provided.  ",
"" ],
"Description 02:Table Context" : [
"",
"	The table context provides and makes use of following default information for partial table specifications:",
"	* The current table name",
"	* The current table row",
"	* Optionally, (but not in all cases) the current table column",
"",
"	Various B4P functions provide the <b>table context</b> for the code which does either follow these functions inside a statement or block,",
"	or apply to the code provided as function parameters to these functions.",
"",
"	<br><br>",
"",
"	Examples of some functions which provide table contexts with table names and rows:",
"	* __with table(__) with 2 function parameters (table name and row)",
"	* __for all table rows(__)",
"	* __table process(__) and __table process selected rows(__)",
"	* All standard table functions which contain the ending <b>... selected rows</b>.  In this case, partial table specifciation is allowed in the __expression__ calculated for every row",
"",
"	Examples of some functions which do also provide the table colums:",
"	* __with table(__) with 3 function parameters (table name and row and column)",
"	* __table process cells(__) and likes",
"	* __table process columns(__) and  __table process selected columns(__)",
"",
"	With such a context available, the row number can also be retrieved directly with the function __row(__).",
""
 ]
	,
"Description 03:Syntax for Partial Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of strings and/or numerals.  These may be constant strings and numbers",
"	or expressions providing strings and numerals.",
"	<br><br>",
"",
"	Example 1: Current table name, current row number, specified column	",
"	=== 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		|  ]",
"		| - Header name(s)		|",
"		| - Column number(s)		|",
"		| - : Wildcards			|",
"		| - Ranges			|",
"	===",
"",
"	<br>Example 2: Other table name, current row number, specified column	",
"	=== 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Column Specifier		|  ]",
"		| Must be a string		|	| - Header name(s)		|",
"		|				|	| - Column number(s)		|",
"		|				|	| - : Wildcards			|",
"		|				|	| - Ranges			|",
"	===",
"",
"	<br>Example 3: Current table name, specified row number, specified column	",
"	=== 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		| ,	| Row Specifier				| ]",
"		| - Header name(s)		|	| - Matching contents (string), or 	|",
"		| - Column number(s)		|	| - Row numbers				|",
"		| - : Wildcards			|	| : Wildcards				|",
"		| - Ranges			|	| - Ranges				|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		| ,	| Row Specifier				| ,	| Column Specifier 2	| ]",
"		| - Header name(s)		|	| - Matching contents (string), or 	|	| - Header name(s)	|",
"		| - Column number(s)		|	| - Row numbers				|	| - Column number(s)	|",
"		| - : Wildcards			|	| : Wildcards				|	| - : Wildcards		|",
"		| - Ranges			|	| - Ranges				|	| - Ranges		|",
"	===",
""
 ]
	,
"Description 04:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Simple_Access_Partial.jpg\" alt=\"Simple table access, partial table specification\"><br/>",
""
 ]
	,
"Examples 04:Programming Examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"	with table( table, 5 ) // Row 5",
"	{",
"	    echo( [ 1 ] );",
"	    echo( [ -7 ], new line );",
"",
"	    echo( [ City ], new line );",
"",
"	    echo( [ City, San Francisco], new line ); // Exception to rule: Returns row number",
"",
"	    echo( [ City, San Francisco, Famous attraction] );",
"	    echo( [ 1, row(), 4] );",
"	    echo( [ -7, row(), -4] );",
"",
"	    echo(\"Horizontal access:\");",
"	    [table row width( table, row() )] = Street roller;",
"	    echo( [0..\"State/Province\"] );",
"	    echo( [..] ); // Entire row (till column with last header on top row)",
"	    echo( [] )  ; // Entire row (all elements, inclding the Street roler)",
"	    echo( [,6] )  ; // Read data in next row",
"	    echo( [,row()-1] )  ; // Read data in previous row",
"",
"	    echo( [,0] ); // All header names",
"",
"	    echo(\"Vertical access:\");",
"	    echo( trim( [0,] ) ); // Column 0, including header ( trim: Countries listed only once )",
"	}	"
 ]
	,
    "Output 04:Output - Staying in San Francisco": "automatic",
"Description 05:Specifying Current Columns" : [
"",
"	If the context information is also providing the current column number, then the lone point (<b>.</b>) acts as a shortcut",
"	to reference the current column.  Please note that the lone point is interpreted as a string string consisting of 1 ",
"	character (unless it is part of a numeral acting as a decimal point) and not a programming language specific symbol.",
"	This does even apply if the point is a softquoted or quoted string ( <b>'.'</b> or <b>\".\"</b> ).",
"	Alternatively, you can use the function __col(__) to get the current column number.",
"",
"	<br><br>",
"",
"	If you use the point in single quotation marks, then __shifted table column specifications__ are also supported here.",
"	For example '<.' refers to the next column to the left of the current column.",
"",
""
 ]
	,
"Examples 05:Programming Examples" : [
"	include ( Support Library );",
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	[ table: Inhabitants      , 0] = '>.'; // Change header to \">.\" for the test below",
"	[ table: Famous attraction, 0] = '.';  // Change header to '.' for the test below",
"",
"	table list( table );",
"",
"	with table( table, 5, City ) // Row 5",
"	{",
"	    echo( \"City: \", [.] );                            // Single quotation marks not needed for lone point",
"	    echo( \"City: \", ['.'], \" and State: \", ['>.'] );  // Next column after current one is referenced",
"	    echo( \"Attraction: \", [\".\"], \" and inhabitants: \", [\">.\"] );  // Note: Header \">.\" is referenced instead",
"	}",
"",
"	// Do the same without column context.  Lookig fore header called '.':",
"",
"	echo(new line, \"And Philadelphia:\");",
"	with table( table, 3 ) // Row 3",
"	{",
"	    echo( \"Attraction: \", [\".\"], \" and inhabitants: \", [\">.\"] );",
"	}"
 ]
	,
    "Output 05:Output:": "automatic",
    "See also": [ "Nested partial table specifications", "shifted table column specifications" ]
},


"Nested Partial Table Specifications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "nested partial table specification" ],
    "Keywords":			[ "nested partial table specifications" ],
"Description 01:Introduction" : [
"",
"	B4P supports nested table contexts and facilitates working with 2 tables directly with miminum coding effortsa.",
"	In order to access a table using the next outer context, use the <b>deep</b> symbol (circumflex ^) after the opening bracket.",
"        If 3 or more nested table contextsare specified, then use additional ^ symbols to reference the further outer contexts.",
"",
"	<br><br>",
"",
"	The __row(__) and __col(__) functions also provide one parameter which can be used to reference the next or further outer context.",
"",
"	<br><br>",
"	Visualized example:",
"",
"	<br/><img src=\"Images/Description_Table_Nested_Contexts.jpg\" alt=\"Nested Table Context\"><br/>",
""
 ]
	,

"Examples 01:Example" : [
"	include( Support Library );",
"	table initialize( master, { { Name, Score }, { Angela, 10 }, { Bob, 12 }, { Charlotte, 14 }, { Dan, 10 } } );",
"",
"	table initialize( new scores,",
"	{ { Name, Score },",
"	  { Bob,  3 }, { Angela, 5}, { Dan, 1 }, { Bob, 5 }, { Charlotte, 2 }, { Bob, 1 }, { Angela, 2 } } );",
"",
"	echo(\"Master table:\");	table list ( master );",
"	echo(\"New scores to add:\"); table list( new scores );",
"",
"	table process( master,  ",
"	    table process selected rows( new scores, [Name] == [^Name], [^Score] += [Score] ) );",
"",
"	echo(\"Updated master table:\"); table list( master );",
"",
"	echo(\"Demonstrate row numbers: \");",
"	with table( master, 1 ) with table ( new scores, 3 )",
"	{",
"	    echo( [Name], \" in 'new scores' row \", row() );",
"	    echo( [^Name], \" in 'master' row \", row(1) );",
"	}"
 ]
	,
    "Output 01:Output": "automatic",
"Description 02:Specifying Current Columns" : [
"",
"	At present, this symbol cannot be used to sepecify current columns in superior tables like '^.'.",
"	Please use the function __col(__) with a non-zero parameter instead, e.g. <b>[^col(1)]</b>",
"	to get current row and current column of the superior table.  See the example below."
 ]
	,

"Examples 02:Example" : [
"	include( Support Library );",
"	table initialize( t1, { { Name, Score }, { Angela, 10 }, { Bob, 12 } } );",
"",
"	table initialize( t2, { { Name, Town }, { Bob,  Denver }, { Angela, Chicago }, { Dan, Albany } } );",
"",
"	with table( t1, 2, Name )",
"	{",
"	    echo(\"From t1: \", [.] ); // Bob",
"	    with table( t2, 3, Town )",
"	    {",
"		echo(\"Name in t2: \", [Name], \" and t1: \", [^Name] ); // Dan, Bob",
"		echo;",
"		echo(\"From t2: \", [.] ); // Albany",
"		echo(\"From t1: \", [^col(1)] ); // Bob  (Note: [^.] would access t1, but use column number in t2)",
"		echo;",
"		echo(\"t2: Row: \", row(),  \" Column: \", col()  ); // Row 3, column 1",
"		echo(\"t1: Row: \", row(1), \" Column: \", col(1) ); // Row 2, column 0",
"	    }",
"	}"
 ]
	,
    "Output 02:Output:Output": "automatic"
},



"Shifted Table Column Specifications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "shifted table column specification","shifted table column specifications" ],
"Description 01:Introduction" : [
"",
"	In some situations, you know a specific column number for orientation, and want to use this column to reference a different",
"	column nearby, i.e. further to the left or to the right.  In this case, provide the header name as __softquoted string__, for example with",
"	__Text inside single quotation marks__, and start the text with one or multiple '&lt;' or '&gt' symbols.",
"	Multiple consecutive symobls can be cascaded to refer to nearby columns which are not immediate neighbors.",
"",
"	=== 40, 960, bold_column_1 noframe, noheader",
"	&lt;		| Refer to the next column to the left.  Example:  '&lt;First Name'",
"	&gt;		| Refer to the next column to the right.  Example:  '&lt;State or Province'",
"	&lt;&lt;	| Refer to 2 columns to the left left.  Example:  '&lt;&lt;First Name'",
"	&gt;&gt;	| Refer to 2 columns to the left right..  Example:  '&lt;&lt;State or Province'",
"	&lt;&gt;	| The two symbols neutralize each other",
"	&gt;&lt;	| Same here",
"	===",
"	<u>Attention</u>: The &lt; and &gt; symbols must be the 1st characters after the quotation marks.  If spaces lie inbetween, then these symbols are considered as part of header names.<br>",
"	<u>Attention</u>: Shifting does not happen in quoted strings, e.g. \"&gt;Last Name\". It assumes the header name containing the &gt; symbol.<br>",
"	",
"	<br><br>",
"	Left-shifting stops at column 0.  Attempts to go beyond will also refer to column 0. Attempting to right-shift beyond the last column is OK as long",
"	the function allows it.  Otherwise exceptions will be asserted, too.",
"",
"	<br><br>",
"	Shifted table column specifications are supported referencing tables as well as in selected function parameters expecting __table columns as function parameters__.",
"" ],
"Examples 01:" : [
"	table initialize( t,  { { Col A, Col B, Col C, Col D, Col E, Col F },",
"	                        { Val A, Val B, Val C, Val D, Val E, Val F, Val G } } );",
"",
"	echo(\"Accessing the table directly:\");",
"	echo( [ t: '<Col D', 1 ] ); // Col C",
"	echo( [ t: '>>Col D', 1 ] ); // Col F",
"	with table( t, 1 ) echo( [ '>Col A'] ); // Partial table specifcation used here, too.",
"",
"	echo(new line, \"And with function parameters:\");",
"	echo( table read column selected rows ( t, Col B, true ) ); // Val B",
"	echo( table read column selected rows ( t, '<Col B', true ) ); // Val A",
"	// echo( table read column selected rows ( t, '<<Col B', true ) ); // would assert exception",
"	echo( table read column selected rows ( t, '<>Col B', true ) );	// Val B",
"	echo( table read column selected rows ( t, '>Col E', true ) ); // Val F",
"	echo( table read column selected rows ( t, '>>Col E', true ) ); // Val G"
 ]
	,
    "Output 01:": "automatic"

},


"Header Name Exception Handling":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "header name exception handling" ],
"Description 01:Exception on headers not found" : [
"",
"	Normally, exceptions will be asserted column header names specified are not existing, e.g. <b>[ cities : Best Restaurant, .. ]</b>.",
"	However, the function __table configure(__) allows differnt options such as",
"	* Referring to the 1st column (column 0) to return some default value",
"	* Referring to the last column to return some default value",
"	* Create a new column with header name Useful for write access.  E.g. <b>[ cities: City, Boston, Best Restaurant ] = Legal Seafood;</b> would add a new row."
 ]
	,
"Examples 01:" : [
"",
"	include ( Support Library );",
"",
"	table load( table, \"Examples\\Cities.csv\" );",
"",
"	table keep columns( table, { Country, City, Famous attraction, Moving along} );",
"",
"	table configure( table, column not found, first column );",
"	echo( [ table : City, Boston, Nation ] );",
"",
"	table configure( table, column not found, last column );",
"	echo( [ table : City, Boston, Nation ] ); // Walking",
"",
"	table configure( table, column not found, new column );",
"	[ table : City, Boston, Best Restaurant ] = Legal Seafood;",
"	[ table : City, Los Angeles, Best Restaurant ] = Jack in the Box; // A chain ...",
"	[ table : City, Zürich, Pizza Takeaway ] = Dieci; // A chain ...",
"",
"	table list( table  ); "
 ]
	,
    "Output 01:": "automatic"
},



"Lookup Access Exception Handling" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "lookup access exception handling" ],
"Description 01:Exception on rows not found" : [
"",
"	Normally, exceptions will be asserted when a table reference with lookup access fails, e.g. <b>[ cities : City, Tokyo ]</b>",
"	would assert an error message and stops program execution.",
"",
"	However, the function __table configure(__) allows differnt options such as",
"	* Referring to the header row and returning the header name",
"	* Referring to the 1st row (below the header row) to return some default value",
"	* Referring to the last row (below the header row) to return some default value",
"	* Create a new row. Useful for write access.  E.g. <b>[ cities: City, Toyko, Moving along ]</b> would add a new row."
 ]
	,

"Examples 01:" : [
"	include ( Support Library );",
"",
"	table load( table, \"Examples\\Cities.csv\" );",
"",
"	table keep columns( table, { City, Famous attraction, Moving along} );",
"",
"	table configure( table, row not found, header row );",
"	echo( [ table : City, Boston   , Moving along]  ); // 'Walking'",
"	echo( [ table : City, New Haven, Moving along]  ); // 'Moving along' (Header row)",
"	echo;",
"",
"	table configure( table, row not found, new row );",
"	[ table : City, Kiruna, Moving along ] = Cross Country Skis; // Adds new row",
"",
"	table list( table, 1st row, -3 ); // List last 3 rows"
 ]
	,
    "Output 01:": "automatic"

},



"Header Names - Memory Effect" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "memory effect" ],
"Description 01:Benefit - Increasing Performance" : [
"",
"	In order to increase overall performance, all header names which are explicitly mentioned with string values,",
"	for example <b>[Family Name]</b>, <b>['Family Name]</b> or <b>[\"Family Name]</b>, the physical column position of these",
"	headers will normally be identified only once by comparing all headers from left to right, and are then memorized.",
"	<b>behind</b> the header name.  This will improve the performance when processing through entire tables whiles referencing the same headers, e.g.",
"	",
"	<br><br>",
"	<b>table process( table, [Full Name] = [First Name] + ' ' + [Last Name] )</b>.",
"	",
"	Beginning with the 2nd round, the column positions of <b>Full Name</b> and <b>First Name</b> are known and referencing these",
"	columns becomes much faster, especially on very large tables containing many columns.",
"",
"	<br><br>",
"	<u>Note:</u> Column numbers will not be memorized if variables, table references or any expressions with some algorithems are used instead.",
""
 ]
	,
"Description 02:Attentions - Memorized Columns can Strike Back!" : [
"",
"	In a different case, you create a user-defined function which proceses a particular table and refernce",
"	the the colum numbers.  See following example:",
""
 ]
	,
"Examples 02:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, string } } )",
"	{",
"		table process( table name[], echo( str([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 ); // Note: Weapons are listed and not the legs"
 ]
	,
    "Output 02:": "automatic",
"Description 03:Solving the Drawback" : [
"	The column numbers for 'Animal' and 'leg count' are memorized after their first reference, and becomes an issue when",
"	called with the 2nd table where the \"leg count\" lies in a different column further to the right and a column called \"weapon\" has taken is place there.",
"	The 2nd function call lists the weapons.",
"",
"	<br><br>",
"	Three different approches are available to solve this issue:",
"	* Instead of referencing the text value directly, do a simple <i>calculation</i> with it, e.g. putting parentheses around them: <b>[(Full Name)]</b>",
"	* Force B4P to forget the column numbers in the current program by calling __forget memorized table columns(__)",
"	* Deactivate memorizing by changing runtime settings",
""
 ]
	,
"Examples 03:Using Parentheses:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, string } } )",
"	{",
"		table process( table name[], echo( str([Animal],\"8#\" ),\": \", [(leg count)] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 );"
 ]
	,
    "Output 03:Note the right output of leg count": "automatic",
"Description 04:" : [
"	You can apply the parentheses where you suspect table columns to shift.  The position of the column will then be recalculated every time it is ",
"	referenced.  For the example code, it's six times.  "
 ]
	,

"Description 05:Consider Forgetting Column Positions" : [
"	Alternativly, consider B4P to become forgetful using the function __forget memorized table columns(__).  This is a one-time acction over the",
"	entire code in the currently loaded and running B4P program file, covering all code lines.",
"",
"	<br><br>",
"	In the following program example, the column number for 'leg count' will be forgotten and re-memorized every time the user-defined ",
"	function is called again.  The advantage of this compared to adding simple algorithmes like parentheses around header names is that you ",
"	ill not have a performance comprormise particularly for very large tables since the header positions will only be calculated once after",
"	having them forgotten."
 ]
	,

"Examples 05:Let B4P forget memorized columns:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, string } } )",
"	{",
"		forget memorized table columns; // All memorized columns in this B4P program file will be forgotten",
"		table process( table name[], echo( str([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 ); "
 ]
	,
    "Output 05:The output is OK": "automatic",
"Description 06:Deactivate Memorizing" : [
"	Finally, the <i>brute force</i> appraoch is to disable all columns being memorized.  This makes programming very safe, but may also slow",
"	overall performance a bit, particularly if the tables contain many columns, because the header name provided is compared with the existing",
"	table header names every time.  You can disable it by setting the __system variable__ <b>runtime settings[memorize table columns]</b> to <b>false</b>.",
"	This setting will apply until the B4P program has ended or the variable has been enabled again."
 ]
	,
"Examples 06:Disable memorizing" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, string } } )",
"	{",
"		table process( table name[], echo( str([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	runtime settings[memorize table columns] = false;",
"	legs( table 1 );",
"	legs( table 2 );"
 ]
	,
    "Output 06:The output is OK": "automatic"



}




 	
,



"Assignments and Expressions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Assignments and expressions" ],
"Description 01:Overview" : [
"",
"	This section addresses the following B4P building blocks:",
"",
"	* __Assignments__ which are stand-alone statements where a specified, retrieved or calculated value is assigned to a variable or table entry",
"	* __Expressions__, which break down into",
"	** __Left-Hand Side Expressions__ (LHS Expressions) to specify destination variables and table entries, and",
"	** __Right-Hand Side Expressions__ (RHS Expressions) to specify, retrieve and/or calculate return values.",
""
 ]
	,
    "See also": [ "Assignments", "LHS Expressions", "RHS Expressions" ]

},

"Assignments" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "assignments" ],
    "Keywords":			[ "Assignment", "Assignment symbol" ],
"Description 01:Overview" : [
"",
"	Assignments are one of the key building blocks in B4P and most other programming languages where a value is written (i.e. assigned) ",
"	to a destination variable or a table entry.  Only the actual target variable will be updated, regardless if that variable contains",
"	further array and/or structure members.",
"",
"	All assignments consist of 3 elements:",
"	* A __LHS Expression__ located on the <i>Left-Hand Side</i> of the assignment symbol or __assignment operator__, followed by",
"	* the <b>assignment symbol</b> <b>=</b> or a valid __assignment operator__, and concluded by",
"	* a __RHS Expression__ located on the <i>Right-Hand Side</i>.",
"",
"	__LHS Expressions__ specify destination locations in variables and tables, while __RHS Expressions__ return specified, retrieved, or",
"	calculated values.",
"",
"	<br/><img src=\"Images/LAN_Assignments.png\" alt=\"Assignments\"><br/>",
"",
""
 ]
     ,
"Examples 01:Examples" : [
"	include( Support Library );",
"",
"	echo(Some simple assignments);",
"	a[]     = 1;",
"	a[text] = Hello World;",
"	a[bool] = true;",
"	a[today] = date(today);",
"	a[calc]  = 3 + 12*5;",
"	see(a[]);"
 ]
	,
    "Output 01:": "automatic",
    "See also": [ "Expressions", "Transactions" ]

},



"Expressions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expressions" ],
    "Keywords":			[ "Expression" ],
"Description 01:Overview" : [
"",
"	Expressions are combinations of __values__, __variables__, __table references__, __function calls__ and __calculations__",
"	which are intended to create new values or refer to a particular destination location in a variable or table.",
"",
"	<br><br>",
"	Similar to other programming languages, B4P distinguishes between ",
"	* __Left-Hand Side Expressions__ (LHS Expressions), and",
"	* __Right-Hand Side Expressions__ (RHS Expressions).",
"	"
 ]
	,

    "See also": [ "LHS Expressions", "RHS Expressions" ]

},




"Left-Hand Side Expressions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Left-Hand Side Expression" ],
    "Keywords":			[ "LHS Expression", "LHS Expressions","Left-Hand Side Expressions" ],
"Description 01:Overview" : [
"",
"	The <b>LHS Expressions</b> are expressions on the <i>Left-Hand Side</i> of the assignment symbol or __assignment operator__, as well as on both",
"	sides of the __transaction operator__ in __transactions__ which are used to specify a destination in a variable or table.",
"	* __Variables__:",
"	** Both __base variables__ and members in __arrays__ and __structures__ may be referenced",
"	* __Tables__:",
"	** Individual table fields",
"	** Combination of multiple fields",
"",
"	LHS Expressions are applicable in following cases:",
"	* On the left-hand-side of all __Assignments__,",
"	* In __transactions__ on both left-hand side and right-hand-side of the __transaction operators__",
"	* __I/O Parameters__ and __Output Parameters__ in procedure and function calls",
"",
"	The following are not allowed in RHS expressions:",
"	* Applying any form of __calculations__.",
""
 ]
     ,

"Examples 01:Examples" : [
"	include( Support Library );",
"",
"	echo(LHS Examples with variables);",
"	a[]        = 10;",
"	a[name]    = 'My Name';    // Structure member 'name' added to a[]",
"	a[name,0]  = First Name;   // Array added to a[name]",
"	a[name,1]  = Middle Initial;",
"	a[name,2]  = Last Name;",
"	see(a[]);",
"",
"	echo(RHS Examples with a table);",
"	table create( List );",
"	[ List: ..,    0 ]   = { Name, Score }; // Write two values into row 0",
"	[ List: Name,  1 ]   = Amy;",
"	[ List: Score, 1 ]   = 10;",
"	[ List: Name,  2..]  = { Bea,  Claus }; // Write two values into column 0, beginning on row 2",
"	[ List: Score, 2  ]  = 20;",
"	[ List: Score, -1 ]  = 30;              // Negative indexing: -1 refers to last entry",
"	table list( List );",
""
 ]
	,
    "Output 01:": "automatic",
    "See also": ["Left-Hand Side Expressions", "Expressions" ]

},






"Right-Hand Side Expressions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Right-Hand Side Expression" ],
    "Keywords":			[ "RHS Expression", "RHS Expressions","Right-Hand Side Expressions" ],
"Description 01:Overview" : [
"",
"	The <b>RHS Expressions</b> are expressions on the <i>Right-Hand Side</i> of the assignment symbol or __assignment operator__ which",
"	are used to specify, retrieve and/or calculate values. Following rules apply:",
"	* Constant values like __numbers__ (for __numeral__ values) and __text__ (for __string__ and __boolean__ values)",
"	* __Parameter sets__,",
"	* __Variables__,",
"	** For variables, individual __Member variables__ using array subscripts and member names may be referenced:",
"	* __Table references__,",
"	** For tables, either single cells or a combination of mulitple cells (including whole rows and columns) may be specified:",
"	* __Function calls__ to functions which return values of any type,",
"	* Any calcualations:",
"	** With __unary operators__, __binary operators__ and/or __parentheses__:",
"	** Parentheses are useful to overrule __operator precedence__.",
"	* __Ad-hoc operations__ are allowed on specified variables and table entries.  Example: <b>a[]++ = 5;</b>. The 5 will be incremented by 1 to 6 after the assignment.",
"",
"	RHS Expressions are applicable in following cases:",
"	* On the right-hand-side of all __Assignments__,",
"	* __Input Parameters__ in procedure and function calls",
"	* Variable names, example: <b>('Category '+name[])[]</b>",
"	** Parentheses are mandatory if the variable specified as a __LHS expression__, e.g. <b>(name[])[] = Hello;</b>",
"** Otherwise, parentheses are mandatory if any calculations are applied in order to encompass the whole result, e.g. <b>('My '+name[])[] = Nick;</b> where  	   it is ensured that 'My ' is part of the variable name to use.",
"",
"	The following are not allowed in RHS expressions:",
"	* Applying __ad-hoc operations__ on calculated expressions and function calls, e.g. <b>(a[]+4)++</b>.",
"	* Applying them on the left-hand-side of assignment symbols, as I/O parameters in function and procedure calls, and transactions",
"",
"	<br>",
"	<u>Note:</u> Whenever the term <b>Expression</b> is referred without indications on left/right-hand sides, then <u>the right-hand-side is assumed</u>.",
""
 ]
     ,

"Examples 01:Examples" : [
"	include( Support Library );",
"",
"	echo(RHS Examples with variables);",
"",
"	a[]        = 10;",
"	a[name]    = 'My Name';",
"	a[four]    = (a[] - 2)/2;",
"	a[colors]  = { red, yellow, green, blue };",
"	a[nine]    = sqrt(81);",
"	see(a[]);",
"",
"	echo(RHS Examples with a table);",
"	table initialize ( List, {{Name, Score}, { Amy, 10}, { Bea, 20}, {Claus, 30}} );",
"	echo( [List: Name, 2] );          // Bea",
"	echo( [List: Name, Amy, Score] ); // Amy's Score: 10",
"	echo( [List: Name, ..] );         // All names in a parameter set",
""
 ]
	,
    "Output 01:": "automatic",
    "See also": ["Left-Hand Side Expressions", "Expressions" ]

},



"Calculations" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Calculations" ],
    "Keywords":			[ "Calculation" ],
"Description 01:Overview" : [
"",
"	Calculations are seen as part of __RHS expressions__ where a calculation is applied on 1 or more values using",
"	__operators__ or __function calls__ are made.",
""
 ]
     ,

"Examples 01:Examples" : [
"	echo( 1 + 2 * sqrt(9) ); // Returns 7",
"	echo( \"Drive\" + (\"Highway\" - \"High\") ); // Returns \"Driveway\""
 ]
	,
    "Output 01:": "automatic",
    "See also": ["Operators", "Expressions", "RHS Expressions"]

},




"Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Operator", "Operators" ],
    "Keywords":			[ "Precedence" ],
"Description 01:Overview" : [
"",
"	Operators are symbols which represent an action or process and are basic elements in arithmetics.",
"	B4P distinguishes between following semantic operator types:",
"",
"	* __Unary operators__ are simple operators added in front of a value or expression, e.g. a minus sign for negation, logical NOT, etc.",
"	* __Binary operators__ are operators between two expressions, e.g. to describe additions, multiplications, etc.",
"	* __Assignment operators__ allow a simplified formulation such as <b>a[] -= b[];</b> which is equivalent to <b>a[] = a[] - b[];</b>",
"	* __Ad-hoc operators__ can be applied on __LHS expressions__ able to reference to tables and variables.  Example: <b>a[]++;</b> is equivalent to <b>a[] = a[] + 1;</b>",
"",
"	In a different dimension, B4P distinguishes between follwoing algorithmic operator types applicable to both binary operators and assignment operators:",
"	* __Arithmetic operators__ covers the four basic arithmetic operators",
"	* __Logical operators__ covers lgoical AND and OR",
"	* __Comparison operators__ covers equal, less and greater-than, etc.",
""
 ]
	,
    "See also": ["Unary operators", "Binary operators", "Assignment operators", "Ad-hoc operators", "Arithmetic operators", "Logical operators", "Comparison operators"]

},



"Operator Precedence and Parentheses" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Operator Precedence" ],
    "Keywords":			[ "Precedence", "Parentheses" ],
"Description 01:Overview" : [
"",
"	B4P applies meaningful <b>operator precedence</b> rules when carrying out calculations with",
"	unary and binary operators.  For calculation examples, do the multiplications and divisions",
"	first, and then the additions and subtractions (briefly said in German: <i>Punktrechnung vor Strichrechnung</i>).",
"	Use parentheses to influence the precedence rules.",
"",
"	=== 100, 200, 700, bold_column_1 bold_column_2",
"	Precedence	| Symbols	| Description",
"	1 (highest)	| +, -, ~, !	| All unary operators",
"	2		| *, /		| Arithmetic operators: multiplication and division",
"	3		| +, -		| Arithmetic operators: addition and subtraction",
"	4		| =, ==, &lt;&gt;, !=, &gt, &gt;, &lt;, &lt;= | Comparison operators",
"	5 (lowest)	| &amp;, &vert;	| Logical operators",
"	===",
"	The operators are described in the following section.",
"" ],
"Description 02:Parentheses" : [
"",
"	Parentheses can be used to overrule the operator precdences."
 ]
     ,

"Examples 02:Examples" : [
"echo(  3 + 10 *2 + 100*4 ); // 423",
"echo( (3 + 10)*2 + 100*4 ); // 426",
"",
"echo( 3 + 2 >= 2 + 2 );     // True",
"echo( 3 + (2 >= 2) + 2 );   // 6 (True in middle converts to 1)"
 ]
	,
    "Output 02:": "automatic",
    "See also": ["Binary Operators", "Unary Operators"]

},



"Unary Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "unary operators" ],
"Description 01:Introduction" : [
"",
"	<br/><img src=\"Images/Description_Formulas_Unary_Operators.jpg\" alt=\"Unary Operators\"><br/>",
"",
"	<sup>1</sup> First character is capitalized.  All other characters are not touched.<br>",
"	<sup>2</sup> Mirroring, example: !{a,b,c} returns {c,b,a}.  Contents in nested parameter sets remain unaffected (no mirroring there).<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > string > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 01:" : [
"	a[0] = -1;",
"	a[1] = -'heLLO world';",
"	a[2] = +'heLLO world';",
"	a[3] = !'heLLO world';",
"	a[4] = ~ Hello World;",
"	a[5] = + { 3, a, f, { a, b, d}, { c, a, b }, 1, true, date(today), 5, b,  };",
"	a[6] = - { 3, a, f, { a, b, d}, { c, a, b }, 1, true, date(today), 5, b,  };",
"	a[7] = + false;",
"	a[8] = - false;",
"	a[9] = + true;",
"	a[10] = - true;",
"	a[11] = ! true;",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"
},



"Binary Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "binary operators" ],
"Description 01:Introduction" : [
"	Binary operators consist of the following:",
"	* __arithmetic operators__",
"	* __comparison operators__",
"	* __logical operators__",
""
 ]


},



"Arithmetic Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "arithmetic operator" ],
    "Keywords":			[ "arithmetic operators" ],
"Description 01:Introduction" : [
"	Arithmetic operators cover the four basic mathematical operations:",
"	* __addition__",
"	* __subtraction__",
"	* __multiplication__",
"	* __division__",
"",
"	The operators can also be imposed on non-numeric data types which result in different operations (e.g. string operations)",
"	or implicit conversion to numerals before operation (e.g. boolean values converted to 0 or 1 before operation is carried out).",
""
 ]


},


"Additions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "addition" ],
"Description 01:Introduction" : [
"",
"	Basic rules to additions:",
"	* Numbers are added together as learnt in 1st grade.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Strings are catenated.",
"	* The elements in parameter sets are also catenated.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"	",
"",
"	<br/><img src=\"Images/Description_Formulas_Additions.jpg\" alt=\"Additions\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 + 3;",
"	a[1] = Hello + ' ' + World;",
"	a[2] = 0.5 + true;",
"	a[3] = { a, b, c } + { c, d };",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Addition of Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Additions_of_Dates.jpg\" alt=\"Additions of Dates\"><br/>",
"",
"	'Date 1' and 'Time 1' refer to the data from the left operand whereas 'Date 2' and 'Time 2' refer to the right operand.<br>",
"	<sup>1</sup> Only fractional part (digits behind decimal point) are used to add time value.  Value must be between 0 and (24*60*60-1)/(24*60*60).  Calculated sum must lie within 00:00:00 and 23:59:59.<br>",
"	<sup>2</sup> Only the integer (whole number before decimal point) is used for the calculation.<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > string > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('09:15:00');",
"	o [] = date(''); // blank date",
"",
"	a[0] = d[] + 3.25;     // Just integer is used",
"	a[1] = dt[]+ 3.25;    // 3 days, 6 hours",
"	a[2] = t[] + 0.25;     // 6 hours",
"	a[3] = d[] + t[];     // Date + time combind",
"	a[4] = d[] + true;     // add 1 day",
"	a[5] = o[] + d[];      // Add date to blank date",
"",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},


"Subtractions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "subtraction" ],
"Description 01:Introduction" : [
"",
"	Basic rules to subtractions:",
"	* Numbers are subtracted from each other as learnt at school.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Strings: The first occurrences of the (sub-)string in the right operand found in the left operand will be removed, but not all.",
"	* Parameter sets: The first occurrences of the elements in the right operand found in the left operand will be removed, but not all.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"",
"	<br/><img src=\"Images/Description_Formulas_Subtractions.jpg\" alt=\"Subtractions\"><br/>",
"",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 - 3;",
"	a[1] = Hello - ell;",
"	a[2] = 0.5 - true;",
"	a[3] = { a, b, c, c } - { c, d }; // Removes one c, not all",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Subtraction of Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Subtractions_of_Dates.jpg\" alt=\"Subtraction of Dates\"><br/>",
"",
"	'Date 1' and 'Time 1' refer to the data from the left operand whereas 'Date 2' and 'Time 2' refer to the right operand.<br>",
"	<sup>1</sup> Only fractional part (digits behind decimal point) are used to add time value.  Value must be between 0 and (24*60*60-1)/(24*60*60).  Calculated sum must lie within 00:00:00 and 23:59:59.<br>",
"	<sup>2</sup> Only the integer (whole number before decimal point) is used for the calculation.<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > string > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('09:15:00');",
"	o [] = date(''); // blank date",
"",
"	a[0] = d[] - 3.25;    // Just integer is used",
"	a[1] = dt[]- 3.25;    // 3 days, 6 hours",
"	a[2] = t[] - 0.25;    // 6 hours",
"	a[3] = d[] - true;    // subtract 1 day",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},


"Multiplications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "multiplication" ],
"Description 01:Introduction" : [
"",
"	Basic rules to subtractions:",
"	* Numbers are multiplied with each other as learned in business school (probably a bit too late).",
"	* Boolean values are converted to 0 and 1 first.",
"	* Parameter sets: Parameter sets can be multiplied with numbers in order to repeat the elements.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"	<br/><img src=\"Images/Description_Formulas_Multiplications.jpg\" alt=\"Multiplications\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 * 3;",
"	a[1] = '' * 10; // Blank = 0",
"	a[2] = 0.5 * true;",
"	a[3] = { a, b, c } * 3; // Repetition",
"	a[4] = { a, b, c } * 0; // Empty set",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"

},


"Divisions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "division" ],
"Description 01:Introduction" : [
"",
"	Basic rules to divisions:",
"	* Numbers are divided with each other as learned in 2nd grade.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Strings: All occurrences of the (sub-)string in the right operand found in the left operand will be removed.",
"	* Parameter sets: All occurrences of the elements in the right operand found in the left operand will be removed.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"	<br/><img src=\"Images/Description_Formulas_Divisions.jpg\" alt=\"Divisions\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	include ( Support Library );",
"	a[0] = 5 / 3;",
"	a[1] = '' / 10; // Blank = 0",
"	a[2] = 0.5 * true;",
"	a[3] = { a, b, c, c, d } / { b, c }; // Removes all matching elements",
"	a[4] = This is a great tiger / i; // All i's removed",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"

},



"Comparison Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comparison operators", "comparison expression", "comparisons", "selection of multiple values", "value ranges", "value range" ],
"Description 01:Introduction" : [
"	Unlike other programming languages which define 6 comparison operators, B4P supports 8 comparison operators which can be combined with __comparison options__",
"	to make adjustments on the comparison rules:",
"	* <b>&lt;</b> Less than",
"	* <b>&lt;=</b> Less than or equal to",
"	* <b>&gt;</b> Greater than",
"	* <b>&gt;=</b> Greater than or equal to",
"	* <b>=</b> Equal to, expecting 1 or more operands separated by comma (comparing with a <b>selection of multiple values</b> separated with commas) and/or <b>ranges</b>.",
"	* <b>&lt;&gt;</b> Not equal to, expecting 1 or more operands separated by comma (comparing with a <b>selection of multiple values<b> separated with commas) and/or <b>ranges</b>.",
"	* <b>==</b> __strictly Equal to__, expecting 1 operand only",
"	* <b>!=</b> __strictly not equal to__, expecting 1 operand only",
"",
"	Comparisons with b>=</b> and <b>&gt;&lt;</b> are more tolerant in comparing numbers and strings containing numbers, and also support",
"	wildcard symbols on the right-hand operands if they are defined as __softquoted strings__ (e.g. __text inside single quotation marks__).",
"",
""
 ]
	,
"Description 02:Attention! = and &lt;&gt; may Hijack Parameters" : [
"",
"	<u>Attention</u>: As the two comparison operators <b>=</b> and <b>&gt;&lt;</b> expect 1 or more operands on the right hand side,",
"	you may risk situations where the comparison hijacks the remaining comma-separated values on the right-hand-side typically encountered",
"	in function parameters and values in parameter sets.  To avoid this, put the comparison into parentheses, or use the <b>==</b> and <b>!=</b>",
"	symbols."
 ]
	,
"Examples 02" : [
"	b[] = 12; ",
"	// Want to compare b[] == 9 and include the result in the parameter set between 'false' and 12",
"	// Good luck!",
"",
"	a[0] = { 3, 6, false, b[] =  9 , 12, 15 }; // Comparison has hijacked the last two parameters",
"	a[1] = { 3, 6, false,(b[] =  9), 12, 15 }; // OK",
"	a[2] = { 3, 6, false, b[] == 9 , 12, 15 }; // OK",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02": "automatic"
},




"Wildcards" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "wildcards" ],
    "Keywords":			[ "wildcard symbols" ],
"Description 01:Introduction" : [
"",
"	B4P supports wildcards which enables for more effective search and comparison functions as they enable pattern matching with concepts such as",
"	* Begins with ...",
"	* Ends with ...",
"	* Contains ...",
"	* Multiple patterns separated by cmmas ...",
"",
"",
"	Wildcards are used, amongst others, in following functionalities:",
"	* Comparison operators __equal to__ <b>=</b> and __not equal to__ <b>&lt;&gt;</b> where the operands on the right hand side may consist of strings containing wildcards",
"	* __Horizontal table access using wildcards__ and __vertical table access using wildcards__",
"	* Various B4P functions accepting parameters allowign wildcards for pattern matching",
"	* Searching for files, e.g. __directory listing(__) and __resolve path name(__) function.",
"",
"	Unless specified otherwise (like in searching files), wildcard symbols in strings will only work if specified as __softquoted strings__ (e.g. __text inside single quotation marks__).",
"",
" 	=== 100, 200, 100, 600, bold_column_1 bold_column_3",
"	Symbol	| Meaning						| Example			| Explanation",
"*	| Plaholder for any number of characters (incl. 0)	| A*<br>*s<br>*-*<br>A*E	| Begins with 'A' <br>Ends with 's'<br>Contains '-' <br> 													  Begins with 'A' and ends with 'E'",
"~	| Placeholder for any number of letters (incl. 0)<br> 		  Foreign (non-ANSI) characters are accepted here, too.	| ~ Street			| Expecting a name for the street (letters only)",
"	&amp;	| Placeholder for any number of numeric digits 0..9	| &amp; kg			| Expects a number of any size before ' kg'",
"	?	| Placeholder for exactly 1 character			| ???<br>A?			| Contains 3 characters of choice<br>A follwed by 1 character of choice",
"	#	| Placeholder for exactly 1 numeric digit 0..9		| ###-##-####			| Expect a social security number (U.S. number format)",
"^	| Placeholder for exactly 1 alphanumeric character<br> 		  Foreign (non-ANSI) characters are accepted here, too.	| ^^^				| Expect 3 letters",
"	,	| Defines additional pattern to compare			| A*,B*,C*			| May begin with A, B or C.",
"	===",
"",
"	For searching files using directory and file functions, the wildcards are limited to * and ?.",
""
 ]
	,
"Examples 01:Programming example" : [
"	include( Support Library );",
"",
"	table initialize ( demo wildcards,",
"	{ { Target string, '*', '~', 'A*', '&', 'Zip*#####', '??t', '*t', 'A*,B*,C*' },",
"	    Hello,",
"	    1234,",
"	    12345,              // Column headers contain wildcard symbols",
"	    Zip 12010,          // 1st column contain target strings to compare with these patterns",
"	    Cat,                // The blank rows will be filled in with comparison results",
"	    Bat,                // 'true' and 'false'.",
"	    halt } );",
"",
"	table configure( demo wildcards, read numerals, no ); // Read numbers from tables as strings",
"",
"	table process( demo wildcards,",
"	    for (c[] = 1, c[] < table row width( demo wildcards, 0 ), c[]++ )",
"	    {",
"	        [c[]]      = [0]      = soft( [c[], 0 ] ); // Compare and write the result",
"	        // Current   Column   Compared with corresponding header name above",
"	        // column    zero",
"	    } );",
"",
"	table list( demo wildcards );"
 ]
	,
	"Output 01": "automatic"
},


"Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to equal-to comparisons which are a bit more relaxed than the __strictly equal to__ comparison operator:",
"	* The number of operands on the right-hand-side is not limited to 1.  A selection of multiple values may be specified as well as ranges.",
"	* __Wildcards__ are supported in the right-hand operand if the value is a __softquoted string__ (e.g. specified inside single quotation marks)",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, but they do not need to be in the same order",
"	* Dates, Booleans and numerals can be compared with strings if they have the same text value / string representation (e.g. if printed out). Example: '5' = 5, and 'true' = true are both true.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Equal_to.jpg\" alt=\"Comparison Equal to\"><br/>",
"",
"	<sup>1</sup> If a numeral is compared with a string, then a string copy will be made of the numeral and both strings are compared.<br>",
"	<sup>2</sup> If a date is compared with a string, then a string copy will be made of the date and both strings are compared.  Depending on the state of the date, the format is \"YYYY-MM-DD\", \"HH:II:SS\", or \"YYYY-MM-DD HH:II:SS\".<br>",
"	<sup>3</sup> If a boolean value is compared with a string, then a string copy will be made of the boolean value and both strings are compared.<br>",
"	<sup>4</sup> Contents in both sets must be the same, but the ordering does not matter.  E.g. {1,2,3} = {3,2,1} returns true.  Values (but not subsets) inside the parameter sets are compared with the __strictly equal to__ <b>==</b> operator.",
"",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 = 3;		// true",
"	a[1] = 5.1 = 5;         // false",
"	a[2] = 5 = 2,3,5,7;     // true",
"	a[3] = 5 = 2,2+1,5,7;	// true",
"	a[4] = 5 = 1..3;	// false",
"	a[5] = 5 = 4..7;	// true",
"	a[6] = 5 = 1..3,5,7;	// true",
"	a[7] = {1,2,3} = {3,2,1}; // true",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"String with other types:\");",
"",
"	b[0] = 123 = \"123\";         // true",
"	b[1] = '123' = 123;         // true",
"	b[2] = false = 'false';     // true",
"	b[3] = false = 'False';     // false",
"	b[4] = date(\"2020-08-01\") = \"2020-08-01\";  // true",
"	b[5] = date(\"2020-08-01\") = \"01.08.2020\";  // false",
"	// The last one is 'false' because string representation of date is YYYY-MM-DD",
"",
"	for all variables( b[], x[] ) echo( x[] );",
"",
"	echo(\"Compare with wildcards:\");",
"",
"	c[0] = Hello World = '*o*'; // Contains 0, true",
"	c[1] = Hello World = \"*o*\"; // Not equal to string \"*o*\", false",
"	c[2] = Hi = 'Ha,Hi,Ho';     // Wildcard with commas, true",
"	c[3] = Hi = Ha,Hi,Ho;       // Selection with commas, true",
"",
"	for all variables( c[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] = dt[];   // true, dates same, time not compared",
"	a[1] = t[] = dt[];   // true, times same, date not compared",
"	a[2] = d[] = date(\"2020-07-15\") - 1; // true",
"	a[3] = dt[] = dz[];   // false (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Not Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "not equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to not-equal-to comparisons which are a bit more relaxed than the __strictly not equal to__ comparison operator:",
"	* The number of operands on the right-hand-side is not limited to 1.  A selection of multiple values may be specified as well as ranges.",
"	* __Wildcards__ are supported in the right-hand operand if the value is a __softquoted string__ (e.g. __text inside single quotation marks__).",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, but they do not need to be in the same order",
"	* Dates, Booleans and numerals can be compared with strings if they have the same text value / string representation (e.g. if printed out). Example: '5' = 5, and 'true' = true are both true.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to.jpg\" alt=\"Comparison not Equal to\"><br/>",
"",
"",
"	<sup>1</sup> If a numeral is compared with a string, then a string copy will be made of the numeral and both strings are compared.<br>",
"	<sup>2</sup> If a date is compared with a string, then a string copy will be made of the date and both strings are compared.  Depending on the state of the date, the format is \"YYYY-MM-DD\", \"HH:II:SS\", or \"YYYY-MM-DD HH:II:SS\".<br>",
"	<sup>3</sup> If a boolean value is compared with a string, then a string copy will be made of the boolean value and both strings are compared.<br>",
"	<sup>4</sup> Contents in both sets must be the same, but the ordering does not matter.  E.g. {1,2,3} <> {3,2,1} returns false, however strictly comparison {1,2,3} != {3,2,1} returns true.  Values (but not subsets) inside the parameter sets are compared with the __strictly not equal to__ <b>!=</b> operator.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 <> 3;		// false",
"	a[1] = 5.1 <> 5;         // true",
"	a[2] = 5 <> 2,3,5,7;     // false",
"	a[3] = 5 <> 2,2+1,5,7;	// false",
"	a[4] = 5 <> 1..3;	// true",
"	a[5] = 5 <> 4..7;	// false",
"	a[6] = 5 <> 1..3,5,7;	// false",
"	a[7] = {1,2,3} <> {3,2,1}; // false",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"String with other types:\");",
"",
"	b[0] = 123 <> \"123\";         // false",
"	b[1] = '123' <> 123;         // false",
"	b[2] = false <> 'false';     // false",
"	b[3] = false <> 'False';     // true",
"	b[4] = date(\"2020-08-01\") <> \"2020-08-01\";  // false",
"	b[5] = date(\"2020-08-01\") <> \"01.08.2020\";  // true",
"	// The last one is 'true' because string representation of date is YYYY-MM-DD",
"",
"	for all variables( b[], x[] ) echo( x[] );",
"",
"	echo(\"Compare with wildcards:\");",
"",
"	c[0] = Hello World <> '*o*'; // Contains o, false",
"	c[1] = Hello World <> \"*o*\"; // Not equal to string \"*o*\", true",
"	c[2] = Hi <> 'Ha,Hi,Ho';     // Wildcard with commas, false",
"	c[3] = Hi <> Ha,Hi,Ho;       // Selection with commas, false",
"",
"	for all variables( c[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] <> dt[];   // false, dates same, time not compared",
"	a[1] = t[] <> dt[];   // false, times same, date not compared",
"	a[2] = d[] <> date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] <> dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Strictly Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "strictly equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to strictly-equal-to comparisons:",
"	* The number of operands on the right-hand-side is always 1.  No risk of hijacking parameters.",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with strings, will always be unequal.",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, and they need to be in the same order.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Equal_to.jpg\" alt=\"Comparison Equal to\"><br/>",
"",
"	<sup>1</sup> Contents in both sets must be the same and in the same ordering E.g. {1,2,3} = {3,2,1} returns false.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 == 3;             // true",
"	a[1] = 5.1 == 5;           // false",
"	a[2] = {1,2,3} == {3,2,1}; // false",
"	a[3] = {1,2,3} == {1,2,3}; // true",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"String with other types always return false:\");",
"",
"	b[0] = 123 == \"123\";         // false",
"	b[1] = '123' == 123;         // false",
"	b[2] = false == 'false';     // false",
"	b[3] = date(\"2020-08-01\") == \"2020-08-01\";  // false",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] != dt[];   // true (one contains time, the other not)",
"	a[1] = t[] != dt[];   // true (one contains date, the other not)",
"	a[2] = d[] != date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] != dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},



"Strictly Not Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "strictly not equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to strictly-equal-to comparisons:",
"	* The number of operands on the right-hand-side is always 1.  No risk of hijacking parameters.",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with strings, will always be unequal.",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, and they need to be in the same order.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Not_Equal_to.jpg\" alt=\"Comparison not Equal to\"><br/>",
"",
"	<sup>1</sup> Contents in both sets must be the same and in the same ordering E.g. {1,2,3} = {3,2,1} returns false.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 != 3;             // false",
"	a[1] = 5.1 != 5;           // true",
"	a[2] = {1,2,3} != {3,2,1}; // true",
"	a[3] = {1,2,3} != {1,2,3}; // false",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"String with other types always return false:\");",
"",
"	b[0] = 123 != \"123\";         // true",
"	b[1] = '123' != 123;         // true",
"	b[2] = false != 'false';     // true",
"	b[3] = date(\"2020-08-01\") != \"2020-08-01\";  // true",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] != dt[];   // true (one contains time, the other not)",
"	a[1] = t[] != dt[];   // true (one contains date, the other not)",
"	a[2] = d[] != date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] != dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},



"Smaller than (or Equal to)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "smaller than or equal to" ],
    "Keywords":			[ "smaller than" ],
"Description 01:Introduction" : [
"",
"	Basic rules to smaller than / smaller than or equal to comparisons:",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with strings, will always return false.",
"	* When comparing parameter sets, the sorting order of the parameter is compared.",
"",
"	<br/><img src=\"Images/Description_Formulas_Smaller_than_or_Equal_to.jpg\" alt=\"Comparison Smaller than (or Equal to)\"><br/>",
"",
"	<sup>1</sup> When comparing parameter sets, the following sorting order across different data types applies: parameter set > string > date > numeral > boolean, ",
"	then followed by contents if types are equal. For sets with common contents and different lengths,",
"	the longer one is considered as the \"greater\" one.  Nested sets will also be compared.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3   <  3;            // false",
"	a[1] = 3   <= 3;            // true",
"	a[2] = 4.9 <  5;            // true",
"	a[3] = Ha  < He;            // true (sorting order)",
"	a[4] = {1,2,3} <  {3,2,1};  // true",
"	a[5] = {1,2,3} <  {1,2,3};  // false",
"	a[6] = {1,2,3} <= {1,2,3};  // true",
"	a[7] = {1,2,3} < {1,2,3,4}; // true",
"	a[8] = false < true;        // true",
"	a[9] = a < 1;               // always false",
"",
"	for all variables( a[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Smaller_than_or_Equal_to_of_Dates.jpg\" alt=\"Comparison Smaller than (or Equal to) of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	dt1[] = date('2020-07-14 12:30:00');",
"	dt2[] = date('2020-08-01 06:45:00');",
"	d1 [] = date('2020-07-14');",
"	d2 [] = date('2020-08-01');",
"	t1 [] = date('12:30:00');",
"	t2 [] = date('06:45:00');",
"",
"	a[0] = dt1[] < dt2[]; // true",
"	a[1] = dt1[] < t2 []; // Times compared, false",
"	a[2] = dt2[] < d1 []; // Dates compared, false",
"	a[3] = dt2[] < t2 []; // Times compared, false",
"	a[4] = dt2[] <=t2 []; // Times compared, true",
"	a[5] = dt1[] < d1 []; // Dates compared, false",
"	a[6] = dt1[] <=d1 []; // dates compared, true",
"	a[7] = dt1[] < dt1[]; // false",
"	a[8] = dt1[] <=dt1[]; // true",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Greater than (or Equal to)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "greater than or equal to" ],
    "Keywords":			[ "greater than" ],
"Description 01:Introduction" : [
"",
"	Basic rules to greater than / greater than or equal to comparisons:",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with strings, will always return false.",
"	* When comparing parameter sets, the sorting order of the parameter is compared.",
"",
"	<br/><img src=\"Images/Description_Formulas_Greater_than_or_Equal_to.jpg\" alt=\"Comparison Greater than (or Equal to)\"><br/>",
"",
"	<sup>1</sup> When comparing parameter sets, the following sorting order across different data types applies: parameter set > string > date > numeral > boolean, ",
"	then followed by contents if types are equal. For sets with common contents and different lengths,",
"	the longer one is considered as the \"greater\" one.  Nested sets will also be compared.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3   >  3;            // false",
"	a[1] = 3   >= 3;            // true",
"	a[2] = 4.9 >  5;            // false",
"	a[3] = Ha  > He;            // false (sorting order)",
"	a[4] = {1,2,3} >  {3,2,1};  // false",
"	a[5] = {1,2,3} >  {1,2,3};  // false",
"	a[6] = {1,2,3} >= {1,2,3};  // true",
"	a[7] = {1,2,3} > {1,2,3,4}; // false",
"	a[8] = false > true;        // false",
"	a[9] = a > 1;               // always false",
"",
"	for all variables( a[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Greater_than_or_Equal_to_of_Dates.jpg\" alt=\"Comparison Greater than (or Equal to) to of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	dt1[] = date('2020-07-14 12:30:00');",
"	dt2[] = date('2020-08-01 06:45:00');",
"	d1 [] = date('2020-07-14');",
"	d2 [] = date('2020-08-01');",
"	t1 [] = date('12:30:00');",
"	t2 [] = date('06:45:00');",
"",
"	a[0] = dt1[] > dt2[]; // false",
"	a[1] = dt1[] > t2 []; // Times compared, true",
"	a[2] = dt2[] > d1 []; // Dates compared, true",
"	a[3] = dt2[] > t2 []; // Times compared, false",
"	a[4] = dt2[] >=t2 []; // Times compared, true",
"	a[5] = dt1[] > d1 []; // Dates compared, false",
"	a[6] = dt1[] >=d1 []; // dates compared, true",
"	a[7] = dt1[] > dt1[]; // false",
"	a[8] = dt1[] >=dt1[]; // true",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},


"Logical Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical operators" ],
"Description 01:Introduction" : [
"	Logical operators cover the follwoing two operators:",
"	* __logical and__",
"	* __logical or__",
"",
"	The operators are only applicable to boolean values and parameter sets.",
"	__Comparison operators__ can be used to calculate exclusive OR (not equal operator) and equivalence (equal operator).",
""
 ]
    
},


"Logical And" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical and" ],
"Description 01:Introduction" : [
"",
"	Basic rules to logical AND (Symbol: <b>&amp;</b>):",
"	* For boolean values the logical AND operator is applied.",
"	* For parameter sets, the intersection of equal elements will be identified.",
"	* All other data types wll be rejected",
"",
"	<br/><img src=\"Images/Description_Formulas_Logical_And.jpg\" alt=\"Logical And\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	echo(\"On boolean values:\");",
"",
"	a[0] = false & false;",
"	a[1] = true & false;",
"	a[2] = true & true;",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"On parameter sets:\");",
"",
"	b[0] = { a, b, c, 1, 2 } & { d, f, 3 }; // Empty set",
"	b[1] = { a, b, c, 1, 2 } & { c, b, 3 }; // {b, c}",
"	b[2] = { a, b, c, 1 ,2 } & { 1, 2, c }; // {c, 1, 2}",
"	b[3] = { a, b, b, c } & { b, a, b, b }; // {a, b, b}",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic"

},

"Logical Or" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical or" ],
"Description 01:Introduction" : [
"",
"	Basic rules to logical OR  (Symbol: <b>&vert;</b>):",
"	* For boolean values the logical OR operator is applied.",
"	* For parameter sets, the union of equal elements will be identified.",
"	* All other data types wll be rejected",
"",
"	<br/><img src=\"Images/Description_Formulas_Logical_Or.jpg\" alt=\"Logical Or\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	echo(\"On boolean values:\");",
"",
"	a[0] = false | false;",
"	a[1] = true | false;",
"	a[2] = true | true;",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"On parameter sets:\");",
"",
"	b[0] = { a, b, 1 } | { 1, b, a }; // {a, b, 1}",
"	b[1] = { a, b, 1 } | { 1, b, c }; // {a, b, 1, c}",
"	b[2] = { a, b, b } | { b, b, c }; // {a, b, b, c}",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic"

},


"Comparison Options" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comparison options" ],
    "Keywords":			[ "Epsilon" ],
"Description 01:Introduction" : [
"",
"	Comparison options provide further adjustments on the comparison rules.  The rules affect the following:",
"	* String comparisons: Ignoring case and/or blanks",
"	* Numeric comparisons: Using epsilon as tolerance value.",
"",
"	<br/><img src=\"Images/Description_Formulas_Comparison_Options.jpg\" alt=\"Comparison Options\"><br/>"
 ]
	,
"Description 02:Options for String Comparisons" : [
"	Specify '+' after the comparison operator to ignore upper/lower case checking, and '~' to ignore all blanks.",
"	Both symbols may be used where it does not matter if specified as '+~' or the '~+'.",
""
 ]
	,
"Examples 02:Comparing varieties of ahorns and the F horn (an instrument)" : [
"	include( Support Library );",
"	runtime settings[ epsilon ] = 0.001; // Make comparisons very tolerant for now to show how it works",
"",
"	// 1st number is on left side of comparison, the others are on the right sides",
"	numbers[] = { A horn, A Horn, AHorn, A horn, Ahorn, a horn, ahorn, F horn };",
"	symbols[] = { '=',  '=~',  '=+',  '=+~',  '', // Blanks cause line breaks for better visibility",
"	              '<>', '<>~', '<>+', '<>+~', '',",
"	              '>',   '>~', '>+',  '>+~',  '',",
"	              '>=',  '>=~','>=+', '>=+~', '',",
"	              '<',   '<~', '<+',  '<+~',  '',",
"	              '<=',  '<=~','<=+', '<=+~' };",
"",
"	table initialize( overview, {numbers[]} + symbols[] );",
"",
"	table process selected rows( overview, [0]!='',",
"	    for (col[] = 1, col[] < table row width( overview, 0 ), col[]++ )",
"	    {",
"		// Formulate the coparison expression in a string and use 'compare' to use it. Colon required for this.",
"		// [0,0] = Current table (overview), column 0, row 0.   [0] = Current table, column 0, current row",
"",
"	        [col[]] = compare ( [0,0], : [0] + [col[],0] );",
"	    } );",
"",
"	table list( overview );	"
 ]
	,
    "Output 02": "automatic",
"Description 03:Options for Numeric Comparisons" : [
"	For numeric comparisons, the plus sign is ignored.  However, the '~' sign provides a numeric tolerance of value epsilon.",
"	This value is maintained in the system variable <b>run time settings[epsilon]</b> and may be changed to a different",
"	meaningful value if needed.  Tolerant comparisons make sense for comparing two values which have gone through some",
"	calculatons and minor numeric imprecisions may have occurred which should not adversely influence numeric comparisons.",
"",
"	The following overview illustrates how the epsilon comparison tolerance is applied for the different operators:",
"",
"	<br/><img src=\"Images/Description_Formulas_Comparison_Epsilon.jpg\" alt=\"Comparison Options\"><br/>",
""
 ]
	,
"Examples 03:Simple example of comparisons dealing with minor imperfections from calculations" : [
"	a[] = 1.2156;",
"	b[] = a[] * 1.9123 * 2.591271 / 1.9123 / 2.591271; // Result should be unchanged  ...theoretically.",
"",
"	echo( a[], \", \", b[] );",
"	echo( \"Epsilon: \", runtime settings[epsilon] );",
"	echo( \"Hard comparison    : \", a[] = b[] );	// Falsely outputting false",
"	echo( \"Tolerant comparison: \", a[] = ~b[] );	// Now it's OK (both values are within epsilon tolerance)"
 ]
	,
    "Output 03": "automatic",
"Examples 04:Comprehensive overview" : [
"	include( Support Library );",
"	runtime settings[ epsilon ] = 0.001; // Make comparisons very tolerant for now to show how it works",
"",
"	// 1st number is on left side of comparison, the others are on the right sides",
"	numbers[] = { 15.0000, 14.9989, 14.9990, 14.9991, 15.0000, 15.0009, 15.0010, 15.0011 };",
"	symbols[] = { '=', '=~', '<>', '<>~', '>', '>~', '>=', '>=~', '<', '<~', '<=', '<=~' };",
"",
"	table initialize( overview, {numbers[]} + symbols[] );",
"",
"	table process( overview, ",
"	    for (col[] = 1, col[] < table row width( overview, 0 ), col[]++ )",
"	    {",
"		// Formulate the coparison expression in a string and use 'compare' to use it. Colon required for this.",
"		// [0,0] = Current table (overview), column 0, row 0.   [0] = Current table, column 0, current row",
"",
"	        [col[]] = compare ( [0,0], : [0] + str( [col[],0] ) );",
"	    } );",
"",
"	table list( overview );	"
 ]
	,
    "Output 04:": "automatic"
},



"Assignment operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Assignment operator", "Assignment operators" ],
"Description 01:Introduction" : [
"",
"	Similar to C/C++, B4P supports assignment operators as listed in the table below. An assignment operator such as <b>a[]+=3</b>; ",
"	is equivalent to <b>a[]=a[]+3</b>, making use of the same type checking and conversion rules.  Spaces between the assignment operator and",
"	the equal sign are allowed.  The execution performance of assignment operators is faster than conventional formulation because fewer",
"	language elements (symbols, names, values) are interpreted, e.g. from 9 (<b>a[]=a[]+3</b>) to 6 (<b>a[]+=3</b>).",
"",
"	=== 100, 200, 700, bold_column_1",
"	Operator	| Examples				| Equivalent traditional formulation",
"	+=		| a[] += 3;<br>a[] += ' km/h';		| a[] = a[] + 3;<br>a[] = a[] + ' km/h';",
"	-=		| a[] -= 4;<br>a[] -= {'1','2'};	| a[] = a[] - 4;<br>a[] = a[] - { '1','2' };",
"	*=		| a[] *= 5;<br>				| a[] = a[] * 5;",
"	/=		| a[] /= 2;<br>a[] /= '.';		| a[] = a[] / 2;<br>a[] = a[] / '.';",
"	&amp;=		| a[] &amp;= b[];			| a[] = a[] &amp; b[];",
"	&vert;=		| a[] &vert;= b[];			| a[] = a[] &vert; b[];",
"	== =		| a[] == = b[];				| a[] = a[] == b[];",
"	!= =		| a[] != = b[];				| a[] = a[] != b[];",
"	===",
"	In the last two rows, the symbols may be written together, but have been shown separately for better clarity.<br><br>",
"",
"	In the destination variable is not existing yet and an assignment operator is applied, then the destination variable will",
"	be initialized implicitly with following values:",
"",
"	=== 200, 100, 200, 500, bold_column_1",
"	Type		| Value		| Examples		| Equivalen traditional formulation",
"	Numeral		| 0		| a[] += 5;		| a[] = 0; a[] = a[] + 5; ",
"	String		| '' (blank)	| a[] += 's';		| a[] = ''; a[] = a[] + 's';",
"	Date		| (blank date)	| a[] += date(today);	| a[] = date(''); a[] = a[] + date(today);",
"	Boolean		| false		| a[] &vert;= b[];	| a[] = false; a[] = a[] &vert; b[];",
"	parameter set	| {} (empty set)| a[] &vert;= {1,2};	| a[] = {}; a[] = a[] &vert; {1,2};",
"	===",
""
 ]
	,
"Examples 01:" : [
"	// Implicit initialization cases",
"",
"	a[0] += 3;",
"	a[1] += 'Hello';",
"	a[2] += date(\"2020-10-12\");",
"	a[3] |= false;",
"	a[4] |= { 1,2,3 };",
"	a[5] += true;   // Arithmetic operator converts true to 1 first",
"	a[6] = ''; a[6] -= 1; // a[] = '' - 1 is legitimate because arithmetic calculation ",
"	// of numbers with blank strings is valid where blanks are treated as zero.",
"",
"	// Doing some calculations",
"",
"	a[0] *= 2;      // 3 --> 6",
"	a[1] -= llo;    // Hello --> He",
"	a[2] += 1;      // Next day",
"	a[3] |= true;	// true",
"	a[4] *= 2;      // { 1,2,3, 1,2,3 }",
"	a[5] /= 2;      // 1 -> 0.5	",
"",
"	for all variables( a[], x[] ) echo ( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Assignment operators on table cells" : [
"",
"	Using assignment operators on tables is supported to a limited extent since the type of the destination is either a string or",
"	numeral (legitimate positive or negative number with or without decimal point recognized) unless the table has been configured",
"	differently using the __table configure(__) function."
 ]
	,
"Examples 02:" : [
"	include( Support Library );",
"	table create ( a );",
"",
"	[a:0,0] += 1;",
"	[a:0,1] += 'Hello';",
"	[a:0,1] -= 'llo';",
"	[a:0,1] += 'y'; // Hey",
"	[a:0,2] = true; // converts to string",
"	[a:0,2] += ' false'; // 'true false'",
"",
"	table list(a);"
 ]
	,
    "Output 02:": "automatic",
    "See also": "Deep assignment operators"
},




"Ad-hoc Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ad-hoc operators" ],
    "Keywords":			[ "ad-hoc operations", "ad-hoc operation" ],
"Description 01:Introduction" : [
"",
"	Ad-hoc operators are features which apply an immediate action on the variable or table field referenced.",
"	The increment and decrement operators (++ and --) common in C/C++, Java and Python are just two of a variety",
"	of ad-hoc operators.  Ad-hoc operators can be applied in following ways:",
"",
"	* Stand-alone use",
"	** As prefix: <b>++a[];</b>",
"	** As postfix: <b>a[]--;</b>",
"	* As part of a left-hand expression of assignments",
"	** As postfix: <b>a[]++ = 1;</b> (Prefix use would not make sense as it increments the value before being overwritten.",
"	* As part of a right-hand expression of",
"	** As prefix: <b>b[] = 3 + ++a[];</b>",
"	** As postfix: <b>b[] = 3 + a[]++;</b>",
"	** Combination of prefix and postfix use is allowed, e.g. <b>++a[]--</b>.  Actually, (a[]+1) in an expression is more meaningful.",
"	** In parameters for function calls, e.g. <b>echo( ++a[] )</b>",
"",
"",
"	=== 100, 900, noheader, noframe bold_column_1",
"	++		| Increment",
"	--		| Decrement",
"	++(<i>n</i>)	| Increment by specified numeral or numeric expression (negative values will obviously decrement the target value)",
"	--(<i>n</i>)	| Decrement by specified numeral or numeric expression (negative values will obviously increment the target value)",
"**(<i>n</i>)	| Apply scaling factor, with numeral or numeric expression in parentheses.  An equivalent symbol for division does  			  not exist.  Use a reciprocal value in combination with the scaling factor instead.",
"	===",
"	<u>Note</u>: The two consecutive characters need to be written together without spaces.  Otherwise they are recognized as",
"	plus, minus and multiplication symbols.  False example: <b>c[] = - - a[];</b> where the value of a[] is negated twice and",
"	assigned to c[].",
"",
"	Ad-hoc operators are allowed on target value with following types:",
"	* Numerals",
"	* Blank strings, which are treated as 0",
"	* Non-blank strings: All ad-hoc operations will be ignored.  No error messages occur, which may be beneficial when processing tables with mix of numbers and text",
"	* Dates: ",
"	** If containing dates: +/-1 represents next/previous days",
"	** If containing times: For example Adding a fraction of 1, e.g. <b>**(0.25)</b> for 6 hous, is possible",
"	* Parameter sets: All elements, including nested ones, are affected",
"	* Booleans: ++ sets to true -- sets to false.",
"",
"	Ad-hoc operators can be applied on variable as well as table cells.  However following restrictions apply:",
"",
"	* Applying ad-hoc operators on unknown variables.",
"	** Exception to rule: Post-fix use in assignments, e.g. <b>b[]++ = 3;</b> because the incrementation is carried out after the assignemnt is completed.",
"	* Variables where specific protections apply (read only)",
"	* Ad-hoc operators are not allowed in __transactions__, e.g. <b>a[]++ <== b[];</b>",
"	* They are also not allowed in function call requiring variables as code pices, e.g. in __dim(__), __protect(__), etc.",
"	* Ad-hoc operatoros on multiple table cells (e.g. in __horizontal table access__).  Only single cells are allowed.",
"",
"	B4P provides following ad-hoc operators;",
"",
"	<br><br>",
"	Ad-hoc operators can also be cascaded, e.g. <b>a[]++ ++</b>, <b>a[] **(3) ++</b>. Following restriction applies: All scaling operations must ",
"	happen before ++ and/or -- operators.  Not valid: <b>a[] ++ **(3)</b>.  However <b>++a[]**(3)</b> is OK."
 ]
	,
"Examples 01:" : [
"	a[] = 10;",
"	b[] = 20;",
"	d[] = 30;",
"",
"	echo(\"Demonstrate ad-hoc operations in right-hand expressions:\");",
"",
"	//    10          11            9             11",
"	echo( a[]++, ' ', a[]--, ' ', --a[], ' ', ++ ++a[] );",
"",
"	//    22             22 -> 66               6",
"	echo( **(2)a[], ' ', a[]**(3), ' ', **(1/11)a[] );",
"",
"	x[] = --(2) a[]++;  // Decrement a by 2, assign, then increment by 1. Result: 4, 5",
"",
"	echo( x[], ' ', a[]);",
"",
"	echo(new line, \"Demonstrate ad-hoc operations in left-hand expressions:\");",
"",
"	e[]++ = b[];       // becomes 21",
"	f[]**(2) = 10;     // becomes 20",
"",
"	echo( e[], ' ', f[]) ;",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations:\");",
"",
"	d[]++;             // Simple one, 31.",
"	**(2)e[]--;        // Double 21 to 42, subract by 1 becomes 41.",
"",
"	echo( d[], ' ', e[]) ;",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations in tables:\");",
"",
"	table create ( t );    // Ad-hoc operators applied on table cells",
"",
"	[t:0,0]++;             // Table entry was blank. Arithmetics interpret blanks as zero;  Contains 1.",
"	[t:0,0]**(3);	       // Multiplied by 3.",
"	echo( [t:0,0] );       // 3",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations with dates:\");",
"",
"	d[] = date( \"2020-08-01 18:30:00\" );",
"	echo( --d[] ); // Previous day",
"	echo( ++(0.5)d[] ); // Next day, 06:30",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations with parameter sets:\");",
"",
"	a[] = { 1, 2, 5, 10, { 20, 50 } };",
"	a[]++;",
"	echo(a[]);"
 ]
	,
    "Output 01:": "automatic",
    "See also": "Ad-hoc operators overview"
},

"Cascading ad-hoc Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "cascading ad-hoc operators" ],
"Description 01:Introduction" : [
"",
"	Unlike in other common programming languages, B4P supports cascaded ad-hoc operators.  Cascading is realized",
"	by applying multiple ad-hoc operators in sequence which are then always calculated from left to right.",
"	Cascading may be used for both prefix and postfix usages.",
"	<br>",
"	Some examples:",
"	=== 200, 800, noheader, noframe bold_column_1",
"	++ ++		| Increment twice",
"	++ --		| Makes no sense (original value)",
"	-- --		| Decrements twice",
"	++(3) ++	| Adds 4",
"	++ ++(3)	| Adds 4",
"	**(2) ++	| Multiplies 2, adds 1",
"	++ **(2)	| Syntax error. Scaling not allowed after ad-hoc incrementing or decrementing",
"	**(2) **(3)	| This combination is OK.  Multiples by 6",
"	**(1/2)		| Divides by 2",
"	==="
 ]
	,
"Examples 01:" : [
"	a[] = 10;",
"	b[] = date( \"2020-05-01 15:00:00\" );",
"	c[] = { { 1, 2 }, { 3, 4 }, 5 };",
"",
"	a[] ++ ++ ++ -- ++;        // Becomes 13, even if code appears less meaningful",
"	b[] ++(3.75) ++;	   // 4 days and 18 hours later",
"	c[] **(2) ++(2);	   // Double all elements, then add 2 on all of them",
"",
"	echo(\"a[] = \", a[],\"  b[] = \", b[] );",
"	echo(\"c: \", c[] );"
 ]
	,
    "Output 01:": "automatic"
},


"Ad-hoc Operators Overview" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ad-hoc operators overview" ],
"Description 01:Introduction" : [
"",
"	The following table provides a summary of the ad-hoc rules.",
"	<br>",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with numerals:",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Increment by 1		| --		| Decrement by 1		| **		| Syntax error (factor missing)",
"	++ ++		| Increment by 2		| -- --		| Decrement by 2		| ** **		| \"",
"	++ (3)		| Add 3				| -- (3)	| Subtract 3			| **(3)		| Multiply by 3",
"	++ (-3)		| Subtract 3			| -- (-)	| Add 3				| **(1/3)	| Divide by 3",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with blank strings <b>''</b>  assumed zero:",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Sets to 1			| --		| Sets to -1			| **		| Syntax error (factor missing)",
"	++ ++		| Sets to 2			| -- --		| Sets to -2			| ** **		| \"",
"	++ (3)		| Sets to 3			| -- (3)	| Sets to -3			| **(3)		| 0 Multiplied by 3 = 0",
"	++ (-3)		| Sets to -3			| -- (-)	| Sets to 3			| **(1/3)	| 0 Multiplied by 3 = 0",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with non-blank strings  have no impact, and cause no exceptions.",
"",
"	<br><br>Ad-hoc operations on variables and table cells containing or assigned with blank dates <b>date('')</b> have no impact, and cause no exceptions.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"",
"	<br><br>Ad-hoc operations on variables and table cells containing or assigned with dates (e.g. <b>date(\"2020-01-01\")</b> ) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Tomorrow			| --		| Yesterday			| **		| Syntax error (factor missing)",
"	++ ++		| Day after tomorrow		| -- --		| 2 days before			| ** **		| \"",
"	++ (0.25)	| Same day			| -- (0.25)	| Same day			| 		| Results in blank date",
"	++ (3)		| 3 days later			| -- (3)	| 3 days before			| **(0)		| Results in blank date",
"	++ (3.75)	| 3 days later (same)		| -- (3.75)	| 3 days before (same)		| **(1)		| Unchanged date",
"	++ (-7)		| 1 week before			| -- (-7)	| 1 week later			| **(...)	| All other values: Exceptions (dates cannot be multiplied)",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with dates and times (e.g. <b>date(\"2020-01-01 12:45:00\")</b>) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Tomorrow			| --		| Yesterday			| **		| Syntax error (factor missing)",
"	++ ++		| Day after tomorrow		| -- --		| 2 days before			| ** **		| \"",
"	++ (0.25)	| 6 hours later			| -- (0.25)	| 6 hours earlier		| 		| Results in blank date",
"	++ (3)		| 3 days later			| -- (3)	| 3 days before			| **(0)		| Results in blank date",
"	++ (3.75)	| 3 days + 18 hours later	| -- (3.75)	| 3 days + 18 hours before	| **(1)		| Unchanged date and time",
"	++ (-7)		| 1 week before			| -- (-7)	| 1 week later			| **(...)	| All other values: Exceptions (dates cannot be multiplied)",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with and times (e.g. <b>time(\"12:45:00\")</b>) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Exception (not same day)	| --		| Exception (not same day)	| **		| Syntax error (factor missing)",
"	++ ++		| Exception (not same day)	| -- --		| Exception (not same day)	| ** **		| \"",
"	++ (0.25)	| 6 hours later (if same day)	| -- (0.25)	| 6 hours earlier (if same day)	| **(0)		| Results in blank date",
"	++ (3)		| Exception (not same day)	| -- (3)	| Exception (not same day)	| **(1)		| Unchaned time",
"	===",
"",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with booleans:<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Sets to true			| --		| Sets to false			| **		| Syntax error (factor missing)",
"	++ ++		| Sets to true			| -- --		| Sets to false			| ** **		| \"",
"	++ (3)		| Sets to true			| -- (3)	| Sets to false			| **(0)		| Sets to false",
"	++ (-1)		| Sets to false 		| -- (-1)	| Sets to true			| **(1)		| Non-zero: Value unchanged",
"	++ (-3)		| Sets to false 		| -- (-3)	| Sets to true			| **(-1)	| \"",
"	===",
"",
"	<br>Ad-hoc operations on variables containing parameter sets:<br>",
"	All elements will be affected by this operation, including elements in nested parameter sets.  This is a clear difference from all other arithmetic operations ",
"	where you need to distinguish between regular operators (affects one individual value) and deep operators (affects elements in a parameter set at a specified depth).<br>",
"	<u>Note</u>: No impact on empty cells.",
"",
"	<br><br>",
"	<u>Note</u>: Ad-hoc operations on void values will cause exceptions."
 ]
	
},


"Deep Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "deep operators" ],
"Description 01:Introduction" : [
"",
"",
"	Deep Operators are very unique features specifically designed for B4P.",
"	Deep operators are unary and binary operators followed by accent circumflex <b>^</b> symbols which",
"	indicate that the operator shall be applied on the elements inside parameter sets.",
"	This concept allows vector and matrix calculations without programming loops.",
"",
"	<br><br>",
"	Applying deep operator in simple parameter sets (vectors) requiers adding one <b>^</b>-symbol after the",
"	operator.  For further nesting, e.g. matrices (e.g. <b>{ {1,2,3},{4,5,6} }</b>), 2 or more consecutive",
"	<b>^</b>-symbols are needed to specify the right <i>depth</i>.  Not using these symboles result in applying the operators on the",
"	parameter set directly, e.g. '+' for catenating two parameter sets together.",
"",
"	<br><br>",
"	Following deep operators are described next:",
"	* __Deep unary operators__, and",
"	* __Deep binary operators__.",
""
 ]
	,
    "See also": "deep"
},


"Deep Unary Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "deep unary operators" ],
"Description 01:Introduction" : [
"",
"	All valid __unary operators__ can be applied as deep operators in order to address the parameter set elements directly.",
"	The number of accent circumflex symbols behind the operator determines the depth to use.",
""
 ]
	, 

"Examples 01:" : [
"	echo(\"Deep unary operators on simple parameter sets (vectors):\");",
"",
"	a[] = { 1,2,3,4,5 };",
"	b[] = { hu, ha, he, ho, hi };",
"",
"",
"	echo( -a[] );      // Descending sorting order",
"	echo( -^a[] );     // Negating elements",
"	echo;",
"",
"	echo( + b[] );     // Ascending sorting order",
"	echo( +^b[] );     // Upper case on elements",
"	echo( !^b[] );     // Capitalizing elements",
"	echo;",
"",
"	echo(\"Deep unary operators on nested parameter sets (matrices):\");",
"",
"	a[] = { { 5, 15, 10 }, { 16, 6, 26 }, { 37, 17, 7 } };  ",
"",
"	echo( - a [] );    // Descending sorting of all elements",
"	echo( -^a [] );    // Desending sorting of each marix row",
"	echo( -^^a[] );    // Negating the elements"
 ]
	,
    "Output 01:": "automatic"
},




"Deep Binary Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "deep binary operators" ],
"Description 01:Introduction" : [
"",
"	All valid __binary operators__ can be applied as deep operators in order to address the parameter set elements directly.",
"	The number of accent circumflex symbols behind the operator determines the depth to use.",
"	A mix of combining simple values (scalars) and parameter sets (vectors, matrics) is supported.  In this case, the scalar",
"	provided as one operand will be calculated with every element in the parameter set specified as the other operand.",
"",
"	<br><br>",
"	If parameter sets are specified in both sides of the operator, and the number of elements differ, then the shorter parameter",
"	set will be stuffed with neutral values to match the length of the longer parameter set before doing the calculation.<br>",
"	Example: { 3, 4 } * { 2, 1, 3, 2 } extends to { 3, 4, 1, 1 } * { 2, 1, 3, 2 } where 1 is used as a neutral value for",
"	multiplication.",
"",
"	<br><br>",
"	List of neutral values:",
"	* String:  Blank string",
"	* Numeral:  0 for + and -; 1 for * and /",
"	* Dates: 0",
"	* Boolean: true (for AND: &amp;), 0 (for OR: &vert;)",
"	* Parameter set: Empty set {}",
""
 ]
	, 
"Examples 01:" : [
"	echo(\"Deep binary operators on simple parameter sets (vectors):\");",
"",
"	a[] = {  1, 2, 3, 4, 5 };",
"	b[] = { 10,15,20,25,30 };",
"	c[] = {  2,-2,'',-2, 2 };",
"",
"	s[] = { Ha, He, Ho, Hu, Hi };",
"	t[] = { ngar, ring, ney, nger, ll };",
"",
"	echo( a[] + b[]);         // Conventional way: Concatenates vectors",
"	echo( a[] *^ b[]);        // Multiplies the elements together",
"",
"	echo( s[] +^ t[]);        // Combines strings",
"",
"	echo( { rein, 1, date(\"2020-04-30\") } +^ { deer, 2, 1 } );",
"	                          // Mixed types are OK",
"",
"	echo(new line, \"Vectors of different sizes\");",
"",
"	echo( a[] *^ { 10, 100, 1000 } );      // First 3 elements are multiplied",
"	echo( b[] -^ { 2,4,5} );               // First 3 elements are negated",
"	echo( { 3,3,3,} -^ a[] );              // First 3 elements are calculated, remaining ones negated",
"",
"	echo( a[] /^ { 2,4,6 } );              // First 3 elemnts are divided",
"",
"	echo( a[] +^ c[] );                    // Like with normal arithmetic operators, blank strings",
"	                                       // are interpreted as zero.",
"",
"",
"	echo(new line, \"Matrices\");",
"",
"	a[] =  {  { 1,  2, 3 }, { 4,  5,  6 } };",
"	b[] =  {  { 1, -1, 0 }, { 2, -2, 10 } };",
"",
"	echo( a[] +   b[] );                   // Simple concatenation",
"	echo( a[] +^  b[] );                   // The elements containing 3 numbers are concatenated",
"	echo( a[] +^^ b[] );                   // What you want: Addition of the elements"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Repetition Suffix" : [
"",
"	Particularly useful for operations wiht matrices of differen length is the repetition suffix which is a colon <b>:</b>.",
"	Add the colon after the last accent circumflex symbol to repeat the values in the shorter parameter set until all",
"	values in the longer parameter set have been calculated.",
"" ],
"Examples 02:Adding the colon as repetition suffix" : [
"	a[] = { 1, 2, 4, 8, 16 };",
"	b[] = { 2, 3 };",
"",
"	echo( a[] +^ b[] );  // 3, 5, 4,  8, 16",
"	echo( a[] +^:b[] );  // 3, 5, 6, 11, 18"
 ]
	,
"Examples 03:Combining vectors and matrices with scalars" : [
"	echo(\"Deep binary operators on simple parameter sets (vectors) and scalars:\");",
"",
"	a[] = {  1, 2, 3, 4, 5 };",
"	b[] = { 10,15,20,25,30 };",
"	c[] = {  2,-2,'',-2, 2 };",
"",
"	s[] = { Ha, He, Ho, Hu, Hi };",
"	t[] = { ngar, ring, ney, nger, ll };",
"",
"	echo( a[] +^ 1 );         // Add 1 to all elements",
"	echo( 120 /^ b[]);        // Divide 120 by all elements",
"",
"",
"	echo(new line, \"Matrices combined with vectors and scalars\");",
"",
"	a[] = { {1,2},{3,4} };	",
"	b[] = { {5,6},{7,8} };",
"",
"	echo( a[] +   b[] );                     // Catenation: { {1,2},{3,4},{5,6},{7,8} }",
"	echo( a[] +^  b[] );                     // Catenating the 1st level elements: { {1,2,5,6},{3,4,7,8} }",
"	echo( a[] +^^ b[] );                     // Calculating elements: { {6,8},{10,12} }",
"	echo;",
"	echo( a[] +^^ 10 );                      // Adds 10 to all elements",
"	echo( a[] +^^ {10} );                    // {10} acts as scalar to {1,2} -> { {11,12},{3,4} }	",
"	echo( a[] +^^:{10} );                    // Repetition suffix - Repeat the {10}:Like { {1,2},{3,4} } +^^ {10,10} } -> { {11,12},{13,14} }	",
"	echo( a[] +^^ {10,10} );                 // Like above",
"	echo;",
"	echo( a[] +^^ {{10}} );                  // Affects the 1st nested element only: { {11,2},{3,4} }",
"	echo( a[] +^^:{{10}} );                  // Repetition suffix - Repeat the {10}: All elements affected: { {11,12},{13,14} }	",
"	echo( a[] +^^ {10,20} );                 // Calculates { {11,12},{23,24} }",
"	echo( a[] +^^:{10,20} );                 // Same result  (Repetition suffix)",
"	echo;",
"	echo( a[] +^^ {{10,20}}	);               // Calculates { {11,22},{ 3, 4} }",
"	echo( a[] +^^ {{10},{20}} );             // Calculates { {11, 2},{23, 4} }",
"	echo( a[] +^^:{{10},{20}} );             // Calculates { {11,12},{23,24} }  (Repetition suffix)"
 ]
	,
    "Output 03:": "automatic",
    "See also": [ "Deep assignment operators", "Matrix Operations Summary" ]
},



"Matrix Operations Summary" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix operations summary" ],
    "Keywords":			[ "matrix mathematics" ],
"Description 01:Introduction" : [
"	The following illustration shows how the deep operator is applied for the different mathematical matrix operations:",
"",
"	<br/><img src=\"Images/Description_Formulas_Matrix_Operations_Summary.jpg\" alt=\"Matrix Operations\"><br/>"
 ]
	
},




"Deep Assignment Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "deep assignment operators" ],
"Description 01:Introduction" : [
"	Like with regular __binary operators__, __deep binary operators__ can also be formulated as deep __assignment operators__,",
"	both with and without __repetition suffix__.",
""
 ]
	,
"Examples 01:" : [
"	echo(new line, \"Example on vectors:\");",
"	a[] = { 8, 4, 2, 1 };",
"	b[] = { 1, 2, 3, 4 };",
"	c[] = { 10, 11 };",
"	d[] = c[];",
"	e[] = c[];",
"",
"	a[] -^= b[]; // { 7, 2, -1, -3 }",
"	echo(a[]);",
"",
"	c[] +^= b[]; // {11, 13, 3, 4}",
"	echo(c[]);",
"",
"	d2[] +^:= b[]; // With repetition suffix: {11, 13, 13, 15}",
"	echo(d[]);",
"",
"	e[] /^= 2; // With a scalar:  { 5, 5.5 }",
"	echo( e[] );",
"",
"	echo(new line, \"Example on matrices:\");",
"",
"	a[] =  { { 8, 7, 6 }, { 1, 2, -1 }, { -5, 4, 6 } };",
"",
"	a[] -^^= 1; // Subtract 1 from all elements",
"",
"	echo( a[] );",
"",
"	a[] *^^= { { 1,1,1}, {2,2,2}, {3,3,3} };",
"	echo( a[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Deep Operators on Table Cells" : [
"	Deep assignment operators are not possible on table cells if they are targets because with standard",
"	table configuration settings: Strings and numerals.  It works if the left-hand value is a numeral and the right-hand value",
"	a parameter set.  In this case, the parameter set will then be converted to a string representation and written to the",
"	table cell."
 ]
	,
"Examples 02:" : [
"	include ( Support Library );",
"",
"	table create( t );",
"",
"	[t:0,0] = 10;",
"	[t:0,1] = \"Hi \";",
"",
"	[t:0,0] *^= { 5, 6, 7, 8 };",
"	[t:0,1] +^= { volks, everyone, to all of you };",
"",
"	table list ( t ); // Parameter sets have been converted to strings."
 ]
	,
    "Output 02:": "automatic",
    "See also": "Assignment operators"
}







,



"Transactions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions" ],
    "Keywords":		[ "Transaction", "Transaction operator", "Transaction operators" ],
"Description 01:Introduction" : [
"",
"	Simple __assignments__ in B4P program statements, such as <b>a[] = b[];</b>, affect only the __base variables__. Possibly existing members of",
"	the variable on either side remain untouched.  They are not duplicated, overwritten and cleared.  However, situations exist where assignments",
"	are needed for the whole variable tree, including all underlying __structure__ and __array__ members.  Transactions are an advanced form of",
"	assignments which also include the variable members.",
"",
"	<br/><br/><img src=\"Images/LAN_Transactions.png\" alt=\"Transactions\"><br/>",
"",
"	<br>",
"	The syntax for transactions is as follows:",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 150, 300, 200, 200, 150, noframe table_syntax",
"	Left-hand destination		| Transaction Prefix<br>(optional)		| Transaction Operator		| Transaction Suffix<br>(optional)	| Right-hand destination	",
"	- Variable			| No symbol: Replacement			| <b>&lt;==</b> : Copy 		| No symbol				| - Variable",
"	- Table rows			| <b>&amp;</b> : intersection (AND combination)	| <b>&lt;&lt;</b>= : Move	| <b>^</b> : Members only		| - Table row",
"					| <b>&vert;</b> : union	(OR combination)	| <b>&lt;=&gt;</b> : Swap	|					|",
"					| <b>+</b> : add data				|				|					|",
"	===",
"	<br>",
"	<u>Syntax:</u> The 3-character transaction symbols must be written together without spaces inbetween because they are treated as dedicated language tokens.",
"	Spaces are allowed between the prefix and the symbols and between the symbols and the suffix.",
"",
"	<br>br>",
"	Both left-hand and right-hand destinations specify table cells or destination variables in the same way as if they would be on the left-hand side of",
"	assignments.  Applying algorithms on these variables or table cells on either side, e.g. <b>b[] &lt;== a[]*2</b> is not allowed here.  Do such operations with ",
"	assignments before.  However, specifying member variables in (nested) arrays and/or structures is allowed (Example: <b>b[kid1] &lt;== a[kid2,grandchild]</b>).",
"	Using this in combination with moving or swapping data, you can do easy data manipulations such as balancing binary trees.",
"",
"	<br><br>",
"	The optional transaction prefix allows combining two variable trees or data collections from tables as intersections or union sets or data additions.",
"",
"	<br><br>",
"	Three transaction operators exist and provide means to copy, move and swap data.",
"",
"	<br><br>",
"	If an accent circumflex is added after the transaction operator, then the transaction will only touch the member variables, but do not modify the base variables",
"	on both sides."
 ]
	,
"Examples 01:First Example:" : [
"	array( a[], { Ape, Bat, Cat, Dog, { Setter, Jack Russell, Dachshund }, Elk, Fox, Gnu, Hog } );",
"	array( b[], { Granite, Gneiss, Quartz, Basalt } );",
"",
"	a[] = Animals; b[] = Varieties of Rocks;",
"",
"	a[] <=> b[]; // Swap",
"",
"	see( a[] ); // Your rocks collection",
"	see( b[] );	// Animals, incl varieties of dogs"
 ]
	,
    "Output 01:": "automatic"	

},



"Without Transaction Assignment Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Without Transaction Assignment Operators" ],
"Description 01:Introduction" : [
"	The following sections provide an introduction of carrying out transactions without assignment operators.",
"	In this case, destination variables or table entries are cleared first before they are overwritten.  The following",
"	illustration shows a typical <b>copy</b> transaction:",
"",
"	<br/><br/><img src=\"Images/Description_Transactions_Basics.jpg\" alt=\"Transactions Basics\"><br/>",
""
 ]
	
},


"Transactions between Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions between variables" ],
"Description 01:Introduction" : [
"",
"	Transactions can be carried out on base variables as well as member variables.  The following rulesa pply:",
"	* If the destination variable does not yet exist, then it will be created before the transaction begins.  Hoever, the source variable on the right-hand side must exist.",
"	* All member variables of the specified destination variable will be cleared.",
"	* The base variable of the specified destination will be overwritten if the <b>^</b> suffix is not used.",
"	* All structure and array members and sub-members of the source variable will be included in the transaction.",
"",
"	<br>",
"",
"	The table below uses the variable names <b>a[]</b> and <b>b[]</b> which may also be replaced with array or structure member variables of any hierarchical depth.  This flexible setup allows you to shape up your",
"	variable trees as you like.",
"	=== 100, 100, 150, 650, bold_column_1 bold_column_2 bold_column_3",
"	Transaction	| Symbol	| Example		| Description",
"Copy		| &lt;==	| a[] &lt;== b[];	| Step 1: If a[] does not yet exist, then it will be created.  Otherwise, the variable will  be initialized, including deleting all members.<br> Step 2: Value from b[] to a[] will be copied like in an assignment.<br> 								  Step 3: All members and sub-members will be copied from b[] to a[].",
"Copy Members	| &lt;==^	| a[] &lt;==^ b[];	| Step 1: If a[] does not yet exist, then it will be created.  Otherwise all members will be deleted.  The base variable will be preserved.<br> Step 2: Will be skipped.<br> 								  Step 3: Like above.",
"Move		| &lt;&lt;=	| a[] &lt;&lt;= b[];	| Steps 1-3: Like the copy-transaction<br> 								  Step 4: Deletes variable b[] entirely including its members.  If a member variable is specified on the right-hand side, then that member variable with its sub-members will be deleted.",
"Move Members	| &lt;&lt;=^	| a[] &lt;&lt;=^ b[];	| Steps 1-3: Like the copy-members-transaction<br> 								  Step 4: Deletes all members and sub-members of variable b[], but the base variable remains unaffected. If a member variable is specified on the right-hand side, then those sub-members will be deleted.",
"	Swap		| &lt;=&gt;	| a[] &lt;=&gt; b[];	| Swaps all contents (base variable and all members and sub-members) between the two variables",
"	Swap Members	| &lt;=&gt;^	| a[] &lt;=&gt;^ b[];	| Swaps all members (and sub-members) between the two variables, but the base variables are not swapped.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	animals1[] = Mikes collection;",
"	b[] = My pets;",
"",
"	a[] <==  animals1[];",
"	b[] <==^ animals1[];",
"",
"	see(a[]);",
"	see(b[]);"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	animals2[] <== animals1[]; // Make a copy",
"	animals1[] = Mikes collection;",
"	b[] = My pets;",
"",
"	a[] <<=  animals1[];",
"	b[] <<=^ animals2[];",
"",
"	see(a[]);",
"	see(b[]);",
"	echo(\"animals1[] existing? \", existing(animals1[]));",
"	see(animals2[]);",
""
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"	array    ( plants1[],  { tulip, sunflower, fir } );",
"",
"	animals1[] = Pets and animals;",
"	plants1 [] = Plants and flowers;",
"",
"	animals2[] <== animals1[];",
"	plants2 [] <== plants1[];",
"",
"	animals1[] <=> plants1[];",
"	animals2[] <=>^ plants2[];",
"",
"	see( animals1[] );",
"	see( plants1[] );",
"",
"	see( animals2[] );",
"	see( plants2[] );"
 ]
	,
    "Output 03:": "automatic"

},



"Transactions from Tables to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions from tables to variables" ],
"Description 01:Introduction" : [
"",
"	Transactions provide a powerful way to read one row or a specified part of the row and store the contents into a __structure__.",
"	For every item read from the table, a new member will be created, given the name of the corresponding column header name and the contents placed into the ",
"	member variable variable.  The following rules apply for these transactions:",
"",
"	* Only simple and __horizontal table accesses__ are allowed. __Vertical table accesses__ and __matrix table accesses__ will be rejected and cause exceptions.",
"	* Use '..' or keep blank to specify all column entries in the specified row, e.g. <b>[t:..,1]</b> or <b>[t:,1]</b>.",
"	* __Partial table specifications__ are allowed, provided the context information for the table and row number is available (e.g. inside the function parameters of the __table process(__) call)",
"	* Transactions from tables to variables generate only one level of structure members and no further nesting.  Arrays are not created.",
"	* For automatic type conversions from tables to variables the same rules as if table contents are read out.  See __table configure(__) to modify the rules.",
"	* The table name is assigned to the base variable unless the <b>^</b> suffix is used behind the transction operator to preserve the __base variable__ value if existing.",
"	* Table accesses resulting in no values read (empty sets) will at least intialize the destination variable with __zero members__ variable form, but contains no members.",
"	* Make sure every table header in the table to include are unique.  Otherwise, the same member variable will be overwritten since the same name is used repeatedly.  Alternatively, you can use column numbers.",
"	* Blank table header names translate into blank member names which are valid.  Note that members with blank member names are also treated as __default members__.",
"",
"	The following table applies to transactions from a table row (example: table name 't', row 1, all columns) to a variable.",
"	=== 100, 100, 150, 650, bold_column_1 bold_column_2 bold_column_3",
"	Transaction	| Symbol	| Explanation		| Description",
"Copy		| &lt;==	| a[] &lt;== [t:..,1];	| Step 1: If a[] does not yet exist, then it will be created.  Otherwise, the variable will  be initialized, including deleting all members.<br> Step 2: The table name will be copied into the base variable a[].<br> Step 3: For every cell retrieved from the table, a dedicated member will be created.  The header name (row 0) will  								  be used for the member name and the contents will be written into the member variables.",
"Copy Members	| &lt;==^	| a[] &lt;==^ [t:..,1];	| Step 1: If a[] does not yet exist, then it will be created.  Otherwise all members will be deleted.  The base variable will be preserved.<br> Step 2: Will be skipped.<br> 								  Step 3: Like above.",
"Move		| &lt;&lt;=	| a[] &lt;&lt;= [t:..,1];| Steps 1-3: Like the copy-transaction<br> 								  Step 4: The specified row in the table will be deleted.  The rows below will shift upwards.",
"Move Members	| &lt;&lt;=^	| a[] &lt;&lt;=^ [t:..,1];	| Steps 1-3: Like the copy-members-transaction<br> 									  Step 4: The specified row in the table will be deleted.  The rows below will shift upwards.",
"	Swap		| &lt;=&gt;	| a[] &lt;=&gt; [t:..,1];	| The contents in the member variable and the table row will be exchanged.  Void value will be assigned to the base variable.",
"	Swap Members	| &lt;=&gt;^	| a[] &lt;=&gt;^ [t:..,1];	| The contents in the member variable and the table row will be exchanged.  The base variable will be preserved.",
"	===",
"",
"	In the swap transaction, all members in the original variable will be written back to the table.  For further details, see __transactions from variables to tables__ ",
"	how members are transferred to the table row.",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	animal1[] = \"My animal\";	",
"	animal2[] = \"My animal\";	",
"",
"	animal1[] <==  [ animals: Name, Dog, .. ]; // Pick up entire row",
"	animal2[] <==^ [ animals: Name, Ape, {Name, Leg count} ]; // Pick up 2 fields only",
"",
"	see( animal1[] );",
"	see( animal2[] );",
""
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	animal1[] = \"My animal\";	",
"	animal2[] = \"My animal\";	",
"",
"	animal1[] <<=  [ animals: Name, Dog, .. ]; // Pick up entire row",
"	animal2[] <<=^ [ animals: Name, Ape, {Name, Leg count} ]; // Pick up 2 fields only",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // The owl is left over"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Leg count, Weapon }, { Snake, 0, poison } );",
"	structure( animal2[], { Name, Leg count, Weapon, Special ability }, { Wolf, 4, teeth, teamwork } );",
"",
"	animal1[] = \"Was a snake\";",
"	animal2[] = \"Was a wolf\";",
"",
"	animal1[] <=>  [ animals: Name, Dog, .. ]; // Pick up entire row",
"	animal2[] <=>^ [ animals: Name, Owl,    ]; ",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Snake, Wolf, Ape.  Additional column included (weapon)"
 ]
	,
    "Output 03:": "automatic"

},



"Transactions from Variables to Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions from variables to tables" ],
    "Keywords":			[ "Open-ended ranges" ],
"Description 01:Introduction" : [
"",
"	This is the opposite direction where member contents of structures or arrays are transferred into tables.",
"	As long the transaction operator has no assignment operator (described in the next sections further below), then the contents in the",
"	destination row will be cleared entirely before writing. Generally, only one nesting level (direct members of specified variables) will be used for the data transfer.",
"",
"	Following rules apply:",
"	* Only simple and __horizontal table accesses__ are allowed. __Vertical table accesses__ and __matrix table accesses__ will be rejected and cause exceptions.",
"	* Use '..' or keep blank to specify all column entries in the specified row, e.g. <b>[t:..,1]</b> or <b>[t:,1]</b>.  Otherwise only the specified columns will be written.",
"	* __Partial table specifications__ are allowed, provided the context information for the table and row number is available (e.g. inside the function parameters of the __table process(__) call)",
"	* Only one level of __array members__ or __structure members__ will be transferred to the table.",
"	* Further nested members will not be considered and transferred.",
"	* The base variable will also not be considered and transferred (i.e. the name of the table will not be altered).",
"	* During the transaction, the values will be converted to strings automatically because tables maintain all contents as strings.",
"	* Transactions of variables without members (e.g. __simple variables__, __zero members__ variables) result in no data transfers.  Only row in the destination table will be cleared.",
"	* Structure members with blank member names (so called __default members__) correspond with blank headers",
"	* <b>Open-ended ranges</b>: Additional table columns with header names are only added if <i>open-ended ranges</i> are specified for the table row.  Open-ended ranges apply in following cases:",
"	** <b>[t:..,1]</b> - All columns under existing headers selected.  Further columns may be added",
"	** <b>[t:,1]</b> - All columns in the current row are selected.  Further columns may be added",
"	** <b>[t:3..,1]</b> - All columns beginning with column 3 (example value) till end of row.",
"",
"	<b>Structures to tables:</b><br> The member names will be matched with the existing column header names, provided they are part of the table specification",
"	(where whole row, a set of columns, a range or just one column is defined).  If a member name cannot be matched with any column header, then an additional",
"	header with that name will be added to the table and the data will be written into the designated field below.",
"",
"	<br><br>",
"",
"	<b>Arrays to tables:</b><br> The array members will be written into the table fields as defined in the table specification (whole row, set of columns, a range or just one column).",
"	Normally, the members are written to the table from left to right except if a set of columns is specified.  In this case, the sequence inside the set will apply.",
"	If the array contains more elements than the number of columns (header names) provided, then the remaining elements will not be written into the table unless",
"	open-ended ranges have been specified, for example: <b>[t:5..,1], [t:..,1], [t:,1]</b>.",
"",
"	<br><br>",
"",
"	The following table applies to transactions from a table row (example: table name 't', row 1, all columns) to a variable.",
"	=== 100, 100, 150, 650, bold_column_1 bold_column_2 bold_column_3",
"	Transaction	| Symbol	| Explanation			| Description",
"Copy		| &lt;==	| [t:..,1] &lt;== a[];		| Step 1: Checks that exactly one table row and one or more or all columns are specified.<br> Step 2: Clears all contents in the specified table row<br> Step 3: Data transfer from variable to table as described above.<br> 									  Note: The base variable will not be copied.",
"	Copy Members	| &lt;==^	| [t:..,1] &lt;==^ a[];		| Same mas copy-transaction.",
"Move		| &lt;&lt;=	| [t:..,1] &lt;&lt;= a[];	| Steps 1-3: Like the copy-transaction<br> 									  Step 4: Deletes variable b[] entirely including its members.  If a member variable is specified on the right-hand side, then that member variable with its sub-members will be deleted.",
"Move Members	| &lt;&lt;=^	| [t:..,1] &lt;&lt;=^ a[];	| Steps 1-3: Like the copy-members-transaction<br> 									  Step 4: Deletes all members and sub-members of variable b[], but the base variable remains unaffected. If a member variable is specified on the right-hand side, then those sub-members will be deleted.",
"	Swap		| &lt;=&gt;	| [t:..,1] &lt;=&gt; a[];	| The contents in the member variable and the table row will be exchanged.  Void value will be assigned to the base variable.",
"	Swap Members	| &lt;=&gt;^	| [t:..,1] &lt;=&gt;^ a[];	| The contents in the member variable and the table row will be exchanged.  The base variable will be preserved.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Leg count, Weapon }, { Snake, 0, poison } );",
"	structure( animals1[Weapon], { venom, muscles }, { rattle snake, boa constrictor } ); // Nested, not copied into table",
"",
"	structure( animal2[], { Name, Leg count, Weapon, Special ability, size }, { Tick, 6, diseases, tricky to remove, tiny} );",
"",
"	[ animals : Name, Owl, .. ] <== animal1[]; 				// All columsns are written, plus new ones",
"	[ animals : Name, Ape, {Name, Leg count} ] <==^ animal2[];		// Only name and leg count are written",
"",
"	table list ( animals );"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Copy Transaction Example from an array" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	array( animal1[], { Boa, 0, Kills by constricting, Likes rats, and mice } ); // Addt'l colum without header added",
"	",
"	[ animals : .., 1 ] <== animal1[];   // All columsns are written, plus new ones",
"",
"	table list ( animals );"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Leg count, Weapon }, { Snake, 0, poison } );",
"	structure( animal1[Weapon], { venom, muscles }, { rattle snake, boa constrictor } ); // Nested, not copied into table",
"",
"	structure( animal2[], { Name, Leg count, Weapon, Special ability, size }, { Tick, 6, diseases, tricky to remove, tiny} );",
"	animal2[] = Pets;",
"",
"	[ animals : Name, Owl, .. ] <<= animal1[]; 				// All columns are written, plus new ones",
"	[ animals : Name, Ape, {Name, Leg count} ] <<=^ animal2[];		// Only name and leg count are written",
"",
"	table list ( animals );",
"	echo(\"animal1[] existing? \", existing(animal1[]) );",
"	see(animal2[]); "
 ]
	,
    "Output 03:": "automatic",
"Examples 04:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Leg count, Weapon }, { Snake, 0, poison } );",
"	structure( animal2[], { Name, Leg count, Weapon, Special ability }, { Wolf, 4, teeth, teamwork } );",
"",
"	animal1[] = \"Was a snake\";",
"	animal2[] = \"Was a wolf\";",
"",
"	[ animals: Name, Dog, .. ] <=> animal1[]; // Pick up entire row",
"	[ animals: Name, Owl, {Name,Special ability} ] <=>^ animal2[];  // E.g. leg count not included",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Snake, Wolf, Ape.  Additional column included (weapon)	",
""
 ]
	,
    "Output 04:": "automatic"
},




"Transactions between Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions between tables" ],
"Description 01:Introduction" : [
"",
"	Transactions between table rows in the same or two different tables are also supported.  ",
"	As long the transaction operator has no assignment operator (described in the next sections further below), then the contents in the",
"	destination row will be cleared entirely before writing.",
"",
"	Following rules apply:",
"	* Only simple and __horizontal table accesses__ are allowed. __Vertical table accesses__ and __matrix table accesses__ will be rejected and cause exceptions.",
"	* Use '..' or keep blank to specify all column entries in the specified row, e.g. <b>[t:..,1]</b> or <b>[t:,1]</b>.  Otherwise only the specified columns will be written.",
"	* __Partial table specifications__ are allowed, provided the context information for the table and row number is available (e.g. inside the function parameters of the __table process(__) call)",
"	* The transactions uses the header names and not physical column positions for orientation.  Make sure you are using unique header names.  Otherwise, the first matching column from the left will be used.",
"	* Additional table columns with header names are only added if __open-ended ranges__ are specified for the table row.  Open-ended ranges apply in following cases:",
"	** <b>[t:..,1]</b> - All columns under existing headers selected.  Further columns may be added",
"	** <b>[t:,1]</b> - All columns in the current row are selected.  Further columns may be added",
"	** <b>[t:3..,1]</b> - All columns beginning with column 3 (example value) till end of row.",
"	* The <b>^</b> suffix behind the transaction operator is irrelvant because no base variables are involved.",
"",
"	<u>Attention</u>: In case no __open-ended ranges__ have been specified, then only the columns with header names found in both source and destination tables will be transferred.",
"	<br><br>",
"",
"	The following table applies to transactions between table rows (example: table names 't' and 'u', row 1 and 2, all columns) to a variable.",
"	=== 100, 100, 150, 650, bold_column_1 bold_column_2 bold_column_3",
"	Transaction	| Symbol	| Explanation			| Description",
"Copy		| &lt;==	| [t:..,1] &lt;== [u:,2]	| Step 1: Checks that exactly one table row and one or more or all columns are specified.<br> Step 2: Clears all contents in the specified table row<br> Step 3: Data transfer from variable to table as described above.<br> 									  Note: The base variable will not be copied.",
"Move		| &lt;&lt;=	| [t:..,1] &lt;&lt;= [u:,2];	| Steps 1-3: Like the copy-transaction<br> 									  Step 4: The specified row in the table will be deleted.  The rows below will shift upwards.",
"	Swap		| &lt;=&gt;	| [t:..,1] &lt;=&gt; [u:,2];	| The contents in the member variable and the table row will be exchanged.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals1: Name, Dog, Name..Special ability ] <== [ animals2: Name, Cat, ]; // sharp claws will not be copied.",
"	[ animals1: Name, Owl, .. ] <== [ animals2: Name, Bee, { Weapon, Name } ];",
"",
"	echo(\"Dog -> Cat without claws\");",
"	table list( animals1 ); // No additional column created",
"	",
"	echo(\"Unchanged\");",
"	table list( animals2 ); // Additional column created"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Gnu, .. ] <<= [ animals1: Name, Dog, ];  // Dog overwrites Gnu, Dog erased from animals 1",
"	[ animals1: Name, Owl,    ] <<= [ animals2: Name, Bee, .. ]; // Open ended items, also copy the weapon",
"",
"	echo(\"Contains the bee, owl and dog removed\");",
"	table list( animals1 ); // No additional column created",
"	",
"	echo(\"Contains the dog, gnu and bee removed\");",
"	table list( animals2 ); // Additional column created"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Surface,   Leg count, Special ability  },",
"		  { Owl,   Feathers,  2,         Night vision     },",
"		  { Dog,   Fur,       4,         Sensitive nose   },",
"		  { Ape,   Hair,      2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Cat, .. ] <=> [ animals1: Name, Dog,  ];",
"	[ animals2: Name, Bee, Name..Special ability ] <=> [ animals1: Name, Owl, ]; // Excludes the weapon",
"	",
"	echo(\"Contains Bee, Cat and Ape\");",
"	table list( animals1 ); // No additional column created",
"	",
"	echo(\"Contains Owl, Gnu and Dog\");",
"	table list( animals2 ); // Additional column created"
 ]
	,
    "Output 03:": "automatic"
},



"&amp; Transaction Assignment Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions with AND assignment operator" ],
"Description 01:Introduction" : [
"	The following pages summarize the transactions using the <b>&amp;</b> prefix. Different from transactions without assignment operators where",
"	the destination variable or table row is initialized first, the existing values in the destination are overwritten if the corresponding",
"	source data is available in the same member variable position or with same table column header name or number.  More specifically, following rules apply:",
"",
"	* Existing structure members will be overwritten",
"	* Missing structure members will <u>not</u> be created and the corresponding data will <u>not</u> be written",
"	* Existing array members will be overwritten",
"	* Existing arrays will <u>not</u>be extended with additional members if not all data fit in the existing members, meaning that the remaining data will not be transferred.",
"	* If the destination is a table, then <u>no</u> additional columns will be added to fit the data.  Excessive data will not be transferred",
"	* Missing arrays and/or structures will <u>not</u> be created (in order to transfer the remaining data which will not be the case)",
""
 ]
	,
"Description 02:Typical Example" : [
"	<img src=\"Images/Description_Transactions_Variable_Variable_AND.jpg\" alt=\"Variable to Variable Transaction with &amp; Assignment Operator\"><br/>",
""
 ]
	
},


"&amp; Transactions between Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "AND Transactions between variables" ],
"Description 01:Introduction" : [
"	Different from transactions without assignment operators, the <b>&amp;</b> assignment operator in front of the transaction symbol will assume the",
"	following rules focussing on overlaying data from the source variable in the destination variable:",
"",
"	* Transactions can be carried out on base variables as well as member variables.",
"	* If the destination variable does not yet exist, then it will be created as __simple variable__ containing void value before the transaction begins.  However, the source variable on the right-hand side must exist.",
"	* The existing setup of structure and array members and sub-members in the destination variable will not be altered.",
"	** No further arrays or structures will be added",
"	** No additional members will be added to existing array and structure members",
"	* Where possible, all structure and array members and sub-members of the source variable will be included in the transaction.",
"	** Values in member positions in the source variables for which no corresponding position is existing in the destination variable will not be transferred.",
"	* The base variable of the specified destination will be overwritten if the <b>^</b> suffix is not used.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Simple or zero members	| The value of the base variable will be transferred as long no <b>^</b> suffix is specified. ",
"	Simple or zero members	| Array				| Base variable: See above.  The array nembers are not transferred.  Same applies to their sub-members.",
"	Simple or zero members	| Structure			| Base variable: See above.  The structure nembers are not transferred. Same applies to their sub-members.",
"	Structure		| Simple or zero members	| Base variable: See above.",
"	Structure		| Array				| Base variable: See above.  The array members are not copied into structure members as they are incompatiable (missing names).",
"Structure		| Structure			| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. - Existing members will be overwritten<br> 								  - No additional member names will be added.",
"	Array			| Simple or zero members	| Base variable: See above. ",
"Array			| Array				| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the remaining members in the source variable will not be copied.",
"Array			| Structure			| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. The existing array members will be replaced by structure members from the source variable, sorted in alphabetic order by member names.<br> - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the remaining members in the source variable will not be copied.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[] &<== animals2[];  // Trout and cat overwritten, owl survives",
"	see(animals1[]);"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[mammal] &<<= animals2[mammal]; ",
"	// Lynx replaces bear, and the deer continues living.",
"",
"	see(animals1[]);",
"	see(animals2[]);"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[] &<=> animals2[]; ",
"",
"	see(animals1[]); // animals1 gets cat, trout, lynx",
"	see(animals2[]); // animals2 gets dog, eel and bear"
 ]
	,
    "Output 03:": "automatic"

},




"&amp; Transactions from Tables to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "AND Transactions from tables to variables" ],
"Description 01:Introduction" : [
"",
"	This form of transaction picks up a table row and treats it as a 1-level structure with members named by the corresponding header names which will then be",
"	integrated in the destination variable using the rules of the <b>&amp;</b> prefix.",
"",
"	<br><br>",
"	Table access rules: See section on __Transactions from Tables to Variables__.<br>",
"	Destination variable rules: See section on __AND Transactions between variables__.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Table contents (1 row)	| Base variable: Updated with table name if no <b>^</b> suffix is specified.",
"Structure		| Table contents (1 row)	| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. - Existing members will be overwritten<br> 								  - No additional member names will be added.",
"Array			| Table contents (1 row)	| Base variable: See above.  Existing array members will be overwritten. - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the remaining members in the source variable will not be copied.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] &<== [ animals: .., 1 ]; // Owl with skin wings and night vision",
"	animal2[] &<== [ animals: .., 1 ]; // Owl",
"	see( animal1[] );",
"	see( animal2[] );"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] &<<= [ animals: .., 1 ]; // Owl ",
"	animal2[] &<<= [ animals: .., 1 ]; // Dog",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Ape left over"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10  } );",
"",
"	animal1[] &<=>  [ animals: .., 1 ]; // Animal1: Owl with night vision, no info on legs, keeps bat wings and hangs while sleeping",
"	animal2[] &<=>^ [ animals: .., 2 ]; // Animal2: Dog with 4 legs.  Circumflex symbol: Do not transfer table name.",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains bat and crab and ape with some info"
 ]
	,
    "Output 03:": "automatic"

},



"&amp; Transactions from Variables to Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "AND Transactions from variables to tables" ],
"Description 01:Introduction" : [
"",
"	This is the opposite direction where member contents of structures or arrays are transferred into tables.  In contrast to transaction to tables",
"	without assignment operators, the data in the destination table row will not be deleted.  Only the specifed data columns will be overwritten as long as",
"	matching data from the source variable is available. No additional table columns are introduced here to insert the remaining data.",
"",
"	<br><br>",
"	Destination table rules: See section on __Transactions from Variables to Tables__.<br>",
"	The only exception is that destination table rows are not cleared, and the __open-ended ranges__ rule does not apply for the <b>&amp;</b> assignment operator.",
"	The <b>^</b> suffix, if used, does not affect the functionality with copy- and swap-transactions because the destination is a table and table names will not be changed during transactions.",
"",
"	<br><br>",
"	",
"	<b>Structures to tables:</b><br> The member names will be matched with the existing column header names, provided they are part of the table specification",
"	(where whole row, a set of columns, a range or just one column is defined).  If a member name cannot be matched with any column header, then it will be ignored.",
"",
"	<br><br>",
"",
"	<b>Arrays to tables:</b><br> The array members will be written into the table fields as defined in the table specification (whole row, set of columns, a range or just one column).",
"	Normally, the members are written to the table from left to right except if a set of columns is specified.  In this case, the sequence inside the set will apply.",
"	If the array contains more elements than the number of columns (header names) provided, then the remaining elements will not be written into the table.",
""
 ]
	,
"Examples 01:Copy and Move Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 2 ] &<== animal1[];",
"	[ animals: .., 3 ] &<<=^ animal2[]; // If ^-symbol is not used, then animal2[] would be deleted.",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains owl, bat and crab"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 2 ] &<=> animal1[];  // Swap, with table name in base variable",
"	[ animals: .., 3 ] &<=>^ animal2[]; // Swap",
"",
"	see( animal1[] ); // Strange animal descriptions ...",
"	see( animal2[] );",
"	table list( animals ); // Contains owl, bat and crab with some info"
 ]
	,
    "Output 02:": "automatic"

},




"&amp; Transactions between Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "AND Transactions between tables" ],
"Description 01:Introduction" : [
"",
"	Transactions between table rows in the same or two different tables are also supported.  ",
"	As long the transaction operator has no assignment operator (described in the next sections further below), then the contents in the",
"	destination row will be cleared entirely before writing.",
"",
"	<br><br>",
"	Table rules: See section on __Transactions between Tables__.<br>",
"	The only exception is that tables are not cleared, and the __open-ended ranges__ rule does not apply for the <b>&amp;</b> assignment operator.",
"	The <b>^</b> suffix has no impact on table-to-table transactions.",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals1: Name, Dog, .. ] &<== [ animals2: Name, Cat, ]; // sharp claws will not be copied due to &-Rules",
"	[ animals1: {Name,Leg count}, 3 ]  &<== [ animals2: Name, Bee, { Weapon, Name } ]; // Only name will be transferred: Bee",
"	[ animals2: Name, 2 ] &<== [ animals1: Special ability, 1 ]; // No transaction due to mismatching headers",
"",
"	table list( animals1 ); // Cat with sensitive nose, relatively smart bee",
"	table list( animals2 ); // No changes.  Gnu (row 1) stays a gnu."
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Surface,   Leg count, Special ability  },",
"		  { Owl,   Feathers,  2,         Night vision     },",
"		  { Dog,   Fur,       4,         Sensitive nose   },",
"		  { Ape,   Hair,      2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Gnu, .. ] &<<= [ animals1: Name, Dog, Special ability ];  // Gnu with sensitive nose",
"	[ animals1: Name, Owl,    ] &<<= [ animals2: Name, Bee, .. ]; // Bee without sting",
"",
"	table list( animals1 );  // Without dog",
"	table list( animals2 );  // Without bee"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability, Strange habit  },",
"		  { Owl,   2,         Night vision, night time noise in the forest     },",
"		  { Dog,   4,         Sensitive nose, \"Man's best friend\"   },",
"		  { Ape,   2 or 4,    Relatively smart, often funny } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Cat, .. ] &<=> [ animals1: Name, Dog,  ];",
"	[ animals2: Name, Bee, Name..Special ability ] &<=> [ animals1: Name, Owl, ]; // Excludes the weapon",
"	",
"	table list( animals1 ); // No additional column created",
"	table list( animals2 ); // No additional column created"
 ]
	,
    "Output 03:": "automatic"
},



"&vert; Transaction Assignment Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions with OR assignment operator" ],
"Description 01:Introduction" : [
"	Transactions with the <b>+</b> prefix function similarily like the <b>&amp;</b> prefix, but following differences apply where the variable tree in the",
"	destination table or variable will be extended to fit the data:",
"",
"	* Existing structure members will be overwritten",
"	* Missing structure members will be created and the data will be written to them",
"	* Existing array members will be overwritten",
"	* Existing arrays will be extended with additional members if not all data can fit into the already existing members",
"	* If the destination is a table, then additional columns may be added to fit the data (dependings on how the target table row is specified)",
"	* New arrays and/or structures will be created if they are still missing in the destination in order to fit all data to be transferred"
 ]
	,
"Description 02:Typical Example" : [
"",
"	<img src=\"Images/Description_Transactions_Variable_Variable_OR.jpg\" alt=\"Variable to Variable Transaction with &vert; Assignment Operator\"><br/>",
""
 ]
	
},


"&vert; Transactions between Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "OR Transactions between variables" ],
"Description 01:Introduction" : [
"	Different from transactions without assignment operators, the <b>&vert;</b> assignment operator in front of the transaction symbol will assume the",
"	following rules focussing on overlaying data from the source variable in the destination variable:",
"",
"	* Transactions can be carried out on base variables as well as member variables.",
"	* If the destination variable does not yet exist, then it will be created as __simple variable__ containing void value before the transaction begins.  However, the source variable on the right-hand side must exist.",
"	* The existing setup of structure and array members and sub-members in the destination variable may be extended:",
"	** Further arrays and/or structures may be added.",
"	** Additional members may be added to existing arrays and/or structures.",
"	** Destination memebers for which equivalent source members are existing will be overwritten.",
"	* Where possible, all structure and array members and sub-members of the source variable will be included in the transaction.",
"	* The base variable of the specified destination will be overwritten if the <b>^</b> suffix is not used.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Simple or zero members	| The value of the base variable will be transferred as long no <b>^</b> suffix is specified. ",
"	Simple or zero members	| Array				| Base variable: See above.  The array (including sub-members) will be transferred.",
"	Simple or zero members	| Structure			| Base variable: See above.  The structure (including sub-members) will be transferred.",
"	Structure		| Simple or zero members	| Base variable: See above.",
"Structure		| Array				| Base variable: See above.  The array members will be renamed to structure members where the member names are 8-digit text representations of the index number, e.g. '00000000', '00000001', etc. 								  After this, same rules as for structures described below apply.",
"Structure		| Structure			| Base variable: See above.  The structure (including sub-members) will be transferred. - Existing members will be overwritten<br> - Additional members may be added<br> 								  - Additional arrays and/or structures may be added<br>",
"	Array			| Simple or zero members	| Base variable: See above. ",
"Array			| Array				| Base variable: See above.  The array will be copied. - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the array will be extended in order to transfer all members.",
"Array			| Structure			| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. The existing array members will be replaced by structure members from the source variable, sorted in alphabetic order by member names.<br> - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the array will be extended in order to transfer all members.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[] |<== animals2[];  // animals1 contains overwritten fish, reptile and all mammal sub-members",
"	see(animals1[]);"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Copy Transaction Example among Structures and Arrays" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { herbivore, carnivore }, { deer, bear } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	array( animals2[mammal], { lynx, skunk, shark, pig } );",
"",
"	animals2[] |<== animals1[];  // Note: bear, then deer replace lynx and skunk",
"	animals1[] |<== animals2[];",
"",
"	see(animals2[]); // Array with 4 elements",
"	see(animals1[]); // Addition of beer, dear, shark and pig"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Move Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[mammal] |<<= animals2[mammal]; ",
"	// Lynx replaces bear, skunk added, turtle added",
"",
"	see(animals1[]); // omnivore added, carnivore overwritten",
"	see(animals2[]); // no more mammal subtypes (...vores)"
 ]
	,
    "Output 03:": "automatic",
"Examples 04:Swap Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"",
"	animals1[] |<=> animals2[]; ",
"",
"	see(animals1[]); // trout and eel; and dog and cat are exchanged, owl and turtle duplicated",
"	see(animals2[]); "
 ]
	,
    "Output 04:": "automatic"

},

"&vert; Transactions from Tables to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "OR Transactions from tables to variables" ],
"Description 01:Introduction" : [
"",
"	This form of transaction picks up a table row and treats it as a 1-level structure with members named by the corresponding header names which will then be",
"	integrated in the destination variable using the rules of the <b>&vert;</b> prefix.",
"",
"	<br><br>",
"	Table access rules: See section on __Transactions from Tables to Variables__.<br>",
"	Destination variable rules: See section on __OR Transactions between variables__.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Table contents (1 row)	| Base variable: Updated with table name if no <b>^</b> suffix is specified.",
"Structure		| Table contents (1 row)	| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. - Existing members will be overwritten<br> - Additional members may be added<br> 								  - Additional arrays and/or structures may be added<br>",
"Array			| Table contents (1 row)	| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. The existing array members will be replaced by structure members from the source variable, sorted in alphabetic order by member names.<br> - If the destination has more members than the source, then the excess destination members remain unaffected.<br> 								  - If the destination has fewer members than the source, then the array will be extended in order to transfer all members.",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] |<== [ animals: .., 1 ];",
"	animal2[] |<==^	 [ animals: .., 1 ];",
"	see( animal1[] );",
"	see( animal2[] );"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] |<<= [ animals: .., 1 ]; // Owl, with skin wings like a bat",
"	animal2[] |<<= [ animals: .., 1 ]; // Dog, but not a favorable pet",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Ape left over"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10  } );",
"",
"	animal1[] |<=>  [ animals: .., 1 ]; // Exchange owl with bat",
"	animal2[] |<=>^ [ animals: .., 2 ]; // Exchange dog with crab",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains bat and crab and ape with some info"
 ]
	,
    "Output 03:": "automatic"

},


"&vert; Transactions from Variables to Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "OR Transactions from variables to tables" ],
"Description 01:Introduction" : [
"",
"	This is the opposite direction where member contents of structures or arrays are transferred into tables.  In contrast to transaction to tables",
"	without assignment operators, the data in the destination table row will not be deleted.  Only the specifed data columns will be overwritten as long as",
"	matching data from the source variable is available. Additional columns may be added as long __open-ended ranges__ have been specified.",
"",
"	<br><br>",
"	Destination table rules: See section on __Transactions from Variables to Tables__.<br>",
"	The only exception is that destination table rows are not cleared, and the __open-ended ranges__ rule does not apply for the <b>&vert;</b> assignment operator.",
"	The <b>^</b> suffix, if used, does not affect the functionality with copy- and swap-transactions because the destination is a table and table names will not be changed during transactions.",
"",
"	<br><br>",
"	",
"	<b>Structures to tables:</b><br> The member names will be matched with the existing column header names, provided they are part of the table specification",
"	(where whole row, a set of columns, a range or just one column is defined).  If a member name cannot be matched with any column header, then an additional",
"	header with that name will be added to the table and the data will be written into the designated field below as long __open-ended ranges__ have been specified.",
"",
"	<br><br>",
"",
"	<b>Arrays to tables:</b><br> The array members will be written into the table fields as defined in the table specification (whole row, set of columns, a range or just one column).",
"	Normally, the members are written to the table from left to right except if a set of columns is specified.  In this case, the sequence inside the set will apply.",
"	If the array contains more elements than the number of columns (header names) provided, then the remaining elements will not be written into the table unless",
"	__open-ended ranges__ have been specified.</b>.",
""
 ]
	,
"Examples 01:Copy and Move Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 2 ] |<== animal1[];",
"	[ animals: .., 3 ] |<<=^ animal2[]; // If ^-symbol is not used, then animal2[] would be deleted.",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains bat and crab and ape with some info"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 2 ] |<=> animal1[];  // Swap, with table name in base variable",
"	[ animals: .., 3 ] |<=>^ animal2[]; // Swap",
"",
"	see( animal1[] ); // Dog, ...",
"	see( animal2[] ); // Ape, ...",
"	table list( animals ); // Contains owl, bat and crab and ape with some info"
 ]
	,
    "Output 02:": "automatic"

},


"&vert; Transactions between Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "OR Transactions between tables" ],
"Description 01:Introduction" : [
"",
"	Transactions between table rows in the same or two different tables are also supported.  ",
"	As long the transaction operator has no assignment operator (described in the next sections further below), then the contents in the",
"	destination row will be cleared entirely before writing.",
"",
"	<br><br>",
"	Table rules: See section on __Transactions between Tables__.<br>",
"	The <b>^</b> suffix has no impact on table-to-table transactions.",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals1: Name, Dog, .. ] |<== [ animals2: Name, Cat, ]; // sharp claws will not be copied due to &-Rules",
"	[ animals1: {Name,Leg count}, 3 ]  |<== [ animals2: Name, Bee, { Weapon, Name } ]; // Only name will be transferred: Bee",
"	[ animals2: Name, 2 ] |<== [ animals1: Special ability, 1 ]; // No transaction due to mismatching headers",
"",
"	table list( animals1 ); // Cat with sensitive nose, relatively smart bee",
"	table list( animals2 ); // No changes.  Gnu (row 1) stays a gnu."
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Surface,   Leg count, Special ability  },",
"		  { Owl,   Feathers,  2,         Night vision     },",
"		  { Dog,   Fur,       4,         Sensitive nose   },",
"		  { Ape,   Hair,      2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Gnu, .. ] |<<= [ animals1: Name, Dog, Special ability ];  // Gnu with sensitive nose",
"	[ animals1: Name, Owl,    ] |<<= [ animals2: Name, Bee, .. ]; // Bee without sting",
"",
"	table list( animals1 );  // Without dog",
"	table list( animals2 );  // Without bee"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability, Strange habit  },",
"		  { Owl,   2,         Night vision, night time noise in the forest     },",
"		  { Dog,   4,         Sensitive nose, \"Man's best friend\"   },",
"		  { Ape,   2 or 4,    Relatively smart, often funny } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Cat, .. ] |<=> [ animals1: Name, Dog,  ];",
"	[ animals2: Name, Bee, Name..Special ability ] |<=> [ animals1: Name, Owl, ]; // Excludes the weapon",
"	",
"	table list( animals1 );",
"	table list( animals2 );"
 ]
	,
    "Output 03:": "automatic"
},



"&#43; Transaction Assignment Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Transactions with ADD assignment operator" ],
"Description 01:Introduction" : [
"	Transactions with the <b>+</b> prefix operate in a similar way like the <b>&vert;</b> prefix, but following differences apply, aiming to ",
"	add the data to the existing data in the destination without overwriting the data which is already existing:",
"",
"	* Existing structure members will <u>not</u> be overwritten",
"	* However, missing structure members will be created and the data will be written to them",
"	* Existing array members will <u>not</u> be overwritten",
"	** For the additional data to be written, additional array members will be created for all of them",
"	* If the destination is a table, then additional columns may be added to fit the data (dependings on how the target table row is specified)",
"	* New arrays and/or structures will be created if they are still missing in the destination in order to fit all data to be transferred"
 ]
	,
"Description 02:Typical Example" : [
"",
"	<img src=\"Images/Description_Transactions_Variable_Variable_ADD.jpg\" alt=\"Variable to Variable Transaction with &vert; Assignment Operator\"><br/>",
""
 ]
	
},


"&#43; Transactions between Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ADD Transactions between variables" ],
"Description 01:Introduction" : [
"	Different from transactions without assignment operators, the <b>&#43;</b> assignment operator in front of the transaction symbol will assume the",
"	following rules focussing on overlaying data from the source variable in the destination variable:",
"",
"	* Transactions can be carried out on base variables as well as member variables.",
"	* If the destination variable does not yet exist, then it will be created as __simple variable__ containing void value before the transaction begins.  However, the source variable on the right-hand side must exist.",
"	* The existing setup of structure and array members and sub-members in the destination variable may be extended:",
"	** Further arrays and/or structures may be added.",
"	** Additional members may be added to existing arrays and/or structures.",
"	** Destination memebers for which equivalent source members are existing will, which is different from the <b>&vert;</b> prfix, not be overwritten.",
"	* Where possible, all structure and array members and sub-members of the source variable will be included in the transaction.",
"	* The base variable of the specified destination will be overwritten if the <b>^</b> suffix is not used.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Simple or zero members	| The value of the base variable will be transferred as long no <b>^</b> suffix is specified. ",
"	Simple or zero members	| Array				| Base variable: See above.  The array (including sub-members) will be transferred.",
"	Simple or zero members	| Structure			| Base variable: See above.  The structure (including sub-members) will be transferred.",
"	Structure		| Simple or zero members	| Base variable: See above.",
"Structure		| Array				| Base variable: See above.  The array members will be renamed to structure members where the member names are 8-digit text representations of the index number, e.g. '00000000', '00000001', etc. 								  After this, same rules as for structures described below apply.",
"Structure		| Structure			| Base variable: See above.  The structure (including sub-members) will be transferred. - Existing members will <u>not</b> be overwritten<br> - All members in the source variable will be added as furhter members to the destination array.<br> 								  - Existing members will not be overwritten",
"	Array			| Simple or zero members	| Base variable: See above. ",
"Array			| Array				| Base variable: See above.  The array will be copied. - All members in the source variable will be added as furhter members to the destination array.<br> 								  - Existing members will not be overwritten",
"Array			| Structure			| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. The existing array members will be replaced by structure members from the source variable, sorted in alphabetic order by member names.<br> - All members in the source variable will be added as furhter members to the destination array.<br> 								  - Existing members will not be overwritten",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"	array ( animals1[insects], { bee, fly } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"	array ( animals2[insects], { ant, tick, mosquito } );",
"",
"	animals1[] +<== animals2[];  // animals1 gets all insects members, omnivore (skunk) and the turtle",
"	see(animals1[]);"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Copy Transaction Example among Structures and Arrays" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"	array ( animals1[insects], { bee, fly } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	array( animals2[mammal], { lynx, skunk } );",
"	structure ( animals2[insects], { useful, nasty, useless }, { ant, tick, mosquito } );",
"",
"	animals1[] +<== animals2[];  // animals1 gets all insects members, omnivore (skunk) and the turtle",
"	see(animals1[]);"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Move Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"	array ( animals1[insects], { bee, fly } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	array( animals2[mammal], { lynx, skunk } );",
"	structure ( animals2[insects], { useful, nasty, useless }, { ant, tick, mosquito } );",
"",
"	animals1[mammal] +<<= animals2[ mammal ];",
"",
"	see(animals1[]);",
"	see(animals2[]); // Without the mammals"
 ]
	,
    "Output 03:": "automatic",
"Examples 04:Swap Transaction Example" : [
"	structure( animals1[], { mammal, bird, fish }, { dog, owl, eel} );",
"	structure( animals1[mammal], { carnivore, herbivore }, { bear, deer } );",
"	array ( animals1[insects], { bee, fly } );",
"",
"	structure( animals2[], { mammal, fish, reptile }, { cat, trout, turtle } );",
"	structure( animals2[mammal], { carnivore, omnivores }, { lynx, skunk } );",
"	array ( animals2[insects], { ant, tick, mosquito } );",
"",
"	animals1[] +<=> animals2[];  ",
"	see(animals1[]); // Keep dog, owl eel, bear, deer, bee, fly. Get turtle, skunk and all insects",
"	see(animals2[]); // Keep cat, trout, turtle, lynx, skunk. Get owl, deer and all insects"
 ]
	,
    "Output 04:": "automatic"

},

"&#43; Transactions from Tables to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ADD Transactions from tables to variables" ],
"Description 01:Introduction" : [
"",
"	This form of transaction picks up a table row and treats it as a 1-level structure with members named by the corresponding header names which will then be",
"	integrated in the destination variable using the rules of the <b>&vert;</b> prefix.",
"",
"	<br><br>",
"	Table access rules: See section on __Transactions from Tables to Variables__.<br>",
"	Destination variable rules: See section on __ADD Transactions between variables__.",
"",
"	<br><br>Following actions are applied on the destination variables using this assignment operator:",
"	=== 100, 100, 800",
"	Destination		| Source			| Description",
"	Simple or zero members	| Table contents (1 row)	| Base variable: Updated with table name if no <b>^</b> suffix is specified.",
"Structure		| Table contents (1 row) 	| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. - Existing members will <u>not</b> be overwritten<br> - All members in the source variable will be added as furhter members to the destination array.<br> 								  - Existing members will not be overwritten",
"Array			| Table contents (1 row)	| Base variable: See above.  The members for which corresponding member positions are already existing in the destination variable will also be transferred. The existing array members will be replaced by structure members from the source variable, sorted in alphabetic order by member names.<br> - All members in the source variable will be added as furhter members to the destination array.<br> 								  - Existing members will not be overwritten",
"	===",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] +<== [ animals: .., 1 ];",
"	animal2[] +<==^	 [ animals: .., 3 ];",
"	see( animal1[] ); // Adds leg count, but name and special ability are maintained",
"	see( animal2[] ); // animal2[] gets all table entries for the ape"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"",
"	structure( animal1[], { Name, Special ability, Skin surface }, { Bat, \"On-flight acoustic radar\", skin wings } );",
"	array( animal2[], { Rat, \"Relatively intelligent\", gray hair, not a favorable pet  } );",
"	animal1[] = \"A kind of flying dog\";",
"	animal2[] = \"A kind of big mouse\";",
"",
"	animal1[] +<<= [ animals: .., 1 ];",
"	animal2[] +<<=^	 [ animals: .., 2 ]; // Ape on row 2 (was on row 3 before the transaction on previous row)",
"	see( animal1[] ); // Adds leg count, but name and special ability are maintained",
"	see( animal2[] ); // animal2[] gets all table entries for the ape",
"",
"	table list( animals ); // Dog with its nose is left over."
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10  } );",
"",
"	animal1[] +<=>  [ animals: .., 1 ]; // Exchange owl with bat",
"	animal2[] +<=>^ [ animals: .., 2 ]; // Exchange dog with crab",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains bat (row 1) and crab (row 2) in addition"
 ]
	,
    "Output 03:": "automatic"

},


"&#43; Transactions from Variables to Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ADD Transactions from variables to tables" ],
"Description 01:Introduction" : [
"",
"	This is the opposite direction where member contents of structures or arrays are transferred and added to the tables.  First the existing table contents",
"	beginning at the specified row are moved down by 1 line in order to provide a new blank row without deleting any other data.  Then the transaction into the",
"	new row takes place by transferring the data into the table. Only the specifed data columns will be overwritten as long as",
"	matching data from the source variable is available. Additional columns may be added as long __open-ended ranges__ have been specified.",
"",
"	<br><br>",
"	",
"	<b>Structures to tables:</b><br> The member names will be matched with the existing column header names, provided they are part of the table specification",
"	(where whole row, a set of columns, a range or just one column is defined).  If a member name cannot be matched with any column header, then an additional",
"	header with that name will be added to the table and the data will be written into the designated field below as long __open-ended ranges__ have been specified.",
"",
"	<br><br>",
"",
"	<b>Arrays to tables:</b><br> The array members will be written into the table fields as defined in the table specification (whole row, set of columns, a range or just one column).",
"	Normally, the members are written to the table from left to right except if a set of columns is specified.  In this case, the sequence inside the set will apply.",
"	If the array contains more elements than the number of columns (header names) provided, then the remaining elements will not be written into the table unless",
"	__open-ended ranges__ have been specified.</b>.",
""
 ]
	,
"Examples 01:Copy and Move Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 3 ] +<== animal1[];  // Bat is added in row 3",
"	[ animals: .., 2 ] +<<=^ animal2[]; // Crab is added to row 2 (bat moves from row 3 to row 4)",
"",
"	see( animal1[] );",
"	see( animal2[] );",
"	table list( animals ); // Contains bat and crab and ape with some info"
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Swap Transaction Example" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4 and 1 tail,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	structure( animal1[], { Name, Special ability, Skin surface, Strange habit }, ",
"	                      { Bat, \"On-flight acoustic radar\", skin wings, hangs while sleeping } );",
"",
"	array( animal2[], { Crab, 10, walks sideways, some are delicious  } );",
"",
"	[ animals: .., 2 ] +<=> animal1[];  // Bat is written to row 2 (other rows move down), other data not overwritten",
"	[ animals: .., 1 ] +<=>^ animal2[]; // Owl data added to array",
"",
"	see( animal1[] ); // Gets leg count from the dog",
"	see( animal2[] ); // Ape, ...",
"	table list( animals ); // Contains owl, bat and crab and ape with some info"
 ]
	,
    "Output 02:": "automatic"

},


"&#43; Transactions between Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ADD Transactions between tables" ],
"Description 01:Introduction" : [
"",
"	Transactions between table rows in the same or two different tables are also supported.  ",
"	As long the transaction operator has no assignment operator (described in the next sections further below), then the destination",
"	row is cleared by moving all data 1 line down before the writing take place, so no exiting data gets lost",
""
 ]
	,
"Examples 01:Copy Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability  },",
"		  { Owl,   2,         Night vision     },",
"		  { Dog,   4,         Sensitive nose   },",
"		  { Ape,   2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals1: Name, Dog, .. ]        +<== [ animals2: Name, Cat, ]; // sharp claws will be added",
"	[ animals1: {Name,Leg count}, 3 ]  +<== [ animals2: Name, Bee, { Weapon, Name, Leg count } ]; // Only name + leg count will be transferred: Bee",
"	[ animals2: Name, 2 ]              +<== [ animals1: Special ability, 1 ]; // No transaction due to mismatching headers. Added row stays blank",
"",
"	table list( animals1 ); // Cat with sensitive nose, relatively smart bee",
"	table list( animals2 ); // No changes.  Gnu (row 1) stays a gnu."
 ]
	,
    "Output 01:": "automatic",
"Examples 02:Move Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Surface,   Leg count, Special ability  },",
"		  { Owl,   Feathers,  2,         Night vision     },",
"		  { Dog,   Fur,       4,         Sensitive nose   },",
"		  { Ape,   Hair,      2 or 4,    Relatively smart } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	[ animals2: Name, Gnu, .. ] +<<= [ animals1: Name, Dog, Special ability ];  // Dog: Nose without Dog",
"	[ animals1: Name, Owl,    ] +<<= [ animals2: Name, Bee, .. ]; // Bee without sting",
"",
"	table list( animals1 );  // Dog moved to table 2 (just the nose)",
"	table list( animals2 );  // Bee moved to table 1"
 ]
	,
    "Output 02:": "automatic",
"Examples 03:Swap Transaction Example" : [
"	include( Support Library );",
"	table initialize( animals1,",
"		{ { Name,  Leg count, Special ability, Strange habit  },",
"		  { Owl,   2,         Night vision, night time noise in the forest     },",
"		  { Dog,   4,         Sensitive nose, \"Man's best friend\"   },",
"		  { Ape,   2 or 4,    Relatively smart, often funny } } );",
"",
"	table initialize( animals2,",
"		{ { Name,  Leg count, Special ability, Weapon  },",
"		  { Bee,   6,         Makes honey,     sting   },",
"		  { Gnu,   4,         Knows UNIX,      horns   },",
"		  { Cat,   4,         Empathy to humans, sharp claws } } );",
"",
"	// The +<=> is very useful for mutual data replication in both tables.",
"",
"	[ animals2: Name, Cat, .. ] +<=> [ animals1: Name, Dog,  ]; // Cats and dogs are on both tables",
"	[ animals2: Name, Bee, Name..Special ability ] +<=> [ animals1: Name, Owl, ]; // Owl and be duplicated (names)",
"	",
"	table list( animals1 );",
"	table list( animals2 );"
 ]
	,
    "Output 03:": "automatic"
}




,

  "Functions and Procedures" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Functions and Procedures" ],
    "Keywords":			[ "Procedures", "Functions", "Function call", "Function calls", "Procedure call", "Procedure calls" ],
"Description 01:Introduction" : [
"",
"	B4P provides an extensive library of standard functions with an emphasis on processing complex tables and data structures.  ",
"",
"	<br><br>",
"",
"	Functions and procedures are subroutines that can be called up using their name.  For simplicity, all such subroutines are referred to",
"	as <i>functions</i> throughout the B4P documentation, regardless of whether they provide a return value (as functions) or not (as procedures).",
"	",
"" ],
"Description 02:Procedure and Function Calls" : [
"",
"	Various B4P functions can only be called as functions in __expressions__, standalone <b>procedure calls</b>, or both are allowed.",
"	In procedure calls, no return values are made use of.",
"	Functions may require either none, a fixed number, or a variable number of __function parameters__ with different __function parameter directions__.",
"",
"	<br><br>",
"",
"	=== 200, 600, 200, bold_column_1 bold_column_3",
"	Function Nature		| Description					| Examples",
"	Function		| * Always provides a return value <br) * Must be called inside expressions where the return value is used further. | a[] = abs( 1.5 );<br>echo( sqrt( 81 ) );",
"	Procedure		| * Does not provide return values  <br> * Must be called as procedures. <br> * If no parameters are supplied, then the function name can be used alone with semicolon at the end. | echo;<br>echo();<br>echo(Hello);",
"	Procedure or function	| * The function can be called as procedrues or functions. <br> * Use of return value is voluntary. | table rename headers(...);<br>a[] = table rename headers(...);",
"	Control flow functions	| __Control flow functions__ require a succeeding statement or code block which will be executed as specified by these functions.  The __if(__) statement is one of them. | if (a[]=1) echo(\"is 1\");",
"	===	",
"" ],
"Description 03:User-Defined Procedures and Functions" : [
"",
"	B4P provide a convenient method to create __user-defined procedures__ and __user-defined functions__ and call them up as if they would be part of the standard B4P function library. ",
"	You can even create you own B4P library files containing your frequently used functions you have written so they are available at your discretion whenever",
"	you need them.  See __Introduction to user-defined functions__ for details.",
""
 ]
	
   },


"Function Naming" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Procedure Names", "Function Names" ],
"Description 01:Introduction" : [
"",
"	B4P function names must be formulated __plain text__ and may consist of multiple words with spaces inbetween and allow special characters as long they do not interfere",
"	with the B4P syntax (For example single points ( <b>.</b> ) and underscore symbols (<b>_</b>) are OK).  This makes function names easy to read and memorize, for example",
"	__table lookup ignore case(__).",
"",
"",
"	<br><br>",
"	Please note the following rules for function names, especially when creating __user-defined procedures__ and __user-defined functions__ on your own:",
"	* Function names are case sensitive",
"	* Function names are always specified as __plain text__, i.e. always without quotation marks",
"	** Multiple words sparated with spaces are allowed",
"	** Multiple spaces and tabs are interpreted as one single space",
"	** Special symbols may be used as long they do not interfere with the B4P syntax.  Example: single points ( <b>.</b> ) and underscore symbols (<b>_</b>) are OK, but the hypen (minus sign) is not.",
"	* Function names do not interfere with __variable names__ and __table names__, i.e. table and variable names 'echo' are allowed like in this valid example: <br><b>echo( echo[], [echo:1,2] );</b>",
"",
"" ],
"Description 03:Function Naming Examples" : [
"",
"	The first two function names listed below are equivalent, but all the remaining ones are not.",
"	",
"	===  200, 800, bold_column_1",
"	Function call	| Explanation",
"	table process(...)						| Calls __table process(__) which is a valid function in this B4P library",
"	&nbsp;&nbsp;table&nbsp;&nbsp;&nbsp;process&nbsp;&nbsp;(...);	| Same function as above: Multiple spaces collapse to 1 space, leading and trailing spaces are ignored",
"	Table process(...)						| Function names are case sensitive.  This is a different funtion name.",
"	table_process(...)						| <i>Snake-case</i> formulation: Underscore and other symbols differ from spaces.",
"	table-process(...)						| <u>Attention</u>: <i>Kebab-case</i> does not work.  It attempts to execute 'process(...)', then do a text subtraction of 'table' minus return value of process(...).",
"	tableprocess(...)						| Single-word 'tableprocess' differs from double-word 'table process'",
"	TableProcess(...)						| <i>Camel case</i> formulation: Capitalized letter for each word makes it a distinct function name from 'tableprocess'",
"	'table process'(...)						| Syntax error (only plain text is allowed)",
"	\"table process\"(...)						| Syntax error (see above)",
"	===",
""
 ]
	

},



"Function Parameters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function Parameters" ],
    "Keywords":			[ "Function parameter" ],
"Description 01:Introduction" : [
"",
"	B4P applies a flexible scheme to specify parameters to be passed into functions.",
"",
"	* Functions may accept a fixed or variable number of parameters.",
"	* Variable number of parameters is typically specified with a minimum, maximum and incremental count, Example: min 3, max 9, and increments of 2, so even number parameters are rejected.",
"	* If 0 parameters are allowed, then functions called as procedures can be specified without parentheses, e.g. <b>echo;</b>.",
"	* Following __parameter directions__ are supported: Input, output, input/output, and __variable references__",
"	* Function parameters can be values, variables (including references to variables), expressions, table references and __code pieces__.",
"",
"	Details are ruled in the respective function definitions.",
"",
"	<br><br>",
"",
"	Type checking of function parameters takes place at run-time.  Depending on the parameter requested, a specific type (e.g. numeral), multiple different types,",
"	or all types are accepted.  Various functions dealing with tables do also accept __table columns as function parameters__ which is a flexible parameter",
"	type and accepts one of the following: individual header names, individual column numbers or several of them provided in a __parameter set__.",
"",
"	<br><br>",
"",
"	The ability to pass __code pieces__ as parameters into functions, which are then executed by the function once or repeatedly on when needed,",
"	are unique to B4P and not common in other programming languges. This feature is actually used in __control flow functions__ (e.g. __if(__),",
"	__while(__), etc.) which are, in other languages, defined as fixed keywords and are inherent parts of the programming language.  ",
"	In addition, this feature allows convenient operations through tables without specifying loops, e.g. with the __table process(__) function.",
""
 ]
	
},



"Function Parameter Directions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function parameter directions", "parameter directions", "input parameters", "output parameters", "I/O parameters" ],
"Description 01:Introduction" : [
"",
"	B4P distinguishes among following function parameter directions which are described next.",
"",
"	=== 200, 150, 150, 200, 200, bold_column_1",
"	Direction			| Constants 	| Expressions 	| Variables			| Table references",
"	Input parameters		| allowed	| allowed	| allowed (must be defined)	| allowed",
"	Output parameters		| not allowed	| not allowed	| allowed (may be defined)	| allowed",
"	Input / output parameters	| not allowed	| not allowed	| allowed (must be defined)	| allowed",
"	References			| not allowed	| not allowed	| allowed (must be defined)	| not allowed",
"	__Code pieces__			| 		| 		| See section on __code pieces__   | ",
"	===",
""
 ]
	,
"Description 02:Input Parameters" : [
"",
"	The parameters supplied to the function are values.  They can be constants, existing __variables__, __table references__,",
"	and any form of right-hand expressions containing calculations and/or other function calls.  Variables passed as paramters",
"	must be defined (i.e. values assigned) prior to calling the function.",
""
 ]
	,
"Examples 02:" : [
"	a[] = World;",
"	echo( \"Hello \", a[], ' ', abs(-1)+2+3 );"
 ]
	,

    "Output 02:": "automatic",

"Description 03:Output Parameters" : [
"",
"	The parameters must either be a __variable__ or __table reference__, similar to left-hand side of assignment statements.",
"	Constants and calculated expressions are not allowed.  Before the function is called, variables which are not yet existing,",
"	will be defined automatically. After the function call has been completed, the value will be written back to the variable or table.",
""
 ]
	,
"Examples 03:" : [
"	a[] = find( 'Say Hi!', { Ha, Hä, He, Hi, Ho }, 0, which[] );",
"	echo( which[] ); // 3, because Hi is in position 3 in the parameter set"
 ]
	,

    "Output 03:": "automatic",

"Description 04:Input / Output Parameters" : [
"",
"	The parameters must either be an existing __variable__ or __table reference__, similar to left-hand side of assignment statements.",
"	Constants and calculated expressions are not allowed.",
"	Before the function is called, the value will be retrieved from the variable or table.  After the function call has been completed,",
"	the value will be written back to the table.",
"" ],
"Examples 04:" : [
"	table initialize( t, {{ Hi, He }} );",
"	a[] = Ho;",
"	exchange( [t:0,0], a[] );",
"	echo( [t:..,0], \" and \", a[] );"
 ]
	,

    "Output 04:": "automatic",

"Description 05:References" : [
"",
"	Some functions take over the reference to the variables provided in the function parameters.  References provide following benefits:",
"	* Higher performance (no payload data, e.g. big parameter sets, are copied in before the call and copied back after the call)",
"	* Direct access to the variable contents, especially applicable in __user-defined procedures__ and __user-defined functions__",
"	* Access to member variables (__structure__ and __array__ members and their sub-members if available)",
"	* Access to variable properties, e.g. __variable protection__ settings.",
"",
"	The following code example shows how the user-defined procedure <b>my funct</b> accesses a member variable and defines an additional",
"	member variable.",
""
 ]
	,
"Examples 05:" : [
"	define procedure( my func, { { a, all, reference } } )",
"	{",
"	    echo(a[one]);",
"	    a[two] = TWO;",
"	}",
"	",
"	b[one] = ONE;",
"	my func( b[] );",
"	echo(b[two]);"
 ]
	,

    "Output 05:": "automatic",
"Description 06:Code Pieces" : [
"",
"	Passing code pieces as function parameters is a unique feature in B4P.  Code pieces can either be provided directly or as a string.",
"	When the function is called, the code piece is checked for correct syntax.  While the function is running, the code pieces provided may be",
"	called multiple times, or in specific cases not at all.",
"",
"	<br><br>",
"	See section on __code pieces__ for further details."
 ]
	
},





"Function Parameter Types" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function parameter types" ],
"Description 01:Introduction" : [
"",
"	B4P supports different parameter types (e.g. string, etc.) as well as more specialized parameter types.",
"",
"	=== 200, 800, bold_column_1",
"	Parameter Types		| Description",
"	All			| Accepts ",
"	Numeral			| Accepts numerals and expressions returning numeral values",
"	String			| Accepts strings and expressions returning lterals",
"	Boolean			| Accepts <b>true</b>, <b>false</b> or expressions returning boolean values, e.g. comparisons",
"	Date			| Accepts dates and/or time values or expressions returning date/time values.",
"	Date or string		| In this case, strings will be converted to dates automatically, e.g. \"29.Feb. 20\" to 2020-02-29, or \"today\" to today's date",
"	Parameter set		| Accepts parameter sets or expressiosn returning parameter sets",
"	Combinations of above	| Various functions accept values of different types",
"	Table columns		| Parameter to specify one or multiple table columns in a flexible way. See section on __table columns as function parameters__.",
"	Parameter set or string | Various functions accept either parameter sets or strings.  See section on __parameter set or string__  for details",
"	All types		| Accepts values of all types, including void",
"	Valid types		| Accepts values of all types, except void",
"	Variable		| __Code piece__, expecting a variable name",
"	Comparison expression	| __Code piece__, expecting a comparison expression",
"	Expression		| __Code piece__, expecting an expression",
"	Statements		| __Code piece__, expecting a statement, multiple statements or a block of statements (inside braces)",
"	===",
"",
"	Special parameter types and rulings are desrbied in the next section.",
""
 ]
	
},


"Parameter Set or String (Func. Param. Type)":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set or string" ],
    "Keywords":			[ "parameter set or string" ],
"Description 01:Introduction" : [
"",
"	Various functions accept either parameter sets or strings when expecting one or multiple strings, for example file names",
"	as supported by various file functions. The rules are described below",
"",
"	Whenever a function expects a __function parameter__ for table columns, the following types are supported and automatically",
"	put into parameter sets.",
"",
"	=== 150, 500, 350, bold_column_1",
"	Type			| Description												| Example",
"__Quoted strings__	| The content of the entire string is interpreted as <b>one single string value</b> <br> 				  Empty strings \"\" are treated as they are.			 					| \"Last,First Name\" is such an example",
"__Softquoted strings__	| The content of the entire string is interpreted as <b>one single string value</b> <br> 				  Empty strings '' are treated as they are.			 					| 'Last,First Name' is such an example",
"__Parameter set__	| Parameter sets can contain any number of values <br> 				  Empty sets {} provide zero values.									| { Last Name, First Name, \"Value [EUR]\", 123 }",
"	===",
"",
"	<br><br>",
"	The following code example demonstrates this parameter type ruling using a user-defined function.  The user-defined function gets all",
"	values in form of parameter sets and prints the contents.",
""
 ]
	,

"Examples 01:" : [
"	define procedure( demonstrate, { { parameter 1, to parameters } }, 1, unlimited )",
"	{",
"	    for (i[] = 1, i[] <= parameter count[], i[]++)",
"	    {",
"		var name[] = 'parameter ' + str(i[]);",
"	    	print( var name[][], \"  (\", var name[][]{},\" items) \" );",
"	    }",
"	    echo;",
"	}",
"",
"	demonstrate( A, B );",
"	demonstrate( Hello World,  Hello   World  ); // Both are same",
"	demonstrate( \"A,B\", \" A, B \" ); // Both are different",
"	demonstrate( 'A,B', ' A , B '); // Both are same",
"	demonstrate( \"\", '', '  ' ); // Blank, empty, empty",
"	demonstrate( 'Hello World,  Hello   World  ,\"   Hello   World   \"');",
"	demonstrate( { Hello   World, '  Hello   World  ',\"   Hello   World   \"}); // Note the differences",
"",
"	echo;",
"",
"	define additional procedure( demonstrate 2, demonstrate, ",
"	    { { parameter 1, to parameters members to string } }, 1, unlimited );",
"	",
"	demonstrate   ( { 1, 2, '3' } );",
"	demonstrate 2 ( { 1, 2, '3' } ); // Note: All numbers are converted to strings",
""
 ]
	,
    "Output 01:": "automatic"
},



"Table Columns (Func. Param. Type)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table columns" ],
    "Keywords":			[ "table columns as function parameters" ],
"Description 01:Introduction" : [
"",
"	Whenever a function expects a __function parameter__ for table columns, the following types are supported:",
"",
"	=== 200, 500, 300, bold_column_1",
"	Type			| Description				| Example",
"	Numeral			| Specifies a __table column number__, beginning with 0.  __Negative indexing__ is allowed, i.e. -1 is last column in the top row, counting leftward. | 0 (left most column)<br> -2 (2nd. last column)",
"Quoted string		| The content of the entire string is interpreted as one header name. <br> 				  Empty strings (\"\") refer to the first column with blank header name.		 | \"Last,First Name\" refers to one header name<br>\"\" is a blank header name",
"Softquoted string	| The content of the entire string is interpreted as one header name. <br> Empty strings ('') refer to the first column with blank header name.<br> __shifted table column specifications__ are allowed here to reference neighboring columns.<br> 				  Some function-specific exceptions may apply and are explicitly documented in the function library documentation. | 'Last,First Name' refers to one header name<br>'' is a blank header name",
"	Parameter set		| Parameter sets contain a colection of header names and/or column numbers 	 | { 1, Last Name, first Name, \"Value [EUR]\" }",
"	===",
"",
"",
"	Addtional function-specific rules may apply.  Below are some examples:",
"	* Header names must exist",
"	* Header names may exist (missing ones may be created as additinal columns in the table)",
"	* Header names must not exist (e.g. to check if specific header names are <i>not</i> used in a specific table",
"	* Column numbers are allowed, or not allowed",
"	* Column numbers may only refer to existing colums, or alternatively all columns even if not yet existing",
"	* Header names or column numbers must be unique",
"	* etc.",
"",
"	<br>",
"	<u>Note</u>: If Table headers contain numbers, then you can find these headers by specifying the numbers as strings, e.g. <b>'10'</b>, or <b>{ ..., '10'. ...}</b>.",
""
 ]
	
},



"Code Pieces (Func. Param. Type)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Code piece" ],
    "Keywords":			[ "Code pieces" ],
"Description 01:Introduction" : [
"",
"	Passing code pieces as function parameters is a unique feature in B4P.  Code pieces can either be provided directly or as a string.",
"	When the function is called, the code piece is checked for correct syntax.  While the function is running, the code pieces provided may be",
"	called multiple times, or in specific cases not at all.",
"",
"	<br><br>",
"",
"	Code pieces provided in strings must be referenced with a preceding colon (:) symbol in order to avoid interpreting the string",
"	value or expression as actual code to execute.",
"",
"	Code pieces come in 4 different flavors:",
"",
"	=== 200, 600, 200, bold_column_1 bold_column_3",
"	Code Piece Type			| Description																					| Syntax Examples",
"	Comparison expression		| Expression to compare something without value on left hand side.<br>The parameter inside the __case(__) function is a comparison expression.					| &gt;30<br>3..4<br>A  (equals A)",
"	Expression			| Any form of B4P expression as expected on right hand side of assignments<br>The parameter inside the __while(__) function is an expression which must return a boolean result.	| a[]+1<br>abs(-1)",
"	Variables			| Expression on left hand side of assignments, which are destination variables, but not tables.<br>The __dim(__) function makes use of this. 	| a[]<br>[table:Name,1]",
"	Statements			| 1 or more statements, separated with semicolons. Braces are allowed.<br>The __for(__) function expects two such statements.			| a[]=b[]+2;<br>{ echo(test); c[]=1 }",
"	===",
""
 ]
	
},

"Comparison Expressions (func. params)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Comparison Expression [func. params]" ],
    "Keywords":			[ "Comparison Expressions", "Comparison Expression" ],
"Description 01:Introduction" : [
"",
"	A comparison expression is part of an expression where one left-hand value is compared with one or more other right-hand values.  While the a regular",
"	expression contains left-hand value, comparison operator and right values, the comparison expression leaves out the left-hand value out.",
"	<br><br>",
"",
"	__case(__) and __compare select(__) are two common functions which utilize comparison expressions.",
"",
"	<br><br>",
"	<u>Attention</u>: Extra arentheses are required when specifying individual values, multiple values spearated with commas, ranges, and when using following comparison operators in front: = and &lt;&gt;.  The reason is",
"	that with out parentheses, the comparison tries to hijack all further parameters separated with commas as their own right-hand values to compare, too.<br>",
"	No extra parentheses are required when the comparison expression is in the last function parameter or is the only one function parameter.<br>",
"	No extraparentheses are required if the comparison expression begins with following operators: &lt;, &lt;=, &gt;, &lt;=, ==, and !=.<br>",
"	No extra parentheses are required if the comparison expression is provided in a string value.",
""
 ]
	,
"Examples 01:" : [
"	p[] = { 2, 3, 5, 7, 10, 11, 13, 17, 23, 31, 37, A, a, Hello };",
"",
"	for all parameters( p[], var[] )",
"	{	",
"		result[] = compare select( var[], other, ",
"				(11,37),      is 11 or 37, // Parentheses required if no operator put in front",
"				==13, 	      thirteen, 	",
"				(=+a),        1st letter in alphabet, // Parentheses required with = and <>",
"				('H*'),	      Begins with H,",
"				>15,          greater than 15,",
"				(3..5,10),    \"is one of 3..5, 10\" );",
"		print(var[],\": \", result[],\"  / \");",
"",
"		// Demonstrate the same with comparison expressions in strings.  Note the colons used in front.",
"",
"		c[] = '(3..5,10)';",
"		result[] = compare select( var[], other, ",
"				:str(11)+\",37\", is 11 or 37,    // Expression returning a string",
"				:'==13',      thirteen,     // Softquoted string: No difference to quoted string",
"				:'=+a',       1st letter in alphabet, ",
"				:\"'H*'\",      Begins with H, // See note below !",
"				:\">15\",       greater than 15,",
"				:c[],         \"is one of 3..5, 10\" ); // Referring to a variable",
"		echo(result[]);",
"	}",
"",
"	// Note :\"'H*'\" with nested quotation marks:  Expression inside requires a single quotation mark to",
"	// let the comparison expression support wildcard symbols.",
"",
""
 ]
	,
    "Output 01:": "automatic"
},

"Expressions (func. params)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expressions [func params]" ],
"Description 01:Introduction" : [
"",
"	A expression is a a value, a fuction call or a calculation which returns a value.",
"	The individual functions may impose additional requirements, for exmplae that the expression must return boolean",
"	values <b>true</b> or <b>false</b>.",
"",
"	<br><br>",
"",
"	The __while(__) loop function is a good example where the expression inside is calculated several times while the",
"	function is executed.  In addition, various functions containing <b>... selected rows ...</b> in their names make",
"	use expressions as code pieces.",
"",
"	<br><br>",
"",
"	<u>Attention</u>: Parentheses are required when the expression coontains a comparison operator using = or &lt;&gt.  The reason is that",
"	these two comparison operators may expect more than one value separated with commas and they would, if parenthese are not used,",
"	hijack the remaining function parameters as additional values to compare.",
"	No extra parentheses are required when the expression is in the last function parameter or is the only one function parameter.<br>",
"	No extra parentheses are required if the expression begins with following operators: &lt;, &lt;=, &gt;, &lt;=, ==, and !=.<br>",
"	No extra parentheses are required if the expression is provided in a string value.",
""
 ]
	,
"Examples 01:" : [
"	table initialize( primes, ",
"	  { Number, 2, 3, 5, 7, 10, 11, 13, 17, 23, 31, 37, A, a, Hello } );",
"",
"	table process selected rows( primes, ([Number]=11,37),   echo( [Number],\": \", \"is 11 or 37\" ) );",
"	table process selected rows( primes,  [Number]==13,      echo( [Number],\": \", \"thirteen\" ) );",
"	table process selected rows( primes, ([Number]='H*'),    echo( [Number],\": \", \"Begins with H\" ) );",
"	table process selected rows( primes, ([Number]=3..5,10), echo( [Number],\": \", \"is one of 3..5,10\" ) );",
"",
"	echo; // Do the same with expression in strings.  No parentheses needed-",
"",
"	c[] = '[Number] = 3..5,10'; //",
"	table process selected rows( primes, :c[], echo( [Number],\": \", \"is one of 3..5,10\" ) );",
"",
"	c[] = \"[Number] = 'H*'\";",
"	table process selected rows( primes, :c[], echo( [Number],\": \", \"Begins with H\" ) );"
 ]
	,
    "Output 01:": "automatic"
},



"Variables (func. params)":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variables [func params]" ],
"Description 01:Introduction" : [
"",
"	Variable are expressions which must refer directly to a variable.  Any other forms of expressions such as constants, calculations,",
"	function calls, table references, etc, are forbidden and assert exceptions.  However, variable members (in __structures__ and __arrays_",
"	are allowed).",
"",
"	__dim(__), __structure(__), __array(__) and __protect(__) are common functions which utilize this variant of code pieces.",
""
 ]
	,
"Examples 01:" : [
"	var 1[] = my array;",
"	var 2[] = 'my array[]';",
"",
"	   array(  var 0[],   {hog, bat, pig} );",
"	// array(  var 1[][], {dog, cat, rat} );   // This one is wrong",
"	   array( :var 2[],   {dog, cat, rat} );   // This one is OK",
"	",
"	echo( var 0[1] ); // bat",
"	echo( my array[1] ); // cat"
 ]
	,
    "Output 01:": "automatic"
  },

  "Statements (func. params)":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Statements [func params]" ],
"Description 01:Introduction" : [
"",
"	Statements may consist of one single statement, multiple statements separated with semicolons, and blocks.  Blocks are one or more",
"	statements encapsulated with { ... } braces.",
"",
"	<br><br>",
"",
"	The __for(__) and __table process(__) are common functions making use of statements.<br>",
"",
"	<u>Attention: </u>Don't confuse with C/C++: The three parameters inside the for-function must be separated with commas, not semicolons.  And use semicolons instead of commas to separate statements.<br>"
 ]
	,	
"Examples 01:" : [
"	// Demonstrates direct use of code and code in string using colon",
"",
"	next[] = \"a[]++; print( Next )\";",
"	for ( a[] = 1; print( Start ), a[] < 5, :next[] )",
"	{",
"	    echo( \" \", a[] );",
"	}"
 ]
	,
    "Output 01:": "automatic"
},


"Expressions to Select Rows" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expression to select rows", "Expressions to select rows" ],
"Description 01:Introduction" : [
"",
"	<i>Expressions to select rows</i> are a variant of code pieces containing expressions, but provide additional flexibility.  These expressions",
"	are typically used in functions with names containing <b>... selected rows ... </b> where expressions are applied to chosses specifc rows to",
"	include in the data processing.",
"",
"	<br><br>",
"	Like expressions specified as code pieces, these expressions can be coded directly or provided as strings wiht preceding colon (:) symbols.",
"",
"	<br><br>",
"	The expressions may return values of following types:",
"	=== 200, 800, noheader, noframe bold_column_1",
"boolean		| If it is an expression returning boolean values, then this expression will be calculated for every row, starting with row 1 (excluding the header row).   			  Typically, processing will be done on the corresponding rows if the outcome is <b>true</b>.",
"	numeral		| If the expression returns a numeral, then one single row number is meant.  __Negative indexing__ is allowed, e.g. -1 refers to the last row.",
"parameter set	| If the expression returns a parameter set, the the row numbers inside the parameter sets will be used.  Negative indexing is allowed.  The parameter set must contain numerals (row numbers) or may be an empty set if no rows shall be selected.  __Negative indexing__ is allowed, i.e. -1 refers to the last row. <br> 			  <u>Note</u>: Even if row numbers are specified in different orders or multiple times, the table will be processed from top to bottom, and every matching row will processed only once.",
"	===",
""
 ]
	,
"Examples 01:" : [
"	table initialize ( table,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table process selected rows( ",
"		table, ([Animal]=Tick,Bird), ",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );",
"",
"	echo;",
"	table process selected rows( ",
"		table, -1, // -1 -> Row 5 (Negative indexing)",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );",
"",
"	echo;",
"	table process selected rows( ",
"		table, {1,3,-2},  // -2 -> Row 4 (Negative indexing)",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );"
 ]
	,
    "Output 01:": "automatic"

},


"Expressions to Select Columns" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expressions to select columns" ],
"Description 01:Introduction" : [
"",
"	<i>Expressions to select rows</i> are a variant of code pieces containing expressions, but provide additional flexibility.  These expressions",
"	are typically used in functions with names containing <b>... selected columns ... </b> where expressions are applied to chosses specifc columns to",
"	include in the data processing.",
"",
"",
"	<br><br>",
"	Like expressions specified as code pieces, these expressions can be coded directly or provided as strings wiht preceding colon (:) symbols.",
"",
"	<br><br>",
"	The expressions may return values of following types:",
"	=== 200, 800, noheader, noframe bold_column_1",
"boolean		| If it is an expression returning boolean values, then this expression will be calculated for every column, starting from the left with column 0.   			  Typically, processing will be done on the corresponding columns if the outcome is <b>true</b>.",
"	string		| if the expression returns a string, then a header name is assumed.  Only existing header names will be accepted.",
"	numeral		| If the expression returns a numeral, then one single column number is meant.  __Negative indexing__ is allowed, e.g. -1 refers to the last column with respect to the header row.",
"parameter set	| If the expression returns a parameter set, the the column  numbers inside the parameter sets will be used.  Negative indexing is allowed as described above.  			  The parameter set may also contain existing header names.  No columns will be processed if an empty set is provided.",
"	===",
"",
"	<br>",
"	<u>Note</u>: Execution of selected columns will always be from left to right.  Every column will be executed at most once, even if specified multiple times.",
"	Example: <b>{5,2,1,2,4}</b> will execute columns 1, 2, 4 and finally 5 in this order only once.",
""
 ]
	,
"Examples 01:" : [
"	include ( Support Library );",
"	table initialize ( animals,",
"	{ { Animal,    Snake, Bird, Dog, Fly, Lobster, Decapod, Woodlice, Centipede },",
"	  { Leg count, 0,     2,    4,   6,   8,       10,      14,       100       },",
"	    Result 1,",
"	    Result 2,",
"	    Result 3 } );",
"",
"	counter[] = 0; // Process columns in specified order. (9..8..5 is from right to left)",
"	table process selected columns  ( animals, 2, {1..3, 10, 5..7}, [.] = ++counter[], [.] = '-' );",
"",
"	counter[] = 0; // Process columns in specified order",
"	table process selected columns  ( animals, 3, {Decapod, Bird, Fly, Dog, Dog, Dog}, [.] = ++counter[], [.] = '-' );",
"",
"	counter[] = 0; // From left to right: All animals beginning with A..D, excl. 1st column",
"	table process selected columns  ( animals, 4, col()>0 & [.,0] < 'E', [.] = ++counter[], [.] = '-' ); ",
"",
"	table list( animals );"
 ]
	,
    "Output 01:": "automatic"

},


"Indirect Parameter Passing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Indirect parameter passing" ],
"Description 01:Introduction" : [
"",
"	Some functions which only use input parameters support <i>indirect parameter passing</i> where instead of providing",
"	the function parameters directly, the function parameters are put into a __parameter set__ and then pass as one",
"	single function parameter instead.",
"",
"	<br><br>",
"	In the function descriptions, the support for indirect parameter passing is described under the item <i>Restrictions</i>",
"	where you find a statement where indirect parameter passing is either enabled or disabled. ",
"",
"	<br><br>",
"	In general indirect parameter passing is not enabled whenever the functions include output parameters, ",
"	input/output parameters, references and/or code pieces.  Indirect parameter passing is also not allowed for",
"	__control flow functions__ and __user-defined functions__.",
""
 ]
	,
"Examples 01:" : [
"	table create( table1, table 2 ); // The direct way",
"",
"	indirect[]= { table 1, table 2 }; // The indirect way",
"	table create( indirect[] );",
"	echo(\"Created two tables in both cases\" );",
""
 ]
	,
    "Output 01:": "automatic"

},



"Introduction to User-Defined Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Introduction to User-Defined Functions" ],
"Description 01:Introduction" : [
"",
"	B4P provides means to define your own procedures and functions, assign plausible names for them and call them up like",
"	standard B4P functions.  Following __control flow functions__ are available to define your own functions:",
"",
"	* __define procedure(__): The user-defined function can only be called as a procedure in statements.  Even if provided, return values are discarded.",
"	* __define function(__): The user-defined function can only be called inside expressions where the returned value is used.",
"	* __define procedure and function(__): The user-defined function can be called as both procedure in statements and functions inside expressions.",
"",
"	All three functions expect a block (inside braces) containing the code.  Variables created inside are local variables.  Parameters are available",
"	as pure input parameters, output parameters, bi-directional I/O parameters, and references to variables so the whole sub-structure containing thee",
"	the members can be accessed.  Return values can be provided with the __return(__) function call.",
"",
"	<br><br>",
"	Additional procedure and function names can be defined on the same implementation.  The local variable <b>function name[]</b> is visible inside the code block and",
"	can be used to provide distinguished functionality for every additional procedure and function name.  For more info, see",
"",
"	* __define additional procedure(__): Assign an additional procedure name to an existing user-specific procedure or function.",
"	* __define additional function(__): Assign an additional function name to an existing user-specific procedure or function.",
"	* __define additional procedure and function(__): Assign an additional name, which can be used as as procedure and function calls, to an existing user-specific procedure or function.",
"",
"	Fore more details, see the section on __user-defined functions__." ],
"Examples 01:" : [
"	define function( hypotenuse, { { x, numeral }, { y, numeral } } )",
"	{",
"	    return( sqrt( x[]*x[] + y[]*y[] ) );",
"	}",
"",
"	define procedure( say hello ) { echo(\"Hello !\"); }",
"",
"	say hello;",
"	echo( hypotenuse(3,4) );  //  5",
"	echo( hypotenuse(5,12) ); // 13",
"	echo( hypotenuse(8,15) ); // 17",
"	echo( hypotenuse(1,1) );  //  1.41...	"
 ]
	,
    "Output 01:": "automatic"

}

,

  "Table of Contents" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":            "Table of Contents",
"Description 01:Table of Contents" : [
"",
"	See the navigator bar for full table of contents.",
""
 ]
	
  }



,
"Index" :
{
"Documentation": "General Description",
"Feature Names": [ "Index" ],
"Description 01:1" : [
"__10p__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>" ],
"Description 02:A" : [
"__abbreviate name__<br>",
"Function Library Guide: 6.3.4 abbreviate name<br><br>",
"__abort__<br>",
"Function Library Guide: 2.5.6 abort<br><br>",
"__abs__, __absolute value__<br>",
"Function Library Guide: 5.1.4 abs - Absolute Value<br><br>",
"__Access resident attributes__<br>",
"Function Library Guide: 10.5.1 attribute ...<br><br>",
"__Access table information__<br>",
"Function Library Guide: 9.4.1 list tables<br><br>",
"__Accessing table information__<br>",
"Function Library Guide: 9.4 Accessing Table Information<br><br>",
"__accessing tables__<br>",
"Language Guide: 3.5 Accessing Tables<br><br>",
"__acos__, __acos deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__acosh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__ad-hoc operations__, __ad-hoc operators__<br>",
"Language Guide: 4.8 Ad-hoc Operators<br><br>",
"__ad-hoc operators overview__<br>",
"Language Guide: 4.8.2 Ad-hoc Operators Overview<br><br>",
"__add__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__add color__<br>",
"Function Library Guide: 9.9.1.2 add color<br><br>",
"__add rows in case of multiple matches__<br>",
"Function Library Guide: 9.8.2.15 table expand ...<br><br>",
"__ADD Transactions between tables__<br>",
"Language Guide: 5.4.4 &#43; Transactions between Tables<br><br>",
"__ADD Transactions between variables__<br>",
"Language Guide: 5.4.1 &#43; Transactions between Variables<br><br>",
"__ADD Transactions from tables to variables__<br>",
"Language Guide: 5.4.2 &#43; Transactions from Tables to Variables<br><br>",
"__ADD Transactions from variables to tables__<br>",
"Language Guide: 5.4.3 &#43; Transactions from Variables to Tables<br><br>",
"__addition__<br>",
"Language Guide: 4.3.3.1 Additions<br><br>",
"__additional function names__<br>",
"Function Library Guide: 2.3.2 define additional procedure / function<br><br>",
"__Additional info on fast processing of rows__<br>",
"Function Library Guide: 9.7.4.5.1 Addt'l Info on fast rows processing<br><br>",
"__advanced directory listing__, __advanced directory listing recursive__<br>",
"Function Library Guide: 11.2.2 advanced directory listing ...<br><br>",
"__Align and Process__<br>",
"User Guide: 5.6 F - Analyze<br><br>",
"__alternative execution of code blocks__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__and__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__AND Transactions between tables__<br>",
"Language Guide: 5.2.4 &amp; Transactions between Tables<br><br>",
"__AND Transactions between variables__<br>",
"Language Guide: 5.2.1 &amp; Transactions between Variables<br><br>",
"__AND Transactions from tables to variables__<br>",
"Language Guide: 5.2.2 &amp; Transactions from Tables to Variables<br><br>",
"__AND Transactions from variables to tables__<br>",
"Language Guide: 5.2.3 &amp; Transactions from Variables to Tables<br><br>",
"__Apply style on tables__<br>",
"Function Library Guide: 9.9.2.1 table style table<br><br>",
"__Arithmetic and Boolean Series Functions__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__arithmetic operator__, __arithmetic operators__<br>",
"Language Guide: 4.3.3 Arithmetic Operators<br><br>",
"__Arrange multiple tables side-by-side__<br>",
"Function Library Guide: 9.8.3.8 table arrange ...<br><br>",
"__array__<br>",
"Function Library Guide: 10.2.3 array, array protect<br><br>",
"__Array functions__<br>",
"Function Library Guide: 10.1.10 insert members (protect)<br><br>",
"__Array functions__<br>",
"Function Library Guide: 10.2.1 dim / redim<br><br>",
"__array member__, __array members__<br>",
"Language Guide: 2.5.2 Arrays<br><br>",
"__array protect__<br>",
"Function Library Guide: 10.2.3 array, array protect<br><br>",
"__array to array structure__, __array to structure__<br>",
"Function Library Guide: 10.2.9 array to structure ...<br><br>",
"__arrays__<br>",
"Language Guide: 2.5.2 Arrays<br><br>",
"__Arrays and Structures__<br>",
"Function Library Guide: 10.2 Arrays and Structures<br><br>",
"__asin__, __asin deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__asinh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__assign__, __assign [function]__<br>",
"Function Library Guide: 2.7.6 assign<br><br>",
"__Assignment__<br>",
"Language Guide: 4.1 Assignments<br><br>",
"__Assignment operator__, __Assignment operators__<br>",
"Language Guide: 4.6 Assignment operators<br><br>",
"__Assignment symbol__, __assignments__<br>",
"Language Guide: 4.1 Assignments<br><br>",
"__Assignments and expressions__<br>",
"Language Guide: 4 Assignments and Expressions<br><br>",
"__atan__, __atan deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__atanh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__attribute delete__, __attribute listing__, __attribute modify__, __attribute read__, __attribute remove__, __attribute write__<br>",
"Function Library Guide: 10.5.1 attribute ...<br><br>",
"__average__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average if__, __average if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__average ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average ignore blanks if__, __average ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__average ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average ignore zero if__, __average ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>" ],
"Description 03:B" : [
"__B4P Analytics Engine__<br>",
"User Guide: 1 B4P Analytics Engine - User Guide<br><br>",
"__B4P Language__, __B4P Program__<br>",
"Language Guide: 1 The Language<br><br>",
"__background color__<br>",
"Function Library Guide: 3.2.4 text / background color<br><br>",
"__base variable__, __base variables__<br>",
"Language Guide: 2.5 Variable Forms and Trees<br><br>",
"__Basic Commands__<br>",
"User Guide: 4.4 Basic Commands<br><br>",
"__Basic data types__<br>",
"Language Guide: 1.2 Basic Data Types<br><br>",
"__basic directory and file functions__<br>",
"Function Library Guide: 11.1 Basic Directory and File Functions<br><br>",
"__Basic language elements__<br>",
"Language Guide: 1.1 Basics<br><br>",
"__basic math functions__<br>",
"Function Library Guide: 5.1 Basic Math Functions<br><br>",
"__basic statistics functions__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__basic variables functions__<br>",
"Function Library Guide: 10.1 Basic Variables Functions<br><br>",
"__Benefits and Features__<br>",
"Master Document: 1 Benefits and Features<br><br>",
"__best type__<br>",
"Function Library Guide: 4.10 best type<br><br>",
"__binary operators__<br>",
"Language Guide: 4.3.2 Binary Operators<br><br>",
"__blinking__<br>",
"Function Library Guide: 3.2.6 blinking<br><br>",
"__Blocks__<br>",
"Language Guide: 1.3 Blocks<br><br>",
"__boldface__<br>",
"Function Library Guide: 3.2.7 boldface<br><br>",
"__bool__, __boolean conversion function__<br>",
"Function Library Guide: 4.8 bool<br><br>",
"__boolean to string conversion and formatting__, __Boolean to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.6 Boolean to String Formatting<br><br>",
"__Branches__<br>",
"Function Library Guide: 2.1 Branches<br><br>",
"__break case__, __break loop__<br>",
"Function Library Guide: 2.1.6 break, continue<br><br>",
"__business functions__<br>",
"Function Library Guide: 5.7 Finance and Business Functions<br><br>" ],
"Description 04:C" : [
"__cagr__<br>",
"Function Library Guide: 5.7.1 cagr - Compond Annual Growth Rate<br><br>",
"__calc__, __Calculate an expression provided__<br>",
"Function Library Guide: 2.7.4 calc<br><br>",
"__Calculations__<br>",
"Language Guide: 4.2.3 Calculations<br><br>",
"__call__<br>",
"Function Library Guide: 2.7.1 call<br><br>",
"__Call function for every parameter set element separately__<br>",
"Function Library Guide: 2.7.2 deep, deepr<br><br>",
"__Call function or procedure by name provided__<br>",
"Function Library Guide: 2.7.1 call<br><br>",
"__cascading ad-hoc operators__<br>",
"Language Guide: 4.8.1 Cascading ad-hoc Operators<br><br>",
"__case__<br>",
"Function Library Guide: 2.1.5 case<br><br>",
"__case sensitivity__<br>",
"Language Guide: 1.1.5.3 Case Sensitivity<br><br>",
"__catch__, __catch if__<br>",
"Function Library Guide: 2.5.8 catch, catch if<br><br>",
"__Change tabular contents to serialized contents__<br>",
"Function Library Guide: 9.7.5.2 table serialize ...<br><br>",
"__Change the prompt used in interactive mode__<br>",
"Function Library Guide: 3.3.1 prompt<br><br>",
"__Changing between structures and arrays__<br>",
"Function Library Guide: 10.2.8 structure to array ...<br><br>",
"__character coding__<br>",
"Function Library Guide: 6.2 Character Encoding and Decoding<br><br>",
"__character decoding__<br>",
"Function Library Guide: 6.2.2 code<br><br>",
"__character encoding__<br>",
"Function Library Guide: 6.2.1 chr<br><br>",
"__Character Entities__, __Character entity__<br>",
"Language Guide: 1.1.5.4 Character Entities<br><br>",
"__Characters__<br>",
"Language Guide: 1.1.5 Characters<br><br>",
"__check__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__Check if value contains date or time__<br>",
"Function Library Guide: 7.1.1 date inside, time inside<br><br>",
"__Check if variable is existing__<br>",
"Function Library Guide: 10.1.1 existing (here and valid)<br><br>",
"__Check table rows__<br>",
"Function Library Guide: 9.7.3.8 table check row<br><br>",
"__Checking and processing headers__<br>",
"Function Library Guide: 9.7.1.1 table check header<br><br>",
"__Checking headers__<br>",
"Function Library Guide: 9.7.1 Checking and Processing Headers<br><br>",
"__checking numbers__<br>",
"Function Library Guide: 5.1.1 is numeric / integer - Functions<br><br>",
"__choose recent file__<br>",
"Function Library Guide: 11.2.6 choose recent file<br><br>",
"__chr__<br>",
"Function Library Guide: 6.2.1 chr<br><br>",
"__clean__<br>",
"Function Library Guide: 6.1.13 clean<br><br>",
"__Clean Data__<br>",
"User Guide: 5.2 B - Clean<br><br>",
"__clean if num__, __clean num__, __clean numerals__<br>",
"Function Library Guide: 4.3 clean num, clean if num<br><br>",
"__clean up exotic spaces and line breaks in strings__<br>",
"Function Library Guide: 6.1.13 clean<br><br>",
"__Cleaning up and miscellaneous table functions__<br>",
"Function Library Guide: 9.7.4.13 table format numbers<br><br>",
"__clear__, __clear parts of screen__<br>",
"Function Library Guide: 3.2.2 clear<br><br>",
"__clear the screen__<br>",
"Function Library Guide: 3.2.1 cls<br><br>",
"__Clearing and deleting tables__<br>",
"Function Library Guide: 9.3.4 Deleting Tables<br><br>",
"__Clearing and deleting tables__<br>",
"Function Library Guide: 9.3.4.1 table clear ...<br><br>",
"__clipboard__<br>",
"Function Library Guide: 3.1.9 clipboard<br><br>",
"__cls__<br>",
"Function Library Guide: 3.2.1 cls<br><br>",
"__code__<br>",
"Function Library Guide: 6.2.2 code<br><br>",
"__Code Execution Functions__<br>",
"Function Library Guide: 2.7 Code Execution Functions<br><br>",
"__Code piece__, __Code pieces__<br>",
"Language Guide: 6.4.3 Code Pieces (Func. Param. Type)<br><br>",
"__col__<br>",
"Function Library Guide: 9.4.7 col<br><br>",
"__Color functions__<br>",
"Function Library Guide: 9.9.1.2 add color<br><br>",
"__Color Palettes__<br>",
"Function Library Guide: 9.9.1.1 Color Palettes<br><br>",
"__Color Specification__<br>",
"Function Library Guide: 9.9.1 Defining User Specific Colors<br><br>",
"__Combining multiple tables__<br>",
"Function Library Guide: 9.8.3 Combining Multiple Tables<br><br>",
"__Command line arguments__<br>",
"User Guide: 3.5.1 Command Line Arguments<br><br>",
"__Command Line Arguments and Options__<br>",
"User Guide: 3.5 Command Line Arguments and Options<br><br>",
"__Command line options__, __Command line switches__<br>",
"User Guide: 3.5.2 Command Line Switches<br><br>",
"__comments__<br>",
"Language Guide: 1.1.4 Comments<br><br>",
"__compare__<br>",
"Function Library Guide: 2.7.5 compare<br><br>",
"__compare pick__, __compare select__<br>",
"Function Library Guide: 2.6.6 compare select / pick<br><br>",
"__Compare two tables__<br>",
"Function Library Guide: 9.8.1.1 table compare ...<br><br>",
"__compare [function]__<br>",
"Function Library Guide: 2.7.5 compare<br><br>",
"__Comparing and validating tables__<br>",
"Function Library Guide: 9.8.1 Comparing and Validating Tables<br><br>",
"__Comparison and selection functions__<br>",
"Function Library Guide: 2.6 Comparison and Selection Functions<br><br>",
"__comparison expression__<br>",
"Language Guide: 4.3.4 Comparison Operators<br><br>",
"__Comparison Expression [func. params]__, __Comparison Expressions__<br>",
"Language Guide: 6.4.3.1 Comparison Expressions (func. params)<br><br>",
"__comparison operators__<br>",
"Language Guide: 4.3.4 Comparison Operators<br><br>",
"__comparison options__<br>",
"Language Guide: 4.3.5 Comparison Options<br><br>",
"__comparisons__<br>",
"Language Guide: 4.3.4 Comparison Operators<br><br>",
"__compose__, __compose line__<br>",
"Function Library Guide: 3.1.4 compose ...<br><br>",
"__compound annual growth rate__<br>",
"Function Library Guide: 5.7.1 cagr - Compond Annual Growth Rate<br><br>",
"__conditional branches__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__conditional combination functions__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__console__<br>",
"Function Library Guide: 3.2.5 console<br><br>",
"__Console I/O Functions__<br>",
"Function Library Guide: 3 Console I/O Functions<br><br>",
"__Console I/O with tables__<br>",
"Function Library Guide: 9.2 Console I/O with Tables<br><br>",
"__Console input__<br>",
"Function Library Guide: 3.1.6 input to complete<br><br>",
"__Console Input/Output__<br>",
"Language Guide: 1.1.5.5 Console Input / Output<br><br>",
"__Console out text attributes__<br>",
"Function Library Guide: 3.2.6 blinking<br><br>",
"__Console special effects__<br>",
"Function Library Guide: 3.2 Console Special Effects<br><br>",
"__Consolidate table rows__<br>",
"Function Library Guide: 9.7.5.5 table consolidate ...<br><br>",
"__consolidation actions__<br>",
"Function Library Guide: 14.2 Consolidation Actions<br><br>",
"__continue case__, __continue loop__, __continue with next case__<br>",
"Function Library Guide: 2.1.6 break, continue<br><br>",
"__Control flow functions__<br>",
"Function Library Guide: 2 Control Flow Functions<br><br>",
"__Control Flow Functions for Tables__<br>",
"Function Library Guide: 9.6 Control Flow Functions for Tables<br><br>",
"__Control flow statements__<br>",
"Function Library Guide: 2 Control Flow Functions<br><br>",
"__copy__<br>",
"Function Library Guide: 10.1.2 copy<br><br>",
"__Copy and split tables__<br>",
"Function Library Guide: 9.7.6.2 table copy table<br><br>",
"__Copy values to multiple variables or table entries__<br>",
"Function Library Guide: 10.1.2 copy<br><br>",
"__Copying and renaming and spitting tables__<br>",
"Function Library Guide: 9.7.6 Copying, Renaming and Splitting Tables<br><br>",
"__copying references__<br>",
"Language Guide: 2.6.4 Copying References<br><br>",
"__Copying table columns__<br>",
"Function Library Guide: 9.7.2.2 table copy columns ...<br><br>",
"__correlation__<br>",
"Function Library Guide: 5.5.3 covariance, correlation<br><br>",
"__cos__, __cos deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__cosh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__count__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count elements__, __count elements ignore blanks__, __count elements ignore both__, __count elements ignore case__, __Count elements in parameter sets__<br>",
"Function Library Guide: 8.1.8 count elements ...<br><br>",
"__count files__, __count files recursive__<br>",
"Function Library Guide: 11.2.7 count files ...<br><br>",
"__count functions__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count if__, __count if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore blanks__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore blanks if__, __count ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore both__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore both if__, __count ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore zero__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore zero if__, __count ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__covariance__, __covariance and correlation__<br>",
"Function Library Guide: 5.5.3 covariance, correlation<br><br>",
"__Create / read / write / delete tables__<br>",
"Function Library Guide: 9.3 Creating, Writing, Reading, Deleting<br><br>",
"__Create and initialize tables__<br>",
"Function Library Guide: 9.3.1.1 table create ...<br><br>",
"__Create hash signatures for values provided__<br>",
"Function Library Guide: 4.13 hash signature<br><br>",
"__Create new variables as global variables__<br>",
"Function Library Guide: 10.1.11 global<br><br>",
"__Creating tables__<br>",
"Language Guide: 3.4 Creating Tables<br><br>",
"__Creating tables and building up tables__<br>",
"Function Library Guide: 9.3.1 Creating and Building up Tables<br><br>",
"__Creating Variables__<br>",
"Language Guide: 2.2 Creating Variables<br><br>",
"__Cross-functional info__<br>",
"Function Library Guide: 14 Cross-Functional Info<br><br>",
"__CSV__<br>",
"Language Guide: 1.5.4.4 CSV File Format<br><br>",
"__cursor__, __cursor position__<br>",
"Function Library Guide: 3.2.3 cursor<br><br>",
"__custom initialization program__<br>",
"User Guide: 3.5.4 User Initialization Program<br><br>" ],
"Description 05:D" : [
"__darken color__<br>",
"Function Library Guide: 9.9.1.4 darken color<br><br>",
"__darken colors__<br>",
"Function Library Guide: 9.9.1.8 darken colors<br><br>",
"__Data subtype quoted strings__<br>",
"Language Guide: 1.2.1.2 Quoted Strings<br><br>",
"__Data subtype softquoted strings__<br>",
"Language Guide: 1.2.1.1 Softquoted Strings<br><br>",
"__data type strings__<br>",
"Language Guide: 1.2.1 Strings<br><br>",
"__data types booleans__<br>",
"Language Guide: 1.2.4 Booleans<br><br>",
"__data types dates__<br>",
"Language Guide: 1.2.3 Dates<br><br>",
"__data types numerals__<br>",
"Language Guide: 1.2.2 Numerals<br><br>",
"__data types parameter sets__<br>",
"Language Guide: 1.2.6 Parameter sets<br><br>",
"__data types parameter sets indexing__<br>",
"Language Guide: 1.2.6.1 Indexing Parameter Sets<br><br>",
"__data types parameter sets value ranges__<br>",
"Language Guide: 1.2.6.3 Parameter sets - Value Ranges<br><br>",
"__data types parameter sets value repetitions__<br>",
"Language Guide: 1.2.6.4 Parameter sets - Value Repetitions<br><br>",
"__data types voids__<br>",
"Language Guide: 1.2.5 Voids<br><br>",
"__date__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__Date and Time Detection Rules__<br>",
"Function Library Guide: 4.7 Date and Time Detection Rules<br><br>",
"__date and time functions__<br>",
"Function Library Guide: 7 Date and Time Functions<br><br>",
"__date conversion functions__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__date functions__<br>",
"Function Library Guide: 7.1 Date Functions<br><br>",
"__Date info functions__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__date info functions__<br>",
"Function Library Guide: 7.1.4 serial date<br><br>",
"__date inside__<br>",
"Function Library Guide: 7.1.1 date inside, time inside<br><br>",
"__date time__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__date to string conversion and formatting__, __Date to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.4 Date to String Formatting<br><br>",
"__day__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__day of year__<br>",
"Function Library Guide: 7.1.3 day of year<br><br>",
"__De-installing B4P__<br>",
"User Guide: 2.5 De-installing B4P<br><br>",
"__decode entities__<br>",
"Function Library Guide: 6.2.3 decode entities<br><br>",
"__deep__<br>",
"Function Library Guide: 2.7.2 deep, deepr<br><br>",
"__deep assignment operators__<br>",
"Language Guide: 4.7 Deep Assignment Operators<br><br>",
"__deep binary operators__<br>",
"Language Guide: 4.5.2 Deep Binary Operators<br><br>",
"__deep operators__<br>",
"Language Guide: 4.5 Deep Operators<br><br>",
"__deep unary operators__<br>",
"Language Guide: 4.5.1 Deep Unary Operators<br><br>",
"__deepr__<br>",
"Function Library Guide: 2.7.2 deep, deepr<br><br>",
"__default members__<br>",
"Language Guide: 2.5.3 Structures<br><br>",
"__define additional function__, __define additional procedure__, __define additional procedure and function__<br>",
"Function Library Guide: 2.3.2 define additional procedure / function<br><br>",
"__define function__<br>",
"Function Library Guide: 2.3.1 define procedure / function<br><br>",
"__Define local variables when writing__<br>",
"Function Library Guide: 10.1.12 local<br><br>",
"__define procedure__, __define procedure and function__, __defining user procedures and user functions__<br>",
"Function Library Guide: 2.3.1 define procedure / function<br><br>",
"__Defining User Specific Colors__<br>",
"Function Library Guide: 9.9.1 Defining User Specific Colors<br><br>",
"__delete__<br>",
"Function Library Guide: 10.1.8 delete<br><br>",
"__Delete array and structure members__, __delete members__<br>",
"Function Library Guide: 10.1.9 delete members<br><br>",
"__Delete table contents__<br>",
"Function Library Guide: 9.7.4.11 table delete cells selected rows<br><br>",
"__delete user function__<br>",
"Function Library Guide: 2.3.6 delete user function<br><br>",
"__Delete variable members__<br>",
"Function Library Guide: 10.1.9 delete members<br><br>",
"__Delete variables__<br>",
"Function Library Guide: 10.1.8 delete<br><br>",
"__Deleting table rows__<br>",
"Function Library Guide: 9.7.3.3 table delete rows (if needed)<br><br>",
"__depth__<br>",
"Function Library Guide: 10.2.7 depth<br><br>",
"__Derive disjoint union (exclusive or) from both tables__<br>",
"Function Library Guide: 9.8.3.5 table exclude ...<br><br>",
"__describe__<br>",
"Function Library Guide: 6.3.3 describe<br><br>",
"__Detects dates correctly in strings__<br>",
"Function Library Guide: 4.7 Date and Time Detection Rules<br><br>",
"__deviation__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation if__, __deviation if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__deviation ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation ignore blanks if__, __deviation ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__deviation ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation ignore zero if__, __deviation ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__diagonal__<br>",
"Function Library Guide: 5.4.8 diagonal<br><br>",
"__dim__<br>",
"Function Library Guide: 10.2.1 dim / redim<br><br>",
"__dim protect__<br>",
"Function Library Guide: 10.2.2 dim / redim protect<br><br>",
"__dir__<br>",
"Function Library Guide: 11.2.4 dir<br><br>",
"__Direct character input from console__<br>",
"Function Library Guide: 3.1.7 input quick ...<br><br>",
"__directories__<br>",
"Language Guide: 1.5.4 Directories and Files<br><br>",
"__directory and file system functions__<br>",
"Function Library Guide: 11 Directory and File System Functions<br><br>",
"__Directory and files__<br>",
"Language Guide: 1.5.4 Directories and Files<br><br>",
"__directory create__, __directory create ... Functions__, __directory create all__, __directory create silently__<br>",
"Function Library Guide: 11.3.1 directory create ...<br><br>",
"__directory create temp__<br>",
"Function Library Guide: 11.3.2 directory create temp<br><br>",
"__directory delete__, __directory delete ... Functions__, __directory delete all__<br>",
"Function Library Guide: 11.3.5 directory delete ...<br><br>",
"__directory delete multiple__, __directory delete multiple all__, __directory delete multiple/recursive ... Functions__, __directory delete recursive__, __directory delete recursive all__, __directory delete recursive if empty__<br>",
"Function Library Guide: 11.3.6 directory delete multiple/recursive ...<br><br>",
"__directory delete silently__<br>",
"Function Library Guide: 11.3.5 directory delete ...<br><br>",
"__directory existing__<br>",
"Function Library Guide: 11.1.1 directory existing, file existing<br><br>",
"__directory listing__, __directory listing recursive__<br>",
"Function Library Guide: 11.2.1 directory listing ...<br><br>",
"__directory rename__, __directory rename ... Functions__, __directory rename all__, __directory rename silently__<br>",
"Function Library Guide: 11.3.8 directory rename ...<br><br>",
"__directory size__<br>",
"Function Library Guide: 11.1.5 directory size<br><br>",
"__discount__<br>",
"Function Library Guide: 5.7.4 discount - Discount Values<br><br>",
"__disk space__, __disk space free__<br>",
"Function Library Guide: 11.1.7 disk space ...<br><br>",
"__distribute__, __distribute advance__<br>",
"Function Library Guide: 5.7.5 distribute - Value Distribution over Timeline<br><br>",
"__distribute amount__<br>",
"Function Library Guide: 5.1.9 distribute amount<br><br>",
"__Distribute quantities over timeline__<br>",
"Function Library Guide: 9.7.5.6 table distribute ...<br><br>",
"__distribution over timeline__<br>",
"Function Library Guide: 5.7.5 distribute - Value Distribution over Timeline<br><br>",
"__div__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__division__<br>",
"Language Guide: 4.3.3.4 Divisions<br><br>",
"__do__<br>",
"Function Library Guide: 2.2.1 do<br><br>",
"__Do nothing__<br>",
"Function Library Guide: 2.5.10 null - Function<br><br>",
"__do-loop__<br>",
"Function Library Guide: 2.2.1 do<br><br>",
"__docs__<br>",
"Function Library Guide: 13.2 help ...<br><br>",
"__docs__<br>",
"Function Library Guide: 13.3 docs<br><br>",
"__dump entities__<br>",
"Function Library Guide: 13.12 dump entities<br><br>",
"__dump functions__<br>",
"Function Library Guide: 13.11 dump functions<br><br>" ],
"Description 06:E" : [
"__e.g. for production planning__<br>",
"Function Library Guide: 9.7.5.6 table distribute ...<br><br>",
"__echo__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__Edit B4P Programs on Linux__<br>",
"User Guide: 3.2.1 Linux Edit B4P Programs<br><br>",
"__Edit B4P Programs on MacOS__<br>",
"User Guide: 3.3.1 MacOS Edit B4P Programs<br><br>",
"__Edit B4P Programs on Windows__<br>",
"User Guide: 3.1.1 Windows Edit B4P Programs<br><br>",
"__else__<br>",
"Function Library Guide: 2.1.2 else<br><br>",
"__encode entities__<br>",
"Function Library Guide: 6.2.4 encode entities<br><br>",
"__end__<br>",
"Function Library Guide: 2.5.5 end<br><br>",
"__Enrichment__<br>",
"User Guide: 5.5 E - Augment<br><br>",
"__entering interactive mode__<br>",
"User Guide: 4.2 Entering Interactive Mode<br><br>",
"__Entity__<br>",
"Language Guide: 1.1.5.4 Character Entities<br><br>",
"__Epsilon__<br>",
"Language Guide: 4.3.5 Comparison Options<br><br>",
"__equal to__<br>",
"Language Guide: 4.3.4.1 Equal to<br><br>",
"__escape__<br>",
"Language Guide: 1.1.1.4 Reserved Keywords<br><br>",
"__even__, __even numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__Example - Retrieve stock market data__<br>",
"User Guide: 6.3 Stock Markets - Program<br><br>",
"__Example - U.S. Presidents from Wikipedia__<br>",
"User Guide: 6.4 U.S. Presidents from Wikipedia<br><br>",
"__Example: Merge football clubs__<br>",
"User Guide: 6.2 Football Club Merger - Program<br><br>",
"__Example: Merging football clubs - interactive approach__<br>",
"User Guide: 6.1 Football Club Merger - Interactive<br><br>",
"__Examples__<br>",
"User Guide: 6 Examples<br><br>",
"__excel column__<br>",
"Function Library Guide: 4.14 excel column<br><br>",
"__excel coordinates__<br>",
"Function Library Guide: 4.15 excel coordinates<br><br>",
"__excel list sheets__<br>",
"Function Library Guide: 9.1.3 excel list sheets<br><br>",
"__Excel sheet functions__<br>",
"Function Library Guide: 4.14 excel column<br><br>",
"__excel validate sheet name__<br>",
"Function Library Guide: 4.16 excel validate sheet name<br><br>",
"__exception__<br>",
"Function Library Guide: 2.5.9 exception<br><br>",
"__Exception functions__<br>",
"Function Library Guide: 2.5 Exception Functions<br><br>",
"__exchange__, __Exchange two values__<br>",
"Function Library Guide: 10.1.6 exchange<br><br>",
"__exec__<br>",
"Function Library Guide: 2.7.3 exec<br><br>",
"__Execute B4P expressions interactively__<br>",
"User Guide: 4.7 Execute B4P Expressions Interactively<br><br>",
"__Execute B4P statements interactively__<br>",
"User Guide: 4.6 Execute B4P Statements Interactively<br><br>",
"__Execute B4P statements provided__<br>",
"Function Library Guide: 2.7.3 exec<br><br>",
"__executing system commands__<br>",
"Function Library Guide: 12.1 Executing System Commands<br><br>",
"__existing__, __existing and valid__, __existing here__, __existing here and valid__<br>",
"Function Library Guide: 10.1.1 existing (here and valid)<br><br>",
"__exit__<br>",
"Function Library Guide: 2.5.4 exit<br><br>",
"__exp__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>",
"__explain functions__<br>",
"Function Library Guide: 13.10 list / explain functions<br><br>",
"__Explore__<br>",
"Function Library Guide: 9.5.2.1 table explore<br><br>",
"__Explore and filter and extract sub-tables__<br>",
"Function Library Guide: 9.5.2 Explore, Filter, Extract Sub-Tables<br><br>",
"__exponential functions__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>",
"__exponential regression__<br>",
"Function Library Guide: 5.5.5 Linear and Exponential Regression<br><br>",
"__Expression to select rows__<br>",
"Language Guide: 6.4.4 Expressions to Select Rows<br><br>",
"__Expressions__<br>",
"Language Guide: 4.2 Expressions<br><br>",
"__Expressions to select columns__<br>",
"Language Guide: 6.4.5 Expressions to Select Columns<br><br>",
"__Expressions to select rows__<br>",
"Language Guide: 6.4.4 Expressions to Select Rows<br><br>",
"__Expressions [func params]__<br>",
"Language Guide: 6.4.3.2 Expressions (func. params)<br><br>",
"__Extracting substrings__<br>",
"Language Guide: 1.2.1.4 Slicing Strings<br><br>" ],
"Description 07:F" : [
"__file browser__<br>",
"Function Library Guide: 11.2.3 file browser<br><br>",
"__File comporession and decompression__<br>",
"Function Library Guide: 11.4.1 zip compress<br><br>",
"__file compression decompression__<br>",
"Function Library Guide: 11.4 File Compression and Decompression<br><br>",
"__file copy__, __file copy ... Functions__, __file copy all__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file copy multiple__, __file copy multiple all__, __file copy multiple overwrite__, __file copy multiple overwrite all__, __file copy multiple/recursive ... Functions__<br>",
"Function Library Guide: 11.3.10 file copy mulitple/recursive ...<br><br>",
"__file copy overwrite__, __file copy overwrite all__, __file copy overwrite silently__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file copy recursive__, __file copy recursive all__, __file copy recursive overwrite__, __file copy recursive overwrite all__<br>",
"Function Library Guide: 11.3.10 file copy mulitple/recursive ...<br><br>",
"__file copy silently__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file create link__, __file create link ... Functions__, __file create link all__, __file create link silently__<br>",
"Function Library Guide: 11.3.11 file create link ...<br><br>",
"__file delete__, __file delete ... Functions__, __file delete all__<br>",
"Function Library Guide: 11.3.3 file delete ...<br><br>",
"__file delete multiple__, __file delete multiple all__, __file delete multiple/recursive ... Functions__, __file delete recursive__, __file delete recursive all__<br>",
"Function Library Guide: 11.3.4 file delete multiple/recursive ...<br><br>",
"__file delete silently__<br>",
"Function Library Guide: 11.3.3 file delete ...<br><br>",
"__file download__, __file download ... Functions__, __file download all__, __file download overwrite__, __file download overwrite all__, __file download overwrite silently__, __file download silently__<br>",
"Function Library Guide: 11.3.12 file download ...<br><br>",
"__file existing__<br>",
"Function Library Guide: 11.1.1 directory existing, file existing<br><br>",
"__file name__, __file names__<br>",
"Language Guide: 1.5.4.1 Path and File Names<br><br>",
"__file rename__, __file rename ... Functions__, __file rename all__, __file rename silently__<br>",
"Function Library Guide: 11.3.7 file rename ...<br><br>",
"__file size__<br>",
"Function Library Guide: 11.1.6 file size<br><br>",
"__filter__, __filter 1__<br>",
"Function Library Guide: 8.1.10 filter ...<br><br>",
"__filter and extract tables__<br>",
"Function Library Guide: 9.5.2.1 table explore<br><br>",
"__filter n__, __filter start__, __filter start include__, __filter start n__, __filter start n include__, __filter stop__, __filter stop include__<br>",
"Function Library Guide: 8.1.10 filter ...<br><br>",
"__finance functions__<br>",
"Function Library Guide: 5.7 Finance and Business Functions<br><br>",
"__financial quarter__<br>",
"Function Library Guide: 7.1.7 fq - Fiscal Quarter<br><br>",
"__financial year__<br>",
"Function Library Guide: 7.1.8 fy - Fiscal Year<br><br>",
"__find__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore blanks__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore blanks__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore both__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore both__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore case__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore case__, __find [parameter set function]__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find [string function]__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__Finishing up formatting__<br>",
"Function Library Guide: 9.9.3 Finishing up formatting<br><br>",
"__fiscal quarter__<br>",
"Function Library Guide: 7.1.7 fq - Fiscal Quarter<br><br>",
"__fiscal year__<br>",
"Function Library Guide: 7.1.8 fy - Fiscal Year<br><br>",
"__flat__, __Flatten matrix__<br>",
"Function Library Guide: 5.4.7 flat<br><br>",
"__font color__<br>",
"Function Library Guide: 3.2.4 text / background color<br><br>",
"__for__<br>",
"Function Library Guide: 2.2.2 for<br><br>",
"__for all current table columns__<br>",
"Function Library Guide: 9.6.6 for all current table columns<br><br>",
"__for all current table selected columns__<br>",
"Function Library Guide: 9.6.7 for all current table selected columns<br><br>",
"__for all parameters__<br>",
"Function Library Guide: 2.2.4 for all parameters<br><br>",
"__for all table columns__<br>",
"Function Library Guide: 9.6.4 for all table columns<br><br>",
"__for all table rows__<br>",
"Function Library Guide: 9.6.2 for all table rows<br><br>",
"__for all table selected columns__<br>",
"Function Library Guide: 9.6.5 for all table selected columns<br><br>",
"__for all table selected rows__<br>",
"Function Library Guide: 9.6.3 for all table selected rows<br><br>",
"__for all variables__, __for all variables if existing__, __for all variables if existing and valid__<br>",
"Function Library Guide: 2.2.5 for all variables<br><br>",
"__for-loop__<br>",
"Function Library Guide: 2.2.2 for<br><br>",
"__for-loop through parameter elements__<br>",
"Function Library Guide: 2.2.4 for all parameters<br><br>",
"__for-loop through table columns__<br>",
"Function Library Guide: 9.6.4 for all table columns<br><br>",
"__for-loop through table rows__<br>",
"Function Library Guide: 9.6.2 for all table rows<br><br>",
"__for-loop through variables__<br>",
"Function Library Guide: 2.2.5 for all variables<br><br>",
"__foreground color__<br>",
"Function Library Guide: 3.2.4 text / background color<br><br>",
"__forget memorized table columns__<br>",
"Function Library Guide: 9.3.1.4 forget memorized table columns<br><br>",
"__format__, __format print__<br>",
"Function Library Guide: 3.1.3 format, format print<br><br>",
"__Format the results__<br>",
"User Guide: 5.7 G - Format<br><br>",
"__Formatting and styling tables__<br>",
"Function Library Guide: 9.9 Formatting and Styling Tables<br><br>",
"__Formatting Coverages__, __Formatting Precedences__<br>",
"Function Library Guide: 9.9.2.6 Formatting Coverages and Precedences<br><br>",
"__formatting template__<br>",
"Function Library Guide: 4.1 str, soft<br><br>",
"__Formatting the Tables__<br>",
"Function Library Guide: 9.9.2 Styling Functions<br><br>",
"__fq__<br>",
"Function Library Guide: 7.1.7 fq - Fiscal Quarter<br><br>",
"__Full UNICODE Support__<br>",
"Language Guide: 1.1.5.1 Full UNICODE Support<br><br>",
"__Function call__, __Function calls__<br>",
"Language Guide: 6 Functions and Procedures<br><br>",
"__function existing__<br>",
"Function Library Guide: 2.3.5 function / user function existing<br><br>",
"__Function Library__, __Function Library Guide__<br>",
"Function Library Guide: 1 Function Library<br><br>",
"__Function Names__<br>",
"Language Guide: 6.1 Function Naming<br><br>",
"__Function parameter__<br>",
"Language Guide: 6.2 Function Parameters<br><br>",
"__Function parameter directions__<br>",
"Language Guide: 6.3 Function Parameter Directions<br><br>",
"__Function parameter types__<br>",
"Language Guide: 6.4 Function Parameter Types<br><br>",
"__Function Parameters__<br>",
"Language Guide: 6.2 Function Parameters<br><br>",
"__Functions and Procedures__<br>",
"Language Guide: 6 Functions and Procedures<br><br>",
"__Functions for reading tables__<br>",
"Function Library Guide: 9.3.3 Reading Tables<br><br>",
"__Functions for writing tables__<br>",
"Function Library Guide: 9.3.2 Writing Tables<br><br>",
"__fy__<br>",
"Function Library Guide: 7.1.8 fy - Fiscal Year<br><br>" ],
"Description 08:G" : [
"__Generic Attribute Names__, __Generic Attribute Values__, __Generic Formatting Attributes__<br>",
"Function Library Guide: 9.9.2.5 Generic Formatting Attributes<br><br>",
"__geometric mean__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean if__, __geometric mean if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__geometric mean ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean ignore blanks if__, __geometric mean ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__geometric mean ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean ignore zero if__, __geometric mean ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__get console size__, __get cursor position__<br>",
"Function Library Guide: 3.2.5 console<br><br>",
"__get differences__<br>",
"Function Library Guide: 6.1.15 get differences<br><br>",
"__get long options__<br>",
"Function Library Guide: 2.4.3 get long options<br><br>",
"__get text position__<br>",
"Function Library Guide: 3.2.5 console<br><br>",
"__Get variable name__<br>",
"Function Library Guide: 10.1.5 name<br><br>",
"__getch__, __getch ignore case__<br>",
"Function Library Guide: 3.1.8 getch ...<br><br>",
"__gini__, __gini coefficient__, __gini ignore blanks__, __gini ignore zero__<br>",
"Function Library Guide: 5.5.4 gini Coefficient Functions<br><br>",
"__github markdown__<br>",
"Language Guide: 1.1.4 Comments<br><br>",
"__global__<br>",
"Function Library Guide: 10.1.11 global<br><br>",
"__global privileges__<br>",
"Function Library Guide: 12.4.1 global / script privileges<br><br>",
"__Global variables__<br>",
"Language Guide: 2.3.1 Global Variables<br><br>",
"__greater than or equal to__<br>",
"Language Guide: 4.3.4.6 Greater than (or Equal to)<br><br>" ],
"Description 09:H" : [
"__harmonic mean__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__harmonic mean if__, __harmonic mean if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__hash signature__<br>",
"Function Library Guide: 4.13 hash signature<br><br>",
"__header name exception handling__<br>",
"Language Guide: 3.5.8 Header Name Exception Handling<br><br>",
"__height__<br>",
"Function Library Guide: 6.1.6 height<br><br>",
"__help__<br>",
"Function Library Guide: 13.1 help<br><br>",
"__help and support functions__<br>",
"Function Library Guide: 13 Help and Support Functions<br><br>",
"__help functions__, __help index__, __help keywords__, __help language__, __help library__, __help user guide__, __help welcome__<br>",
"Function Library Guide: 13.2 help ...<br><br>",
"__hex to decimal__<br>",
"Function Library Guide: 5.1.8 hex to decimal<br><br>",
"__Hijacking parameters__<br>",
"Language Guide: 1.6 Language Pitfalls<br><br>",
"__horizontal__<br>",
"Function Library Guide: 5.4.5 horizontal<br><br>",
"__horizontal table access__<br>",
"Language Guide: 3.5.2 Horizontal Table Access<br><br>",
"__Horizontal table access using parameter sets__<br>",
"Language Guide: 3.5.2.1 Horizontal Table Access w. Param. Sets<br><br>",
"__Horizontal table access using ranges__<br>",
"Language Guide: 3.5.2.3 Horizontal Table Access w. Ranges<br><br>",
"__Horizontal table access using wildcards__<br>",
"Language Guide: 3.5.2.2 Horizontal Table Access w. Wildcards<br><br>",
"__horizontal table accesses__<br>",
"Language Guide: 3.5.2 Horizontal Table Access<br><br>",
"__hour__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__hyperbolic functions__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>" ],
"Description 10:I" : [
"__I/O parameters__<br>",
"Language Guide: 6.3 Function Parameter Directions<br><br>",
"__identify__<br>",
"Function Library Guide: 10.1.3 identify<br><br>",
"__Identify optimum data type for value provided__<br>",
"Function Library Guide: 4.10 best type<br><br>",
"__Identify scope of variable__<br>",
"Function Library Guide: 10.1.4 scope<br><br>",
"__Identify variable types and subtypes__<br>",
"Function Library Guide: 4.12 type, subtype<br><br>",
"__if__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__Import source data__<br>",
"User Guide: 5.1 A - Import<br><br>",
"__include__, __include B4P program__, __include libraries__, __include library__<br>",
"Function Library Guide: 2.4.2 include<br><br>",
"__income disparity__<br>",
"Function Library Guide: 5.5.4 gini Coefficient Functions<br><br>",
"__Indexing elements__, __Indexing parameter sets__<br>",
"Language Guide: 1.2.6.1 Indexing Parameter Sets<br><br>",
"__Indexing strings__<br>",
"Language Guide: 1.2.1.3 Indexing Strings<br><br>",
"__Indirect parameter passing__<br>",
"Language Guide: 6.5 Indirect Parameter Passing<br><br>",
"__input__<br>",
"Function Library Guide: 3.1.5 input<br><br>",
"__input parameters__<br>",
"Language Guide: 6.3 Function Parameter Directions<br><br>",
"__input quick__, __input quick ignore case__<br>",
"Function Library Guide: 3.1.7 input quick ...<br><br>",
"__input to complete__<br>",
"Function Library Guide: 3.1.6 input to complete<br><br>",
"__insert members__<br>",
"Function Library Guide: 10.1.10 insert members (protect)<br><br>",
"__Insert table rows__<br>",
"Function Library Guide: 9.7.3.1 table insert rows (if needed)<br><br>",
"__Inserting table columns__<br>",
"Function Library Guide: 9.7.2.1 table insert (missing) columns<br><br>",
"__inspect__<br>",
"Function Library Guide: 3.3.3 inspect<br><br>",
"__Inspection and debugging__<br>",
"Function Library Guide: 3.3 Inspection and Debugging<br><br>",
"__Installation and Setup__<br>",
"User Guide: 2 Installation and Setup<br><br>",
"__Installation on Linux__<br>",
"User Guide: 2.2 Linux<br><br>",
"__Installation on MacOS__<br>",
"User Guide: 2.3 MacOS<br><br>",
"__Installation on Windows__<br>",
"User Guide: 2.1 Windows<br><br>",
"__integrate results__<br>",
"Function Library Guide: 9.8.2.15 table expand ...<br><br>",
"__integrate results from one or more matching row into target table row__<br>",
"Function Library Guide: 9.8.2.23 table digest ...<br><br>",
"__interactive__<br>",
"Function Library Guide: 2.5.3 interactive<br><br>",
"__Interactive editing__<br>",
"User Guide: 4.1 Interactive Input and Editing<br><br>",
"__interactive expressions__<br>",
"User Guide: 4.7 Execute B4P Expressions Interactively<br><br>",
"__Interactive help__<br>",
"User Guide: 4.3 Interactive Help<br><br>",
"__Interactive input__<br>",
"User Guide: 4.1 Interactive Input and Editing<br><br>",
"__interactive mode__<br>",
"User Guide: 4 Interactive Mode<br><br>",
"__interactive statements__<br>",
"User Guide: 4.6 Execute B4P Statements Interactively<br><br>",
"__Interactive Visualization__<br>",
"User Guide: 4.8.1 Interactive Visualization<br><br>",
"__internal rate of return__<br>",
"Function Library Guide: 5.7.2 irr - Internal Rate of Return<br><br>",
"__Interpolation Examples__, __interpolation examples__<br>",
"Function Library Guide: 5.5.6.1 Interpolation Examples Visualized<br><br>",
"__Introduction to User-Defined Functions__<br>",
"Language Guide: 6.6 Introduction to User-Defined Functions<br><br>",
"__irr__<br>",
"Function Library Guide: 5.7.2 irr - Internal Rate of Return<br><br>",
"__is integer__, __is integer or blank__, __is numeric__, __is numeric or blank__, __is strictly integer__, __is strictly integer or blank__, __is strictly numeric__, __is strictly numeric or blank__<br>",
"Function Library Guide: 5.1.1 is numeric / integer - Functions<br><br>" ],
"Description 11:J" : [
"__join__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join if__, __join if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__join ignore blanks__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join ignore blanks if__, __join ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__Join parameter set elements into a string__, __join unique__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join unique if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__join unique ignore blanks__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join unique ignore blanks if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__json to variable__<br>",
"Function Library Guide: 10.3.2 json to variable ...<br><br>" ],
"Description 12:K" : [
"__Keeping and deleting table columns__<br>",
"Function Library Guide: 9.7.2.6 table keep ... columns<br><br>",
"__Key Benefits__<br>",
"Master Document: 1.1 Key Benefits<br><br>",
"__Key Features__<br>",
"Master Document: 1.2 Key Features<br><br>" ],
"Description 13:L" : [
"__Language Guide__<br>",
"Language Guide: 1 The Language<br><br>",
"__Language pitfalls__<br>",
"Language Guide: 1.6 Language Pitfalls<br><br>",
"__Launch other B4P programs__<br>",
"Function Library Guide: 2.4 Launch other B4P programs<br><br>",
"__left__<br>",
"Function Library Guide: 6.1.8 left ... (string function)<br><br>",
"__left__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left include__<br>",
"Function Library Guide: 6.1.8 left ... (string function)<br><br>",
"__left include__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left last match__<br>",
"Function Library Guide: 6.1.8 left ... (string function)<br><br>",
"__left last match__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left last match include__<br>",
"Function Library Guide: 6.1.8 left ... (string function)<br><br>",
"__left last match include__, __left [parameter set function]__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left [string function]__<br>",
"Function Library Guide: 6.1.8 left ... (string function)<br><br>",
"__Left-Hand Side Expression__, __Left-Hand Side Expressions__<br>",
"Language Guide: 4.2.1 Left-Hand Side Expressions<br><br>",
"__length__<br>",
"Function Library Guide: 6.1.4 length ... (string function)<br><br>",
"__length__<br>",
"Function Library Guide: 8.1.1 length ... (parameter set function)<br><br>",
"__Length of parameter sets__<br>",
"Language Guide: 1.2.6.1 Indexing Parameter Sets<br><br>",
"__length [parameter set function]__<br>",
"Function Library Guide: 8.1.1 length ... (parameter set function)<br><br>",
"__length [string function]__<br>",
"Function Library Guide: 6.1.4 length ... (string function)<br><br>",
"__LHS Expression__, __LHS Expressions__<br>",
"Language Guide: 4.2.1 Left-Hand Side Expressions<br><br>",
"__License Activation__<br>",
"User Guide: 2.7 License Activation<br><br>",
"__license apply key__<br>",
"Function Library Guide: 12.4.3 license apply key<br><br>",
"__license provide identification__<br>",
"Function Library Guide: 12.4.2 license provide identification<br><br>",
"__licensing and privileges__<br>",
"Function Library Guide: 12.4 Licensing and Privileges<br><br>",
"__lighten color__<br>",
"Function Library Guide: 9.9.1.5 lighten color<br><br>",
"__lighten colors__<br>",
"Function Library Guide: 9.9.1.7 lighten colors<br><br>",
"__linear__, __linear equation__<br>",
"Function Library Guide: 5.4.4 linear - Solve Linear Equations<br><br>",
"__linear interpolation__<br>",
"Function Library Guide: 5.5.6 Interpolation Functions<br><br>",
"__linear regression__<br>",
"Function Library Guide: 5.5.5 Linear and Exponential Regression<br><br>",
"__Linux - Batch Installation__<br>",
"User Guide: 2.2.4 Linux - Batch Installation<br><br>",
"__Linux Download__<br>",
"User Guide: 2.2.2 Linux - Download<br><br>",
"__Linux Installation__<br>",
"User Guide: 2.2.3 Linux - Installation<br><br>",
"__Linux Prerequisites__<br>",
"User Guide: 2.2.1 Linux - Prerequisites<br><br>",
"__Linux Start B4P to run B4P programs__<br>",
"User Guide: 3.2.2.2 Linux Start B4P to run B4P programs<br><br>",
"__list functions__<br>",
"Function Library Guide: 13.10 list / explain functions<br><br>",
"__list global variables__, __list local variables__<br>",
"Function Library Guide: 3.3.4 list variables ...<br><br>",
"__List of all entities__<br>",
"Function Library Guide: 13.12 dump entities<br><br>",
"__List of all functions__<br>",
"Function Library Guide: 13.11 dump functions<br><br>",
"__list of Locales__<br>",
"Language Guide: 1.5.1 Locales<br><br>",
"__list of parameter types in user functions__<br>",
"Function Library Guide: 2.3.3 Parameter Types in User-Defined Functions<br><br>",
"__list of system variables__<br>",
"Language Guide: 2.3.4.1 List of System Variables<br><br>",
"__list system variables__<br>",
"Function Library Guide: 3.3.4 list variables ...<br><br>",
"__list tables__<br>",
"Function Library Guide: 9.4.1 list tables<br><br>",
"__list variables__, __List variables including their members and data types__<br>",
"Function Library Guide: 3.3.4 list variables ...<br><br>",
"__Listing directories__<br>",
"Function Library Guide: 11.2.1 directory listing ...<br><br>",
"__listing directories and files__<br>",
"Function Library Guide: 11.2 Listing and Searching Directories and Files<br><br>",
"__ln__<br>",
"Function Library Guide: 5.2.4 Logarithmic Functions<br><br>",
"__Loading and saving tables__<br>",
"Function Library Guide: 9.1 Loading and Saving Tables<br><br>",
"__Loading and saving tables__<br>",
"Function Library Guide: 9.1.1 table load ...<br><br>",
"__Loading and saving variables__<br>",
"Function Library Guide: 10.3 Loading and Saving Variables<br><br>",
"__Loading and saving variables using JSON__<br>",
"Function Library Guide: 10.3.1 variable load ...<br><br>",
"__loading files__<br>",
"Language Guide: 1.5.4.2 Loading Files - Character sets<br><br>",
"__Loading HTML files__<br>",
"Function Library Guide: 9.1.1.1 Loading HTML files<br><br>",
"__Loading JSON files__<br>",
"Function Library Guide: 9.1.1.3 Loading JSON files<br><br>",
"__Loading XML files__<br>",
"Function Library Guide: 9.1.1.2 Loading XML files<br><br>",
"__local__<br>",
"Function Library Guide: 10.1.12 local<br><br>",
"__Local variables__<br>",
"Language Guide: 2.3.2 Local Variables<br><br>",
"__locale__, __Locales__<br>",
"Language Guide: 1.5.1 Locales<br><br>",
"__locate differences__<br>",
"Function Library Guide: 6.1.16 locate differences<br><br>",
"__log__, __logarithmic functions__<br>",
"Function Library Guide: 5.2.4 Logarithmic Functions<br><br>",
"__logical and__<br>",
"Language Guide: 4.3.6.1 Logical And<br><br>",
"__logical operators__<br>",
"Language Guide: 4.3.6 Logical Operators<br><br>",
"__logical or__<br>",
"Language Guide: 4.3.6.2 Logical Or<br><br>",
"__Long command line options__, __Long Options__<br>",
"User Guide: 3.5.3 Long Options<br><br>",
"__Looking up data from other tables__<br>",
"Function Library Guide: 9.8.2.1 table lookup ...<br><br>",
"__Looking up data from other tables__<br>",
"Function Library Guide: 9.8.2.15 table expand ...<br><br>",
"__Looking up data from other tables__<br>",
"Function Library Guide: 9.8.2.23 table digest ...<br><br>",
"__Looking up data from other tables and integrating their results__<br>",
"Function Library Guide: 9.8.2.8 table integrate ...<br><br>",
"__Looking up other tables__<br>",
"Function Library Guide: 9.8.2 Looking up Other Tables<br><br>",
"__lookup access exception handling__<br>",
"Language Guide: 3.5.9 Lookup Access Exception Handling<br><br>",
"__Loops__<br>",
"Function Library Guide: 2.2 Loops<br><br>",
"__Loops__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>" ],
"Description 14:M" : [
"__MacOS - Batch Installation__<br>",
"User Guide: 2.3.4 MacOS - Batch Installation<br><br>",
"__MacOS Download__<br>",
"User Guide: 2.3.2 MacOS - Download<br><br>",
"__MacOS Installation__<br>",
"User Guide: 2.3.3 MacOS - Installation<br><br>",
"__MacOS Prerequisites__<br>",
"User Guide: 2.3.1 MacOS - Prerequisites<br><br>",
"__MacOS Start B4P to run B4P programs__<br>",
"User Guide: 3.3.2.2 MacOS Start B4P to run B4P programs<br><br>",
"__Make matrix horizontal__<br>",
"Function Library Guide: 5.4.5 horizontal<br><br>",
"__Make matrix vertical__<br>",
"Function Library Guide: 5.4.6 vertical<br><br>",
"__Make regional variables accessible in functions called__<br>",
"Function Library Guide: 10.1.13 regional<br><br>",
"__Manipulate table contents__<br>",
"Function Library Guide: 9.7.4.6 table manipulate (selected rows)<br><br>",
"__manipulating directories and files__<br>",
"Function Library Guide: 11.3 Manipulating Directories and Files<br><br>",
"__markdown__<br>",
"Language Guide: 1.1.4 Comments<br><br>",
"__Mathematics and Statistics__<br>",
"Function Library Guide: 5 Mathematics and Statistics<br><br>",
"__matrix determinant__<br>",
"Function Library Guide: 5.4.3 mdet - Matrix Determinant<br><br>",
"__matrix division__<br>",
"Function Library Guide: 5.4.1 mmul, mmdiv - Multiplication and Division<br><br>",
"__matrix functions__<br>",
"Function Library Guide: 5.4 Matrix Functions<br><br>",
"__matrix inversion__<br>",
"Function Library Guide: 5.4.2 minv - Matrix Inversion<br><br>",
"__matrix mathematics__<br>",
"Language Guide: 4.5.3 Matrix Operations Summary<br><br>",
"__matrix multiplication__<br>",
"Function Library Guide: 5.4.1 mmul, mmdiv - Multiplication and Division<br><br>",
"__matrix operations summary__<br>",
"Language Guide: 4.5.3 Matrix Operations Summary<br><br>",
"__matrix table access__, __matrix table accesses__<br>",
"Language Guide: 3.5.4 Matrix Table Access<br><br>",
"__max 123__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max 123 if__, __max 123 if any__, __max 123 ignore zero if__, __max 123 ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max 124 ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max abc__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__max abc if__, __max abc if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max abc ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__max abc ignore case if__, __max if__, __max if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max ignore blanks__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__max ignore blanks if__, __max ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max ignore zero__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__max ignore zero if__, __max ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max numeral__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max numeral if__, __max numeral if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max numeral ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max numeral ignore zero if__, __max numeral ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max string__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__max string if__, __max string if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max string ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__max string ignore case if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__mdet__<br>",
"Function Library Guide: 5.4.3 mdet - Matrix Determinant<br><br>",
"__mdiv__<br>",
"Function Library Guide: 5.4.1 mmul, mmdiv - Multiplication and Division<br><br>",
"__median__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__median if__, __median if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__median ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__median ignore zero if__, __median ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__member count__<br>",
"Function Library Guide: 10.2.5 member count<br><br>",
"__member variable__, __member variables__<br>",
"Language Guide: 2.5 Variable Forms and Trees<br><br>",
"__memory effect__<br>",
"Language Guide: 3.6 Header Names - Memory Effect<br><br>",
"__Merge and Consolidate__<br>",
"User Guide: 5.4 D - Merge<br><br>",
"__Merge two tables with union-set principle__<br>",
"Function Library Guide: 9.8.3.1 table merge ...<br><br>",
"__middle__<br>",
"Function Library Guide: 6.1.10 middle ... (string function)<br><br>",
"__middle__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle include__<br>",
"Function Library Guide: 6.1.10 middle ... (string function)<br><br>",
"__middle include__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle until__<br>",
"Function Library Guide: 6.1.10 middle ... (string function)<br><br>",
"__middle until__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle until include__<br>",
"Function Library Guide: 6.1.10 middle ... (string function)<br><br>",
"__middle until include__, __middle [parameter set function]__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle [string function]__<br>",
"Function Library Guide: 6.1.10 middle ... (string function)<br><br>",
"__min__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min 123__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min 123 if__, __min 123 if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min 123 ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min 123 ignore zero if__, __min 123 ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min abc if__, __min abc if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore blanks__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min abc ignore blanks if__, __min abc ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore both__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min abc ignore both if__, __min abc ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min abc ignore case if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min and max functions__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min and max functions on numerals__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min and max functions on strings__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min if__, __min if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min ignore blanks__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min ignore blanks if__, __min ignore blanks if any__, __min ignore zero if__, __min ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min numeral__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min numeral if__, __min numeral if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min numeral ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min numeral ignore zero if__, __min numeral ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min string__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min string if__, __min string if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min string ignore blanks__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min string ignore blanks if__, __min string ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min string ignore both__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min string ignore both if__, __min string ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min string ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Strings<br><br>",
"__min string ignore case if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__minute__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__minv__<br>",
"Function Library Guide: 5.4.2 minv - Matrix Inversion<br><br>",
"__Miscellaneous Features__<br>",
"Language Guide: 1.5 Miscellaneous Features<br><br>",
"__mmul__<br>",
"Function Library Guide: 5.4.1 mmul, mmdiv - Multiplication and Division<br><br>",
"__mod__, __modulo__<br>",
"Function Library Guide: 5.1.6 mod - Modulo function<br><br>",
"__month__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__Move and rearrange table rows__<br>",
"Function Library Guide: 9.7.3.9 table move rows<br><br>",
"__move cursor__<br>",
"Function Library Guide: 3.2.3 cursor<br><br>",
"__mul__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__Multi-line strings__, __Multi-line text__<br>",
"Language Guide: 1.1.1.5 Multi-Line Text<br><br>",
"__Multi-table integration__<br>",
"Function Library Guide: 9.8 Multi-Table Integration<br><br>",
"__multiplication__<br>",
"Language Guide: 4.3.3.3 Multiplications<br><br>",
"__My B4P Init.b4p__<br>",
"User Guide: 3.5.4 User Initialization Program<br><br>" ],
"Description 15:N" : [
"__name__<br>",
"Function Library Guide: 10.1.5 name<br><br>",
"__nearest neighbor interpolation__, __nearest right neighbor interpolation__<br>",
"Function Library Guide: 5.5.6 Interpolation Functions<br><br>",
"__negative indexing__<br>",
"Language Guide: 1.5.3 Negative Indexing<br><br>",
"__nested partial table specification__, __nested partial table specifications__<br>",
"Language Guide: 3.5.6 Nested Partial Table Specifications<br><br>",
"__New Line__<br>",
"Language Guide: 1.1.5.2 New Line<br><br>",
"__not equal to__<br>",
"Language Guide: 4.3.4.2 Not Equal to<br><br>",
"__null__, __Null function__<br>",
"Function Library Guide: 2.5.10 null - Function<br><br>",
"__num__<br>",
"Function Library Guide: 4.2 num<br><br>",
"__Number__, __Numbers__<br>",
"Language Guide: 1.1.2 Numbers<br><br>",
"__numeral conversion function__<br>",
"Function Library Guide: 4.2 num<br><br>",
"__numeral to string conversion and formatting__, __Numeral to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.3 Numeral to String Formatting<br><br>" ],
"Description 16:O" : [
"__odd__, __odd numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__office document properties__, __Office functions__<br>",
"Function Library Guide: 11.2.9 office document properties<br><br>",
"__once__<br>",
"Function Library Guide: 2.1.3 once<br><br>",
"__One table does row-subtraction on other table__<br>",
"Function Library Guide: 9.8.3.4 table subtract ...<br><br>",
"__One table overlays the other table__<br>",
"Function Library Guide: 9.8.3.2 table overlay/subtract ...<br><br>",
"__one-time execution__<br>",
"Function Library Guide: 2.1.3 once<br><br>",
"__open__<br>",
"Function Library Guide: 12.1.1 open<br><br>",
"__Open-ended ranges__<br>",
"Language Guide: 5.1.3 Transactions from Variables to Tables<br><br>",
"__openweb__<br>",
"Function Library Guide: 13.4 openweb<br><br>",
"__Operating System Commands__<br>",
"User Guide: 4.5 Operating System Commands<br><br>",
"__Operator__<br>",
"Language Guide: 4.3 Operators<br><br>",
"__Operator Precedence__<br>",
"Language Guide: 4.4 Operator Precedence and Parentheses<br><br>",
"__Operators__<br>",
"Language Guide: 4.3 Operators<br><br>",
"__or__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__OR Transactions between tables__<br>",
"Language Guide: 5.3.4 &vert; Transactions between Tables<br><br>",
"__OR Transactions between variables__<br>",
"Language Guide: 5.3.1 &vert; Transactions between Variables<br><br>",
"__OR Transactions from tables to variables__<br>",
"Language Guide: 5.3.2 &vert; Transactions from Tables to Variables<br><br>",
"__OR Transactions from variables to tables__<br>",
"Language Guide: 5.3.3 &vert; Transactions from Variables to Tables<br><br>",
"__OS Commands__<br>",
"User Guide: 4.5 Operating System Commands<br><br>",
"__Other string functions__<br>",
"Function Library Guide: 6.3 Miscellaneous String Functions<br><br>",
"__output parameters__<br>",
"Language Guide: 6.3 Function Parameter Directions<br><br>",
"__outside__<br>",
"Function Library Guide: 6.1.11 outside ... (string function)<br><br>",
"__outside__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside exclude__<br>",
"Function Library Guide: 6.1.11 outside ... (string function)<br><br>",
"__outside exclude__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside until__<br>",
"Function Library Guide: 6.1.11 outside ... (string function)<br><br>",
"__outside until__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside until exclude__<br>",
"Function Library Guide: 6.1.11 outside ... (string function)<br><br>",
"__outside until exclude__, __outside [parameter set function]__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside [string function]__<br>",
"Function Library Guide: 6.1.11 outside ... (string function)<br><br>" ],
"Description 17:P" : [
"__parallel__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__parallel if__, __parallel if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__parameter set__<br>",
"Function Library Guide: 2.2.4 for all parameters<br><br>",
"__parameter set__, __parameter set conversion function__<br>",
"Function Library Guide: 4.9 parameter set<br><br>",
"__parameter set extraction functions__<br>",
"Function Library Guide: 8.1 Set Search and Extraction Functions<br><br>",
"__parameter set functions__<br>",
"Function Library Guide: 8 Parameter Set Functions<br><br>",
"__parameter set or string__<br>",
"Language Guide: 6.4.1 Parameter Set or String (Func. Param. Type)<br><br>",
"__parameter set search and extraction__, __parameter set search functions__<br>",
"Function Library Guide: 8.1 Set Search and Extraction Functions<br><br>",
"__Parameter Set to string conversion and formatting__, __Parameter Set to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.5 Parameter Set to String Formatting<br><br>",
"__parameter set value ranges__<br>",
"Language Guide: 1.2.6.3 Parameter sets - Value Ranges<br><br>",
"__parameter set value repetitions__<br>",
"Language Guide: 1.2.6.4 Parameter sets - Value Repetitions<br><br>",
"__Parentheses__<br>",
"Language Guide: 4.4 Operator Precedence and Parentheses<br><br>",
"__partial table specifications__<br>",
"Language Guide: 3.5.5 Partial Table Specifications<br><br>",
"__path names__<br>",
"Language Guide: 1.5.4.1 Path and File Names<br><br>",
"__pause__<br>",
"Function Library Guide: 2.5.1 pause<br><br>",
"__pick__<br>",
"Function Library Guide: 2.6.1 select, pick<br><br>",
"__pick by value__<br>",
"Function Library Guide: 2.6.5 select / pick by value<br><br>",
"__pick if__<br>",
"Function Library Guide: 2.6.2 select if, pick if<br><br>",
"__pick if existing__, __pick if existing and valid__<br>",
"Function Library Guide: 2.6.4 select/pick if existing ...<br><br>",
"__pick ifs__<br>",
"Function Library Guide: 2.6.3 select ifs, pick ifs<br><br>",
"__Pivoting and consolidating tables__<br>",
"Function Library Guide: 9.7.5 Pivoting and Conosolidating Tables<br><br>",
"__plain date__, __plain dates__<br>",
"Language Guide: 1.2.3 Dates<br><br>",
"__plain numeral__, __plain numerals__<br>",
"Language Guide: 1.2.2 Numerals<br><br>",
"__Plain Text__<br>",
"Language Guide: 1.1.1.1 Plain Text<br><br>",
"__polynomial interpolation__<br>",
"Function Library Guide: 5.5.6 Interpolation Functions<br><br>",
"__pow__, __power function__<br>",
"Function Library Guide: 5.2.2 pow - Power Function<br><br>",
"__Precedence__<br>",
"Language Guide: 4.3 Operators<br><br>",
"__print__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__print bar__<br>",
"Function Library Guide: 3.1.2 print bar<br><br>",
"__print line__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__Procedure call__, __Procedure calls__<br>",
"Language Guide: 6 Functions and Procedures<br><br>",
"__Procedure Names__<br>",
"Language Guide: 6.1 Function Naming<br><br>",
"__Process table cells__<br>",
"Function Library Guide: 9.7.4.4 table process cells (selected rows)<br><br>",
"__Process table columns__<br>",
"Function Library Guide: 9.7.4.3 table process (selected) columns<br><br>",
"__Process table rows__<br>",
"Function Library Guide: 9.7.4.1 table process (all) (selected rows)<br><br>",
"__Processing headers__<br>",
"Function Library Guide: 9.7.1 Checking and Processing Headers<br><br>",
"__Processing table columns__<br>",
"Function Library Guide: 9.7.2 Processing Table Columns<br><br>",
"__Processing table contents__<br>",
"Function Library Guide: 9.7.4 Processing Table Contents<br><br>",
"__Processing table rows__<br>",
"Function Library Guide: 9.7.3 Processing Table Rows<br><br>",
"__Processing tables__<br>",
"Function Library Guide: 9.7 Processing Tables<br><br>",
"__product__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product if__, __product if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__product ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product ignore blanks if__, __product ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__product ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product ignore zero if__, __product ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__prompt__<br>",
"Function Library Guide: 3.3.1 prompt<br><br>",
"__protect__, __protect recursive__, __Protect variables__<br>",
"Function Library Guide: 10.1.7 protect ...<br><br>",
"__protecting setting__, __protecting variables__, __protection settings__<br>",
"Language Guide: 2.7 Protecting Variables<br><br>",
"__pure date__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__pure time__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>",
"__Put values diagonally into matrix__<br>",
"Function Library Guide: 5.4.8 diagonal<br><br>" ],
"Description 18:Q" : [
"__quantile__, __quantile ignore zero__<br>",
"Function Library Guide: 5.5.2 quantile ...<br><br>",
"__quarter__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__quote path__<br>",
"Function Library Guide: 12.1.3 quote path<br><br>",
"__Quoted string__, __Quoted strings__<br>",
"Language Guide: 1.2.1.2 Quoted Strings<br><br>" ],
"Description 19:R" : [
"__random__<br>",
"Function Library Guide: 5.1.7 random - Random Integers<br><br>",
"__random letters__, __random string__<br>",
"Function Library Guide: 6.3.2 random string, random letters<br><br>",
"__Ranking options__<br>",
"Function Library Guide: 14.1 Sorting and Ranking Options<br><br>",
"__read access__, __read access repeat if locked__<br>",
"Function Library Guide: 11.1.2 read access ..., write access ...<br><br>",
"__Read variable members into parameter sets__<br>",
"Function Library Guide: 10.2.10 set, set names<br><br>",
"__Reading tables__<br>",
"Function Library Guide: 9.3.3.1 table read row<br><br>",
"__Recent Releases__<br>",
"User Guide: 7 Recent Releases<br><br>",
"__redim__<br>",
"Function Library Guide: 10.2.1 dim / redim<br><br>",
"__redim protect__<br>",
"Function Library Guide: 10.2.2 dim / redim protect<br><br>",
"__redirecting references__<br>",
"Language Guide: 2.6.3 Redirecting References<br><br>",
"__References in member variables__<br>",
"Language Guide: 2.6.6 References in Member Variables<br><br>",
"__references to variables__<br>",
"Language Guide: 2.6 References to Variables<br><br>",
"__regional__<br>",
"Function Library Guide: 10.1.13 regional<br><br>",
"__Regional variables__<br>",
"Language Guide: 2.3.3 Regional Variables<br><br>",
"__registry access functions__<br>",
"Function Library Guide: 12.3 Registry Access Functions<br><br>",
"__regression__<br>",
"Function Library Guide: 5.5.5 Linear and Exponential Regression<br><br>",
"__Relational division of two tables__<br>",
"Function Library Guide: 9.8.3.7 table divide ...<br><br>",
"__Relational multiplication of two tables__<br>",
"Function Library Guide: 9.8.3.6 table multiply ...<br><br>",
"__release__<br>",
"Function Library Guide: 10.4.1 release<br><br>",
"__Release 8.00__<br>",
"User Guide: 7.1 Release 8.00<br><br>",
"__Release 8.01__<br>",
"User Guide: 7.2 Release 8.01<br><br>",
"__Release 8.02__<br>",
"User Guide: 7.3 Release 8.02<br><br>",
"__Release 8.03__<br>",
"User Guide: 7.4 Release 8.03<br><br>",
"__Release 8.04__<br>",
"User Guide: 7.5 Release 8.04<br><br>",
"__Release 9.00__<br>",
"User Guide: 7.6 Release 9.00<br><br>",
"__Release 9.01 Golden Cut__<br>",
"User Guide: 7.8 Release 9.01<br><br>",
"__Release 9.02 Release Candiate__<br>",
"User Guide: 7.9 Release 9.02 RC<br><br>",
"__release all__<br>",
"Function Library Guide: 10.4.2 release all<br><br>",
"__Release references to variables__<br>",
"Function Library Guide: 10.4.1 release<br><br>",
"__Releasing references__<br>",
"Language Guide: 2.6.5 Releasing References<br><br>",
"__Remove all style attributes from the table__<br>",
"Function Library Guide: 9.9.3.2 table style reset<br><br>",
"__Renaming tables__<br>",
"Function Library Guide: 9.7.6.1 table rename<br><br>",
"__replace__, __replace all__<br>",
"Function Library Guide: 6.1.2 replace, replace all<br><br>",
"__replicate__, __replicate characters__, __replicate strings__<br>",
"Function Library Guide: 6.3.1 replicate ... (string function)<br><br>",
"__reschedule__<br>",
"Function Library Guide: 7.1.9 reschedule<br><br>",
"__reserved keywords__<br>",
"Language Guide: 1.1.1.4 Reserved Keywords<br><br>",
"__reset console__<br>",
"Function Library Guide: 3.2.10 reset console<br><br>",
"__Resident attributes functions__<br>",
"Function Library Guide: 10.5 Resident Attributes Functions<br><br>",
"__Resolve directory and file names__, __resolve directory name__, __resolve file name__, __resolve path name__<br>",
"Function Library Guide: 11.2.8 resolve path/directory/file name<br><br>",
"__return__<br>",
"Function Library Guide: 2.3.4 return<br><br>",
"__reverse__<br>",
"Function Library Guide: 3.2.8 reverse<br><br>",
"__rgb__<br>",
"Function Library Guide: 9.9.1.3 rgb<br><br>",
"__RHS Expression__, __RHS Expressions__<br>",
"Language Guide: 4.2.2 Right-Hand Side Expressions<br><br>",
"__right__<br>",
"Function Library Guide: 6.1.9 right ... (string function)<br><br>",
"__right__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right include__<br>",
"Function Library Guide: 6.1.9 right ... (string function)<br><br>",
"__right include__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right last match__<br>",
"Function Library Guide: 6.1.9 right ... (string function)<br><br>",
"__right last match__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right last match include__<br>",
"Function Library Guide: 6.1.9 right ... (string function)<br><br>",
"__right last match include__, __right [parameter set function]__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right [string function]__<br>",
"Function Library Guide: 6.1.9 right ... (string function)<br><br>",
"__Right-Hand Side Expression__, __Right-Hand Side Expressions__<br>",
"Language Guide: 4.2.2 Right-Hand Side Expressions<br><br>",
"__rms__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms if__, __rms if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__rms ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms ignore blanks if__, __rms ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__rms ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms ignore zero if__, __rms ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__round__, __round down__, __round up__, __rounding functions__<br>",
"Function Library Guide: 5.1.5 round, round up / down<br><br>",
"__row__<br>",
"Function Library Guide: 9.4.6 row<br><br>",
"__Row-wise intersection made from two tables__<br>",
"Function Library Guide: 9.8.3.3 table intersect ...<br><br>" ],
"Description 20:S" : [
"__Save and Export__<br>",
"User Guide: 5.8 H - Export<br><br>",
"__saving files__<br>",
"Language Guide: 1.5.4.3 Saving Files - Character sets<br><br>",
"__Saving JSON files__<br>",
"Function Library Guide: 9.1.2.1 Saving JSON files<br><br>",
"__Scientific Notation__<br>",
"Language Guide: 1.1.2.1 Scientific Notation<br><br>",
"__scope__<br>",
"Function Library Guide: 10.1.4 scope<br><br>",
"__screen color__<br>",
"Function Library Guide: 3.2.4 text / background color<br><br>",
"__script privileges__<br>",
"Function Library Guide: 12.4.1 global / script privileges<br><br>",
"__Search and count files__, __search files__, __search files recursive__<br>",
"Function Library Guide: 11.2.5 search files ...<br><br>",
"__Search functions__<br>",
"Function Library Guide: 9.5.1 Search Functions<br><br>",
"__Searching and exploring tables__<br>",
"Function Library Guide: 9.5 Searching and Exploring Tables<br><br>",
"__Searching tables__<br>",
"Function Library Guide: 9.5.1.1 table search ...<br><br>",
"__second__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__see__<br>",
"Function Library Guide: 3.3.2 see<br><br>",
"__select__<br>",
"Function Library Guide: 2.6.1 select, pick<br><br>",
"__select by value__<br>",
"Function Library Guide: 2.6.5 select / pick by value<br><br>",
"__select if__<br>",
"Function Library Guide: 2.6.2 select if, pick if<br><br>",
"__select if existing__, __select if existing and valid__<br>",
"Function Library Guide: 2.6.4 select/pick if existing ...<br><br>",
"__select ifs__<br>",
"Function Library Guide: 2.6.3 select ifs, pick ifs<br><br>",
"__Select parameter based on boolean value in 1st parameter__<br>",
"Function Library Guide: 2.6.2 select if, pick if<br><br>",
"__Select parameter based on matching corresponding values__<br>",
"Function Library Guide: 2.6.5 select / pick by value<br><br>",
"__Select parameter based on multiple boolean values__<br>",
"Function Library Guide: 2.6.3 select ifs, pick ifs<br><br>",
"__Select parameter based on numeric value in 1st parameter__<br>",
"Function Library Guide: 2.6.1 select, pick<br><br>",
"__Select value from variable if existing__<br>",
"Function Library Guide: 2.6.4 select/pick if existing ...<br><br>",
"__Selection based sequence of comparisons__<br>",
"Function Library Guide: 2.6.6 compare select / pick<br><br>",
"__selection of multiple values__<br>",
"Language Guide: 4.3.4 Comparison Operators<br><br>",
"__serial date__<br>",
"Function Library Guide: 7.1.4 serial date<br><br>",
"__series functions__<br>",
"Function Library Guide: 5.3 Series Functions<br><br>",
"__set__<br>",
"Function Library Guide: 10.2.10 set, set names<br><br>",
"__set locale__<br>",
"Function Library Guide: 12.2 set locale<br><br>",
"__set names__<br>",
"Function Library Guide: 10.2.10 set, set names<br><br>",
"__shifted table column specification__, __shifted table column specifications__<br>",
"Language Guide: 3.5.7 Shifted Table Column Specifications<br><br>",
"__Short error messages on directories and files__<br>",
"Function Library Guide: 11 Directory and File System Functions<br><br>",
"__simple references to variables__<br>",
"Language Guide: 2.6.1 Simple References<br><br>",
"__simple table access__<br>",
"Language Guide: 3.5.1 Simple Table Access<br><br>",
"__simple variables__<br>",
"Language Guide: 2.5.1 Simple Variables<br><br>",
"__sin__, __sin deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__sinh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__sleep__<br>",
"Function Library Guide: 7.3.1 sleep, sleep countdown<br><br>",
"__sleep and wait functions__<br>",
"Function Library Guide: 7.3 Sleep and Wait Functions<br><br>",
"__Sleep and wait functions__, __sleep countdown__<br>",
"Function Library Guide: 7.3.1 sleep, sleep countdown<br><br>",
"__sleep until__, __sleep until countdown__<br>",
"Function Library Guide: 7.3.2 sleep until, sleep until countdown<br><br>",
"__Slicing Parameter sets__<br>",
"Language Guide: 1.2.6.2 Slicing Parameter Sets<br><br>",
"__Slicing strings__<br>",
"Language Guide: 1.2.1.4 Slicing Strings<br><br>",
"__smaller than or equal to__<br>",
"Language Guide: 4.3.4.5 Smaller than (or Equal to)<br><br>",
"__smart conversion and formatting__, __smart formatting__, __Smart Formatting Parameters__<br>",
"Function Library Guide: 4.1.7 Smart Formatting<br><br>",
"__smart if num__, __smart num__, __smart numerals__<br>",
"Function Library Guide: 4.4 smart num, smart if num<br><br>",
"__soft__<br>",
"Function Library Guide: 4.1 str, soft<br><br>",
"__Softquoted string__, __Softquoted strings__<br>",
"Language Guide: 1.2.1.1 Softquoted Strings<br><br>",
"__Sort and rearrange table rows__<br>",
"Function Library Guide: 9.7.3.12 table sort (selected) rows<br><br>",
"__Sorting and rearranging table columns__<br>",
"Function Library Guide: 9.7.2.4 table sort columns<br><br>",
"__Sorting options__<br>",
"Function Library Guide: 14.1 Sorting and Ranking Options<br><br>",
"__Special Console Output Characters__<br>",
"Language Guide: 1.1.5.7 Special Console Output Characters<br><br>",
"__Special Keyboard Input Characters__, __Special keys__<br>",
"Language Guide: 1.1.5.6 Special Keyboard Input Characters<br><br>",
"__Special output characters__<br>",
"Language Guide: 1.1.5.7 Special Console Output Characters<br><br>",
"__specifying members with parameter sets__<br>",
"Language Guide: 2.5.5 Parameter Sets Specifying Members<br><br>",
"__spline interpolation__<br>",
"Function Library Guide: 5.5.6 Interpolation Functions<br><br>",
"__spontaneous array creation__<br>",
"Language Guide: 2.5.2 Arrays<br><br>",
"__Spread serialized data across specified columns__<br>",
"Function Library Guide: 9.7.5.3 table spread ...<br><br>",
"__sqrt__, __Square Root__<br>",
"Function Library Guide: 5.2.1 sqrt - Square Root<br><br>",
"__start__, __start B4P program__<br>",
"Function Library Guide: 2.4.1 start<br><br>",
"__Start B4P Programs as Executables on Linux__<br>",
"User Guide: 3.2.2.1 Linux Start B4P Programs as Executables<br><br>",
"__Start B4P Programs as Executables on MacOS__<br>",
"User Guide: 3.3.2.1 MacOS Start B4P Programs as Executables<br><br>",
"__Starting a B4P Program with Linux__<br>",
"User Guide: 3.2.2 Linux Start B4P Programs<br><br>",
"__Starting a B4P Program with MacOS__<br>",
"User Guide: 3.3.2 MacOS Start B4P Programs<br><br>",
"__Starting a B4P Program with Windows__<br>",
"User Guide: 3.1.2 Windows Start B4P Programs<br><br>",
"__Starting B4P on Linux__<br>",
"User Guide: 3.2 Starting on Linux<br><br>",
"__Starting B4P on MacOS__<br>",
"User Guide: 3.3 Starting on MacOS<br><br>",
"__Starting B4P on Windows__<br>",
"User Guide: 3.1 Starting on Windows<br><br>",
"__Starting Behavior__<br>",
"User Guide: 3.4 Starting Behavior Basics<br><br>",
"__Starting Behavior Advanced__<br>",
"User Guide: 3.4.1 Starting Behavior Advanced<br><br>",
"__starting directory__<br>",
"Function Library Guide: 11.1.4 starting directory<br><br>",
"__Starting the B4P Engine with Linux__<br>",
"User Guide: 3.2.3 Linux Start B4P Engine<br><br>",
"__Starting the B4P Engine with Windows__<br>",
"User Guide: 3.1.3 Windows Start B4P Engine<br><br>",
"__Starting the Engine__<br>",
"User Guide: 3 Starting the Engine<br><br>",
"__Statements__<br>",
"Language Guide: 1.4 Statements<br><br>",
"__Statements [func params]__<br>",
"Language Guide: 6.4.3.4 Statements (func. params)<br><br>",
"__statistics functions__<br>",
"Function Library Guide: 5.5 Statistics Functions<br><br>",
"__stop__<br>",
"Function Library Guide: 2.5.2 stop<br><br>",
"__Stopwatch functions__<br>",
"Function Library Guide: 7.2.2 Stopwatch Functions<br><br>",
"__str__<br>",
"Function Library Guide: 4.1 str, soft<br><br>",
"__strictly equal to__<br>",
"Language Guide: 4.3.4.3 Strictly Equal to<br><br>",
"__strictly not equal to__<br>",
"Language Guide: 4.3.4.4 Strictly Not Equal to<br><br>",
"__string conversion__, __string conversion functions__<br>",
"Function Library Guide: 4.1 str, soft<br><br>",
"__string extraction functions__<br>",
"Function Library Guide: 6.1 String Search and Extraction Functions<br><br>",
"__string functions__<br>",
"Function Library Guide: 6 String Functions<br><br>",
"__string search and extraction__, __string search functions__<br>",
"Function Library Guide: 6.1 String Search and Extraction Functions<br><br>",
"__string to string conversion and formatting__, __String to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.1 String to String Formatting<br><br>",
"__structure__, __Structure functions__<br>",
"Function Library Guide: 10.2.4 structure, structure protect<br><br>",
"__structure members__<br>",
"Language Guide: 2.5.3 Structures<br><br>",
"__structure protect__<br>",
"Function Library Guide: 10.2.4 structure, structure protect<br><br>",
"__structure to array__, __structure to array recursive__<br>",
"Function Library Guide: 10.2.8 structure to array ...<br><br>",
"__structures__<br>",
"Language Guide: 2.5.3 Structures<br><br>",
"__Styles__<br>",
"Function Library Guide: 9.9 Formatting and Styling Tables<br><br>",
"__sub__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__subset__, __subset ignore blanks__, __subset ignore both__, __subset ignore case__, __subset recursive__, __subset recursive ignore blanks__, __subset recursive ignore both__, __subset recursive ignore case__, __Subsets from parameter sets__<br>",
"Function Library Guide: 8.1.9 subset ...<br><br>",
"__substitute__, __substitute all__<br>",
"Function Library Guide: 6.1.3 substitute, substitute all<br><br>",
"__subtraction__<br>",
"Language Guide: 4.3.3.2 Subtractions<br><br>",
"__subtype__<br>",
"Function Library Guide: 4.12 type, subtype<br><br>",
"__Subtypes__<br>",
"Language Guide: 1.2 Basic Data Types<br><br>",
"__sum__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__sum if__, __sum if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__switch__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__Symbols__<br>",
"Language Guide: 1.1.3 Symbols<br><br>",
"__system__<br>",
"Function Library Guide: 12.1.2 system<br><br>",
"__system functions__<br>",
"Function Library Guide: 12 System Functions<br><br>",
"__system variables__<br>",
"Language Guide: 2.3.4 System Variables<br><br>" ],
"Description 21:T" : [
"__tab__<br>",
"Language Guide: 1.1.1.4 Reserved Keywords<br><br>",
"__table access methods__<br>",
"Language Guide: 3.5 Accessing Tables<br><br>",
"__table add missing row__<br>",
"Function Library Guide: 9.3.2.4 table (write or) add missing row<br><br>",
"__table add row__<br>",
"Function Library Guide: 9.3.2.3 table add / write row<br><br>",
"__table all selected rows__<br>",
"Function Library Guide: 9.5.1.4 table selected rows<br><br>",
"__table append__<br>",
"Function Library Guide: 9.3.2.1 table append ...<br><br>",
"__table append blank rows__<br>",
"Function Library Guide: 9.3.2.2 table append blank rows<br><br>",
"__table append on same field__, __table append on same row__<br>",
"Function Library Guide: 9.3.2.1 table append ...<br><br>",
"__table arrange__, __table arrange with spacing__<br>",
"Function Library Guide: 9.8.3.8 table arrange ...<br><br>",
"__table check duplicates__, __table check duplicates ignore blanks__, __table check duplicates ignore blanks selected rows__, __table check duplicates ignore case__, __table check duplicates ignore case selected rows__, __table check duplicates ingore both__, __table check duplicates ingore both selected rows__, __table check duplicates selected rows__<br>",
"Function Library Guide: 9.8.1.3 table check duplicates ...<br><br>",
"__table check header__<br>",
"Function Library Guide: 9.7.1.1 table check header<br><br>",
"__table check headers__, __table check headers silently__<br>",
"Function Library Guide: 9.7.1.3 table check headers ...<br><br>",
"__table check row__<br>",
"Function Library Guide: 9.7.3.8 table check row<br><br>",
"__table clean__<br>",
"Function Library Guide: 9.7.4.14 table clean<br><br>",
"__table clear__<br>",
"Function Library Guide: 9.3.4.1 table clear ...<br><br>",
"__table column number__<br>",
"Function Library Guide: 9.7.1.2 table column number<br><br>",
"__Table columns__, __table columns as function parameters__<br>",
"Language Guide: 6.4.2 Table Columns (Func. Param. Type)<br><br>",
"__table compare__, __table compare ignore blanks__, __table compare ignore both__, __table compare ignore case__<br>",
"Function Library Guide: 9.8.1.1 table compare ...<br><br>",
"__Table comparison reports__<br>",
"Function Library Guide: 9.8.1.1.2 Table Comparison Reports<br><br>",
"__Table comparison strategy__<br>",
"Function Library Guide: 9.8.1.1.1 Table Comparison Strategy<br><br>",
"__Table configuration settings__, __table configure__<br>",
"Function Library Guide: 9.3.1.3 table configure<br><br>",
"__Table console I/O__<br>",
"Function Library Guide: 9.2.1 table list<br><br>",
"__table consolidate__, __table consolidate selected rows__<br>",
"Function Library Guide: 9.7.5.5 table consolidate ...<br><br>",
"__table context__<br>",
"Language Guide: 3.5.5 Partial Table Specifications<br><br>",
"__table copy columns__, __table copy columns selected rows__<br>",
"Function Library Guide: 9.7.2.2 table copy columns ...<br><br>",
"__table copy table__<br>",
"Function Library Guide: 9.7.6.2 table copy table<br><br>",
"__table copy table columns__, __table copy table columns selected rows__<br>",
"Function Library Guide: 9.7.6.4 table copy table columns ...<br><br>",
"__table copy table selected rows__<br>",
"Function Library Guide: 9.7.6.3 table copy/split table selected rows<br><br>",
"__table correct headers__, __table correct headers ignore case__<br>",
"Function Library Guide: 9.7.1.5 table correct headers ...<br><br>",
"__table create__, __table create if not existing__<br>",
"Function Library Guide: 9.3.1.1 table create ...<br><br>",
"__table delete__<br>",
"Function Library Guide: 9.3.4.2 table delete ...<br><br>",
"__table delete all blank columns__, __table delete all empty columns__, __table delete all unnamed columns__, __table delete blank columns__<br>",
"Function Library Guide: 9.7.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table delete blank rows__<br>",
"Function Library Guide: 9.7.3.7 table delete blank rows<br><br>",
"__table delete cells selected columns__<br>",
"Function Library Guide: 9.7.4.12 table delete cells selected columns<br><br>",
"__table delete cells selected rows__<br>",
"Function Library Guide: 9.7.4.11 table delete cells selected rows<br><br>",
"__table delete columns__<br>",
"Function Library Guide: 9.7.2.7 table delete columns<br><br>",
"__table delete empty columns__<br>",
"Function Library Guide: 9.7.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table delete remaining columns__<br>",
"Function Library Guide: 9.7.2.8 table delete remaining columns<br><br>",
"__table delete remaining rows__, __table delete remaining rows if needed__<br>",
"Function Library Guide: 9.7.3.4 table delete remaining rows (if needed)<br><br>",
"__table delete rows__, __table delete rows if needed__<br>",
"Function Library Guide: 9.7.3.3 table delete rows (if needed)<br><br>",
"__table delete selected rows__<br>",
"Function Library Guide: 9.7.3.5 table delete selected rows<br><br>",
"__table delete silently__<br>",
"Function Library Guide: 9.3.4.2 table delete ...<br><br>",
"__table delete unnamed columns__<br>",
"Function Library Guide: 9.7.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table describe__, __table describe ignore case__, __table describe selected rows__, __table describe selected rows ignore case__<br>",
"Function Library Guide: 9.8.2.28 table describe ...<br><br>",
"__table digest__, __table digest ignore case__<br>",
"Function Library Guide: 9.8.2.23 table digest ...<br><br>",
"__table digest smart__, __table digest smart ignore case__<br>",
"Function Library Guide: 9.8.2.24 table digest smart ...<br><br>",
"__table digest with rules__, __table digest with rules ignore case__<br>",
"Function Library Guide: 9.8.2.25 table digest with rules ...<br><br>",
"__table digest with rules ignore case once__, __table digest with rules once__<br>",
"Function Library Guide: 9.8.2.26 table digest with rules once ...<br><br>",
"__table distribute__, __table distribute accumulate__, __table distribute advance__, __table distribute advance accumulate__<br>",
"Function Library Guide: 9.7.5.6 table distribute ...<br><br>",
"__table divide__, __table divide selected rows__<br>",
"Function Library Guide: 9.8.3.7 table divide ...<br><br>",
"__table duplicate columns__<br>",
"Function Library Guide: 9.7.2.3 table duplicate columns<br><br>",
"__table exclude__, __table exclude columns__, __table exclude exclude columns__, __table exclude exclusive columns__, __table exclude extend columns__<br>",
"Function Library Guide: 9.8.3.5 table exclude ...<br><br>",
"__table existing__<br>",
"Function Library Guide: 9.4.2 table existing<br><br>",
"__table expand__<br>",
"Function Library Guide: 9.8.2.15 table expand ...<br><br>",
"__table expand fast__, __table expand fast ignore case__<br>",
"Function Library Guide: 9.8.2.16 table expand fast ...<br><br>",
"__table expand fast smart__, __table expand fast smart ignore case__<br>",
"Function Library Guide: 9.8.2.18 table expand fast smart ...<br><br>",
"__table expand fast with rules__, __table expand fast with rules ignore case__<br>",
"Function Library Guide: 9.8.2.21 table expand fast with rules ...<br><br>",
"__table expand fast with rules ignore case once__, __table expand fast with rules once__<br>",
"Function Library Guide: 9.8.2.22 table expand fast with rules once ...<br><br>",
"__table expand ignore case__<br>",
"Function Library Guide: 9.8.2.15 table expand ...<br><br>",
"__table expand smart__, __table expand smart ignore case__<br>",
"Function Library Guide: 9.8.2.17 table expand smart ...<br><br>",
"__table expand with rules__, __table expand with rules ignore case__<br>",
"Function Library Guide: 9.8.2.19 table expand with rules ...<br><br>",
"__table expand with rules once__, __table expand with rules once ignore case__<br>",
"Function Library Guide: 9.8.2.20 table expand with rules once ...<br><br>",
"__table explore__<br>",
"Function Library Guide: 9.5.2.1 table explore<br><br>",
"__table extract__<br>",
"Function Library Guide: 9.5.2.3 table extract ...<br><br>",
"__table fill horizontally__, __table fill horizontally selected rows__<br>",
"Function Library Guide: 9.7.4.8 table fill horizontally ...<br><br>",
"__table fill vertically__, __table fill vertically selected rows__, __Table filling and substitution functions__<br>",
"Function Library Guide: 9.7.4.7 table fill vertically ...<br><br>",
"__table filter__, __table filter ignore case__<br>",
"Function Library Guide: 9.5.2.2 table filter ...<br><br>",
"__table find row__<br>",
"Function Library Guide: 9.5.1.3 table find row<br><br>",
"__table fit__<br>",
"Function Library Guide: 9.7.4.15 table fit<br><br>",
"__table format numbers__<br>",
"Function Library Guide: 9.7.4.13 table format numbers<br><br>",
"__table functions__<br>",
"Function Library Guide: 9 Table Functions<br><br>",
"__table initialize__<br>",
"Function Library Guide: 9.3.1.2 table initialize<br><br>",
"__table insert above selected rows__<br>",
"Function Library Guide: 9.7.3.2 table insert ... selected rows<br><br>",
"__table insert columns__, __table insert missing columns__<br>",
"Function Library Guide: 9.7.2.1 table insert (missing) columns<br><br>",
"__table insert rows__, __table insert rows if needed__<br>",
"Function Library Guide: 9.7.3.1 table insert rows (if needed)<br><br>",
"__table insert selected rows__<br>",
"Function Library Guide: 9.7.3.2 table insert ... selected rows<br><br>",
"__table integrate__<br>",
"Function Library Guide: 9.8.2.8 table integrate ...<br><br>",
"__table integrate fast__, __table integrate fast ignore case__<br>",
"Function Library Guide: 9.8.2.10 table integrate fast ...<br><br>",
"__table integrate ignore case__<br>",
"Function Library Guide: 9.8.2.8 table integrate ...<br><br>",
"__table integrate once__, __table integrate once ignore case__<br>",
"Function Library Guide: 9.8.2.9 table integrate once ...<br><br>",
"__table integrate smart__, __table integrate smart ignore case__<br>",
"Function Library Guide: 9.8.2.11 table integrate smart ...<br><br>",
"__table integrate smart once__, __table integrate smart once ignore case__<br>",
"Function Library Guide: 9.8.2.12 table integrate smart once ...<br><br>",
"__table integrate top down__, __table integrate top down ignore case__<br>",
"Function Library Guide: 9.8.2.8 table integrate ...<br><br>",
"__table integrate with rules__, __table integrate with rules ignore case__<br>",
"Function Library Guide: 9.8.2.13 table integrate with rules ...<br><br>",
"__table integrate with rules once__, __table integrate with rules once ignore case__<br>",
"Function Library Guide: 9.8.2.14 table integrate with rules once ...<br><br>",
"__Table integration operation identifiers__<br>",
"Function Library Guide: 9.8.2.27 Table Integration Operation Identifiers<br><br>",
"__table intersect__, __table intersect columns__, __table intersect exclusive columns__, __table intersect extend columns__, __table intersect intersect columns__<br>",
"Function Library Guide: 9.8.3.3 table intersect ...<br><br>",
"__table keep columns__, __table keep existing columns__<br>",
"Function Library Guide: 9.7.2.6 table keep ... columns<br><br>",
"__table keep selected rows__<br>",
"Function Library Guide: 9.7.3.6 table keep selected rows<br><br>",
"__table length__<br>",
"Function Library Guide: 9.4.3 table length<br><br>",
"__table lift contents__, __table lift header row__, __table lift headers__<br>",
"Function Library Guide: 9.7.1.6 table lift ...<br><br>",
"__table list__<br>",
"Function Library Guide: 9.2.1 table list<br><br>",
"__table load__<br>",
"Function Library Guide: 9.1.1 table load ...<br><br>",
"__table load excel file__<br>",
"Function Library Guide: 9.1.4 table load excel file<br><br>",
"__table load unchanged__<br>",
"Function Library Guide: 9.1.1 table load ...<br><br>",
"__table lookup__<br>",
"Function Library Guide: 9.8.2.1 table lookup ...<br><br>",
"__table lookup fast__, __table lookup fast ignore case__<br>",
"Function Library Guide: 9.8.2.3 table lookup fast ...<br><br>",
"__table lookup ignore case__<br>",
"Function Library Guide: 9.8.2.1 table lookup ...<br><br>",
"__table lookup once__, __table lookup once ignore case__<br>",
"Function Library Guide: 9.8.2.2 table lookup once ...<br><br>",
"__table lookup smart__, __table lookup smart ignore case__<br>",
"Function Library Guide: 9.8.2.4 table lookup smart ...<br><br>",
"__table lookup smart once__, __table lookup smart once ignore case__<br>",
"Function Library Guide: 9.8.2.5 table lookup smart once ...<br><br>",
"__table lookup top down__, __table lookup top down ignore case__<br>",
"Function Library Guide: 9.8.2.1 table lookup ...<br><br>",
"__table lookup with rules__, __table lookup with rules ignore case__<br>",
"Function Library Guide: 9.8.2.6 table lookup with rules ...<br><br>",
"__table lookup with rules once__, __table lookup with rules once ignore case__<br>",
"Function Library Guide: 9.8.2.7 table lookup with rules once ...<br><br>",
"__table manipulate__, __table manipulate selected rows__<br>",
"Function Library Guide: 9.7.4.6 table manipulate (selected rows)<br><br>",
"__table max width__<br>",
"Function Library Guide: 9.4.5 table min/max width<br><br>",
"__table menu__, __table menu quick__<br>",
"Function Library Guide: 9.2.2 table menu ...<br><br>",
"__table merge__, __table merge exclusive columns__, __table merge extend columns__, __table merge intersect columns__, __table merge subtract columns__<br>",
"Function Library Guide: 9.8.3.1 table merge ...<br><br>",
"__table min width__<br>",
"Function Library Guide: 9.4.5 table min/max width<br><br>",
"__table move rows__<br>",
"Function Library Guide: 9.7.3.9 table move rows<br><br>",
"__table move selected rows__<br>",
"Function Library Guide: 9.7.3.10 table move selected rows<br><br>",
"__table multiply__, __table multiply selected rows__<br>",
"Function Library Guide: 9.8.3.6 table multiply ...<br><br>",
"__Table names__<br>",
"Language Guide: 3.2 Tables - Naming Rules<br><br>",
"__table overlay__, __table overlay columns__, __table overlay exclusive columns__, __table overlay extend columns__, __table overlay intersect columns__<br>",
"Function Library Guide: 9.8.3.2 table overlay/subtract ...<br><br>",
"__table process__<br>",
"Function Library Guide: 9.7.4.1 table process (all) (selected rows)<br><br>",
"__table process all cells__<br>",
"Function Library Guide: 9.7.4.4 table process cells (selected rows)<br><br>",
"__table process all rows__, __table process all selected rows__<br>",
"Function Library Guide: 9.7.4.1 table process (all) (selected rows)<br><br>",
"__table process cells__<br>",
"Function Library Guide: 9.7.4.4 table process cells (selected rows)<br><br>",
"__table process cells in columns__, __table process cells in columns selected rows__<br>",
"Function Library Guide: 9.7.4.5 table process cells in columns (selected rows)<br><br>",
"__table process cells selected rows__<br>",
"Function Library Guide: 9.7.4.4 table process cells (selected rows)<br><br>",
"__table process columns__<br>",
"Function Library Guide: 9.7.4.3 table process (selected) columns<br><br>",
"__table process rows__<br>",
"Function Library Guide: 9.7.4.1 table process (all) (selected rows)<br><br>",
"__table process selected columns__<br>",
"Function Library Guide: 9.7.4.3 table process (selected) columns<br><br>",
"__table process selected rows__<br>",
"Function Library Guide: 9.7.4.1 table process (all) (selected rows)<br><br>",
"__table process selected rows fast__<br>",
"Function Library Guide: 9.7.4.2 table process selected rows fast<br><br>",
"__Table properties__<br>",
"Language Guide: 3.3 Table Properties<br><br>",
"__table rank rows__, __table rank selected rows__<br>",
"Function Library Guide: 9.7.3.13 table rank (selected) rows<br><br>",
"__table read column selected rows__<br>",
"Function Library Guide: 9.3.3.2 table read column selected rows<br><br>",
"__table read row__<br>",
"Function Library Guide: 9.3.3.1 table read row<br><br>",
"__table rearrange columns__, __table rearrange existing columns__<br>",
"Function Library Guide: 9.7.2.5 table rearrange ... columns<br><br>",
"__table rearrange selected rows__<br>",
"Function Library Guide: 9.7.3.11 table rearrange selected rows<br><br>",
"__table references__<br>",
"Language Guide: 3.5 Accessing Tables<br><br>",
"__table rename__<br>",
"Function Library Guide: 9.7.6.1 table rename<br><br>",
"__table rename column headers__, __table rename existing headers__, __table rename headers__<br>",
"Function Library Guide: 9.7.1.4 table rename ... headers<br><br>",
"__table row width__<br>",
"Function Library Guide: 9.4.4 table row width<br><br>",
"__table save__<br>",
"Function Library Guide: 9.1.2 table save ...<br><br>",
"__table save excel file__<br>",
"Function Library Guide: 9.1.5 table save excel file<br><br>",
"__table save multiple__, __table save with decimal comma__, __table save with local decimal separator__<br>",
"Function Library Guide: 9.1.2 table save ...<br><br>",
"__table search__<br>",
"Function Library Guide: 9.5.1.1 table search ...<br><br>",
"__table search header row__<br>",
"Function Library Guide: 9.5.1.6 table search header row<br><br>",
"__table search row__<br>",
"Function Library Guide: 9.5.1.2 table search row<br><br>",
"__table search vertically__<br>",
"Function Library Guide: 9.5.1.1 table search ...<br><br>",
"__table selected column numbers__, __table selected columns__, __table selected headers__<br>",
"Function Library Guide: 9.5.1.5 table selected columns/headers ...<br><br>",
"__table selected rows__<br>",
"Function Library Guide: 9.5.1.4 table selected rows<br><br>",
"__table serialize__, __table serialize all__, __table serialize ignore zero__<br>",
"Function Library Guide: 9.7.5.2 table serialize ...<br><br>",
"__table sort columns__<br>",
"Function Library Guide: 9.7.2.4 table sort columns<br><br>",
"__table sort rows__, __table sort selected rows__<br>",
"Function Library Guide: 9.7.3.12 table sort (selected) rows<br><br>",
"__table split table columns__<br>",
"Function Library Guide: 9.7.6.5 table split table columns ...<br><br>",
"__table split table selected rows__<br>",
"Function Library Guide: 9.7.6.3 table copy/split table selected rows<br><br>",
"__table spread__, __table spread accumulating__<br>",
"Function Library Guide: 9.7.5.3 table spread ...<br><br>",
"__table spread given headers__, __table spread given headers accumulating__<br>",
"Function Library Guide: 9.7.5.4 table spread given headers ...<br><br>",
"__table style auto width__<br>",
"Function Library Guide: 9.9.2.7 table style auto width<br><br>",
"__table style cells__<br>",
"Function Library Guide: 9.9.2.4 table style cells<br><br>",
"__table style columns__<br>",
"Function Library Guide: 9.9.2.3 table style columns<br><br>",
"__table style reset__<br>",
"Function Library Guide: 9.9.3.2 table style reset<br><br>",
"__table style rows__<br>",
"Function Library Guide: 9.9.2.2 table style rows<br><br>",
"__table style table__<br>",
"Function Library Guide: 9.9.2.1 table style table<br><br>",
"__table style theme__<br>",
"Function Library Guide: 9.9.2.8 table style themes (beta)<br><br>",
"__table substitute horizontally__, __table substitute horizontally selected rows__<br>",
"Function Library Guide: 9.7.4.10 table substitute horizontally ...<br><br>",
"__table substitute vertically__, __table substitute vertically selected rows__<br>",
"Function Library Guide: 9.7.4.9 table substitute vertically ...<br><br>",
"__table subtract__, __table subtract columns__, __table subtract exclusive columns__, __table subtract extend columns__, __table subtract subtract columns__<br>",
"Function Library Guide: 9.8.3.4 table subtract ...<br><br>",
"__table transpose__<br>",
"Function Library Guide: 9.7.5.1 table transpose<br><br>",
"__table validate__<br>",
"Function Library Guide: 9.8.1.2 table validate<br><br>",
"__table validate - examples__<br>",
"Function Library Guide: 9.8.1.2.2 table validate - Examples<br><br>",
"__table validate - group results__, __table validate - row results__<br>",
"Function Library Guide: 9.8.1.2.1 table validate - Row and Group Results<br><br>",
"__table view__<br>",
"Function Library Guide: 13.6 table view<br><br>",
"__table write column selected rows__<br>",
"Function Library Guide: 9.3.2.5 table write column selected rows<br><br>",
"__table write or add missing row__<br>",
"Function Library Guide: 9.3.2.4 table (write or) add missing row<br><br>",
"__table write row__<br>",
"Function Library Guide: 9.3.2.3 table add / write row<br><br>",
"__tables__<br>",
"Language Guide: 3 Tables<br><br>",
"__Tables - Example used in the Following Sections__<br>",
"Language Guide: 3.1 Tables - Example File<br><br>",
"__tan__, __tan deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__tanh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__terminal value__<br>",
"Function Library Guide: 5.7.3 tv - Terminal Value<br><br>",
"__Terms and Conditions__<br>",
"User Guide: 2.6 Terms and Conditions<br><br>",
"__Text__<br>",
"Language Guide: 1.1.1 Text<br><br>",
"__text color__<br>",
"Function Library Guide: 3.2.4 text / background color<br><br>",
"__Text composition__<br>",
"Function Library Guide: 3.1.4 compose ...<br><br>",
"__Text from standard input__<br>",
"Function Library Guide: 3.1.5 input<br><br>",
"__text input/output__<br>",
"Function Library Guide: 3.1 Text Input / Output<br><br>",
"__Text inside double quotation marks__<br>",
"Language Guide: 1.1.1.3 Text Inside Double Quotation Marks<br><br>",
"__Text inside single quotation marks__<br>",
"Language Guide: 1.1.1.2 Text Inside Single Quotation Marks<br><br>",
"__text row__<br>",
"Function Library Guide: 6.1.7 text row<br><br>",
"__Text to standard output__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__through-referencing__<br>",
"Language Guide: 2.6.2 Through-Referencing<br><br>",
"__throw__<br>",
"Function Library Guide: 2.5.7 throw<br><br>",
"__time__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>",
"__time and stopwatch functions__<br>",
"Function Library Guide: 7.2 Time and Stopwatch Functions<br><br>",
"__time conversion functions__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>",
"__time functions__<br>",
"Function Library Guide: 7.2 Time and Stopwatch Functions<br><br>",
"__Time Info Functions__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__time inside__<br>",
"Function Library Guide: 7.1.1 date inside, time inside<br><br>",
"__tokenize__<br>",
"Function Library Guide: 6.1.14 tokenize<br><br>",
"__Transaction operator__, __Transaction operators__, __Transactions__<br>",
"Language Guide: 5 Transactions<br><br>",
"__Transactions between tables__<br>",
"Language Guide: 5.1.4 Transactions between Tables<br><br>",
"__Transactions between variables__<br>",
"Language Guide: 5.1.1 Transactions between Variables<br><br>",
"__Transactions from tables to variables__<br>",
"Language Guide: 5.1.2 Transactions from Tables to Variables<br><br>",
"__Transactions from variables to tables__<br>",
"Language Guide: 5.1.3 Transactions from Variables to Tables<br><br>",
"__Transactions with ADD assignment operator__<br>",
"Language Guide: 5.4 &#43; Transaction Assignment Operators<br><br>",
"__Transactions with AND assignment operator__<br>",
"Language Guide: 5.2 &amp; Transaction Assignment Operators<br><br>",
"__Transactions with OR assignment operator__<br>",
"Language Guide: 5.3 &vert; Transaction Assignment Operators<br><br>",
"__transcendental functions__<br>",
"Function Library Guide: 5.2 Transcendental Functions<br><br>",
"__Translate applied style to target file format__, __translate style attributes for excel__, __translate style attributes for excel xml 2003__, __translate style attributes for html__<br>",
"Function Library Guide: 9.9.3.1 translate style attributes ...<br><br>",
"__transpose__, __transpose matrix__<br>",
"Function Library Guide: 5.4.9 transpose<br><br>",
"__Transpose tables__<br>",
"Function Library Guide: 9.7.5.1 table transpose<br><br>",
"__trigonometric functions__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__trim__<br>",
"Function Library Guide: 6.1.12 trim ... (string function)<br><br>",
"__trim__<br>",
"Function Library Guide: 8.1.7 trim ... (parameter set function)<br><br>",
"__trim all__<br>",
"Function Library Guide: 6.1.12 trim ... (string function)<br><br>",
"__trim [parameter set function]__<br>",
"Function Library Guide: 8.1.7 trim ... (parameter set function)<br><br>",
"__trim [string function]__<br>",
"Function Library Guide: 6.1.12 trim ... (string function)<br><br>",
"__tv__<br>",
"Function Library Guide: 5.7.3 tv - Terminal Value<br><br>",
"__Two parameter passing methods for series functions__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__type__<br>",
"Function Library Guide: 4.12 type, subtype<br><br>",
"__type conversion__, __Type Conversion Functions__<br>",
"Function Library Guide: 4 Type Conversion and Formatting<br><br>",
"__Types__<br>",
"Language Guide: 1.2 Basic Data Types<br><br>",
"__Typical Workflow__<br>",
"User Guide: 5 Typical Workflow<br><br>" ],
"Description 22:U" : [
"__unary operators__<br>",
"Language Guide: 4.3.1 Unary Operators<br><br>",
"__underscore__<br>",
"Function Library Guide: 3.2.9 underscore<br><br>",
"__unless__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__until__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>",
"__Updates and Upgrades__<br>",
"User Guide: 2.4 Updates and Upgrades<br><br>",
"__Use case - Analyzing Stock Data__<br>",
"Master Document: 2.1 Analyzing Stock Data<br><br>",
"__Use case - Comparing Bills of Material__<br>",
"Master Document: 2.2 Comparing Bills of Material<br><br>",
"__Use case - Different data from different sources__<br>",
"Master Document: 2.3 Different data from different sources<br><br>",
"__Use case - Machine to Machine Data Transfer__<br>",
"Master Document: 2.4 Machine to Machine Data Transfer<br><br>",
"__Use cases__<br>",
"Master Document: 2 Use Cases<br><br>",
"__user function existing__<br>",
"Function Library Guide: 2.3.5 function / user function existing<br><br>",
"__user functions__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__User Guide__<br>",
"User Guide: 1 B4P Analytics Engine - User Guide<br><br>",
"__User initialization program__<br>",
"User Guide: 3.5.4 User Initialization Program<br><br>",
"__user parameter types__<br>",
"Function Library Guide: 2.3.3 Parameter Types in User-Defined Functions<br><br>",
"__user procedures__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__user-defined function__<br>",
"Function Library Guide: 2.3.1 define procedure / function<br><br>",
"__user-defined functions__, __user-defined procedures__, __User-defined procedures and functions__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__User-specific colors__<br>",
"Function Library Guide: 9.9.1 Defining User Specific Colors<br><br>" ],
"Description 23:V" : [
"__Validate and Explore__<br>",
"User Guide: 5.3 C - Validate<br><br>",
"__Validation functions__<br>",
"Function Library Guide: 9.8.1.2 table validate<br><br>",
"__value ranges__<br>",
"Language Guide: 4.3.4 Comparison Operators<br><br>",
"__Values__<br>",
"Language Guide: 1.1 Basics<br><br>",
"__Variable__<br>",
"Language Guide: 2 Variables<br><br>",
"__Variable attributes__<br>",
"Language Guide: 2.4 Variable Attributes<br><br>",
"__Variable forms__<br>",
"Language Guide: 2.5 Variable Forms and Trees<br><br>",
"__variable load__<br>",
"Function Library Guide: 10.3.1 variable load ...<br><br>",
"__Variable names__<br>",
"Language Guide: 2.1 Variables - Naming Rules<br><br>",
"__variable protection__, __variable protections__<br>",
"Language Guide: 2.7 Protecting Variables<br><br>",
"__variable references__<br>",
"Language Guide: 2.6 References to Variables<br><br>",
"__Variable references functions__<br>",
"Function Library Guide: 10.4 Variable References Functions<br><br>",
"__variable save__<br>",
"Function Library Guide: 10.3.3 variable save ...<br><br>",
"__Variable scopes__<br>",
"Language Guide: 2.3 Variable Scopes<br><br>",
"__variable to json__<br>",
"Function Library Guide: 10.3.4 variable to json ...<br><br>",
"__variable view__<br>",
"Function Library Guide: 13.7 variable view<br><br>",
"__Variables__<br>",
"Language Guide: 2 Variables<br><br>",
"__variables functions__<br>",
"Function Library Guide: 10 Variables Functions<br><br>",
"__Variables [func params]__<br>",
"Language Guide: 6.4.3.3 Variables (func. params)<br><br>",
"__variance__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance if__, __variance if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__variance ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance ignore blanks if__, __variance ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__variance ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance ignore zero if__, __variance ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__verbose__, __verbose levels__<br>",
"Language Guide: 1.5.2 Verbose Levels<br><br>",
"__vertical__<br>",
"Function Library Guide: 5.4.6 vertical<br><br>",
"__vertical table access__<br>",
"Language Guide: 3.5.3 Vertical Table Access<br><br>",
"__Vertical table access using parameter sets__<br>",
"Language Guide: 3.5.3.1 Vertical Table Access w. Param. Sets<br><br>",
"__Vertical table access using ranges__<br>",
"Language Guide: 3.5.3.3 Vertical Table Access w. Ranges<br><br>",
"__Vertical table access using wildcards__<br>",
"Language Guide: 3.5.3.2 Vertical Table Access w. Wildcards<br><br>",
"__vertical table accesses__<br>",
"Language Guide: 3.5.3 Vertical Table Access<br><br>",
"__view__<br>",
"Function Library Guide: 13.8 view<br><br>",
"__View directory listings__<br>",
"User Guide: 4.8 View Directory Listings<br><br>",
"__view reset__<br>",
"Function Library Guide: 13.9 view reset<br><br>",
"__View Tables Interactively__<br>",
"User Guide: 4.9 View Tables Interactively<br><br>",
"__View variables interactively__<br>",
"User Guide: 4.10 View Variables Interactively<br><br>",
"__void to string conversion and formatting__, __Void to String Formatting Parameters__<br>",
"Function Library Guide: 4.1.2 Void to String Formatting<br><br>" ],
"Description 24:W" : [
"__wait__, __wait countdown__<br>",
"Function Library Guide: 7.3.4 wait, wait countdown<br><br>",
"__wait until__, __wait until countdown__<br>",
"Function Library Guide: 7.3.3 wait until, wait until countdown<br><br>",
"__watch continue__, __watch read__, __watch reset__, __watch start__, __watch stop__<br>",
"Function Library Guide: 7.2.2 Stopwatch Functions<br><br>",
"__weaken color__<br>",
"Function Library Guide: 9.9.1.6 weaken color<br><br>",
"__weaken colors__<br>",
"Function Library Guide: 9.9.1.9 weaken colors<br><br>",
"__week__<br>",
"Function Library Guide: 7.1.6 week<br><br>",
"__weekday__, __weekday from date__<br>",
"Function Library Guide: 7.1.5 weekday<br><br>",
"__weight__, __weight profile__<br>",
"Function Library Guide: 10.2.6 weight, weight profile<br><br>",
"__while__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>",
"__whole__, __whole numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__width__<br>",
"Function Library Guide: 6.1.5 width<br><br>",
"__wildcard symbols__, __wildcards__<br>",
"Language Guide: 4.3.5.1 Wildcards<br><br>",
"__Windows - Batch Installation__<br>",
"User Guide: 2.1.4 Windows - Batch Installation<br><br>",
"__Windows Download__<br>",
"User Guide: 2.1.2 Windows - Download<br><br>",
"__Windows Installation__<br>",
"User Guide: 2.1.3 Windows - Installation<br><br>",
"__Windows Prerequisites__<br>",
"User Guide: 2.1.1 Windows - Prerequisites<br><br>",
"__with table__<br>",
"Function Library Guide: 9.6.1 with table<br><br>",
"__without adding rows__<br>",
"Function Library Guide: 9.8.3.2 table overlay/subtract ...<br><br>",
"__Without Transaction Assignment Operators__<br>",
"Language Guide: 5.1 Without Transaction Assignment Operators<br><br>",
"__working directory__<br>",
"Function Library Guide: 11.1.3 working directory<br><br>",
"__write access__, __write access repeat if locked__<br>",
"Function Library Guide: 11.1.2 read access ..., write access ...<br><br>",
"__Writing tables__<br>",
"Function Library Guide: 9.3.2.1 table append ...<br><br>" ],
"Description 25:X" : [
"__xnor__, __xor__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>" ],
"Description 26:Y" : [
"__year__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>" ],
"Description 27:Z" : [
"__zebra__<br>",
"Function Library Guide: 5.1.3 zebra<br><br>",
"__zero members__<br>",
"Language Guide: 2.5.4 Zero Members Variables<br><br>",
"__zip compress__<br>",
"Function Library Guide: 11.4.1 zip compress<br><br>",
"__zip extract all__<br>",
"Function Library Guide: 11.4.3 zip extract all<br><br>",
"__zip extract files__<br>",
"Function Library Guide: 11.4.2 zip extract files<br><br>" ],
"Description 28:[" : [
"__[This is a user-defined function you need to create]__<br>",
"Function Library Guide: 9.8.1.1.3 Change Indication Function<br><br>"
 ]

}
}
