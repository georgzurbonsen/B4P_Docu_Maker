
{

  "Basic Data Types" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types" ],
    "Keywords":			[ "data types", "basic data types" ],
"Description 01:Basic Data Types" : [
"",
"	Beyond4P supports six basic data types as listed below.  These data types are supported by all __variables__ and expressions.",
"	Regarding variables, Beyond4P uses the <i>dynamic weak typing</i>rule where the data type can be freely changed with any ",
"	new assignment unless specific __variable protections__ have been applied.",
"",
"	=== 150, 500, 350, noframe_1stcolbold",
"	Data Type | Description | Example",
"	__Literals__ | Text (alphanumeric string) data in true UNICODE format | Hello World, ' Hello  World '",
"	__Numerals__ | Numeric values (double precision floating point), stored with or without literal presentation of number received | 1.234",
"	__Dates__    | Can be a full date, a full date combined with time of day (down to seconds), time of day only, or blank date | date(\"2020-07-14\"), date(now)",
"	__Booleans__ | Binary values | true, false",
"	__Voids__    | Represenation of null or invalid information. Should be avoided. |",
"	__Parameter sets__ | Combination of any number of elements of any data type described here (including parameter sets as subsets) into sets | { A, true, 1, {4, 5}, \"Hi!\" }",
"	===",
""
 ]
	
  },


  "Literals" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types literals" ],
    "Keywords":			[ "literal", "literals", "softquoted literal", "softquoted literals", "quoted literal", "quoted literals", "unquoted literal", "unquoted literals" ],
"Description 01:Literals" : [
"",
"	Literals are text representations (also known as strings) consisting of 0, 1 or any number of true UNICODE characters.",
"	The number of characters per literal is only limited by the overall available free memory in the system.",
"",
"	Beyond4P distinguishes among three different sub-types of literals:",
"",
"	=== 20, 500, noframe_1stcolbold, noheader",
"	1. | (Unquoted) literals",
"	2. | Softquoted literals",
"	3. | Quoted literals",
"	===",
"",
"	In the Beyond4P code text, the entire literal must be located in one line.",
""
 ]
	,

"Description 02:(Unquoted) Literals" : [
"",
"	Unlike in most other common programming languages, all text expressions without use of quotation marks in the Beyond4P code are treated",
"	as unquoted literals and not as variable and expression names. Every unquoted literal begins with the first non-blank symbol (i.e. all letters, non-ANSI",
"	symbols such as foreign letters, numeric digits and special symbols not used by the Beyond4P language (e.g. @).  Unquoted literals may contain blanks",
"	(spaces, tabs), but they intepreted as 1 space.  Literals containing numeric digits (with with or without decimal point) but no other symbols and blanks",
"	are regarded as __numerals__.  Unqoted literals ignore leading and trailing blanks.",
"	<br><br>",
"	Literals may take any legitimate value, except for __reserved keywords__ which are interpreted differently (e.g. true, false, else).",
""
 ]
	,
"Examples 02:" : [
"	echo(Hello World);",
"	echo(  Hello   World   ); // To include the blanks, use quotation marks.",
"	echo(Hello World, new line, Hello Folks, new line); // 'new line' is a reserved keyword.",
"	echo( 31.12.2021 );       // No automatic conversion to __date__ type.  Use: echo(date( 31.12.2021 ))",
"	echo( 100 Flowers );",
"	echo( mike@example.com ); // No need include quotation marks because the @-sign is not a Beyond4P symbol",
"	echo( 1 2 3 );            // Is a literal because of spaces between teh digits",
"	echo( type( 1 2 3 ));"
 ]
	,
    "Output 02:This is the output":		"automatic",

"Description 03:Softquoted Literals" : [
"",
"	Softquoted literals are literals placed in <u>single quotation marks</u> (example: '123', 'true', '  Hello World').  Any contents inside single quotation marks",
"	are part of softquoted literals, including leading and trailing blanks.  __Entities__ (known in HTML, for exmaple &amp;euro;) will be decoded automatically",
"	(example: &euro;).  When using softquoted literals on the right hand of comparisons, then __wildcard symbols__ are supported in order to do smart",
"	string comparisons.",
""
 ]
	,
"Examples 03:" : [
"	echo('  Hello   World   ', new line, 'new line'); ",
"	echo(Hello World = 'Hell*'); // Example with wildcard symbol meaning 'true if beginning with Hell'",
"	echo('&euro;');",
"	echo( length('&euro;') );"
 ]
	,
    "Output 03:":		"automatic",



"Description 04:Quoted Literals" : [
"",
"	Quoted literals are literals placed in <u>double quotation marks</u> (example: \"123\", \"true\", \"  Hello World\").  Any contents inside single quotation marks",
"	are part of softquoted literals, including leading and trailing blanks.  Entities will not be decoded.  If you still need to decode entities, then use the",
"	function __decode entitites(__).  In comparison operations, the contents are interpreted as given, i.e. wildcard symbol interpretation will not happen.",
""
 ]
	,
"Examples 04:" : [
"	echo(\"  Hello   World   \", new line, 'new line'); ",
"	echo(\"&amp;\");",
"	echo(Hello World = \"Hell*\"); // 'Hello World' is not the same as 'Hell*'"
 ]
	,
    "Output 04:":		"automatic",


"Description 05:Summary" : [
"",
"	=== 400, 200, 200, 200, simple",
"	Item | (Unquoted) literal | Softquoted literal | Quoted literal",
"	Representation in Beyond4P code text		| Alphanumeric contents | Alphanumeric contents in single quotation marks	| Alphanumeric contents in double quotation marks",
"	Resolving entities in Beyond4P code text	| No			| Yes							| No",
"	Wildcard symbols used for comparisons		| No			| Yes							| No",
"	Leading and trailing white spaces		| No			| Yes							| Yes",
"	Multiple consecutive white spaces		| No			| Yes							| Yes",
"	Line breaks in literal values			| No (use 'new line')	| No (use 'new line')					| No (use 'new line')",
"	===",
""
 ]
	

  },



  "Literals - Indexing" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "literals indexing" ],
    "Keywords":			[ "literals indexing", "length of literals" ],
"Description 01:Literals - Simple Indexing" : [
"",
"	<i>Simple indexing</i> is used to retrieve single characters from the literal.  Indexing begins with 0 which refers to the 1st",
"	character.  The index value is specified in braces and shall not be confused with a parameter set as such.",
"",
"	<br><br>",
"	Following rules apply to the indexing literals:",
"	* The index must always be a numeric value.",
"	* Specifying just braces {} without an index will retrieve the length (character count) of the literal.  Alternatively, use __length [string function]__.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.",
"	* __Negative indexing__ is supported. -1 refers to the last character in the literal. -2, -3, etc. refer to the previous ones, and so forth.",
"	* Empty sets are returned when accessing with index values which lie out of bounds.  Example: <b>{a,b,c}{5}</b> returnss <b>{}</b> (empty set).",
"	* Updating individual elements on the left hand side of assignments is not possible.  Wrong exmaple: <b>a[]{3} = 'E';</b>.",
"",
"" ],
"Examples 01:" : [
"	echo( abcde {} );     // Returns 5 (character count)",
"	echo( abcde, {0} );   // Access the 1st element",
"	echo( abcde, {-2} );  // Access the 2nd last element",
"	echo( abcde, {10} );  // Attempts to access characters outside the string returns blank literals.",
"	echo( abcde, {-10} ); // Same case here."
 ]
	,

    "Output 01:Output:":		"automatic"

  },



  "Literals - Extracting Substrings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types literals extracting substrings" ],
    "Keywords":			[ "literals extracting substrings" ],


"Description 01:Literals - Extracting Substrings" : [
"",
"	Instead of specifying single index values to retrieve single characters, substrings can be retrieved by listing muliple values and/or ranges.",
"	The range operator '..' is available to specify a range.  The result will always be a literal.",
"" ],
"Examples 01:" : [
"	echo( abcdefg { 0,2,4,2,0 } );    // Returns 'aceca'",
"	echo( abcdefg { 3..5 } );         // Returns 'def'",
"	echo( abcdefg { 5..3 } );         // Empty string.  Ranges cannot be listed in reverse direction",
"	echo( abcdefg { -3..-1 } );       // Returns 'efg' - Last 3 characters",
"	echo( abcdefg { 4..-1 } );        // Same result",
"	echo( abcdefg { 3..99 } );        // Returns 'defg'",
"	echo( abcdefg { -99..2 } );       // Returns 'abc'",
"	echo( abcdefg { 0..2,5,1..3 } );  // Combinations"
 ]
	,

    "Output 01:":		"automatic"
  },




  "Numerals" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types numerals" ],
    "Keywords":			[ "numeral", "numerals", "plain numeral", "plain numerals"  ],
"Description 01:Numerals" : [
"",
"	Numerals are numeric data representations which are internally handled as double precision floating point numbers.",
"	The same type is used for typical integer use (for example a loop index counting upwards, referencing a row number to the table) and",
"	advanced mathematical use.",
"",
"	Beyond4P distinguishes between two different sub-types of numerals:",
"",
"	=== 20, 500, noframe_1stcolbold, noheader",
"	1. | (Regular) Numerals",
"	2. | Plain Numerals",
"	===",
""
 ]
	,

"Description 02:(Regular) Numerals" : [
"",
"	All numbers directly expressed in the Beyond4P program text or read in from files or tables as well as command line parameters are",
"	considered (regular) numerals.  The original text representation describing the numeral will be preserved in addition to the numeric",
"	value internally handled as double precision floating point values.  The text representation can be used later for output purposes as",
"	long the numerals have not been manipulated.",
"	<br><br>",
"	Such manipulations include any form of arithmetics (e.g. additions, negations) or processing them with functions (e.g. __abs__() ) to",
"	calculate the absolute value.  Even adding a 0 or multiplying a 1 to a value voids the text representation and the numeral turns into",
"	a plain numeral.",
"	<br><br>",
"	Negative numbers must begin with minus signs.  Decimal points are assumed regardless of regional settings enabled.  Functions are available",
"	to accept alternative symbols such as decimal commas when reading tables.  Thousand separators are supported.  Use functions like",
"	__clean numeral__() and __smart numeral__() to precondition the numeric values in case they contain wrong decimal separators,",
"	unnecessary thousand separators and commercial variants of negation such as parentheses. ",
""
 ]
	,

"Description 03:Plain Numerals" : [
"",
"	Numerals turn into plain numerals with original text representation voided."
 ]
	,


"Examples 03:" : [
"	echo(012.340);		// Numeral",
"	echo(type detailed(012.340), new line);",
"	echo(012.340 + 0);	// Plain numeral - Original text representation is lost",
"	echo(type detailed(012.340 + 0));",
"	echo(numeral(012.340));	// Also plain numeral"
 ]
	,
    "Output 03:":		"automatic",



"Description 04:Scientific Notation" : [
"",
"	The Beyond4P code text does not support scientific notation, e.g. 1.2E+3 would assert a syntax error.  However, the function __numeral()__",
"	supports scientific notation.  However, scientific notation is supporte in reading values from tables (provided the __system variable__ ",
"	<b>table conversion[scientific]</b> is set to true, JSON files and user input."
 ]
	,

"Examples 04:" : [
"	echo(numeral(\"1.2E+03\"));"
 ]
	,

    "Output 04:":		"automatic"

  },


  "Dates" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types dates" ],
    "Keywords":			[ "date", "dates", "plain date", "plain dates"  ],
"Description 01:Dates" : [
"",
"",
"	This data type can store pure dates (beginning 1990-01-01), time of day (down to the second), combination of both date and time of day, or <i>no date</i> which ",
"	is a blank value neither containing dates or times, referred to as 'blank date'.",
"",
"	Beyond4P distinguishes between two different sub-types of numerals:",
"",
"	=== 20, 500, noframe_1stcolbold, noheader",
"	1. | (Regular) Dates",
"	2. | Plain Dates",
"	===",
""
 ]
	,


"Description 02:(Regular) Dates" : [
"",
"	Regular dates contain the digital date (and/or time of day) along the original text representation provided.  This sub-type applies only in a few cases",
"	which includes accessing dates from tables (if enabled with the system variable table conversion[date] = true, otherwise the date is read in as a literal),",
"        or the __date(__) function is used with a formatting parameter added.  The text representation can be used later for output purposes as",
"	long the dates and times have not been manipulated.",
"	<br><br>",
"	Such manipulations include any form of arithmetics (e.g. adding a day (+1) or hour (+1/24) ) or processing them with functions such as __reschedule(__).",
"	Even adding a 0 (0 days) to the date voids the text representation and the date turns into a plain date.",
"	<br><br>",
"	"
 ]
	,

"Description 03:Plain Dates" : [
"",
"	This is the simpler case.  Plain dates contain the digital date (and/or time of day) without any associateid text representation.",
"	The easiest way to describe a date or time value is using one of the following functions:",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Function name 	| Description",
"	__date(__)    	| Depending on the literal value provided, it returns a date, date and time, time only, or blank date.",
"	__pure date(__) | Works like date, but ignores any time of day information.  Output is either a date or blank date.",
"	__date time(__) | Works like date.  If input is not a blank, and if no time of day is provided, then 00:00:00 (midnight) is assumed as time of day.",
"	__time(__)	| This function will only use the time information.  If the paramter contains a date only, then a blank date wil be returned.",
"	===	",
"",
"	Dates turn into plain dates with original text representation voided."
 ]
	,



"Examples 03:" : [
"	d1[] = \"14. July 2021\";",
"	d2[] = \"now\";",
"	d3[] = \"20:15:00\";",
"	d4[] = \"\"; // Blank date",
"	",
"	echo(\"date     (): \", date(d1[]), \", \", date(d2[]), \", \",date(d3[]), \", \",date(d4[]), \", \", type detailed(date(d1[])) );",
"	echo(\"time     (): \", time(d1[]), \", \", time(d2[]), \", \",time(d3[]), \", \",time(d4[]), \", \", type detailed(time(d1[])) );",
"	echo(\"pure date(): \", pure date(d1[]), \", \", pure date(d2[]), \", \",pure date(d3[]), \", \",pure date(d4[]), \", \", ",
"			type detailed(pure date(d1[])) );",
"	echo(\"date time(): \", date time(d1[]), \", \", date time(d2[]), \", \",date time(d3[]), \", \",date time(d4[]), \", \", ",
"			type detailed(date time(d1[])) );",
"",
"	echo;",
"	echo(date(\"31. March 2021\"), \" / \", type detailed(date(\"31. Dezember 2021\")) );",
"	echo(date(\"2020 / 12 / 31 15:00\")+1);		// Date and time",
"	echo(date time(\"2020-12-31\"));			// Add a time (default 00:00:00)",
"	echo(time(\"2020-12-31 15:00\"));			// Time",
"	echo(time(\"2020-12-31 15:00\")+1/24);		// Time, 1 hour later",
"	echo(pure date(\"31. Dezember 2021\")+1);		// Numeral"
 ]
	,
    "Output 03:":		"automatic"



  },



  "Booleans" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types booleans" ],
    "Keywords":			[ "boolean", "booleans"  ],
"Description 01:Voids" : [
"",
"	The boolean data type takes two values: <i>true</i> and <i>false</i>.  Both values are reserved Beyond4P keywords. ",
"	In Beyond4P, the values must be specified in lower case letters and without quotation marks. ",
"",
"" ],
"Examples 01:" : [
"	echo(true, \" / \", type(true));        // Boolean true",
"	echo(True, \" / \", type(True));        // This is a literal value (T is upper case.)",
"	echo(5 > 6, \" / \", type(5 > 6));      // Boolean false "
 ]
	,

    "Output 01:":		"automatic"

  },





  "Voids" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types voids" ],
    "Keywords":			[ "void", "voids"  ],
"Description 01:Voids" : [
"",
"	The void data type typically indicates an invalid value returned from a function or a variable with undefined values.",
"	The following table lists few approaches how to obtain a void value intentionally.",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Method	 		| Description",
"	__null(__)    		| Call the null function",
"	Undefined array member	| Create an array implicity, e.g. by assigning a[1] = 1;  Read-accessing a[0] will return <i>void</i>",
"	Reading JSON data	| Intermediate nodes carry no values and are <i>void</i>.  End nodes with value 'null' are also interpreted as <i>void</i>.",
"	===	"
 ]
	,

"Examples 01:" : [
"	a[1] = 1;",
"	echo( a[0] );",
"	echo( null() );",
"	echo( type(null()) );"
 ]
	,

    "Output 01:":		"automatic"

  },



  "Parameter sets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets" ],
    "Keywords":			[ "parameter set", "parameter sets"  ],
"Description 01:Parameter Sets" : [
"",
"	Parameter sets is be considered as the sixth Basic Data Type which allows to hold 0, 1 or more elements.",
"	Each element is again a value of any of the six Data Types, including nested parameter sets.",
"",
"	In the program code, sets can be defined with any number of values or expressions inside braces { } and separated with commas. ",
"",
"	=== 300, 700, noframe_1stcolbold, noheader",
"	Number of elements	| At least zero (empty set)",
"	Empty sets		| Empty parameter sets { }are not the same as blank or void values",
"	Mixed data types	| A parameter set may contain data of different types, e.g. { 1, Abc, true, date(31.12.2020) }",
"	Nesting			| Parameter sets support nesting, e.g. { { 1, 2 }, { 3, 4 }, 5 }",
"	Nested empty sets	| Nested empty sets are allowed.  E.g. { {} } is not the same as { } or { { {} } }.",
"	Sequence of elements	| The sequence of elements is preserved, i.e. {a,b,c,d} and {d,c,b,a} are different.<br>Comparing them with '=' returns true (ordering does not care), but with '==' returns false (elements must be in same order).",
"	Mulitple identical elements | Parameter sets may contain multiple identical elements, e.g. { a, b, a, a, c, c }.  You can use the __trim(__) function to eliminate duplicates.",
"	Protection		| In contrast to variable array members and structure members, parameter sets provide no dedicated protection rules.",
"	Embedding		| A paramter set can be embedded into another parameter set, e.g. a[] = {1,2}; b[] = {a[]};",
"	__Parameter Set Indexing__	| One element can be extracted by indexing.  1st element begins wtih 0. Example:  a[] = {a,b,c,d}{1}; Here, the 1st element is accessed, a[] gets value 'b'.",
"	__Negative indexing__	| Negative indexing supported here. a[] = { a,b,c,d,e }{-2} assigns 'd' to a[].",
"	__Extracting subsets__	| Specify multiple index values and ranges to extract subsets.",
"	Arithmetics		| A broad range of arithmetic operators are available to manipulate parameter sets.",
"	===	"
 ]
	,

"Examples 01:" : [
"	a[] = { 1, a, 2, {b,c}, true, date(today) };",
"	echo( a[], \" / \", type(a[]) );",
"	echo( \"First element: \", a[]{0}, \" and last element: \", a[]{1} );"
 ]
	,

    "Output 01:":		"automatic"

  },


  "Parameter sets - Indexing" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets indexing" ],
    "Keywords":			[ "parameter set indexing", "length of parameter sets" ],
"Description 01:Parameter Sets - Simple Indexing" : [
"",
"	<i>Simple indexing</i> is used to retrieve single elements from the parameter set.  Indexing begins with 0 which refers to the 1st",
"	parameter set element.  The index value is specified in braces and shall not be confused with a parameter set as such.",
"	<i>Cascaded indexing</i> for retrieving elements from nested parameter sets is also supported. ",
"",
"	<br><br>",
"	Following rules apply to the indexing parameter sets:",
"	* The index must always be a numeric value.",
"	* Specifying just braces {} without an index will retrieve number of elements (nested elements count 1) of the parameter set.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.",
"	* __Negative indexing__ is supported. -1 refers to the last element. -2, -3, etc. refer to the previous elements.",
"	* Blanks are returned when accessing with index values which lie out of bounds.  Example: <b>Hello{5}</b> returns a blank value.",
"	* Updating individual characters on the left hand side of assignments not possible.  Exmaple: <b>a[]{3} = 123;</b>",
"",
"" ],
"Examples 01:" : [
"	echo( { a,b,c,d      } {0} );                     // Access the 1st element",
"	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]",
"	echo( \"Last element            : \", a[]{-1} );    // Retrieve the last element",
"	echo( \"Next element to the left: \", a[]{-2} );    // Retrieve the 2nd last element",
"	echo( \"Cascaded indexing       : \", a[]{3}{2} );  // retrieve 3rd element, and inside the subset the 2nd element (cascaded indexing)",
"	echo( \"# elements in           : \", a[]{} );      // Number of elements",
"	echo( \"# elements in nested set: \", a[]{-2}{} );  // Number of elements in subset (cascaded indexing)",
"	echo( \"Out of bounds case      : \", a[]{99} );    // Empty is returned if index lies out of bounds"
 ]
	,

    "Output 01:":		"automatic",

"Description 02:Parameter Sets - Simple Indexing in Write Accesses" : [
"",
"	<i>Simple indexing</i> also works with write accesses in assignments.  The target variable must contain an existing parameter set.  Values of other types",
"	are not allowed and will cause error messages.  Any data type may be assigned. For example, a numeric element can be replaced by a literal or parameter set",
"	(a subset).  Using multiple indexes as allowed for read accesses is not possible (e.g. [a]{1,2} = {A,B};).",
"" ],
"Examples 02:" : [
"	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]",
"	a[]{1} = B;",
"	a[]{-1} = {G,H,I};",
"	echo( \"Modified value in a[] = \", a[] );"
 ]
	,

    "Output 02:":		"automatic"

  },




  "Parameter sets - Extracting Subsets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets extracting subsets" ],
    "Keywords":			[ "parameter sets extracting subsets" ],


"Description 01:Parameter Sets - Extracting Subsets" : [
"",
"	Instead of specifying single index values to retrieve single elements, subsets can be retrieved by listing muliple values and/or ranges.",
"	The range operator '..' is available to specify a range.  The result will always be returned in a parameter set, even if the subset",
"	specified results in just one element.",
"" ],
"Examples 01:" : [
"	a[] = { a,b,c, {d,e,f}, g };                          // Assign a parameter set to variable a[]",
"	echo( \"4 elements              : \", a[]{3,1,2,1} );   // Retrieves 4 elements (2 of them repeating here)",
"	echo( \"2nd to 2nd last         : \", a[]{1..3} );      // Use a range",
"	echo( \"2nd to 2nd last         : \", a[]{1..-2} );     // Same output",
"	echo( \"2nd to 2nd last         : \", a[]{-4..3} );     // Same output (-4 = 4th last or 2nd element)",
"	echo( \"1st element             : \", a[]{0..0} );      // Return 1st element, but in a subset and not alone",
"	echo( \"Combinations            : \", a[]{2..4,1} );    // Combination of simple values and ranges"
 ]
	,

    "Output 01:":		"automatic"
  },



  "Parameter sets - Value Ranges" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value ranges" ],
    "Keywords":			[ "parameter set value ranges"],
"Description 01:Parameter Sets - Simple Values" : [
"",
"	Simple parameter set values are 0, 1 or more values of any types, regardless if values, variables, expressions or subsets, embedded inside braces",
"	and separated with commas. Example:  {} (empty set),  { 1, a, {} } (contains 2 values and nested a empty set), and { {1,2},{3,4} } describing a",
"	nested parameter set which looks like a 2-dimensional matrix and can be used as such."
 ]
	,


"Description 02:Parameter Sets - Value Ranges (Numerals)" : [
"",
" 	Simple parameter sets become cumbersome when describing a sequence of incrementing values, e.g. { 1,2,3,4,5,6,7,8,9,10 }, especially much bigger",
"	ones.  One way to do this is with a loop, but is cumbersome.  Alternatively, value ranges can be specified.  A range consists of a starting value",
"	and an ending value with '..' inbetween, e.g. { 1..10 }.  The increment is 1, unless a <i>second value</i> in the middle is specified, e.g. { 2..4..10 }",
"	to describe the 2nd value.  It may be bigger (for counting up), smaller (for counting down), but not equal to the 1st value (error message occurs).",
"",
"	<br><br>",
"	A mixup of numerals and other types inside a range specification is invalid."
 ]
	,

"Examples 02:" : [
"	print(\"Start with the classic way : \");",
"	a[] = {};",
"	for (i[]=1, i[]<=10, i[]++) a[] += {i[]};",
"	echo(a[]);",
"",
"	echo(\"And the easy way           : \", {1 .. 10});",
"	echo(\"Steps of 2.5               : \", {1 .. 3.5 .. 10});",
"	echo(\"Steps of -1: Right way     : \", {10 .. 9 .. 1});",
"	echo(\"Steps of -1: Wrong way     : \", {10 .. 1}); // Returns empty set",
"	echo(\"Combination of 2 ranges    : \", {2..4..10, 20..40..100} );",
"	echo(\"Build a 3x3 matrix         : \", {{11..13},{21..23},{31..33}} );"
 ]
	,

    "Output 02:":		"automatic",


"Description 03:Parameter Sets - Value Ranges (Literals)" : [
"",
"	Value ranges are also supported for literals.  The literal values may consist of one or more characters.  The intial value, optionally <i>second value</i>",
"	and final values must contain literals with same number of characters and <u>only one character in the same position changing</u>.",
"	An exception applies if the literal contains numeric digits.  Here, up to 8 digits are allowed.  This allows counting from smaller numbers (fewer digits)",
"	to larger numbers (more digits).  Minus signs are not considered as part of numbers. A mixup of literals and other types inside a range specification is invalid.",
"	",
"	<br>",
"	Following exampls are invalid: ",
"	<br>{1 .. '5'}  (Type mixup)",
"	<br>{Option A .. option C } (1st and last characters are different)",
"	<br>{Option A .. Option   } (final value has fewer characters),",
"	<br>{Option A .. Option AA} fails because final value has more characters, and",
"	<br>{Point -3 .. Point 3  } fails because minus sign is an extra character.",
"	<br>Valid examples: See below",
"" ],
"Examples 03:" : [
"	echo(\"Start simple               : \", {a..z});",
"	echo(\"Every 2nd letter           : \", {a..c..z});",
"	echo(\"1 letter in string         : \", {'Article A:' .. 'Article F:'} );",
"	echo(\"Combination of 2 ranges    : \", {2..4..10, 'Article A:' .. 'Article F:'} );",
"	echo(\"Numbers in literals        : \", {'Chapter 9:' .. 'Chapter 12:'} );",
"	echo(\"Numbers in literals        : \", {'Chapter 09:' .. 'Chapter 12:'} );"
 ]
	,

    "Output 03:":		"automatic",


"Description 04:Parameter Sets - Value Ranges (Dates)" : [
"",
"	Unique to Beyodn4P, Value ranges are also supported for dates and times.  If the value consists of",
"	both date and time value, then the range may only be applied either on the date (with time kept",
"	unchanged) or time (with date kept unchanged).",
"",
"	<br><br>",
"	For dates, the default increment is +1 day.  For times, the default increment is +1 hour.  Use the <second value>",
"	to influence the interval.  Both positive and negative intervals are allowed.  Time counting must not pass",
"	across midnights to cover additional days.",
"",
"" ],
"Examples 04:" : [
"	echo(\"Dates                       : \", { date(30.03.2016) .. date(02.04.2016) });",
"	echo(\"Dates, 3 day intervals      : \", { date(01.04.2016) .. date(04.04.2016) .. date(10.04.2016) });",
"	echo(\"Today to yesterday - bad    : \", { date(today) .. date(today)-1 });",
"	echo(\"Today to yesterday - OK     : \", { date(today) .. date(today)-1 .. date(today)-1 });",
"	echo(\"Times, 1 hour intervals     : \", { time(\"12:15:00\")..time(\"15:15:00\") });",
"	echo(\"Times, 5 minute intervals   : \", { time(\"12:15:00\")..time(\"12:20:00\")..time(\"12:30:00\") });",
"	echo(\"30 seconds back - bad       : \", { time(now) .. time(now)-30/(24*60*60) });",
"	echo(\"30 seconds back, 10s interv.: \", { time(now) .. time(now)-10/(24*60*60) .. time(now)-30/(24*60*60) });",
"	echo(\"Changing dates              : \", { date(\"05.06.2016 10:00:00\")..date(\"08.06.2016 10:00:00\") });",
"	echo(\"Changing times, seconds     : \", { date(\"05.06.2016 10:00:00\")..date(\"05.06.2016 10:00:01\")..date(\"05.06.2016 10:00:03\") });",
"",
""
 ]
	,

    "Output 04:":		"automatic"

  },


  "Parameter sets - Value Repetitions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value repetitions" ],
    "Keywords":			[ "parameter set value repetitions", "value repetition", "value repetitions"],
"Description 01:Parameter Sets - Value Repetitions" : [
"",
"	Large parameter sets with same values repeating can be built up with value repetitions.  Repetitiosn are specified by numeric values following",
"	a colon symbol and following the paramter set element to repeat.  Multiple repetitions may be specified inside a parameter set value.",
"" ],
"Examples 01:" : [
"",
"	echo({ 5:0 } );              // Generates { 0,0,0,0,0 }",
"	echo({ 2:3,3:2 } );          // Generates { 3,3,2,2,2 }",
"	echo({ 0.9:A } );            // Generates { A }  Rounded up",
"	echo({ 0.1:A } );            // Generates { }  Rounded down",
"	echo({ 2:Hello } );          // Generates { Hello,Hello}",
"	echo({ 0:Hello } );          // Generates { }",
"	echo({ -2:Hello } );         // Generates { }",
"	echo({ 3:{a,b} } );          // Generates { {a,b},{a,b},{a,b} }",
"	echo({ 2:{3:1} } );          // Generates { {1,1,1},{1,1,1} }",
"	echo({ 2:{1..4} } );          // Generates { {1,2,3,4},{1,2,3,4} }"
 ]
	,

    "Output 01:":		"automatic"


  }




 	
,

  "UNICODE Character Set" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "UNICODE character set" ],
    "Keywords":			[ "UNICODE", "character set" ],
"Description 01:Introduction" : [
"",
"	Beyond4P supports the full UNICODE character set which includes",
"",
"	* The Basic Multilingual Plane (codes 0 ... 65,535), as well as",
"	* 16 additional UNICODE planes (codes 65,536 ... 1,114,111).",
"",
"	In contrast to various other programming languages, Beyond4P considers every UNICODE character as one single",
"	character.  For example, 'Caf&eacute;' counts 4 characters.  The full character set is available to define",
"	variable names, table names, table header names, user function names, path and file names, etc.",
"	Internally, in order to conserve memory needs for large data, all text data is stored and handled in UTF-8 format.",
"",
"	<br><br>",
"	Note that Latin, Greek and Cyrillic characters share the same letter, e.g. capital letter 'A'.  Attempting to compare these",
"	different chracters among them indicate that these characters are different.  As an additional example, ",
"	the greek <i>mu</i> &mu; and the <i>micro</i> &micro; symbols are different, too.",
""
 ]
	,

"Examples 01:" : [
"	inhabitants [ Zürich ] = 402000;",
"	Пётр Чайкoвский [ famous concert ] = Nutcracker; // Piotr Tschaikowski",
"	echo( inhabitants [ Zürich ] );",
"	echo( Пётр Чайкoвский [ famous concert ] );"
 ]
	,
    "Output 01:":		"automatic",



"Description 02:Line Separator Symbols" : [
"",
"	Beyond4P is able to load text files containing both \"carriage return + line feed\" (CR+LF) characters common in Windows systems",
"	and \"line feed only\" (LF) common in UNIX/LINUX/MACOS systems.  Internally, Beyond4P considers <i>new line</i> as",
"	a single character with ANSI/UNICODE 10.  In the language, the reserved keyword 'new line' represents this symbol.",
"	Unless specified differently, contents saved in Windows systems will use the CR+LF character pair.",
"",
"	<br><br>",
"	The legacy Macintosh \"carriage return only\" (CR) serving as line separator is not supported.",
""
 ]
	

  },



  "Loading and Saving Files" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "loading files" ],
    "Keywords":			[ "loading files" ],
"Description 01:Loading Files" : [
"",
"	Beyond4P checks all files (programs and data) opened for <i>Byte Order Marks</i> (BOM) at the beginning of the file.  The BOM is a UNICODE character and used to differentiate between",
"	UTF-16 big endian, UTF-16 little endian and UTF-8 file formats.  All formats are supported, whereas UTF-8 is by far the most common UNICODE data storage format",
"	as it is compatible to various legacy systems supporing 8-byte character sets only.",
"",
"	<br><br>",
"	Data transparency: The byte order marks will be recognized and then discarded, i.e. not passed on as special characters to the application.",
"	<br><br>",
"",
"	How BOM's are checked in files loaded or opened:",
"	* If the 2 byte sequence FE FF (hexadecimal) is found, then the text file is in UTF-16 big endian format. ",
"	* If the 2 byte sequence FF FE (hexadecimal) is found, then the text file is in UTF-16 little endian format.",
"	* If the 3 byte sequence EF BB BF (hexadecimal) is found, then the text file is in UTF-8 format.",
"	* Some files contain multiple identical BOMs. They have been sighted in export files from relational databases.",
"",
"	In case no BOM is found, following checks will be applied throughout the first ca. 4000 – 8000 bytes in the file (and not the entire file for performance reasons):",
"	* NULL-characters / 00 (hexadecimal) in even numbered positions (first byte in file is position 0): File is UTF-16, big endian format.  <br>Example: 00 31   00 30   00 20   20 AC   00 0D   00 0A  (10 € followed by new line sequence CR+LF). <br>Even for <i>difficult</i> contents such as pure Chinese text, the UTF-16 will be identified from space symbols (00 20), numeric digits and CR+LF symbols.",
"	* NULL-characters / 00 (hexadecimal) in odd numbered positions: File is UTF-16, little endian format.  <br>Example: 31 00   30 00   20 00   AC 20   0D 00   0A 00  (10 € followed by new line sequence CR+LF)",
"",
"	If the criteria above do not apply, then the file will be checked for typical UTF-8 patterns in the first 4000-8000 bytes, provided the file contains non-ANSI characters.",
"",
"	* Presence of non-ANSI symbols which make up typical UTF-8 byte patterns.  These are 2, 3 or 4 symbols with specific binary patterns.",
"	* Presence of non-ANSI symbols which do not match with UTF-8 byte patterns, e.g. simple 8-bit text in a ISO 8859-1 or WIN 1252 format with single non-ANSI characters",
"	* If the 1st criteria applies, but the 2nd does not, then the file is in UTF-8 format.",
"	* If the 2nd criteria applies, but the 1st does not, then the assumption will be non-UNICODE file format WIN 1252 which is the West European 8-bit character set.",
"",
"	If the input file is in HTML format, then the \"charset=…\" commands will be checked accordingly.  JSON files are assumed in UTF-8 format by default.",
"	Ambiguities may still apply in the following case:",
"	* 1 line of UTF-16 text containing foreign characters only and new line sequence, e.g. one sentence in Greek, Cyrillic or Chinese (without digits, spaces, new lines).",
"	* 8-bit text file without non-ANSI character in the first 4000-8000 bytes (lots of English text in a huge file, a foreign word such as Café follows in a concluding sentence at the end of the file.",
"",
"	Ambiguities need to be resolved with the system variable <b>local settings [ input file character set ]</b>.",
"	As long no clear character format has been identified (e.g. UTF-16 or UTF-8), then the local settings will be referenced.  The initial default value is win1252 (American and West European character set).",
"",
"	<br><br>",
"	Supported character sets summarized<br>",
"",
"	=== 200, 300, 500",
"	Character Set | Format | Description",
"	ANSI 		| 8 bits, 7 of them used 	| Traditional ANSI characters.  All non-ANSI characters, including foreign characters, the Euro symbol, etc. are converted into question marks. <br>Examples: E  e",
"	iso8859-1	| 8 bits			| ANSI characters plus West European character set in the range between 0xA0 (160) and 0xFF (255). <br> This format does not support Windows proprietary character range between 0x80 (128) and 0x9F (159) which affects the Euro symbol (€). <br>Examples: E  e  É  é",
"	win1252		| 8 bits, <br> default setting for Windows | Same as above, but includes Windows proprietary character range so additional punctuation symbols as well as the Euro symbol (€) will be handled correctly. <br>Examples: E  e  É  é  €",
"	utf-8		| 8 bits			| UNICODE format.  Characters can take 1, 2, 3 or 4 byes.<br>Examples: E  e  É  é  €  Ə  ə  中国  𐌄 (also applicable in next rows below)",
"	utf-16		|16 bits (little endian)	| UNICODE format. Every character contains precisely 2 bytes, starting with the least significant byte.  Surrogate pairs are used for characters outside Basic Multilingual Plane.",
"	utf-16 big endian | 16 bits (big endian)	| UNICODE format like above, but the two bytes are swapped. Surrogate pairs are used for characters outside Basic Multilingual Plane.",
"	===",
"",
"	Note: Microsoft Excel does not understand utf-16 big endian, but understands the remaining UNICODE formats.  Use this format only if the recipient (e.g. a UNIX server) operates on big endian format only.",
"",
""
 ]
	,

"Description 02:Saving Files" : [
"",
"	The chosen file format either depends on the format specified in a parameter in the __table save(__) function call, ",
"	or it refers to the default setting stored in the __system variable__ <b>local settings [ output file character set ]</b>. If not modified by the user, ",
"	this file contains the value UTF-8. Files saved in UNICODE-format (UTF-8 and UTF-16 formats) will always begin start with corresponding Byte Order Marks.",
"	This allows other applications to recognize and interpret the contents correctly.  This does effectively apply to Excel when reading comma or tab separated",
"	file formats (.csv format).<br>",
"	<br>Text files under Windows contain \"carriage return + line feed\" line breaks. ",
"	<br>Text files under LINUX contain \"line feed\" line breaks.",
"	<br>You can change the setting with by setting system variable runtime settings [ crlf ] to true (enabled) or false (disabled)",
"",
""
 ]
	

  },


  "CSV File Format" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "CSV" ],
    "Keywords":			[ "CSV" ],
"Description 01:CSV File Format" : [
"",
"	The CSV (Comma Separated Values) is a simple structured text file format existing since the nostalgic 1970's along with the introduction of FORTRAN 77 and is supported by",
"	Beyond4P, along with HTML/MHTML, XML and JSON.",
"",
"	<br><br>",
"	THe biggest drawback is the ignorance towards country settings.  CSV generated from Excel files use symbols such as",
"	* List separator (could be commas, semicolons, tab stops, etc.)",
"	* Decimal point (as used in US, GB, CH) or decimal comma (as used in DE)",
"	* Thousand separator (various symbols and blanks exist)",
"",
"	The files can be loaded with and without specifying the list separators.  If no list separator is specified, then Beyond4P tries to automatically detect the",
"	applicable separators by checking for commas, semicolons and tabs.",
"",
"	Regarding decimal symbols, the standard function __table load(__) will check for numerals in text and CSV files (but not HMTL files and likes) with decimal ",
"	commas and convert them to decimal points.  The new function __table load unchanged(__) will not do the conversion.  You may need this if you need to",
"	discriminate between actual numbers and other numeric data separated with commas but not considered as regular numeric data. ",
"	<br/>Consider using the __clean numeral(__)",
"	function to prepare numbers containing commas (and possibly more, such as thousand separators, currency symbols, etc.).",
"	<br/>Consider using __table save with local decimal separator(__) to save CSV files using the decimal separator symbol applicable with your country settings (comma or point).",
"	<br/>Consider using __table save with decimal comma(__) to make sure all numbers use decimal commas.",
"	<br>The original function __table save(__) saves numbers with decimal points, regardless of the applicable country settings.",
"	",
"	<br><br>",
"",
"	Notice on files with fixed column widths: The best is to load these files with \"new line\" as separator symbol so the table contains one item per row.",
"	Then create additional columns with dedicated data items using the __left(__) / __middle(__) / __right(__) functions where you can specify numeric column positions, ",
"	and remove redundant white space symbos with the __trim(__) function.",
"	"
 ]
	
  },





  "Console Input / Output" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "console" ],
    "Keywords":			[ "console" ],
"Description 01:Console Output" : [
"",
"	Even in Windows 7, 8 and 10, the good old console (started with \"cmd\" or \"msdos\" or \"powershell\") contains archaeological software artefacts dating back to 1981",
"	when the IBM PC has been launched.  Luckily, the recent Windows releases support UTF-8 output to the console.  However, the supported character sets",
"	are limted to the following:",
"",
"	* Basic Latin",
"	* Latin-1 Supplement",
"	* Latin Extended A",
"	* Greek (for your fraternity abbreviations)",
"	* Cyrillic (Russian)",
"	* A set of additional symbols (also found in win1252 character set) including the Euro currency sign",
"",
"	Unsupported symbols will automatically be shown as question mark or with a placeholder box.",
""
 ]
	,

"Description 02:Console Input" : [
"",
"	Another relict from 1981: Unfortunately, Microsoft has not done its homework regarding UNICODE input from the keyboard and we need to accept the facts established",
"	in the year when Ronald Reagan was elected as the President, surely a better choice than since 2016, and foreign characters appeared more foreign at that time than today, too.",
"	Non-ANSI symbols (accents, umlauts, Euro currency symbol, etc.) are converted with an antiquated MS-DOS character set.  Beyond4P resolves this issue by automatically",
"	converting entered characters into UNICODE.",
""
 ]
	
  },



  "Case Sensitivity" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "case sensitivity" ],
    "Keywords":			[ "case sensitivity", "upper case", "lower case" ],
"Description 01:Case Sensitvity and Conversion" : [
"",
"	Beyond4P is a case sensitive language.  Case conversions support the important UNICODE character blocks where",
"	upper/lower case conversion is meaningful.  Accents, Umlauts and other diacrytics will be preserved in case conversions.",
"	The case conversion is does not follow any specific locales, for example removing accents for capital letters or",
"	special ruling for the turkish letters &#x0130; / i / I / &#x0131;.  The lower case sharp-s &#x00DF; will not be converted to",
"	an equivalent upper case character, nor will it be substituted by double-S.",
"",
"	=== 300, 300, 300",
"	UNICODE Block | Code Range | Example",
"	Basic Latin | 00 - 7F (Hex) | A / a",
"	Latin 1 Supplement | 80 - FF (Hex) | &Auml; / &auml;",
"	Latin Extended A | 100 - 1FF (Hex) | &#x0102; / &#x0103;",
"	===",
"	"
 ]
	
  },




  "HTML Entities" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "entities" ],
    "Keywords":			[ "entities", "html entities" ],
"Description 01:Entities" : [
"",
"	Tables in supported HTML / MHTML, as well as softquoted literals (referenced in program code with single quotation marks) support entity references.  Examples:",
"	=== 100, 100, 600",
"	Entity		| Character	| Explanation",
"	&amp;euro;	|	€	| Euro sign (case sensitive, i.e. &Euro; will not be converted)",
"	&amp;#8364; 	|	€	| \", represented with decimal UNICODE number",
"	&amp;#x20AC;	|	€	| \", represented with hexadecimal UNICODE number",
"	&amp;#X20ac;	| 	€	| Same. The letters X and of hexadecimal digits are not case sensitive",
"	===",
"	"
 ]
	
  }






,

  "Comments" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comments" ],
    "Keywords":			[ "comments" ],
"Description 01:Introduction to Comments" : [
"	Documenting comments is very similar as in C/C++. The language supports following comment symbols:",
"",
"",
"	=== 120, 120, 480, simple",
"	Types		| Examples | Description",
"	Line comment	| // | Comment starting with double slashes and effective until end of line. The symbols for comment blocks /* and */ are ignored inside line comments.",
"	Comment block	| /* ... */ | Commented code section. <br/>/* begins commented section<br/>*/ ends commented sections<br/>Commented section is not ended prematurely with line comments.<br/>Nested comments are not supported, e.g. /* … /* … */ … */",
"	===",
"",
"	You may wonder why obvious names such as 'if', 'while' and 'for' are not considered as similar reserved keywords.  In Beyond4P, the control flow statements",
"	are actually procedure names which then influence executing further statements or blocks.  Therefore, you can actually use 'if' as the given function."
 ]
	,
"Examples 01:" : [
"	// This is a commment",
"	// Bla Bla /* Bla Bla",
"	echo( This statement is outside a comment block );",
"	// Bla Bla */ Bla Bla"
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Github Markdown files" : [
"	Beyond4P <i>understands</i> markdown files (with filenames ending '.md') where it only executes code lines which inside the code blocks.  All other contents",
"	outside the code blocks are treated like comments.  Code blocks must be delimited with three accent-grave symbols ```. Multiple such code blocks in one",
"	markdown file are supported.  Presently, Beyond4P does not check for possible text such as language names after these symbols, e.g  <b>```beyond4p</b>.",
"" ],
"Examples 02:" : [
"	# This is a markdown header",
"	And some text to describe it",
"	```program code",
"	echo( This statement is inside a code block );",
"	```",
"	# This is the next header",
""
 ]
	,
    "Output 02:":		"This statement is inside a block"


  }


,



"Formulas and Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "formulas and operators" ],
"Description 01:Introduction" : [
"",
"	Formulas are expression which contains a combination of the following algorithms:",
"	* Constants (numerals, literals, Booleans, dates etc.)",
"	* __Parameter sets__",
"	* __Variables__ and __references to variables__",
"	* References to __tables__",
"	* Operators",
"	** __Unary operators__ (e.g. minus sign for negation)",
"	** __Binary operators__ (arithmetic, comparison and logical operators)",
"	* Parenthses (to influence the calculation precedence)",
"",
"	<br>",
"	The following sections provide further details on the operators.",
"" ],
"Description 02:Calculation Precedence Rules" : [
"",
"	=== 100, 200, 700, bold_column_1 bold_column_2",
"	Precedence	| Symbols	| Description",
"	1 (highest)	| +, -, ~, !	| All unary operators",
"	2		| *, /		| Arithmetic operators: multiplication and division",
"	3		| +, -		| Arithmetic operators: addition and subtraction",
"	4		| =, ==, &lt;&gt;, !=, &gt, &gt;, &lt;, &lt;= | Comparison operators",
"	5 (lowest)	| &amp;, &vert;	| Logical operators",
"	===",
"	<br>",
"	Use parentheses to influence the precedence, e.g. <b>2*(5+7)</b> returns 24 and not 17.",
""
 ]
	
},



"Unary Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "unary operators" ],
"Description 01:Introduction" : [
"",
"	<br/><img src=\"Images/Description_Formulas_Unary_Operators.jpg\" alt=\"Unary Operators\"><br/>",
"",
"	<sup>1</sup> First character is capitalized.  All other characters are not touched.<br>",
"	<sup>2</sup> Mirroring, example: !{a,b,c} returns {c,b,a}.  Contents in nested parameter sets remain unaffected (no mirroring there).<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > literal > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 01:" : [
"	a[0] = -1;",
"	a[1] = -'heLLO world';",
"	a[2] = +'heLLO world';",
"	a[3] = !'heLLO world';",
"	a[4] = ~ Hello World;",
"	a[5] = + { 3, a, f, { a, b, d}, { c, a, b }, 1, true, date(today), 5, b,  };",
"	a[6] = - { 3, a, f, { a, b, d}, { c, a, b }, 1, true, date(today), 5, b,  };",
"	a[7] = + false;",
"	a[8] = - false;",
"	a[9] = + true;",
"	a[10] = - true;",
"	a[11] = ! true;",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"
},


"Arithmetic Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "arithmetic operators" ],
"Description 01:Introduction" : [
"	Arithmetic operators cover the four basic mathematical operations:",
"	* __addition__",
"	* __subtraction__",
"	* __multiplication__",
"	* __division__",
"",
"	The operators can also be imposed on non-numeric data types which result in different operations (e.g. string operations)",
"	or implicit conversion to numerals before operation (e.g. boolean values converted to 0 or 1 before operation is carried out).",
""
 ]


},


"Additions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "addition" ],
"Description 01:Introduction" : [
"",
"	Basic rules to additions:",
"	* Numbers are added together as learnt in 1st grade.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Literal strings are catenated.",
"	* The elements in parameter sets are also catenated.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"	",
"",
"	<br/><img src=\"Images/Description_Formulas_Additions.jpg\" alt=\"Additions\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 + 3;",
"	a[1] = Hello + ' ' + World;",
"	a[2] = 0.5 + true;",
"	a[3] = { a, b, c } + { c, d };",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Addition of Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Additions_of_Dates.jpg\" alt=\"Additions\"><br/>",
"",
"	'Date 1' and 'Time 1' refer to the data from the left operand whereas 'Date 2' and 'Time 2' refer to the right operand.<br>",
"	<sup>1</sup> Only fractional part (digits behind decimal point) are used to add time value.  Value must be between 0 and (24*60*60-1)/(24*60*60).  Calculated sum must lie within 00:00:00 and 23:59:59.<br>",
"	<sup>2</sup> Only the integer (whole number before decimal point) is used for the calculation.<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > literal > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('09:15:00');",
"	o [] = date(''); // blank date",
"",
"	a[0] = d[] + 3.25;     // Just integer is used",
"	a[1] = dt[]+ 3.25;    // 3 days, 6 hours",
"	a[2] = t[] + 0.25;     // 6 hours",
"	a[3] = d[] + t[];     // Date + time combind",
"	a[4] = d[] + true;     // add 1 day",
"	a[5] = o[] + d[];      // Add date to blank date",
"",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},


"Subtractions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "subtraction" ],
"Description 01:Introduction" : [
"",
"	Basic rules to subtractions:",
"	* Numbers are subtracted from each other as learnt at school.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Literal strings: The first occurrences of the (sub-)string in the right operand found in the left operand will be removed, but not all.",
"	* Parameter sets: The first occurrences of the elements in the right operand found in the left operand will be removed, but not all.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"",
"	<br/><img src=\"Images/Description_Formulas_Subtractions.jpg\" alt=\"Subtractions\"><br/>",
"",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 - 3;",
"	a[1] = Hello - ell;",
"	a[2] = 0.5 - true;",
"	a[3] = { a, b, c, c } - { c, d }; // Removes one c, not all",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Subtraction of Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Subtractions_of_Dates.jpg\" alt=\"Additions\"><br/>",
"",
"	'Date 1' and 'Time 1' refer to the data from the left operand whereas 'Date 2' and 'Time 2' refer to the right operand.<br>",
"	<sup>1</sup> Only fractional part (digits behind decimal point) are used to add time value.  Value must be between 0 and (24*60*60-1)/(24*60*60).  Calculated sum must lie within 00:00:00 and 23:59:59.<br>",
"	<sup>2</sup> Only the integer (whole number before decimal point) is used for the calculation.<br>",
"	<sup>3</sup> Sorting order across different data types: parameter set > literal > date > numeral > boolean, then followed by contents if types are equal. For sets with common contents and different lengths,",
"	             the longer one is considered as the \"greater\" one.  Nested sets will also be sorted.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('09:15:00');",
"	o [] = date(''); // blank date",
"",
"	a[0] = d[] - 3.25;    // Just integer is used",
"	a[1] = dt[]- 3.25;    // 3 days, 6 hours",
"	a[2] = t[] - 0.25;    // 6 hours",
"	a[3] = d[] - true;    // subtract 1 day",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},


"Multiplications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "multiplication" ],
"Description 01:Introduction" : [
"",
"	Basic rules to subtractions:",
"	* Numbers are multiplied with each other as learned in business school (probably a bit too late).",
"	* Boolean values are converted to 0 and 1 first.",
"	* Parameter sets: Parameter sets can be multiplied with numbers in order to repeat the elements.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"	<br/><img src=\"Images/Description_Formulas_Multiplications.jpg\" alt=\"Multiplications\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 * 3;",
"	a[1] = '' * 10; // Blank = 0",
"	a[2] = 0.5 * true;",
"	a[3] = { a, b, c } * 3; // Repetition",
"	a[4] = { a, b, c } * 0; // Empty set",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"

},


"Divisions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "division" ],
"Description 01:Introduction" : [
"",
"	Basic rules to divisions:",
"	* Numbers are divided with each other as learned in 2nd grade.",
"	* Boolean values are converted to 0 and 1 first.",
"	* Literal strings: All occurrences of the (sub-)string in the right operand found in the left operand will be removed.",
"	* Parameter sets: All occurrences of the elements in the right operand found in the left operand will be removed.",
"	* Special rules apply on arithmetics with dates and times which are described further below.",
"	* Special rules apply to some operations with different data types.  See the table below for details.",
"",
"	<br/><img src=\"Images/Description_Formulas_Divisions.jpg\" alt=\"Divisions\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[0] = 5 / 3;",
"	a[1] = '' / 10; // Blank = 0",
"	a[2] = 0.5 * true;",
"	a[3] = { a, b, c, c, d } / { b, c }; // Removes all matching elements",
"	a[4] = This is a great tiger / i; // All i's removed",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 01:": "automatic"

},



"Comparison Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comparison operators" ],
"Description 01:Introduction" : [
"	Unlike other programming languages which define 6 comparison operators, B4P supports 8 comparison operators which can be combined with __comparison options__",
"	to make adjustments on the comparison rules:",
"	* <b>&lt;</b> Less than",
"	* <b>&le;</b> Less than or equal to",
"	* <b>&gt;</b> Greater than",
"	* <b>&ge;</b> Greater than or equal to",
"	* <b>=</b> Equal to, expecting 1 or more operands separated by comma (comparing with a selection of values) and/or ranges.  ",
"	* <b>&gt;&lt;</b> Not equal to, expecting 1 or more operands separated by comma (comparing with a selection of values) and/or ranges.",
"	* <b>==</b> __strictly Equal__ to, expecting 1 operand only",
"	* <b>!=</b> __strictly not equal__ to, expecting 1 operand only",
"",
"	Comparisons with b>=</b> and <b>&gt;&lt;</b> are more tolerant in comparing numbers and strings containing numbers, and also support",
"	wildcard symbols on the right-hand operands if they are defined as softquoted literals (e.g. values in single quotation marks, not double).",
""
 ]
	,
"Description 02:Attention! = and &lt;&gt; may Hijack Parameters" : [
"",
"	<u>Attention</u>: As the two comparison operators <b>=</b> and <b>&gt;&lt;</b> expect 1 or more operands on the right hand side,",
"	you may risk situations where the comparison hijacks the remaining comma-separated values on the right-hand-side typically encountered",
"	in function parameters and values in parameter sets.  To avoid this, put the comparison into parentheses, or use the <b>==</b> and <b>!=</b>",
"	symbols."
 ]
	,
"Examples 02" : [
"	b[] = 12; ",
"	// Want to compare b[] == 9 and include the result in the parameter set between 'false' and 12",
"	// Good luck!",
"",
"	a[0] = { 3, 6, false, b[] =  9 , 12, 15 }; // Comparison has hijacked the last two parameters",
"	a[1] = { 3, 6, false,(b[] =  9), 12, 15 }; // OK",
"	a[2] = { 3, 6, false, b[] == 9 , 12, 15 }; // OK",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02": "automatic"
},



"Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to equal-to comparisons which are a bit more relaxed than the __strictly equal to__ comparison operator:",
"	* The number of operands on the right-hand-side is not limited to 1.  A selection of multiple values may be specified as well as ranges.",
"	* __Wildcards__ are supported in the right-hand operand if the value is a softquoted literal (e.g. specified inside single quotation marks)",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, but they do not need to be in the same order",
"	* Dates, Booleans and numerals can be compared with literals if they have the same text value / literal representation (e.g. if printed out). Example: '5' = 5, and 'true' = true are both true.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Equal_to.jpg\" alt=\"Comparison Equal to\"><br/>",
"",
"	<sup>1</sup> If a numeral is compared with a literal, then a literal copy will be made of the numeral and both literals are compared.<br>",
"	<sup>2</sup> If a date is compared with a literal, then a literal copy will be made of the date and both literals are compared.  Depending on the state of the date, the format is \"YYYY-MM-DD\", \"HH:II:SS\", or \"YYYY-MM-DD HH:II:SS\".<br>",
"	<sup>3</sup> If a boolean value is compared with a literal, then a literal copy will be made of the boolean value and both literals are compared.<br>",
"	<sup>4</sup> Contents in both sets must be the same, but the ordering does not matter.  E.g. {1,2,3} = {3,2,1} returns true.",
"",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 = 3;		// true",
"	a[1] = 5.1 = 5;         // false",
"	a[2] = 5 = 2,3,5,7;     // true",
"	a[3] = 5 = 2,2+1,5,7;	// true",
"	a[4] = 5 = 1..3;	// false",
"	a[5] = 5 = 4..7;	// true",
"	a[6] = 5 = 1..3,5,7;	// true",
"	a[7] = {1,2,3} = {3,2,1}; // true",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"Literal with other types:\");",
"",
"	b[0] = 123 = \"123\";         // true",
"	b[1] = '123' = 123;         // true",
"	b[2] = false = 'false';     // true",
"	b[3] = false = 'False';     // false",
"	b[4] = date(\"2020-08-01\") = \"2020-08-01\";  // true",
"	b[5] = date(\"2020-08-01\") = \"01.08.2020\";  // false",
"	// The last one is 'false' because literal representation of date is YYYY-MM-DD",
"",
"	for all variables( b[], x[] ) echo( x[] );",
"",
"	echo(\"Compare with wildcards:\");",
"",
"	c[0] = Hello World = '*o*'; // Contains 0, true",
"	c[1] = Hello World = \"*o*\"; // Not equal to string \"*o*\", false",
"	c[2] = Hi = 'Ha,Hi,Ho';     // Wildcard with commas, true",
"	c[3] = Hi = Ha,Hi,Ho;       // Selection with commas, true",
"",
"	for all variables( c[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] = dt[];   // true, dates same, time not compared",
"	a[1] = t[] = dt[];   // true, times same, date not compared",
"	a[2] = d[] = date(\"2020-07-15\") - 1; // true",
"	a[3] = dt[] = dz[];   // false (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Not Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "not equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to not-equal-to comparisons which are a bit more relaxed than the __strictly not equal to__ comparison operator:",
"	* The number of operands on the right-hand-side is not limited to 1.  A selection of multiple values may be specified as well as ranges.",
"	* __Wildcards__ are supported in the right-hand operand if the value is a softquoted literal (e.g. specified inside single quotation marks)",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, but they do not need to be in the same order",
"	* Dates, Booleans and numerals can be compared with literals if they have the same text value / literal representation (e.g. if printed out). Example: '5' = 5, and 'true' = true are both true.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to.jpg\" alt=\"Comparison not Equal to\"><br/>",
"",
"",
"	<sup>1</sup> If a numeral is compared with a literal, then a literal copy will be made of the numeral and both literals are compared.<br>",
"	<sup>2</sup> If a date is compared with a literal, then a literal copy will be made of the date and both literals are compared.  Depending on the state of the date, the format is \"YYYY-MM-DD\", \"HH:II:SS\", or \"YYYY-MM-DD HH:II:SS\".<br>",
"	<sup>3</sup> If a boolean value is compared with a literal, then a literal copy will be made of the boolean value and both literals are compared.<br>",
"	<sup>4</sup> Contents in both sets must be the same, but the ordering does not matter.  E.g. {1,2,3} = {3,2,1} returns true.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 <> 3;		// false",
"	a[1] = 5.1 <> 5;         // true",
"	a[2] = 5 <> 2,3,5,7;     // false",
"	a[3] = 5 <> 2,2+1,5,7;	// false",
"	a[4] = 5 <> 1..3;	// true",
"	a[5] = 5 <> 4..7;	// false",
"	a[6] = 5 <> 1..3,5,7;	// false",
"	a[7] = {1,2,3} <> {3,2,1}; // false",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"Literal with other types:\");",
"",
"	b[0] = 123 <> \"123\";         // false",
"	b[1] = '123' <> 123;         // false",
"	b[2] = false <> 'false';     // false",
"	b[3] = false <> 'False';     // true",
"	b[4] = date(\"2020-08-01\") <> \"2020-08-01\";  // false",
"	b[5] = date(\"2020-08-01\") <> \"01.08.2020\";  // true",
"	// The last one is 'true' because literal representation of date is YYYY-MM-DD",
"",
"	for all variables( b[], x[] ) echo( x[] );",
"",
"	echo(\"Compare with wildcards:\");",
"",
"	c[0] = Hello World <> '*o*'; // Contains o, false",
"	c[1] = Hello World <> \"*o*\"; // Not equal to string \"*o*\", true",
"	c[2] = Hi <> 'Ha,Hi,Ho';     // Wildcard with commas, false",
"	c[3] = Hi <> Ha,Hi,Ho;       // Selection with commas, false",
"",
"	for all variables( c[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] <> dt[];   // false, dates same, time not compared",
"	a[1] = t[] <> dt[];   // false, times same, date not compared",
"	a[2] = d[] <> date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] <> dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Strictly Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "strictly equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to strictly-equal-to comparisons:",
"	* The number of operands on the right-hand-side is always 1.  No risk of hijacking parameters.",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with literals, will always be unequal.",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, and they need to be in the same order.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Equal_to.jpg\" alt=\"Comparison Equal to\"><br/>",
"",
"	<sup>1</sup> Contents in both sets must be the same and in the same ordering E.g. {1,2,3} = {3,2,1} returns false.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 == 3;             // true",
"	a[1] = 5.1 == 5;           // false",
"	a[2] = {1,2,3} == {3,2,1}; // false",
"	a[3] = {1,2,3} == {1,2,3}; // true",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"Literal with other types always return false:\");",
"",
"	b[0] = 123 == \"123\";         // false",
"	b[1] = '123' == 123;         // false",
"	b[2] = false == 'false';     // false",
"	b[3] = date(\"2020-08-01\") == \"2020-08-01\";  // false",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] != dt[];   // true (one contains time, the other not)",
"	a[1] = t[] != dt[];   // true (one contains date, the other not)",
"	a[2] = d[] != date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] != dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},



"Strictly Not Equal to" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "strictly not equal to" ],
"Description 01:Introduction" : [
"",
"	Basic rules to strictly-equal-to comparisons:",
"	* The number of operands on the right-hand-side is always 1.  No risk of hijacking parameters.",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with literals, will always be unequal.",
"	* When comparing parameter sets, the same elements in both left and right hand side must exist, and they need to be in the same order.",
"	* Comparing two void values will always return true.",
"",
"	<br/><img src=\"Images/Description_Formulas_Strictly_Not_Equal_to.jpg\" alt=\"Comparison not Equal to\"><br/>",
"",
"	<sup>1</sup> Contents in both sets must be the same and in the same ordering E.g. {1,2,3} = {3,2,1} returns false.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3 != 3;             // false",
"	a[1] = 5.1 != 5;           // true",
"	a[2] = {1,2,3} != {3,2,1}; // true",
"	a[3] = {1,2,3} != {1,2,3}; // false",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"Literal with other types always return false:\");",
"",
"	b[0] = 123 != \"123\";         // true",
"	b[1] = '123' != 123;         // true",
"	b[2] = false != 'false';     // true",
"	b[3] = date(\"2020-08-01\") != \"2020-08-01\";  // true",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Not_Equal_to_of_Dates.jpg\" alt=\"Comparison Equal to of dates\"><br/>",
"	",
"	Note that in some cases, only the time or only the dates are compared.",
""
 ]
	,
"Examples 02:" : [
"	d [] = date('2020-07-14');",
"	dt[] = date('2020-07-14 12:30:00');",
"	t [] = date('12:30:00');",
"	o [] = date(''); // blank date",
"	dz[] = date('2020-07-14 12:30:01');",
"",
"	a[0] = d[] != dt[];   // true (one contains time, the other not)",
"	a[1] = t[] != dt[];   // true (one contains date, the other not)",
"	a[2] = d[] != date(\"2020-07-15\") - 1; // false",
"	a[3] = dt[] != dz[];   // true (time differs)",
"	",
"	for all variables( a[], b[] ) echo( b[] );",
""
 ]
	,
    "Output 02:": "automatic"
},



"Smaller than (or Equal to)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "smaller than or equal to" ],
    "Keywords":			[ "smaller than" ],
"Description 01:Introduction" : [
"",
"	Basic rules to smaller than / smaller than or equal to comparisons:",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with literals, will always return false.",
"	* When comparing parameter sets, the sorting order of the parameter is compared.",
"",
"	<br/><img src=\"Images/Description_Formulas_Smaller_than_or_Equal_to.jpg\" alt=\"Comparison Smaller than (or Equal to)\"><br/>",
"",
"	<sup>1</sup> When comparing parameter sets, the following sorting order across different data types applies: parameter set > literal > date > numeral > boolean, ",
"	then followed by contents if types are equal. For sets with common contents and different lengths,",
"	the longer one is considered as the \"greater\" one.  Nested sets will also be compared.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3   <  3;            // false",
"	a[1] = 3   <= 3;            // true",
"	a[2] = 4.9 <  5;            // true",
"	a[3] = Ha  < He;            // true (sorting order)",
"	a[4] = {1,2,3} <  {3,2,1};  // true",
"	a[5] = {1,2,3} <  {1,2,3};  // false",
"	a[6] = {1,2,3} <= {1,2,3};  // true",
"	a[7] = {1,2,3} < {1,2,3,4}; // true",
"	a[8] = false < true;        // true",
"	a[9] = a < 1;               // always false",
"",
"	for all variables( a[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Smaller_than_or_Equal_to_of_Dates.jpg\" alt=\"Comparison Smaller than (or Equal to) of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	dt1[] = date('2020-07-14 12:30:00');",
"	dt2[] = date('2020-08-01 06:45:00');",
"	d1 [] = date('2020-07-14');",
"	d2 [] = date('2020-08-01');",
"	t1 [] = date('12:30:00');",
"	t2 [] = date('06:45:00');",
"",
"	a[0] = dt1[] < dt2[]; // true",
"	a[1] = dt1[] < t2 []; // Times compared, false",
"	a[2] = dt2[] < d1 []; // Dates compared, false",
"	a[3] = dt2[] < t2 []; // Times compared, false",
"	a[4] = dt2[] <=t2 []; // Times compared, true",
"	a[5] = dt1[] < d1 []; // Dates compared, false",
"	a[6] = dt1[] <=d1 []; // dates compared, true",
"	a[7] = dt1[] < dt1[]; // false",
"	a[8] = dt1[] <=dt1[]; // true",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},



"Greater than (or Equal to)" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "greater than or equal to" ],
    "Keywords":			[ "greater than" ],
"Description 01:Introduction" : [
"",
"	Basic rules to greater than / greater than or equal to comparisons:",
"	* Contents are compared strictly, i.e. data type and contents must match perfectly.  No wildcards are supported here.",
"	* Comparing values of different types, e.g. numerals with literals, will always return false.",
"	* When comparing parameter sets, the sorting order of the parameter is compared.",
"",
"	<br/><img src=\"Images/Description_Formulas_Greater_than_or_Equal_to.jpg\" alt=\"Comparison Greater than (or Equal to)\"><br/>",
"",
"	<sup>1</sup> When comparing parameter sets, the following sorting order across different data types applies: parameter set > literal > date > numeral > boolean, ",
"	then followed by contents if types are equal. For sets with common contents and different lengths,",
"	the longer one is considered as the \"greater\" one.  Nested sets will also be compared.",
""
 ]
	,
"Examples 01:" : [
"	echo(\"Basic comparisons:\");",
"",
"	a[0] = 3   >  3;            // false",
"	a[1] = 3   >= 3;            // true",
"	a[2] = 4.9 >  5;            // false",
"	a[3] = Ha  > He;            // false (sorting order)",
"	a[4] = {1,2,3} >  {3,2,1};  // false",
"	a[5] = {1,2,3} >  {1,2,3};  // false",
"	a[6] = {1,2,3} >= {1,2,3};  // true",
"	a[7] = {1,2,3} > {1,2,3,4}; // false",
"	a[8] = false > true;        // false",
"	a[9] = a > 1;               // always false",
"",
"	for all variables( a[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Comparing Dates" : [
"",
"	Note that value of type date may assume 4 states: date only, time only, date and time combined and blank date (no value).  Even for the same operator,",
"	the rules of calculating dates and numeric operands differ.",
"",
"	<br/><img src=\"Images/Description_Formulas_Greater_than_or_Equal_to_of_Dates.jpg\" alt=\"Comparison Greater than (or Equal to) to of dates\"><br/>",
""
 ]
	,
"Examples 02:" : [
"	dt1[] = date('2020-07-14 12:30:00');",
"	dt2[] = date('2020-08-01 06:45:00');",
"	d1 [] = date('2020-07-14');",
"	d2 [] = date('2020-08-01');",
"	t1 [] = date('12:30:00');",
"	t2 [] = date('06:45:00');",
"",
"	a[0] = dt1[] > dt2[]; // false",
"	a[1] = dt1[] > t2 []; // Times compared, true",
"	a[2] = dt2[] > d1 []; // Dates compared, true",
"	a[3] = dt2[] > t2 []; // Times compared, false",
"	a[4] = dt2[] >=t2 []; // Times compared, true",
"	a[5] = dt1[] > d1 []; // Dates compared, false",
"	a[6] = dt1[] >=d1 []; // dates compared, true",
"	a[7] = dt1[] > dt1[]; // false",
"	a[8] = dt1[] >=dt1[]; // true",
"",
"	for all variables( a[], b[] ) echo( b[] );"
 ]
	,
    "Output 02:": "automatic"
},


"Logical Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical operators" ],
"Description 01:Introduction" : [
"	Logical operators cover the follwoing two operators:",
"	* __logical and__",
"	* __logical or__",
"",
"	The operators are only applicable to boolean values and parameter sets.",
""
 ]


},


"Logical And" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical and" ],
"Description 01:Introduction" : [
"",
"	Basic rules to logical AND (Symbol: <b>&amp;</b>):",
"	* For boolean values the logical AND operator is applied.",
"	* For parameter sets, the intersection of equal elements will be identified.",
"	* All other data types wll be rejected",
"",
"	<br/><img src=\"Images/Description_Formulas_Logical_And.jpg\" alt=\"Logical And\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	echo(\"On boolean values:\");",
"",
"	a[0] = false & false;",
"	a[1] = true & false;",
"	a[2] = true & true;",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"On parameter sets:\");",
"",
"	b[0] = { a, b, c, 1, 2 } & { d, f, 3 }; // Empty set",
"	b[1] = { a, b, c, 1, 2 } & { c, b, 3 }; // {b, c}",
"	b[2] = { a, b, c, 1 ,2 } & { 1, 2, c }; // {c, 1, 2}",
"	b[3] = { a, b, b, c } & { b, a, b, b }; // {a, b, b}",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic"

},

"Logical Or" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "logical or" ],
"Description 01:Introduction" : [
"",
"	Basic rules to logical OR  (Symbol: <b>&vert;</b>):",
"	* For boolean values the logical OR operator is applied.",
"	* For parameter sets, the union of equal elements will be identified.",
"	* All other data types wll be rejected",
"",
"	<br/><img src=\"Images/Description_Formulas_Logical_Or.jpg\" alt=\"Logical Or\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	echo(\"On boolean values:\");",
"",
"	a[0] = false | false;",
"	a[1] = true | false;",
"	a[2] = true | true;",
"",
"	for all variables( a[], x[] ) echo( x[] );",
"",
"	echo(\"On parameter sets:\");",
"",
"	b[0] = { a, b, 1 } | { 1, b, a }; // {a, b, 1}",
"	b[1] = { a, b, 1 } | { 1, b, c }; // {a, b, 1, c}",
"	b[2] = { a, b, b } | { b, b, c }; // {a, b, b, c}",
"",
"	for all variables( b[], x[] ) echo( x[] );"
 ]
	,
    "Output 01:": "automatic"

},


"Comparison Options" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comparison options" ],
    "Keywords":			[ "Epsilon" ],
"Description 01:Introduction" : [
"",
"	Comparison options provide further adjustments on the comparison rules.  The rules affect the following:",
"	* String comparisons: Ignoring case and/or blanks",
"	* Numeric comparisons: Using epsilon as tolerance value.",
"",
"	<br/><img src=\"Images/Description_Formulas_Comparison_Options.jpg\" alt=\"Comparison Options\"><br/>"
 ]
	,
"Description 02:Options for String Comparisons" : [
"	Specify '+' after the comparison operator to ignore upper/lower case checking, and '~' to ignore all blanks.",
"	Both symbols may be used where it does not matter if specified as '+~' or the '~+'.",
""
 ]
	,
"Examples 02:Comparing varieties of ahorns and the F horn (an instrument)" : [
"	include( Support Library );",
"	runtime settings[ epsilon ] = 0.001; // Make comparisons very tolerant for now to show how it works",
"",
"	// 1st number is on left side of comparison, the others are on the right sides",
"	numbers[] = { A horn, A Horn, AHorn, A horn, Ahorn, a horn, ahorn, F horn };",
"	symbols[] = { '=',  '=~',  '=+',  '=+~',  '', // Blanks cause line breaks for better visibility",
"	              '<>', '<>~', '<>+', '<>+~', '',",
"	              '>',   '>~', '>+',  '>+~',  '',",
"	              '>=',  '>=~','>=+', '>=+~', '',",
"	              '<',   '<~', '<+',  '<+~',  '',",
"	              '<=',  '<=~','<=+', '<=+~' };",
"",
"	table initialize( overview, {numbers[]} + symbols[] );",
"",
"	table process selected rows( overview, [0]!='',",
"	    for (col[] = 1, col[] < table row width( overview, 0 ), col[]++ )",
"	    {",
"		// Formulate the coparison expression in a string and use 'compare' to use it. Colon required for this.",
"		// [0,0] = Current table (overview), column 0, row 0.   [0] = Current table, column 0, current row",
"",
"	        [col[]] = compare ( [0,0], : [0] + [col[],0] );",
"	    } );",
"",
"	table list( overview );	"
 ]
	,
    "Output 02": "automatic",
"Description 03:Options for Numeric Comparisons" : [
"	For numeric comparisons, the plus sign is ignored.  However, the '~' sign provides a numeric tolerance of value epsilon.",
"	This value is maintained in the system variable <b>run time settings[epsilon]</b> and may be changed to a different",
"	meaningful value if needed.  Tolerant comparisons make sense for comparing two values which have gone through some",
"	calculatons and minor numeric imprecisions may have occurred which should not adversely influence numeric comparisons.",
"",
"	The following overview illustrates how the epsilon comparison tolerance is applied for the different operators:",
"",
"	<br/><img src=\"Images/Description_Formulas_Comparison_Epsilon.jpg\" alt=\"Comparison Options\"><br/>",
""
 ]
	,
"Examples 03:Simple example of comparisons dealing with minor imperfections from calculations" : [
"	a[] = 1.2156;",
"	b[] = a[] * 1.9123 * 2.591271 / 1.9123 / 2.591271; // Result should be unchanged  ...theoretically.",
"",
"	echo( a[], \", \", b[] );",
"	echo( \"Epsilon: \", runtime settings[epsilon] );",
"	echo( \"Hard comparison    : \", a[] = b[] );	// Falsely outputting false",
"	echo( \"Tolerant comparison: \", a[] = ~b[] );	// Now it's OK (both values are within epsilon tolerance)"
 ]
	,
    "Output 03": "automatic",
"Examples 04:Comprehensive overview" : [
"	include( Support Library );",
"	runtime settings[ epsilon ] = 0.001; // Make comparisons very tolerant for now to show how it works",
"",
"	// 1st number is on left side of comparison, the others are on the right sides",
"	numbers[] = { 15.0000, 14.9989, 14.9990, 14.9991, 15.0000, 15.0009, 15.0010, 15.0011 };",
"	symbols[] = { '=', '=~', '<>', '<>~', '>', '>~', '>=', '>=~', '<', '<~', '<=', '<=~' };",
"",
"	table initialize( overview, {numbers[]} + symbols[] );",
"",
"	table process( overview, ",
"	    for (col[] = 1, col[] < table row width( overview, 0 ), col[]++ )",
"	    {",
"		// Formulate the coparison expression in a string and use 'compare' to use it. Colon required for this.",
"		// [0,0] = Current table (overview), column 0, row 0.   [0] = Current table, column 0, current row",
"",
"	        [col[]] = compare ( [0,0], : [0] + literal( [col[],0] ) );",
"	    } );",
"",
"	table list( overview );	"
 ]
	,
    "Output 04:": "automatic"
},



"Assignment operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Assignment operators" ],
"Description 01:Introduction" : [
"",
"	Similar to C/C++, B4P supports assignment operators as listed in the table below. An assignment operator such as <b>a[]+=3</b>; ",
"	is equivalent to <b>a[]=a[]+3</b>, making use of the same type checking and conversion rules.  Spaces between the assignment operator and",
"	the equal sign are allowed.  The execution performance of assignment operators is faster than conventional formulation because fewer",
"	language elements (symbols, names, values) are interpreted, e.g. from 9 (<b>a[]=a[]+3</b>) to 6 (<b>a[]+=3</b>).",
"",
"	=== 100, 200, 700, bold_column_1",
"	Operator	| Examples				| Equivalent traditional formulation",
"	+=		| a[] += 3;<br>a[] += ' km/h';		| a[] = a[] + 3;<br>a[] = a[] + ' km/h';",
"	-=		| a[] -= 4;<br>a[] -= {'1','2'};	| a[] = a[] - 4;<br>a[] = a[] - { '1','2' };",
"	*=		| a[] *= 5;<br>				| a[] = a[] * 5;",
"	/=		| a[] /= 2;<br>a[] /= '.';		| a[] = a[] / 2;<br>a[] = a[] / '.';",
"	&amp;=		| a[] &amp;= b[];			| a[] = a[] &amp; b[];",
"	&vert;=		| a[] &vert;= b[];			| a[] = a[] &vert; b[];",
"	== =		| a[] == = b[];				| a[] = a[] == b[];",
"	!= =		| a[] != = b[];				| a[] = a[] != b[];",
"	===",
"	In the last two rows, the symbols may be written together, but have been shown separately for better clarity.<br><br>",
"",
"	In the destination variable is not existing yet and an assignment operator is applied, then the destination variable will",
"	be initialized implicitly with following values:",
"",
"	=== 200, 100, 200, 500, bold_column_1",
"	Type		| Value		| Examples		| Equivalen traditional formulation",
"	Numeral		| 0		| a[] += 5;		| a[] = 0; a[] = a[] + 5; ",
"	Literal		| '' (blank)	| a[] += 's';		| a[] = ''; a[] = a[] + 's';",
"	Date		| (blank date)	| a[] += date(today);	| a[] = date(''); a[] = a[] + date(today);",
"	Boolean		| false		| a[] &vert;= b[];	| a[] = false; a[] = a[] &vert; b[];",
"	parameter set	| {} (empty set)| a[] &vert;= {1,2};	| a[] = {}; a[] = a[] &vert; {1,2};",
"	===",
""
 ]
	,
"Examples 01:" : [
"	// Implicit initialization cases",
"",
"	a[0] += 3;",
"	a[1] += 'Hello';",
"	a[2] += date(\"2020-10-12\");",
"	a[3] |= false;",
"	a[4] |= { 1,2,3 };",
"	a[5] += true;   // Arithmetic operator converts true to 1 first",
"	a[6] = ''; a[6] -= 1; // a[] = '' - 1 is legitimate because arithmetic calculation ",
"	// of numbers with blank strings is valid where blanks are treated as zero.",
"",
"	// Doing some calculations",
"",
"	a[0] *= 2;      // 3 --> 6",
"	a[1] -= llo;    // Hello --> He",
"	a[2] += 1;      // Next day",
"	a[3] |= true;	// true",
"	a[4] *= 2;      // { 1,2,3, 1,2,3 }",
"	a[5] /= 2;      // 1 -> 0.5	",
"",
"	for all variables( a[], x[] ) echo ( x[] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Assignment operators on table cells" : [
"",
"	Using assignment operators on tables is supported to a limited extent since the type of the destination is either a literal or",
"	numeral (legitimate positive or negative number with or without decimal point recognized) unless the table has been configured",
"	differently using the __table configure(__) function."
 ]
	,
"Examples 02:" : [
"	include( Support Library );",
"	table create ( a );",
"",
"	[a:0,0] += 1;",
"	[a:0,1] += 'Hello';",
"	[a:0,1] -= 'llo';",
"	[a:0,1] += 'y'; // Hey",
"	[a:0,2] = true; // converts to literal",
"	[a:0,2] += ' false'; // 'true false'",
"",
"	table list(a);"
 ]
	,
    "Output 02:": "automatic"
},




"Ad-hoc Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ad-hoc operators" ],
"Description 01:Introduction" : [
"",
"	Ad-hoc operators are features which apply an immediate action on the variable or table field referenced.",
"	The increment and decrement operators (++ and --) common in C/C++, Java and Python are just two of a variety",
"	of ad-hoc operators.  Ad-hoc operators can be applied in following ways:",
"",
"	* Stand-alone use",
"	** As prefix: <b>++a[];</b>",
"	** As postfix: <b>a[]--;</b>",
"	* As part of a left-hand expression of assignments",
"	** As postfix: <b>a[]++ = 1;</b> (Prefix use would not make sense as it increments the value before being overwritten.",
"	* As part of a right-hand expression of",
"	** As prefix: <b>b[] = 3 + ++a[];</b>",
"	** As postfix: <b>b[] = 3 + a[]++;</b>",
"	** Combination of prefix and postfix use is allowed, e.g. <b>++a[]--</b>.  Actually, (a[]+1) in an expression is more meaningful.",
"	** In parameters for function calls, e.g. <b>echo( ++a[] )</b>",
"",
"",
"	=== 100, 900, noheader, noframe bold_column_1",
"	++		| Increment",
"	--		| Decrement",
"	++(<i>n</i>)	| Increment by specified numeral or numeric expression (negative values will obviously decrement the target value)",
"	--(<i>n</i>)	| Decrement by specified numeral or numeric expression (negative values will obviously increment the target value)",
"**(<i>n</i>)	| Apply scaling factor, with numeral or numeric expression in parentheses.  An equivalent symbol for division does  			  not exist.  Use a reciprocal value in combination with the scaling factor instead.",
"	===",
"	<u>Note</u>: The two consecutive characters need to be written together without spaces.  Otherwise they are recognized as",
"	plus, minus and multiplication symbols.  False example: <b>c[] = - - a[];</b> where the value of a[] is negated twice and",
"	assigned to c[].",
"",
"	Ad-hoc operators are allowed on target value with following types:",
"	* Numerals",
"	* Blank literals, which are treated as 0",
"	* Non-blank literals: All ad-hoc operations will be ignored.  No error messages occur, which may be beneficial when processing tables with mix of numbers and text",
"	* Dates: ",
"	** If containing dates: +/-1 represents next/previous days",
"	** If containing times: For example Adding a fraction of 1, e.g. <b>**(0.25)</b> for 6 hous, is possible",
"	* Parameter sets: All elements, including nested ones, are affected",
"	* Booleans: ++ sets to true -- sets to false.",
"",
"	Ad-hoc operators can be applied on variable as well as table cells.  However following restrictions apply:",
"",
"	* Applying ad-hoc operators on unknown variables.",
"	** Exception to rule: Post-fix use in assignments, e.g. <b>b[]++ = 3;</b> because the incrementation is carried out after the assignemnt is completed.",
"	* Variables where specific protections apply (read only)",
"	* Ad-hoc operators are not allowed in __transactions__, e.g. <b>a[]++ <== b[];</b>",
"	* They are also not allowed in function call requiring variables as code pices, e.g. in __dim(__), __protect(__), etc.",
"	* Ad-hoc operatoros on multiple table cells (e.g. in __horizontal table access__).  Only single cells are allowed.",
"",
"	B4P provides following ad-hoc operators;",
"",
"	<br><br>",
"	Ad-hoc operators can also be cascaded, e.g. <b>a[]++ ++</b>, <b>a[] **(3) ++</b>. Following restriction applies: All scaling operations must ",
"	happen before ++ and/or -- operators.  Not valid: <b>a[] ++ **(3)</b>.  However <b>++a[]**(3)</b> is OK."
 ]
	,
"Examples 01:" : [
"	a[] = 10;",
"	b[] = 20;",
"	d[] = 30;",
"",
"	echo(\"Demonstrate ad-hoc operations in right-hand expressions:\");",
"",
"	//    10          11            9             11",
"	echo( a[]++, ' ', a[]--, ' ', --a[], ' ', ++ ++a[] );",
"",
"	//    22             22 -> 66               6",
"	echo( **(2)a[], ' ', a[]**(3), ' ', **(1/11)a[] );",
"",
"	x[] = --(2) a[]++;  // Decrement a by 2, assign, then increment by 1. Result: 4, 5",
"",
"	echo( x[], ' ', a[]);",
"",
"	echo(new line, \"Demonstrate ad-hoc operations in left-hand expressions:\");",
"",
"	e[]++ = b[];       // becomes 21",
"	f[]**(2) = 10;     // becomes 20",
"",
"	echo( e[], ' ', f[]) ;",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations:\");",
"",
"	d[]++;             // Simple one, 31.",
"	**(2)e[]--;        // Double 21 to 42, subract by 1 becomes 41.",
"",
"	echo( d[], ' ', e[]) ;",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations in tables:\");",
"",
"	table create ( t );    // Ad-hoc operators applied on table cells",
"",
"	[t:0,0]++;             // Table entry was blank. Arithmetics interpret blanks as zero;  Contains 1.",
"	[t:0,0]**(3);	       // Multiplied by 3.",
"	echo( [t:0,0] );       // 3",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations with dates:\");",
"",
"	d[] = date( \"2020-08-01 18:30:00\" );",
"	echo( --d[] ); // Previous day",
"	echo( ++(0.5)d[] ); // Next day, 06:30",
"",
"	echo(new line, \"Demonstrate stand-alone ad-hoc operations with parameter sets:\");",
"",
"	a[] = { 1, 2, 5, 10, { 20, 50 } };",
"	a[]++;",
"	echo(a[]);"
 ]
	,
    "Output 01:": "automatic",
    "See also": "Ad-hoc operators overview"
},

"Cascading ad-hoc Operators" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "cascading ad-hoc operators" ],
"Description 01:Introduction" : [
"",
"	Unlike in other common programming languages, B4P supports cascaded ad-hoc operators.  Cascading is realized",
"	by applying multiple ad-hoc operators in sequence which are then always calculated from left to right.",
"	Cascading may be used for both prefix and postfix usages.",
"	<br>",
"	Some examples:",
"	=== 200, 800, noheader, noframe bold_column_1",
"	++ ++		| Increment twice",
"	++ --		| Makes no sense (original value)",
"	-- --		| Decrements twice",
"	++(3) ++	| Adds 4",
"	++ ++(3)	| Adds 4",
"	**(2) ++	| Multiplies 2, adds 1",
"	++ **(2)	| Syntax error. Scaling not allowed after ad-hoc incrementing or decrementing",
"	**(2) **(3)	| This combination is OK.  Multiples by 6",
"	**(1/2)		| Divides by 2",
"	==="
 ]
	,
"Examples 01:" : [
"	a[] = 10;",
"	b[] = date( \"2020-05-01 15:00:00\" );",
"	c[] = { { 1, 2 }, { 3, 4 }, 5 };",
"",
"	a[] ++ ++ ++ -- ++;        // Becomes 13, even if code appears less meaningful",
"	b[] ++(3.75) ++;	   // 4 days and 18 hours later",
"	c[] **(2) ++(2);	   // Double all elements, then add 2 on all of them",
"",
"	echo(\"a[] = \", a[],\"  b[] = \", b[] );",
"	echo(\"c: \", c[] );"
 ]
	,
    "Output 01:": "automatic"
},


"Ad-hoc Operators Overview" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "ad-hoc operators overview" ],
"Description 01:Introduction" : [
"",
"	The following table provides a summary of the ad-hoc rules.",
"	<br>",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with numerals:",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Increment by 1		| --		| Decrement by 1		| **		| Syntax error (factor missing)",
"	++ ++		| Increment by 2		| -- --		| Decrement by 2		| ** **		| \"",
"	++ (3)		| Add 3				| -- (3)	| Subtract 3			| **(3)		| Multiply by 3",
"	++ (-3)		| Subtract 3			| -- (-)	| Add 3				| **(1/3)	| Divide by 3",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with blank literals <b>''</b>  assumed zero:",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Sets to 1			| --		| Sets to -1			| **		| Syntax error (factor missing)",
"	++ ++		| Sets to 2			| -- --		| Sets to -2			| ** **		| \"",
"	++ (3)		| Sets to 3			| -- (3)	| Sets to -3			| **(3)		| 0 Multiplied by 3 = 0",
"	++ (-3)		| Sets to -3			| -- (-)	| Sets to 3			| **(1/3)	| 0 Multiplied by 3 = 0",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with non-blank literals  have no impact, and cause no exceptions.",
"",
"	<br><br>Ad-hoc operations on variables and table cells containing or assigned with blank dates <b>date('')</b> have no impact, and cause no exceptions.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"",
"	<br><br>Ad-hoc operations on variables and table cells containing or assigned with dates (e.g. <b>date(\"2020-01-01\")</b> ) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Tomorrow			| --		| Yesterday			| **		| Syntax error (factor missing)",
"	++ ++		| Day after tomorrow		| -- --		| 2 days before			| ** **		| \"",
"	++ (0.25)	| Same day			| -- (0.25)	| Same day			| 		| Results in blank date",
"	++ (3)		| 3 days later			| -- (3)	| 3 days before			| **(0)		| Results in blank date",
"	++ (3.75)	| 3 days later (same)		| -- (3.75)	| 3 days before (same)		| **(1)		| Unchanged date",
"	++ (-7)		| 1 week before			| -- (-7)	| 1 week later			| **(...)	| All other values: Exceptions (dates cannot be multiplied)",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with dates and times (e.g. <b>date(\"2020-01-01 12:45:00\")</b>) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Tomorrow			| --		| Yesterday			| **		| Syntax error (factor missing)",
"	++ ++		| Day after tomorrow		| -- --		| 2 days before			| ** **		| \"",
"	++ (0.25)	| 6 hours later			| -- (0.25)	| 6 hours earlier		| 		| Results in blank date",
"	++ (3)		| 3 days later			| -- (3)	| 3 days before			| **(0)		| Results in blank date",
"	++ (3.75)	| 3 days + 18 hours later	| -- (3.75)	| 3 days + 18 hours before	| **(1)		| Unchanged date and time",
"	++ (-7)		| 1 week before			| -- (-7)	| 1 week later			| **(...)	| All other values: Exceptions (dates cannot be multiplied)",
"	===",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with and times (e.g. <b>time(\"12:45:00\")</b>) are supported.<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Exception (not same day)	| --		| Exception (not same day)	| **		| Syntax error (factor missing)",
"	++ ++		| Exception (not same day)	| -- --		| Exception (not same day)	| ** **		| \"",
"	++ (0.25)	| 6 hours later (if same day)	| -- (0.25)	| 6 hours earlier (if same day)	| **(0)		| Results in blank date",
"	++ (3)		| Exception (not same day)	| -- (3)	| Exception (not same day)	| **(1)		| Unchaned time",
"	===",
"",
"",
"	<br>Ad-hoc operations on variables and table cells containing or assigned with booleans:<br>",
"	<u>Note</u>: Table cells do only apply if configured to retrieve dates as dates.",
"	=== 100, 233, 100, 233, 100, 233",
"	Operator	| Description			| Operator	| Description			| Operator	| Description",
"	++		| Sets to true			| --		| Sets to false			| **		| Syntax error (factor missing)",
"	++ ++		| Sets to true			| -- --		| Sets to false			| ** **		| \"",
"	++ (3)		| Sets to true			| -- (3)	| Sets to false			| **(0)		| Sets to false",
"	++ (-1)		| Sets to false 		| -- (-1)	| Sets to true			| **(1)		| Non-zero: Value unchanged",
"	++ (-3)		| Sets to false 		| -- (-3)	| Sets to true			| **(-1)	| \"",
"	===",
"",
"	<br>Ad-hoc operations on variables containing parameter sets:<br>",
"	All elements will be affected by this operation, including elements in nested parameter sets.  This is a clear difference from all other arithmetic operations ",
"	where you need to distinguish between regular operators (affects one individual value) and deep operators (affects elements in a parameter set at a specified depth).<br>",
"	<u>Note</u>: No impact on empty cells.",
"",
"	<br><br>",
"	<u>Note</u>: Ad-hoc operations on void values will cause exceptions."
 ]
	
}

,

  "Function Library" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function Library" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a large and comprehenisve library of different functions.¨",
"	Use the navigator bar to deep-dive into them.",
"",
""
 ]
	
   },


  "Control Flow Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Control Flow Functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a wide variety of control flow functions which include conditional branches and loops.",
"	In contrast to other programming languages, trivial features such as the __if(__) statement is actually",
"	a Beyond4P function which influences execution the next statement or block.",
"",
"	<br><br>",
"",
"	In case you miss the <b>goto</b> statement, there is a good reason for this.  The highly structured",
"	Beyond4P interpreter would have faced risky challenge if that statement would have been impleemented.",
""
 ]
	
   },

  "Loops" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loops" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a standard __do(__), __while(__) and __for(__) functions as they exist in quasi all",
"	common programming languages.  In addition, various <b>for all...</b> loops are available to work through",
"	tables and/or parameter sets.",
""
 ]
	
   },


  "Branches" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Branches" ],
"Description 01:Introduction" : [
"",
"	Branches include __if(__), __once(__), and __switch(__) and __check(__) combined with __case(__) functions.",
""
 ]
	
   },


  "Exception Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Exception Functions" ],
"Description 01:Introduction" : [
"",
"	Exception functions include the following: __pause__, __stop__, __end__, __exit__, __abort__, __throw__, __catch__ / __catch if__ and __interactive__.",
""
 ]
	
   },


  "Other Control Flow Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Other Control Flow Functions" ],
"Description 01:Introduction" : [
"",
"	Inclcudes: __with table(__) to provide a context allowing partial table references.",
""
 ]
	
   },

  "Code Execution Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Code Execution Functions" ],
"Description 01:Introduction" : [
"",
"	The functions enable translation of code fragments in string format and execute them directly.",
"	In addition, the __deep(__) function family allows to apply selected functions not only on single values",
"	but repeatedly across all values in parameter sets.",
""
 ]
	
   },




  "User-Defined Procedures and Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "User Defined Procedures and Functiions" ],
    "Keywords":			[ "User-defined procedures and functions", "user-defined procedures", "user-defined functions", "user procedures", "user functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P supports standard procedures which are in fact used to defined user-specific procedures and functions. ",
"	Procedures are defined as functions which do not provide a return value and must be called as a procedure.",
"	Functions are defined to always provide return values and must be called as functions where the return value must be used further.",
"	A combination of both is allowed which provides flexibility to use defined code either as a procedure or function.",
"",
"	<br><br>",
"	Additional function names may be defined for the same user code.  In this case, the local variable <b>function name[]</b> will be",
"	available to identify the function name used.",
"",
"",
"	<br><br>",
"	Inside the user-defined procedures and functions, following local variables are available, but cannot be deleted using __delete(__) function:",
"",
"	=== 300, 700, bold_column_1",
"	Name of local variable | Description",
"	function name[] | Name of called function.  This is insofar useful if __additional function names__ have been defined for the same code",
"	<i>parameter name</i>[] | Name of parameter provided.  Example: <b>hello[]</b> is defined if one of the parameters is called <b>hello</b>.",
"	parameter <i>n</i>[] | Numbered parameter provided.  If the number of parameter is not limited, then all remaining parameters are numbered, with 1 as 1st parameter.",
"	parameter count[] | Contains the number of parameters passed.  This is useful if the defined function allows for flexibility regarding number of parameters passed.",
"	===",
""
 ]
	
   },


  "Start or include Beyond4P Programs" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Start or include Beyond4P Programs" ],
    "Keywords":			[ "start programs", "include programs" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides __start(__) to start other Beyond4P programs.  Execution of this calling program continues when the Beyond4P program has ended.",
"	The __include(__) behaves similarly like __start(__), but memorizes the loaded program including the defined functions.  This features is useful",
"	to define and include user specific function libraries which can be re-used in different Beyond4P programs.",
""
 ]
	
   },




"Input / Output Functions":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "input output functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions text and console input / output features such as __echo(__) considered as a common",
"	building-block for text output, but also __console special effects__ like clearing screens (__cls(__)) and changing text colors.",
""
 ]
	
},


"Text Input / Output":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "text input output" ],
"Description 01:Introduction" : [
"",
"	This subsection covers text-based input/output such as __input(__), __echo(__), __print(__) and so forth.",
""
 ]
	
},


"Console Special Effects":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console special effects" ],
"Description 01:Introduction" : [
"",
"	This subsection covers special effects such as clearing screens, moving cursors and changing text and background colors.",
""
 ]
	
},




"Inspection and Debugging":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Inspection and debugging" ],
"Description 01:Introduction" : [
"",
"	The functions described in the following section are suited for __interactive mode__ and program use.  These functions provide",
"	convenient insight into variables and tables.",
""
 ]
	
},




"Type Conversion and Formatting Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Type Conversion Functions" ],
    "Keywords":			[ "type conversion" ],
"Description 01:Introduction" : [
"",
"	A set of functions are available to convert data in one type (e.g. __literals__) into other types (e.g. __dates__ and __numerals__).",
"	Converting values to __literal__ type supports a broad library of smart formatting features in order to output numbers, dates, etc. ",
"	in a desirable format.",
""
 ]
	
},




"Mathematics and Statistics" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Mathematics and Statistics" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a broad range of advanced mathematics and statistics functions.",
""
 ]
	
},



"Basic Math Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic math functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides various functions to check numeric values and carry out basic mathematis functions.",
""
 ]
	
   },


"Transcendental Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "transcendental functions" ],
"Description 01:Introduction" : [
"",
"	Transcendental functions are less mystic than you are believing.",
"	They include advanced mathematical functions covering logarithmic, exponential, trigonomietric and hyperbolic functions",
"	and suitable for everyday mathematics tasks.",
""
 ]
	
},



"Series Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "series functions" ],
"Description 01:Introduction" : [
"",
"	This section covers all functions which can process value series of variable sizes.",
""
 ]
	
   },	

"Matrix Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a library of powerful matrix functions.  While vectors are modeled as 1-dimensional __parameter sets__ containing __numerals__,",
"	matrices are modeled as __parameter sets__ (rows) containing __parameter sets__ containing __numerals__ (columns).",
"",
"	Example: <b>{{ 1, 2, 3 }, { 4, 5, 6 }}</b> is a matrix consisting of 2 rows and 3 columns:<br><br>",
"",
"	| 1  2  3 |<br>",
"	| 4  5  6 |<br>",
"",
"	<br>",
"",
"	These matrix functions are a supplement to __matrix arithmetics__ which make use of so called __deep operators__.",
"	You won't find a matrix addition function (like <i>madd(a[],b[])</i>) because it is realized with <b>a[] +^^ b[]</b>.",
"",
"	<br><br>",
"",
"	In addition to Matrix Functions which are part of the mathematical function library, __Matrix Manipulations__ provide additional",
"	matrix functions where the contents may be of any data type.  These functions do not apply any arithmetics on the values.",
"",
""
 ]
	
   },	

 "Statistics Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "statistics functions" ],
"Description 01:Introduction" : [
"",
"	This section covers all statistics functions.",
""
 ]
	
  },



 "Finance and Business Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "finance functions" ],
    "Keywords":			[ "business functions" ],
"Description 01:Introduction" : [
"",
"	This section various functions needed for financial calculations, business and capacity planning.",
""
 ]
	
  },




 "Parameter Set Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set functions" ],
"Description 01:Introduction" : [
"",
"	This section describes various functions used to process or check parameter sets.",
"	<br>Additional powerful functions using parameter sets extensively are __series functions__, __matrix functions__, ",
"	__statistics functions__ and __conditional combination functions__.",
""
 ]
	
  },



"Set Search and Extraction Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set search and extraction" ],
    "Keywords":			[ "parameter set search functions", "parameter set extraction functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for parameter set patterns and extract subsets from parameter sets.",
""
 ]
	
  },



 "Matrix Manipulation Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix manipulation functions" ],
    "Keywords":			[ "matrix manipulations" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a library of powerful matrix functions.  While vectors are modeled as 1-dimensional __parameter sets__ containing __numerals__,",
"	matrices are modeled as __parameter sets__ (rows) containing __parameter sets__ containing __numerals__ (columns).",
"",
"	Example: <b>{{ 1, A, 3 }, { B, 5, F }}</b> is a matrix consisting of 2 rows and 3 columns:<br><br>",
"",
"	| 1  A  3 |<br>",
"	| B  5  F |<br>",
"",
"	<br>",
"",
"	In addition to these functions, a different section called __Matrix Functions__ provide arithmetic functions on matrixes containing",
"	numerals, for example matrix multiplication, inversion and calculating determinants.",
""
 ]
	
  },



"Date and Time Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "date and time functions" ],
"Description 01:Introduction" : [
"",
"",
"	Beyond4P provides some powerful functions to process date and time information (particularly the variable type __date__) as well as stopwatch functions.",
"",
"	The sections are:",
"	* __Date functions__",
"	* __Time functions__",
"	* __Stopwatch functions__",
"",
"	The following important date functions are found in the section __Type Conversion Functions__ and connvert data of other types, e.g. __literals__, to __dates__.:",
"	* __date(__)",
"	* __pure date(__)",
"	* __date time(__)",
"	* __time(__)",
"	* __pure time(__)",
""
 ]
	
  },

"Date Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "date functions" ],
"Description 01:Introduction" : [
"",
"",
"	Beyond4P provides some powerful functions to process date .",
"",
"	<br><br>",
"",
"	The following important date functions are found in the section __Type Conversion Functions__ and connvert data of other types, e.g. __literals__, to __dates__.:",
"	* __date(__)",
"	* __pure date(__)",
"	* __date time(__)",
"	* __time(__)",
"	* __pure time(__)",
""
 ]
	
  },


"Time and Stopwatch Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "time and stopwatch functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides some powerful functions to process time information (particularly the variable type __date__ with time info contained)",
"	as well as stopwatch functions to measure the performance of your applications.",
""
 ]
	
  },


"Sleep and Wait Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "sleep and wait functions" ],
"Description 01:Introduction" : [
"",
"	The following functions suspend program execution for a specified time or until a specific time has been reached.",
"	The delay will pause Beyond4P's process and lets other application run at full speed.",
""
 ]
	
  },


"String Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "string functions" ],
    "Keywords":			[ "literal functions" ],
"Description 01:Introduction" : [
"",
"	This section describes procedures and functions for character and string manipulations.",
""
 ]
	
  },


"String Search and Extraction Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "string search and extraction" ],
    "Keywords":			[ "string search functions", "string extraction functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for string patterns and extract substrings from stings.",
""
 ]
	
  },


"Character Encoding and Decoding":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "character coding" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for string patterns and extract substrings from stings.",
""
 ]
	
  },


"Miscellaneous String Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Other string functions" ],
"Description 01:Introduction" : [
"",
"	All other string functions, including random string generation, are explained next.",
""
 ]
	
  },



"Table Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "table functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes all table functions.",
""
 ]
	
  },

	
"Creating and Deleting Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "table creating deleting" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic functions to create and delete tables.",
""
 ]
	
  },


"Accessing Table Information":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "accessing table info" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic table functions to access following information",
"",
"	* Existence of specified table",
"	* Lengths",
"	* Widths",
""
 ]
	
  },

"Accessing Table Contents":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Accessing table contents" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic table functions to access contents.",
""
 ]
	
  },


"Loading and Saving Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loading and saving tables" ],
"Description 01:Introduction" : [
"",
"	The procedures and functions described next cover loading and saving tables with a broad variety of data formats.",
""
 ]
	
  },


"Input/Output with Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Input output wtih tables" ],
"Description 01:Introduction" : [
"",
"	The following functions relate to table-specific input / output features. They include:",
"",
"	* Listing tables",
"	* Using tables as menus and asking for choices"
 ]
	
  },


"Checking and Processing Headers":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Checking headers", "Processing headers" ],
"Description 01:Introduction" : [
"",
"	This subsection various functions which check table headers.",
"	It is highly advisable to check the input data to ensure that the corresponding headers and structures",
"	are available and error messages can be issued very early rather than somewhere in the middle of data processing steps.",
""
 ]
	
  },


"Searching Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Searching tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to search for data inside tables.",
"",
"",
""
 ]
	
  },



"Processing Table Columns":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table columns" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to process table columns, i.e. ",
"	inserting, deleting, rearranging, processing, etc.",
"",
"",
""
 ]
	
  },


"Processing Table Rows":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table rows" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means process table rows, i.e.",
"	inserting, deleting, rearranging, manipulating, etc.",
""
 ]
	
  },



"Processing Table Contents":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table contents" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means process table contents.",
""
 ]
	
  },


"Renaming, Copying and Splitting Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Copying and spitting tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to copy and split tables.",
""
 ]
	
  },


"Checking and Comparing Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Checking and comparing tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to check tables for consistency and duplications as well",
"	as a simple-to-use function to compare tables and generate comparison reports.",
""
 ]
	
  },


"Looking up Other Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Looking up Other Tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient lookup features to retrieve selected information from other",
"	tables.",
""
 ]
	
  },

"Pivoting and Conosolidating Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Pivoting and consolidating tables" ],
"Description 01:Introduction" : [
"",
"	The functions described in this sections are building blocks to do powerful pivoting and consolidating tables.",
"	All functions have been optimized to deliver maximum performance, even with very large tables.  The functions",
"	described in the following sections cover follwing aspects:",
"",
"	* Transposing contents (i.e. contents in 1st column become row headers)",
"	* Serializing horizontally laid out data",
"	* Spreading serialized data out horizontally (opposite of above), and",
"	* Consolidating tables (boiling tables down to fewer rows with specific consolidation actions serving as ingredients)",
""
 ]
	
  },



"Combining Multiple Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Combining Multiple Tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next cover the art of combining two (or more) tables using the fine arts of <a href=\"https://en.wikipedia.org/wiki/Relational_algebra\" target=\"_blank\">relational algebra</a>",
"	where different algebraic rules can be applied to rows and columns.",
"",
"	<br><br>",
"",
"	In a simple example, two tables with members of two clubs (e.g. tennis and squash) need to be merged into one where the last and first names of the",
"	members shall act as matching identifiers.  In case no person has a membership in both clubs, no overlap applies, and the list will simply be",
"	appended where the data are aligned to the right columns, using header names as orientation.  The columns in both tables do not need to be aligned",
"	before the merger.  If one or more persons possess memberships in both clubs, then the information will be consolidated where the same ",
"	__ consolidation actions__ rules are available as used by __table consolidate__.  As an example, the account receivable (e.g.",
"	indoor court reservation fees to be balanced) can be added up whereas the preferences at the club bar can be consolidated with <b>append once</b>",
"	so the preference for tonic water at one club and beer at the other club will appended into \"tonic water, beer\".",
"",
"	<br><br>",
"",
"	If no identifier columns are defined in the functions described next, then every row will be considered unique.  Merging the table is treated appending two tables,",
"	with aligning the data into the right columns.	 ",
"",
"	<br><br>",
"",
"	The following table summarizes the 25 functions in a 5 x 5 matrix with specifc rules to be applied on rows as wll as columns.",
"	The table contains illustrations on how the rows are combined (shades of red / orange / yellow) and how columns are combined (shades of",
"	gray and light blue).  The syntax of the function name does first describe the operation on the rows (e.g. __table merge__) followed by",
"	the operation on the columns (e.g. __table merge extend columns(__)).  If no extension like <b>... extend columns</b> is specified, then",
"	no additional columns are added in the target table and the data in the source table not fitting in the target table structure will not be taken over.",
"",
"	",
"		<br/><img src=\"Images/Description_Combining_Multiple_Tables.jpg\" alt=\"Combining Multiple Tables\"><br/><br/>",
"",
"	The term <i>exclusivity</i> is also known as <i>symmetric difference</i> and <i>disjunctive union</i>.",
"",
"" ],
"Description 02:Additional Functions" : [
"",
"	Following table operations are also described in this section:",
"	* Multiplying tables",
"	* Dividing tables (binary division in relational algebra)",
"	* Arranging tables sideways.",
"",
""
 ]
	
  },





"Exploring and Extracting Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Exploring and Extracting Tables" ],
"Description 01:Introduction" : [
"",
"	A new powerful B4P feature, consisting of three functions, is to identify, select and extract one or more sub-tables located inside a table.",
"	This becomes very useful when dealing with sophisticated tables created by external sources where you cannot advise them how to",
"	structure the data so you can use them easily.  Following three functions need to be called in sequence:",
"",
"	__table explore(__): This function identifies all sub-tables inside a table where a few criteria settings are available to identify tables and keep them ",
"	separate from other contents, e.g. title texts.",
"	<br><br>",
"	This function returns a parameter set containing 0, 1 or more coordinates for every sub-table found.",
"	The sub-tables beginning on the same row must contain a spacing of 1 column.  Direct neighboring is possible if the next table begins at a different tow (Illustration: See sub-table 2 and 3).",
"	<br><br>",
"	__table filter(__): The collection of coordinates can be narrowed down by matching header contents with given patterns and specifying minimum ",
"	table widths and heights.  This function also returns the same kind of parameter set, but probably with fewer coordinates.",
"	<br><br>",
"	__table extract(__): This final function will extract a selected sub-table based on the coordinates and sub-table chosen.  ",
"	Tables can be extracted either into new blank tables or added to existing tables, allowing to arrange them horizontally and/or vertically.",
"",
"",
"	",
"		<br/><img src=\"Images/Description_Exploring_and_Extracting_Tables.jpg\" alt=\"Exploring and Extracting Tables\"><br/><br/>",
"",
""
 ]
	
  },



"Variables Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "variables functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes all functions processing variables.  The functions are categorized into the following:",
"	* Obtaining information about the variables",
"",
""
 ]
	
  },


"Basic Variables Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic variables functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes all basic functions aroun variables",
"	* Information about variables",
"	* Simple data movements",
"	* Deleting variables",
"",
"	__Arrays and structures__ will be addressed in the following section.",
""
 ]
	
  },


"Arrays and Structures":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Arrays and Structures" ],
"Description 01:Introduction" : [
"",
"	This section provides an overview of functions defining and working with __arrays__ and __structures__.",
""
 ]
	
  },


"Loading and Saving Variables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loading and saving variables" ],
"Description 01:Introduction" : [
"",
"	The following functions provide convenient methods to save variables (including all the structure and array members and sub-members) into files or $",
"	text strings (literals) and vice versa in JavaScriopt Object Notation (JSON).  Focus is given on full data preservation in round trip cases, ",
"	i.e. data is saved as JSON and covered again, and vice versa.",
"",
"	<br><br>",
"",
"	Following rules will be applied when saving variables into JSON text. ",
"	These rules are insofar important because the Beyond4P can consist of both base variables, array and structure members and sub-members, ",
"	and the simple JSON representation focuses on leaf data, meaning the final members and sub-members without the intermediate one.  ",
"	In addition, special rules are applied to save Beyond4P specific formats such as dates (and times) and parameter sets.",
"",
"	Following special rules apply",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	General			| The base variable as well as all members and sub-members, regardless if array or structures, will be saved.",
"	__Simple Variables__	| If the variable is a simple variable, then it will be saved as a JSON plain array containing 1 element.  Using 'JSON B4P' option in the loading process will recover the variable properly.",
"	__Arrays__		| B4P arrays are stored as JSON arrays",
"	__Structures__		| B4P structures are stored as JSON objects",
"	Literals		| Literal string contents are stored as text in double quotation marks",
"	Numerals		| Numerals are written as numbers without quotation marks.  When saving, scientific notation is not used.  However, JSON files containing scientific notation will be loaded correctly.",
"	Booleans		| Will be written as <b>true</b> and <b>false</b>.  B4P will recognize boolean values and convert them to Boolean type",
"	Void values		| Are written as <b>null</b> in JSON output.",
"	Dates			| Dates (and times) are written as text in following formats: \"YYYY-MM-DD\", \"hh:mm:ss\", \"YYYY-MM-DD hh:mm:ss\", and \"0000-00-00\".  The last value refers to a blank date and will be recognized as such. When reading JSON data, dates and times must adhere strictly with the given formats, otherwise they will be loaded as text (e.g. \"01 April 2020\").",
"	Parameter Sets		| Parameter sets will be converted to string format (similarly implemented as in the __literal(__) function) and stored as text.  Literals are stored in single qutoation marks, aiming to avoid confusion wtih double quotation marks for JSON text contents.  Example: \"{1,true,'Abc'}\".  Nested parameter sets are supported.",
"	Loading literals	| All loaded literals are declared as <b>quoted literals</b>",
"	Special characters	| Specific characters will be converted to JSON-compliant escape sequences, e.g. new line, quotation marks inside literals, etc. ",
"	==="
 ]
	,
"Description 02:Intermediate Nodes" : [
"	The JSON model describes a tree containing data at the end nodes only (leaves) whereas B4P variable model also supports data in intermediate",
"	nodes as well.  In these case, intermediate arrays containing 2 elements are introduced to describe the intermediate node followed by the ",
"	remaining data up the data tree.  See the program example below:" ],
"Examples 02:JSON code without and with intermediate nodes" : [
"	b[Red] = Rot;",
"	b[Green,light] = Hellgrün;",
"	b[Green,dark] = Dunkelgrün;",
"	b[Blue,light] = Hellblau;",
"	b[Blue,dark] = Dunkelblau;",
"",
"	inspect(b[]);",
"",
"	j[] = variable to json( b[], JSON);",
"",
"	echo(\"JSON code:\", new line, j[], new line, \"_______\" );",
"",
"	json to variable( c[], j[], JSON B4P );",
"	inspect( c[] );",
"",
"	echo(new line, \"Add data to intermediate nodes\");",
"",
"	b[] = Colors;",
"	b[Green] = Shades of green;",
"",
"	j[] = variable to json( b[], JSON);",
"",
"	echo(\"JSON code:\", new line, j[], new line, \"_______\" );",
"",
"	json to variable( c[], j[], JSON B4P );",
"	inspect( c[] ); // Same as before."
 ]
	,
	"Output 02": "automatic"

  },



"Variable References Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable references functions" ],
"Description 01:Introduction" : [
"",
"	This section describes functions related to __variable references__.",
""
 ]
	
  },


"Resident Attributes Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Resident attributes functions" ],
"Description 01:Introduction" : [
"",
"	Resident attributes are values which can be stored in dedicated files.  In contrast to loading and saving variables, attributes are tuples",
"	consisting of <i>attribute names</i> and <i>attribute values</i>.  Values can take any type, e.g. numeral, literal, date, Boolean and parameter set.",
"	Attribute names can be either flat (just one name) or hierarchical (parameter set containing multiple names representng a sort of path name).",
"",
"	<br><br>",
"	In contrast to Microsoft Windows registry, the B4P resident attributes is an operating-system independent solution to store small amounts of data",
"	or settings conveniently.  One file may contain one or more settings.  Thd data format used is JavaScript Object Notation (JSON).",
"",
"	<br><br>",
"	If a nested sub-attribute is created, then the values associated to the attributes are blank literals \"\", and not void.",
"	Example:  attribute write ( path[ ], file[ ], {local machine, local settings, date format}, \"YYYY-MM-DD\" ) will automatically assign \"\" to attribute name local machine, ",
"	and local settings if not yet existing.",
""
 ]
	
  },



"Comparison and Selection Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Comparison and selection functions" ],
"Description 01:Introduction" : [
"",
"	Common programming languages use standard constructs like <b>if ... else</b> or condensed statements",
"	such as <i>[condition]</i> <b>?</b> <i>[expression if true]</i> <b>?</b> <i>[expression if false]</i>,",
"	Aiming to allow for more dense and efficient coding, B4P provides a set of effective comparison and",
"	selection functions.  The functions come in two fragrances:",
""
 ]
	,
"Description 02:select ... ()" : [
"	In these functions all parameters are fully calculated regardless of the condition and/or if the values are finally selected or discarded.",
"	This approach is most efficient if the values are constants or simple expression (e.g. a constant, referring to variable, a table entry,",
"	a simple calculation, etc.) or if manipulations must be made in any case, e.g. doing a function call or incrementing/decrementing variables."
 ]
	,
"Examples 02:Program example - all expressions are calculated:" : [
"	a[] = select if( true, echo(yes), echo(no) ); // Note. Both 'yes' and 'no' are printed here",
"	echo(\"Result is \", a[] );"
 ]
	,
    "Output 02:Result:": "automatic",
"Description 03:pick ... ()" : [
"	In these functions, the expressions for the values to select are only calculated if the results are needed.  Otherwise, these expressions",
"	will be skipped.  This approach saves a lot of computation effort if more sophisticated expressions are contained.  In addition, if a variable",
"	in an expression not selected is not defined, this does not matter because that expression is skipped."
 ]
	,
"Examples 03:Program example - 'echo(no)' is not executed:" : [
"	a[] = pick if( true, echo(yes), echo(no) ); // Note: Only 'yes' if printed",
"	echo(\"Result is \", a[] );"
 ]
	,
    "Output 03:Output": "automatic"
},



"Directory and File System Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "directory and file system functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to access and process files and directories.  Following key features ",
"	are included.",
"",
"	* Accessing, searching and manipulating directories (create, change to, rename, remove directories)",
"	* Accessing, searching and manipulating files (directory listings, copy files, rename files, delete files)",
"	* Disk functions (e.g. disk size info)",
"	* Internet access (download files)",
""
 ]
	,

"Description 02:Path and File Names" : [
"",
"	Under Windows, the path names are a chain of directory and subdirectory names separated with backslash '\\' symbols.  Under LINUX and MACOS,",
"	the forward slash '/' is used.  Unless specified otherwise do add quotation marks to (sub-) directory and file names if they contain spaces.",
"	Avoid using symbols not supported or recommended by the operating systems, e.g. '<', , '&', '>' and ':'.",
"",
"	<br><br>",
"",
"	Beyond4P tolerates both slash symbols and does the operating system conversions automatically. Even a mix of both symbols are OK. Following examples are valid:",
"	* C:/Program Files\\Beyond4P.exe",
"	* \\usr\\local/bin\\Beyond4P",
"",
"	<br><br>",
"",
"	If the specified directory or file name contains no path name in front, then the current drive and working directory are assumed.",
"",
"	<br><br>",
"",
"	<u>Attention:</u> Directory and file names are case sensitive in LINUX and MACOS systems, but not in Windows.",
""
 ]
	,
"Description 03:Exception Handling" : [
"",
"	Various procedures and functions contain <b>... silently</b> as ending part of their names.  This suffix",
"	lets Beyond4P to issue return values which are either \"OK\" or contain a short error message.  Without the",
"	suffix, an exception happens, program execution will stop and enters __interactive mode__.",
"",
"	=== 250, 250, 500",
"	Return values for file functions	| Return values for directory functions | Description",
"	OK					| OK					| Successful execution",
"	Path not found				| Path not found			| Specified directory path not found or invalid",
"	File not Found				| Directory not found			| File / directory not found",
"	File access denied			| Directory access denied		| File / directory access denied. Insufficient privileges.",
"	File write-protected			| (n/a)					| File is write-protected.  Check protection settings.",
"	(n/a)					| Directory not empty			| Directory is not empty (contains files and/or sub-directories)",
"	File locked				| Directory locked			| File / directory is locked by other applications. Close the other application.",
"	File already existing			| Directory already existing		| File / The file already exists (e.g. attempt to overwrite with file copy function). For files, use the equivalent function name containing the suffix <b>overwrite</b>.",
"	File error				| Directory error			| Invalid file / directory name or file locked by other application.",
"	File invalid chars			| (n/a)					| File name contains invalid characters",
"	Can't move files across devices		| Can't move files across devices	| Can't move files across devices (with __file rename(__) function)",
"	File found directory expected		| Directory found file expected		| Specified directory name refers to an existing file, and vice versa",
"	===",
""
 ]
	
  },



"Basic Directory and File Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic directory and file functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search to accesss directories and files.",
""
 ]
	
  },


"Listing and Searching Directories and Files":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "listing directories and files" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to obtain list of existing filse and directories, as well as searching for files and directories.",
""
 ]
	
  },

"Manipulating Directories and Files":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "manipulating directories and files" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to create, copy, rename and delete files and directories",
""
 ]
	
  },




"File Compression and Decompression":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "file compression decompression" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions compress and decompress files.  The data compression and decompression features are",
"	implemented in B4P in the library file 'Zip Library' and makes use of the zip program in the standard installation (Linux, MacOS)",
"	or relies on the installed 7-Zip program on Windows installations because 7-zip provides a set of compression and decompression commands",
"	which Windows does not.  See  <a class=\"bold_text\" target=\"_blank\" href=\"http://www.7-zip.org\">7-zip</a> for details.",
"	<br><br>",
"	<u>Note</u>: All Microsoft office featuers, e.g. loading Excel files, rely on these file compression and decompression functions.",
""
 ]
	
  },



"System Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "system functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes system specific functions including executing operating system commands (like Windows CMD, Linux shell, etc.)",
""
 ]
	
  },


"Executing System Commands":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "executing system commands" ],
"Description 01:Introduction" : [
"",
"	This section describes the __system(__) function to execute system commands and also provides a function called __quote path(__) to precondition ",
"	path and file names so they can be used as command line parameters for system commands accordingly.",
""
 ]
	
  },


"Registry Access Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "registry access functions" ],
"Description 01:Introduction" : [
"",
"	The Microsoft Windows operating system provides a <i>registry</i> which is a hierarchical database to store sytem and application",
"	settings.  The contents in the registry affect the behavior of the operating system, windows graphical user interface and application",
"	program.  B4P provides a set of registry access functions, however access to them have been restricted due to a considerable risk",
"	that unexperienced usage could cause severe and irreversible harm to the system.  The B4P installer program is actually accessing the registry in order to",
"	assign the file type \".b4p\" to the B4P program, and to assign the icon to that file type.",
"",
"	<br><br>",
"	For the reason above, the B4P contains no description of the registry access functions.  Linux and MacOS do not maintain such a registry.",
"	If you intended to use the registry for storing individual values, then consider using the __resident attributes functions__ instead, and this one",
"	works on all supported operating systems.",
"",
"	<br><br>",
"	Please contact us if you need to write a B4P program which needs to access the registry and you have a good reason for that."
 ]
	
  },


"Licensing and Privileges":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "licensing and privileges" ],
"Description 01:Introduction" : [
"",
"	The following functions relate to system and B4P programming privileges as well as functions needed to activate licensing.",
"	As an example, these functions are used in the B4P installation script.",
""
 ]
	
  },




"Help and Support Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "help and support functions" ],
"Description 01:Introduction" : [
"",
"	The functions described next are ideally suited for interactive use in order to obtain more information",
"	about specific functions and features and access on-line and off-line documentation directly.",
""
 ]
	
  },

// ________________________________________________________________________________________ "/


"Cross-Functional Info":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Cross-functional info" ],
"Description 01:Introduction" : [
"",
"	This section contains various information which apply to different functions across the function library,",
"	for example applicable sorting and consolidating options.",
""
 ]
	
  },


"Sorting and Ranking Options":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Sorting options", "Ranking options" ],
"Description 01:Introduction" : [
"",
"	The sorting options are used (amongst others) by following functions:",
"	* __table sort columns(__)",
"	* __table sort rows(__)",
"	* __table sort selected rows(__)",
"	* __table rank rows(__)",
"	* __table rank selected rows(__)",
""
 ]
	,
"Description 02:Overview of Available Options" : [
"",
"	=== 200, 800, bold_column_1",
"	Sorting / Ranking Option 	| Description",
"	alphabetic			| Alphabetic order by UNICODE character set.",
"	alphabetic down			| Opposite direction of above",
"	alphabetic ignore case		| Alphabetic order, but ignores case (e.g. 'the Hague' comes before 'Uruguay')",
"	alphabetic down ignore case	| Opposite direction of above",
"	alphabetic ignore blanks	| Same as alphabetic. Blanks (incl. new line, tabs, space) are ignored.  'St. Moritz' and 'St.Moritz' are equivalent.",
"	alphabetic down ignore blanks	| Opposite direction of above",
"	alphabetic ignore both		| Same as alphabetic, ignoring both case and blanks",
"	alphabetic down ignore both	| Opposite direction of above",
"	numeric				| Sorts by numbers.  Non-numeric contents are interpreted like zero.  Smallest number comes first.",
"	numeric down			| Opposite direction of above",
"	date				| Sorts by dates.  Fields containing no qualified dates are interpreted like blank dates.  See rules below the table.",
"	===",
"",
"	Rules on literals:",
"	* Blank literal '' comes first",
"	* One space symbol ' ' (UNICODE 32) comes next.",
"	* Sorting is done based on UNICODE character codes.",
"	* Sorting takes no cultural implications into consideration (e.g. Spanish: LL follows L).",
"	* Numbers are also treated as literals: 0100 comes before 10.",
"",
"	Rules on numerals:",
"	* For contents beginning a number: The 1st number will be recognized.",
"	* For contents beginning with non-numeric symbols: Interpreted as zero.",
"",
"	Rules on dates:",
"	* Blank dates come first.",
"	* If year is missing, current year is assumed.",
"	* If day is missing, the 1st day of month is assumed.",
"	* Month names in key languages like \"Jan\", \"feb\", \"März\", \"avril\", \"May\", \"juni\", etc. are recognized as months and sorted accordingly.",
"	* Local settings are used as rules to resolve country dependent date formats like 01/02/2015 (day and month ordering: 2. Jan 2015 or 1. Feb 2015).  Local settings are in the system variables and can be changed.",
"	* Time values in the date are ignored.  E.g. \"14.07.2016 10:00\" and \"14.07.2016 11:00\" are treated as identical values",
"",
"	Rules on dates and times:",
"	* Blank dates come first.",
"	* Date values without time come before date values with time (e.g. \"00:00:00\") if date are on the same day.",
"	* Time values are not ignored",
"",
"	Rules on times:",
"	* Blank dates come first.",
"	* Date values are ignored.  \"14.07.2016 10:00” and “15.07.2016 10:00” are treated as identical values",
"",
"	Following example shows a ranking based on the different options applied."
 ]
	,

"Examples 02:" : [
"	include( Support Library );",
"	",
"	table initialize ( t,",
"	{ { Scheme, alphabetic, alphabetic down, alphabetic ignore case, alphabetic down ignore case, numeric, numeric down, date, date down, time, time down },",
"	    \"02-Dec-2020 10:00\", \"02-Nov-2020 11:00\", \"05\", \"1\", \"Dec\", \"apr 15\", \"-1\", \"\", \"begin\" } );",
"",
"	for all parameters( [t:1..,0], option[] )  table rank rows( t, option[], Scheme, option[], 113 ); // 113 - Same ranking share same ranking position",
"	table transpose (t);",
"	table list (t);		"
 ]
	,

    "Output 02:": "automatic"

  },



"Consolidation Actions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "consolidation actions" ],
"Description 01:Introduction" : [
"",
"	The sorting options are used (amongst others) by following functions:",
"	* __table consolidate(__)",
"	* __table merge(__) function family",
""
 ]
	,
"Description 02:Overview of Available Consolidation Actions" : [
"",
"	The consolidation actions does only take place if a matching row further down in the table (or source table if 2 tables are combined) needs",
"	to be consolidated to the target fields.  No actions are applied if only one row exists with same identifer contents. ",
"",
"	=== 200, 800, bold_column_1",
"	Consolidation Action		| Description",
"	none				| No consolidation: The destination fields will not be overwritten.<br>At the end of the consolidation run, the destination field contains the data from the first row belonging to the group.",
"	overwrite			| Source field overwrites destination field. <br>At the end of the consolidation run, the destination field contains the data from the last row belonging to the group.",
"	overwrite if blank		| Source field overwrites destination field if the destination field is still blank. See <sup>1</sup>",
"	overwrite except blank		| Source field overwrites destination field if the soruce field is not blank. See <sup>1</sup>",
"	blank				| Destination field will be blanked.  Useful to void contents no longer needed after consolidation.",
"	zero				| Destination field will be set to 0. Useful to void contents no longer needed after consolidation.",
"	delete				| This column will be deleted after the consolidation run.  Useful to get rid of contents no longer needed.",
"	append				| Append string contents from source fields to destination fields.  A separator string will be inserted if available.",
"	append once			| Like above, but contents are only appended if not yet found in the destination string.",
"	must match			| Checks source and destination fields.  If they differ, then <b>(Inconsistent)</b> will be written.",
"	blank if different		| Checks source and destination fields.  If they differ, then the destination fields will be blanked.",
"	min abc				| Choose the entry in the lower alphabetc sorting order (e.g. abc preferred over def). Blanks have highest priority. ",
"	min abc ignore blanks		| Choose the entry in the lower alphabetc sorting order (e.g. abc preferred over def). Blanks have lowest priority. See <sup>1</sup>",
"	max abc				| Choose the entry in the higher alphabetc sorting order (e.g. def preferred over abc). Blanks have lowest priority.",
"	min				| Choose the entry with the smaller value. Blanks and non-numeric contents are treated as zero.",
"	min ignore blanks		| Choose the entry with the smaller value. Blanks have lowest priority. Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	min ignore zero			| Choose the entry with the smaller value.  Blanks and non-numeric contents and zero have lowest priority. See <sup>2</sup>",
"	max				| Choose the entry with the greater value. Blanks and non-numeric contents are treated as zero.",
"	max ignore blanks		| Choose the entry with the greater value. Blanks have lowest priority. Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	max ignore zero			| Choose the entry with the greater value.  Blanks and non-numeric contents and zero have lowest priority. See <sup>2</sup>",
"	sum				| Calculates the sum: Adds source fields to destination fields.",
"	sum blank if zero		| Calculates the sum: Adds source fields to destination fields. If destination field is 0, it will be set to blank.",
"	product				| Calculates the product: Multiplies source fields to destination fields.  Blanks and non-numeric contents are treated as zero.",
"	product ignore blanks		| Calculates the product: Multiplies source fields to destination fields.  Blanks are ignore, but non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	product ignore zero		| Calculates the product: Multiplies source fields to destination fields.    Blanks and non-numeric contents and zero are ignored.  See <sup>2</sup>",
"	average				| Calculates the average (sum divided by number of rows consolidated). Blanks and non-numeric contents are treated as zero.",
"	average ignore blanks		| Calculates the average (sum divided by number of rows consolidated). Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	average ignore zero		| Calculates the average (sum divided by number of rows consolidated).  Blanks and non-numeric contents and zero are ignored. See <sup>2</sup>",
"	count				| Count all fields.  Is always 1 or bigger.",
"	count ignore blanks		| Count non-blank fields only. See <sup>1</sup>",
"	count ignore zero		| Count non-zero fields. 0, blanks and non-numerals are ignored.",
"	count positive			| Count if value is > 0. 0, blanks and non-numerals are ignored.",
"	count positive or zero		| Count if value is >= 0.  Blanks and non-numerals are treated as 0 and will be counted.",
"	count negative			| Count if value is < 0. 0, blanks and non-numerals are ignored.",
"	count negative or zero		| Count if value is <= 0.  Blanks and non-numerals are treated as 0 and will be counted.",
"	===",
"",
"	<sup>1</sup> Fields are considered blank if they are absolutely blank, i.e. containing zero characters.  Fields containing white spaces (spaces, tabs, new lines, etc.) are not considered blank.<br>",
"	<sup>2</sup> If none of the fields qualify for calculation (e.g. min ignore blanks where all fields are blank), then the result will be zero.",
""
 ]
	

  }





,

  "Functions and Procedures" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Functions and Procedures" ],
"Description 01:Introduction" : [
"",
"	B4P provides an extensive library of standard functions with an emphasis on processing complex tables and data structures.  In addition, you can define your own __user functions__ or even create own libraries containing user functions.  ",
"	<br>",
"	<br>",
"	Functions and procedures are subroutines that can be called up using their name.  For simplicity, all such subroutines are referred to as <i>functions</i> throughout the B4P documentation, regardless of whether they provide a return value (as functions) or not (as procedures).",
"	",
"	<br>",
"	<br>",
"	<b>FUNCTION NAMING FEATURES AND CONVENTIONS</b>",
"	<br>",
"	Unlike virtually any other programming language, <b>B4P function names may consist of multiple words with spaces and special characters inbetween</b>, allowing natural, intuitive, and readable naming of highly complex functions in plain, clear language. This allows specialized functions to be easily remembered, understood, and shared by members of a team for future use.",
"",
"	Function names are <b>case sensitive</b> and specified as as <b>unquoted literals</b>, i.e. quotation marks are not used when referring to a multi-word function name. The number of spaces (or tabs) between the individual words is irrelevant, but must be at least one.",
"	",
"	<br>",
"	<br>",
"	<b>EXAMPLES</b>",
"	<br>",
"	The first two function names listed below are equivalent, but all the remaining ones are not.",
"",
"	* <b>table process(...)</b>",
"	* <b>table&nbsp;&nbsp;&nbsp;process&nbsp;&nbsp;(...);</b>    // Multiple spaces is equivalent to a single space between the words 'table process'",
"	* <b>Table process(...)</b>     // Upper case letter makes this distinct",
"	* <b>table_process(...)</b>     // <i>Snake-case</i>: Underscore and other symbols differ from spaces.",
"	* <b>table-process(...)</b>     // <i>Kebab-case: avoid dashes as separators </i>:  A dash will return value of <b>process(...)</b> substracted from the string 'table'. ",
"	* <b>tableprocess(...)</b>     // Single-word 'tableprocess' differs from double-word 'table process'",
"	* <b>TableProcess(...)</b>     // <i>Camel case</i>: Capitalized letter for each word makes it a distinct function name from 'tableprocess'",
"",
"	CAUTION: Avoid using the dash symbol ('-') as a word separator, as this will be interpreted as a subtraction sign and result in the mathematical operation being carried out. ",
"	<br>",
"	<br>",
"",
"	<br>",
"	<b>FUNCTION PARAMETERS</b>",
"	<br>",
"",
"	Functions may require either none, a fixed number,  or a variable number of __function parameters__ with different __function parameter directions__.",
"	<br>",
"	<br>",
"	The difference between procedures and functions is that procedures do not provide return values but functions do.  Where allowed, functions can also be called as procedures.  ",
"",
"	=== 200, 600, 200, bold_column_1 bold_column_3",
"	Function Nature		| Description					| Examples",
"	Function		| * Always provides a return value <br) * Must be called inside expressions where the return value is used further. | a[] = abs( 1.5 );<br>echo( sqrt( 81 ) );",
"	Procedure		| * Does not provide return values  <br> * Must be called as procedures. <br> * If no parameters are supplied, then the function name can be used alone with semicolon at the end. | echo;<br>echo();<br>echo(Hello);",
"	Procedure or function	| * The function can be called as procedrues or functions. <br> * Use of return value is voluntary. | table rename headers(...);<br>a[] = table rename headers(...);",
"	Control flow functions	| __Control flow functions__ require a succeeding statement or code block which will be executed as specified by these functions.  The __if(__) statement is one of them. | if (a[]=1) echo(\"is 1\");",
"	===	",
""
 ]
	
   },


  "Function Parameters" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function Parameters" ],
"Description 01:Introduction" : [
"",
"	Depending on their specifications, B4P functions can take a fixed or variable number of parameters.  For variable number of parameters,",
"	the minimum required, maximum allowed (or no limitation), and increments (e.g. min 2, max 11, increments of 3 means allowing ",
"	2, 5, 8 or 11 parameters) are defined.",
"",
"	Function parameters can be values, variables (including references to variables), expressions, table references and __code pices__.",
"	Details are ruled in the respective function definitions.",
"",
"	<br><br>",
"",
"	The ability to pass __code pieces__ as parameters into functions, which are then executed by the function once or repeatedly on when needed,",
"	are unique to B4P and not common in other programming languges. This feature is actually used in control flow funtions (e.g. __if(__),",
"	__while(__), etc.) which are, in other languages, defined as fixed keywords and are inherent parts of the programming language.  ",
"	In addition, this feature allows convenient operations through tables without specifying loops, e.g. with the __table process(__) function.",
"",
"	<br><br>",
"",
"	Depending on the specific functions, they may acceept parameters with values of any type (e.g. numerals only), a combination of them, or",
"	or any type.  Type checking of the function parameters happen before the actual function is executed.  Type mismatches will be report",
"	as exceptions (error messages).  Various functions dealing with tables do also accept __table columns as function parameters__ which is a flexible parameter",
"	type and accepts one of the following: individual header names, individual column numbers or several of them provided in a __parameter set__ variable.",
"",
"",
"	<br><br>",
"",
"	B4P supports different __parameter directions__: Input, output, input/output, __variable references__ and __code pieces__.",
"	Functions may require no, a fixed number or a variable number of __function parameters__.",
"",
""
 ]
	
   },



  "Function Parameter Directions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function parameter directions", "parameter directions" ],
"Description 01:Introduction" : [
"",
"	B4P distinguishes among following function parameter directions which are described next.",
"",
"	=== 200, 150, 150, 200, 200, bold_column_1",
"	Direction			| Constants 	| Expressions 	| Variables			| Table references",
"	Input parameters		| allowed	| allowed	| allowed (must be defined)	| allowed",
"	Output parameters		| not allowed	| not allowed	| allowed (may be defined)	| allowed",
"	Input / output parameters	| not allowed	| not allowed	| allowed (must be defined)	| allowed",
"	References			| not allowed	| not allowed	| allowed (must be defined)	| not allowed",
"	__Code pieces__			| 		| 		| See section on __code pieces__   | ",
"	===",
""
 ]
	,
"Description 02:Input Parameters" : [
"",
"	The parameters supplied to the function are values.  They can be constants, existing __variables__, __table references__,",
"	and any form of right-hand expressions containing calculations and/or other function calls.  Variables passed as paramters",
"	must be defined (i.e. values assigned) prior to calling the function.",
""
 ]
	,
"Examples 02:" : [
"	a[] = World;",
"	echo( \"Hello \", a[], ' ', abs(-1)+2+3 );"
 ]
	,

    "Output 02:": "automatic",

"Description 03:Output Parameters" : [
"",
"	The parameters must either be a __variable__ or __table reference__, similar to left-hand side of assignment statements.",
"	Constants and calculated expressions are not allowed.  Before the function is called, variables which are not yet existing,",
"	will be defined automatically. After the function call has been completed, the value will be written back to the variable or table.",
""
 ]
	,
"Examples 03:" : [
"	a[] = find( 'Say Hi!', { Ha, Hä, He, Hi, Ho }, 0, which[] );",
"	echo( which[] ); // 3, because Hi is in position 3 in the parameter set"
 ]
	,

    "Output 03:": "automatic",

"Description 04:Input / Output Parameters" : [
"",
"	The parameters must either be an existing __variable__ or __table reference__, similar to left-hand side of assignment statements.",
"	Constants and calculated expressions are not allowed.",
"	Before the function is called, the value will be retrieved from the variable or table.  After the function call has been completed,",
"	the value will be written back to the table.",
"" ],
"Examples 04:" : [
"	table initialize( t, {{ Hi, He }} );",
"	a[] = Ho;",
"	exchange( [t:0,0], a[] );",
"	echo( [t:..,0], \" and \", a[] );"
 ]
	,

    "Output 04:": "automatic",

"Description 05:References" : [
"",
"	Some functions take over the reference to the variables provided in the function parameters.  References provide following benefits:",
"	* Higher performance (no payload data, e.g. big parameter sets, are copied in before the call and copied back after the call)",
"	* Direct access to the variable contents, especially in __user procedures__ and __user functions__",
"	* Access to member variables (__structure__ and __array__ members and their sub-members if available)",
"	* Access to variable properties, e.g. __variable protection__ settings.",
"",
"	The following code example shows how the user-defined procedure <b>my funct</b> accesses a member variable and defines an additional",
"	member variable.",
""
 ]
	,
"Examples 05:" : [
"	define procedure( my func, { { a, all, reference } } )",
"	{",
"	    echo(a[one]);",
"	    a[two] = TWO;",
"	}",
"	",
"	b[one] = ONE;",
"	my func( b[] );",
"	echo(b[two]);"
 ]
	,

    "Output 05:": "automatic",
"Description 06:Code Pieces" : [
"",
"	Passing code pieces as function parameters is a unique feature in B4P.  Code pieces can either be provided directly or as a literal string.",
"	When the function is called, the code piece is checked for correct syntax.  While the function is running, the code pieces provided may be",
"	called multiple times, or in specific cases not at all.",
"",
"	<br><br>",
"	See section on __code pieces__ for further details."
 ]
	
  },





  "Function Parameter Types" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function parameter types" ],
"Description 01:Introduction" : [
"",
"	B4P supports different parameter types (e.g. literal, etc.) as well as more specialized parameter types.",
"",
"	=== 200, 800, bold_column_1",
"	Parameter Types		| Description",
"	All			| Accepts ",
"	Numeral			| Accepts numerals and expressions returning numeral values",
"	Literal			| Accepts unquoted, softquoted and quoted strings and expressions returning strings",
"	Boolean			| Accepts <b>true</b>, <b>false</b> or expressions returning boolean values, e.g. comparisons",
"	Date			| Accepts dates and/or time values or expressions returning date/time values.",
"	Date or literal		| In this case, literals will be converted to dates automatically, e.g. \"29.Feb. 20\" to 2020-02-29, or \"today\" to today's date",
"	Parameter set		| Accepts parameter sets or expressiosn returning parameter sets",
"	Combinations of above	| Various functions accept values of different types",
"	Table columns		| Parameter to specify one or multiple table columns in a flexible way. See section on __table columns as function parameters__.",
"	Parameter set or literal| Various functions accept either parameter sets or literals.  See section on __parameter set or literal__  for details",
"	All types		| Accepts values of all types, including void",
"	Valid types		| Accepts values of all types, except void",
"	Variable		| __Code piece__, expecting a variable name",
"	Comparison expression	| __Code piece__, expecting a comparison expression",
"	Expression		| __Code piece__, expecting an expression",
"	Statements		| __Code piece__, expecting a statement, multiple statements or a block of statements (inside braces)",
"	===",
"",
"	Special parameter types and rulings are desrbied in the next section.",
""
 ]
	
   },


  "Parameter Set or Literal (Func. Param. Type)":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set or literal" ],
    "Keywords":			[ "parameter set or literal" ],
"Description 01:Introduction" : [
"",
"	Various functions accept either parameter sets or literals when expecting one or multiple strings, for example file names",
"	as supported by various file functions. The rules are described below",
"",
"	Whenever a function expects a __function parameter__ for table columns, the following types are supported and automatically",
"	put into parameter sets.",
"",
"	=== 200, 500, 300, bold_column_1",
"	Type			| Description				| Example",
"	Quoted literals		| The content of the entire string is interpreted as one string value | \"Last,First Name\" is such an example",
"	Quoted literals		| \"\" Empty string, will be treated as one blank string | \"\" translates to {\"\"}",
"	Softquoted literal	| Contents separated with commas are broken down into individual strings. Spaces around commas are ignored. | 'Last Name, First Name' results in two values: {'Last Name','First Name'}.",
"	Softquoted literals	| '' Empty string, will be treated as no string | '' translates to { } (empty set)",
"	Unquoted literal	| Treated like quoted literals (containing no commas, but multiple consecutive spaces collapse to 1 space) | Last Name, Last&nbsp;&nbsp;&nbsp;Name (both are equialent)",
"	Parameter set		| Parameter sets contain a colection of values | { 1, Last Name, \"Value [EUR]\" }",
"	===",
"",
"	<br><br>",
"	The following code example demonstrates this parameter type ruling using a user-defined function.  The user-defined function gets all",
"	values in form of parameter sets and prints the contents.",
""
 ]
	,

"Examples 01:" : [
"	define procedure( demonstrate, { { parameter 1, to parameters } }, 1, unlimited )",
"	{",
"	    for (i[] = 1, i[] <= parameter count[], i[]++)",
"	    {",
"		var name[] = 'parameter ' + literal(i[]);",
"	    	print( var name[][], \"  (\", var name[][]{},\" items) \" );",
"	    }",
"	    echo;",
"	}",
"",
"	demonstrate( A, B );",
"	demonstrate( Hello World,  Hello   World  ); // Both are same",
"	demonstrate( \"A,B\", \" A, B \" ); // Both are different",
"	demonstrate( 'A,B', ' A , B '); // Both are same",
"	demonstrate( \"\", '', '  ' ); // Blank, empty, empty",
"	demonstrate( 'Hello World,  Hello   World  ,\"   Hello   World   \"');",
"	demonstrate( { Hello   World, '  Hello   World  ',\"   Hello   World   \"}); // Note the differences",
"",
"	echo;",
"",
"	define additional procedure( demonstrate 2, demonstrate, ",
"	    { { parameter 1, to parameters members to literal } }, 1, unlimited );",
"	",
"	demonstrate   ( { 1, 2, '3' } );",
"	demonstrate 2 ( { 1, 2, '3' } ); // Note: All numbers are converted to literals",
""
 ]
	,
    "Output 01:": "automatic"
   },



  "Table Columns (Func. Param. Type)" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table columns" ],
    "Keywords":			[ "table columns as function parameters" ],
"Description 01:Introduction" : [
"",
"	Whenever a function expects a __function parameter__ for table columns, the following types are supported:",
"",
"	=== 200, 500, 300, bold_column_1",
"	Type			| Description				| Example",
"	Numeral			| Specifies a __table column number__, beginning with 0.  __Negative indexing__ is allowed, i.e. -1 is last column in the top row, counting leftward. | 0 (left most column)<br> -2 (2nd. last column)",
"	Quoted literals		| The content of the entire string is interpreted as one header name | \"Last,First Name\" refers to one header name<br>\"\" is a blank header name",
"	Quoted literals		| \"\" Empty string, will be treated as one blank header name | \"\" translates to {\"\"}",
"	Softquoted literal	| Contents separated with commas are broken down into individual header names. Spaces around commas are ignored. | 'Last Name, First Name' results in 2 headers: 'Last Name' and 'First Name'.",
"	Softquoted literals	| '' Empty string, will be treated as no header name | '' translates to { } (empty set)",
"	Unquoted literal	| Treated like quoted literals (containing no commas, but multiple consecutive spaces collapse to 1 space) | Last Name, Last&nbsp;&nbsp;&nbsp;Name (both are equialent)",
"	Parameter set		| Parameter sets contain a colection of header names and/or column numbers | { 1, Last Name, \"Value [EUR]\" }",
"	===",
"",
"	Various functions specific rules may apply:",
"	* Header names must exist",
"	* Header names may exist (missing ones may be created as additinal columns in the table)",
"	* Header names must not exist (e.g. to check if specific header names are <i>not</i> used in a specific table",
"	* Column numbers are allowed, or not allowed",
"	* Column numbers may only refer to existing colums, or alternatively all columns even if not yet existing",
"",
"	<br>",
"	<u>Note</u>: If Table headers contain numbers, the put the numbers into quotation marks.",
""
 ]
	,
"Description 02:Shifted Table Column Specifications" : [
"",
"	See the section on __shifted table column specifications__ for more details.  They can be applied both in table references as well as in column header",
"	names provided as function parameters.  In both cases, the literal must be of type __softquoted literal__, e.g. contents put into single quotation marks.",
"	Otherwise, the contents are treated literally as they are."
 ]
	
   },



  "Code Pieces (Func. Param. Type)" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Code Piece" ],
    "Keywords":			[ "code pieces" ],
"Description 01:Introduction" : [
"",
"	Passing code pieces as function parameters is a unique feature in B4P.  Code pieces can either be provided directly or as a literal string.",
"	When the function is called, the code piece is checked for correct syntax.  While the function is running, the code pieces provided may be",
"	called multiple times, or in specific cases not at all.",
"",
"	<br><br>",
"",
"	Code pieces provided in literal strings must be referenced with a preceding colon (:) symbol in order to avoid interpreting the string",
"	value or expression as actual code to execute.",
"",
"	Code pieces come in 4 different flavors:",
"",
"	=== 200, 600, 200, bold_column_1 bold_column_3",
"	Code Piece Type			| Description																					| Syntax Examples",
"	Comparison expression		| Expression to compare something without value on left hand side.<br>The parameter inside the __case(__) function is a comparison expression.					| &gt;30<br>3..4<br>A  (equals A)",
"	Expression			| Any form of B4P expression as expected on right hand side of assignments<br>The parameter inside the __while(__) function is an expression which must return a boolean result.	| a[]+1<br>abs(-1)",
"	Variables			| Expression on left hand side of assignments, which are destination variables, but not tables.<br>The __dim(__) function makes use of this. 	| a[]<br>[table:Name,1]",
"	Statements			| 1 or more statements, separated with semicolons. Braces are allowed.<br>The __for(__) function expects two such statements.			| a[]=b[]+2;<br>{ echo(test); c[]=1 }",
"	===",
""
 ]
	
  },

  "Comparison Expressions (func. params)" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Comparison Expression (func. params)" ],
    "Keywords":			[ "Comparison Expressions" ],
"Description 01:Introduction" : [
"",
"	A comparison expression is part of an expression where one left-hand value is compared with one or more other right-hand values.  While the a regular",
"	expression contains left-hand value, comparison operator and right values, the comparison expression leaves out the left-hand value out.",
"	<br><br>",
"",
"	__case(__) and __compare select(__) are two common functions which utilize comparison expressions.",
"",
"	<br><br>",
"	<u>Attention</u>: Extra arentheses are required when specifying individual values, multiple values spearated with commas, ranges, and when using following comparison operators in front: = and &lt;&gt;.  The reason is",
"	that with out parentheses, the comparison tries to hijack all further parameters separated with commas as their own right-hand values to compare, too.<br>",
"	No extra parentheses are required when the comparison expression is in the last function parameter or is the only one function parameter.<br>",
"	No extraparentheses are required if the comparison expression begins with following operators: &lt;, &lt;=, &gt;, &lt;=, ==, and !=.<br>",
"	No extra parentheses are required if the comparison expression is provided in a string value.",
""
 ]
	,
"Examples 01:" : [
"	p[] = { 2, 3, 5, 7, 10, 11, 13, 17, 23, 31, 37, A, a, Hello };",
"",
"	for all parameters( p[], var[] )",
"	{	",
"		result[] = compare select( var[], other, ",
"				(11,37),      is 11 or 37, // Parentheses required if no operator put in front",
"				==13, 	      thirteen, 	",
"				(=+a),        1st letter in alphabet, // Parentheses required with = and <>",
"				('H*'),	      Begins with H,",
"				>15,          greater than 15,",
"				(3..5,10),    \"is one of 3..5, 10\" );",
"		print(var[],\": \", result[],\"  / \");",
"",
"		// Demonstrate the same with comparison expressions in strings.  Note the colons used in front.",
"",
"		c[] = '(3..5,10)';",
"		result[] = compare select( var[], other, ",
"				:literal(11)+\",37\", is 11 or 37,    // Expression returning a string",
"				:'==13',      thirteen,     // Softquoted string: No difference to quoted string",
"				:'=+a',       1st letter in alphabet, ",
"				:\"'H*'\",      Begins with H, // See note below !",
"				:\">15\",       greater than 15,",
"				:c[],         \"is one of 3..5, 10\" ); // Referring to a variable",
"		echo(result[]);",
"	}",
"",
"	// Note :\"'H*'\" with nested quotation marks:  Expression inside requires a single quotation mark to",
"	// let the comparison expression support wildcard symbols.",
"",
""
 ]
	,
    "Output 01:": "automatic"
  },

  "Expressions (func. params)" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expressions (func params)" ],
"Description 01:Introduction" : [
"",
"	A expression is a a value, a fuction call or a calculation which returns a value.",
"	The individual functions may impose additional requirements, for exmplae that the expression must return boolean",
"	values <b>true</b> or <b>false</b>.",
"",
"	<br><br>",
"",
"	The __while(__) loop function is a good example where the expression inside is calculated several times while the",
"	function is executed.  In addition, various functions containing <b>... selected rows ...</b> in their names make",
"	use expressions as code pieces.",
"",
"	<br><br>",
"",
"	<u>Attention</u>: Parentheses are required when the expression coontains a comparison operator using = or &lt;&gt.  The reason is that",
"	these two comparison operators may expect more than one value separated with commas and they would, if parenthese are not used,",
"	hijack the remaining function parameters as additional values to compare.",
"	No extra parentheses are required when the expression is in the last function parameter or is the only one function parameter.<br>",
"	No extra parentheses are required if the expression begins with following operators: &lt;, &lt;=, &gt;, &lt;=, ==, and !=.<br>",
"	No extra parentheses are required if the expression is provided in a string value.",
""
 ]
	,
"Examples 01:" : [
"	table initialize( primes, ",
"	  { Number, 2, 3, 5, 7, 10, 11, 13, 17, 23, 31, 37, A, a, Hello } );",
"",
"	table process selected rows( primes, ([Number]=11,37),   echo( [Number],\": \", \"is 11 or 37\" ) );",
"	table process selected rows( primes,  [Number]==13,      echo( [Number],\": \", \"thirteen\" ) );",
"	table process selected rows( primes, ([Number]='H*'),    echo( [Number],\": \", \"Begins with H\" ) );",
"	table process selected rows( primes, ([Number]=3..5,10), echo( [Number],\": \", \"is one of 3..5,10\" ) );",
"",
"	echo; // Do the same with expression in strings.  No parentheses needed-",
"",
"	c[] = '[Number] = 3..5,10'; //",
"	table process selected rows( primes, :c[], echo( [Number],\": \", \"is one of 3..5,10\" ) );",
"",
"	c[] = \"[Number] = 'H*'\";",
"	table process selected rows( primes, :c[], echo( [Number],\": \", \"Begins with H\" ) );"
 ]
	,
    "Output 01:": "automatic"
  },



  "Variables (func. params)":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variables (func params)" ],
"Description 01:Introduction" : [
"",
"	Variable are expressions which must refer directly to a variable.  Any other forms of expressions such as constants, calculations,",
"	function calls, table references, etc, are forbidden and assert exceptions.  However, variable members (in __structures__ and __arrays_",
"	are allowed).",
"",
"	__dim(__), __structure(__), __array(__) and __protect(__) are common functions which utilize this variant of code pieces.",
""
 ]
	,
"Examples 01:" : [
"	var 1[] = my array;",
"	var 2[] = 'my array[]';",
"",
"	   array(  var 0[],   {hog, bat, pig} );",
"	// array(  var 1[][], {dog, cat, rat} );   // This one is wrong",
"	   array( :var 2[],   {dog, cat, rat} );   // This one is OK",
"	",
"	echo( var 0[1] ); // bat",
"	echo( my array[1] ); // cat"
 ]
	,
    "Output 01:": "automatic"
  },

  "Statements (func. params)":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Statements (func params)" ],
"Description 01:Introduction" : [
"",
"	Statements may consist of one single statement, multiple statements separated with semicolons, and blocks.  Blocks are one or more",
"	statements encapsulated with { ... } braces.",
"",
"	<br><br>",
"",
"	The __for(__) and __table process(__) are common functions making use of statements.<br>",
"",
"	<u>Attention: </u>Don't confuse with C/C++: The three parameters inside the for-function must be separated with commas, not semicolons.  And use semicolons instead of commas to separate statements.<br>"
 ]
	,	
"Examples 01:" : [
"	// Demonstrates direct use of code and code in string using colon",
"",
"	next[] = \"a[]++; print( Next )\";",
"	for ( a[] = 1; print( Start ), a[] < 5, :next[] )",
"	{",
"	    echo( \" \", a[] );",
"	}"
 ]
	,
    "Output 01:": "automatic"
  },


  "Expressions to Select Rows" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Expressions to select rows" ],
"Description 01:Introduction" : [
"",
"	<i>Expressions to select rows</i> are a variant of code pieces containing expressions, but provide additional flexibility.  These expressions",
"	are typically used in funtions with names containing <b>... selected rows ... </b> where expressions are applied to chosses specifc rows to",
"	include in the data processing.",
"",
"	<br><br>",
"	Like expressions specified as code pieces, these expressions can be coded directly or provided as strings wiht preceding colon (:) symbols.",
"",
"	<br><br>",
"	The expressions may return values of following types:",
"	=== 200, 800, noheader, noframe bold_column_1",
"	boolean		| Row will be included if the result is <b>true</b> for the corresponding row.",
"	numeral		| One specific row, addressed with the row number, will be addressed.  __Negative indixing__ is allowed, e.g. -1 refers to the last row.",
"	parameter set	| The parameter set must contain numerals (row nubmers) or may be an empty set if no rows shall be selected.  __Negative indexing__ is allowed, i.e. -1 refers to the last row.",
"	===",
"",
"	<u>Note:</u>The expression will be calculated only once and not for every row if it has returned a numeral or parameter set.",
""
 ]
	,
"Examples 01:" : [
"	table initialize ( table,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table process selected rows( ",
"		table, ([Animal]=Tick,Bird), ",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );",
"",
"	echo;",
"	table process selected rows( ",
"		table, -1, // -1 -> Row 5 (Negative indexing)",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );",
"",
"	echo;",
"	table process selected rows( ",
"		table, {1,3,-2},  // -2 -> Row 4 (Negative indexing)",
"		echo( \"row nr.: \", row(),\"  Animal: \", [Animal], \" has \", [leg count], \" legs\" ) );"
 ]
	,
    "Output 01:": "automatic"

  },

  "Indirect Parameter Passing" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Indirect parameter passing" ],
"Description 01:Introduction" : [
"",
"	Some functions which only use input parameters support <i>indirect parameter passing</i> where instead of providing",
"	the function parameters directly, the function parameters are put into a __parameter set__ and then pass as one",
"	single function parameter instead.",
"",
"	<br><br>",
"	In the function descriptions, the support for indirect parameter passing is described under the item <i>Restrictions</i>",
"	where you find a statement where indirect parameter passing is either enabled or disabled. ",
"",
"	<br><br>",
"	In general indirect parameter passing is not enabled whenever the functions include output parameters, ",
"	input/output parameters, references and/or code pieces.  Indirect parameter passing is also not allowed for",
"	__control flow functions__ and __user-defined functions__.",
"" ],
"Examples 01:" : [
"	table create( table1, table 2 ); // The direct way",
"",
"	indirect[]= { table 1, table 2 }; // The indirect way",
"	table create( indirect[] );",
"	echo(\"Created two tables in both cases\" );",
""
 ]
	,
    "Output 01:": "automatic"

  }


,

  "Interactive Mode" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "interactive" ],
    "Keywords":			[ "interactive", "interactive mode" ],
"Description 01:Interactive Mode" : [
"",
"	Interactive mode allows you to run any Beyon4P command and expression interactively, start programs and inspect variables.  Additional commands, such as",
"	executing system commands, are also supported.  Following cases will activate interactive mode:",
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"	Command line option -i	| Starting Beyond4P with the command lien option <b>-i</b> will activate interactive mode immediately.",
"	Exception asserted | Most exceptions (e.g. parsing syntax and run-time errors) will start interactive mode so you can inspect the actual circumstances of the error, e.g. by looking at variables and table contents.",
"	Function 'interactive' called | Specify <b>interactive;</b> inside your program if execution should stop here so you can do some inspections or manipulations.  Type <b>return</b> to continue running that program.",
"	===",
"",
"	In interactive mode, the default prompt <b>'&gt;&gt; '</b> will appear.  You are able to change the default prompt with the <b>prompt</b> function call.",
"",
"	=== 240, 360, 400, noframe_1stcolbold",
"	Command type | Explanation | Examples",
"	Beyond4P statements | All Beyond4P assignments, procedure and function calls and transactions | echo ( Hello World ) <br/>a[] = 5; echo(a[])<br/> for (i[ ] = 1, i[ ] <= 3, i[ ]++) echo (i[ ])<br/> start(My program.b4p);<br/> include(Zip Library);<br/>exit;",
"	Beyond4P expressions | Start the command with an equal sign '=' followed by an expression to calculate.  The resulting value and type will be shown. | = 5+3 <br/>",
"	Special Beyond4P commands | start <b/> return | Starts a Beyond4P program <br/> Continues running the Beyond4P program at the next statement after the 'interactive' call.",
"	System commands | System commands as provided by the operating system must precede with a dollar sign '$' | $ dir (Windows) or $ ls (Linux) for directory listing<br/>cd subdirectory <br/>start excel.exe",
"	===",
"",
"	<u>Note on changing drives and/or directories:</u> You can change the current directory of Beyond4P using the '$ cd' (or '$ chdir') command.  Since changing directory in a child process started with the system",
"	command has no effect on the calling process like Beyond4P running, Beyond4P is smart enough to capture 'cd' (and 'chdir') commands and change to the specified directory",
"	accordingly. Whenever Beyond4P captures a change drive or directory command, it will provide a response of success or failure.",
"",
"	<br/><br/>",
"	Following restrictions apply where drive names and paths will not be captured:<br/>",
"	- Window sonly: Commands like '$ D:\\' are supported to change drives.<br/>",
"	- If the command contains multiple commands and the change directory command is not the first one, then it will not be captured.  Example:  \"$ dir ; cd ..\".<br/>",
"	- Input redirection are also not captured, e.g. \"cd < directory_nam.txt\"<br/>",
"	- Change drive directory commands in started batch scripts (and Beyond4P scripts) will not be captured, too. e.g. \"START change_dir.bat\", or \"Beyond4P change_dir.b4p\".<br/>",
""
 ]
	,

"Description 02:Recommended Procedure and Function Calls for Interactive Mode" : [
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"	prompt (...)	| Customize the prompt.  The settings will be memorized.  Specify an expression as a literal which returns a literal.  Example: prompt( \"working directory() + '>> '\" )",
"	prompt ('')	| Reset customized propt to '>> '",
"	list variables  | List all variables",
"	list system variables | List all system variables",
"	list global variables | List all global variables",
"	list local variables | List all local variables",
"	list functions | List available functions",
"	explain functions | Explain avaialble functions",
"	inspect | Inspect a variable, inclding all member variables (arrays, structures)",
"	view | View a table in a browser or Excel.",
"	==="
 ]
	

  }


,

  "Table of Contents" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table of Contents" ],
    "Keywords":			[ "Reference Manual" ],
"Description 01:Table of Contents" : [
"",
"	See the navigator bar for full table of contents.",
"",
"	An itemization begins",
"	* New York",
"	** Manhattan",
"	** Soho",
"	** Harlem",
"	* Philadelphia",
"	* Boston",
"* San  	Francisco",
"	* Seattle",
"	Blank line<br>",
"	Blank line",
"	** Deep Dive",
"	** Deep Blue"
 ]
	
  },




  "Introduction" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "introduction" ],
"Description 01:Introduction to B4P" : [
"",
"	<b> B4P a Low-Code Solution for data analysts to dramatically improve their performance in extracting insights from big data.</b>  ",
"	B4P is a powerful data integration and analytics engine with built-in programming language, and is purpose-built for high speed processing and analysis of large, ",
"	complex data sets (tens of millions of rows) from multiple diverse data sources to produce rapid insights in easily understood form in Excel or other standard visualization tools. ",
"",
"	<br><br>",
"",
"	<br/><img src=\"Images/B4P_General_Overview.png\" alt=\"B4P Overview\"><br/>",
"",
"",
"	=== 250, 600, noframe_1stcolbold, noheader",
"			| <b> data files </b>:  Excel, XLS, CSV, XML, JSON, HTML, Zip, Text, others..",
"			| <b> databases </b>:   Exports from corporate databases (Salesforce, Oracle, SAP, Access, ..)",
"			| <b> web data </b>:    Any source of structured data on the web(Wikipedia, ...)",
"			| <b> other data </b>:  PDF (via Tabula), Statistical data sets (R, SAS, SPPSS, Stata)",
"	===",
""
 ]
	,

	

"Description 02:Distinct Language Features" : [
"",
"	<b> B4P includes an <i>interpreted language</i> with powerful syntax, highly flexible data structures, and a large function library which enables immediate results with a minimum of code. </b>  Programs containing just a few statements can perform sophisticated operations such as merging two tables with very different data arrangements and formats.  The following key features makes the B4P language distinct from other popular programming languages:",
"",
"	<br><br>",
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"Interpreted	| The __run-time machine__ is designed to __echo(__) interpret and process the code with very high performance.  			  One performance aspects includes checking and tokenizing the code before starting to run.",
"Fully portable across system platforms | B4P runs on WINDOWS, LINUX and MAC-OS.  You can develop your apps so they run on all  platforms without changing the code. B4P provides harmonized functions for directory, file and system function calls, 			  as well as system variables such as user names, key system directory names, etc.",
"	Names with spaces and special characters | You are allowed to use spaces and special characters in function names, variable names, table names, column header names, etc.  <b>max value[]</b> and <b>'1%'[]</b> are valid variable names. This allows you to use typical column headers, e.g. \"Total Costs\", without modifying them or putting quotations around. A valid function call could be \" table create (customer table, supplier table, … ); \" Function names like \"table process selected rows\" is easier to read than \"TableProcessSelectedRows\"",
"	Variables | All simple variables end with brackets <b>[]</b>  Example: <b>value[]</b>. If you forget them, then the name is just a text value.<br/>You can create child variables with any nesting, <br/>e.g. <b>animal[dog]=poodle; animal[cat]=tiger; animal[dog,leg count]=4;</b>.<br/>You can also define arrays, e.g. <b>matrix[2,3]</b>",
"	Values | Numbers are values, text are values, too.  In the example <b>a[] = bull dog ;  b[] = ' bull   dog ';</b> a[] is assiged with <i>'bull dog'</i> containing one space between the two words, whare as b[] is assigned with <i>' bull   dog '</i> where all spaces are preserved.  Without quotation marks, outside spaces and repeated spaces betwen words are ignored.",
"	Full UNICODE support | Every character counts as 1 character, regardless if ANSI (like 'e'), inside the Basic Multilingual Plane (like &eacute; and &euro;), or in one of the other UNICODE planes (e.g. &#x1F609;).",
"	Basic variable types | They are <i>numeral</i>, <i>literal</i>, <i>boolean</i>, <i>date</i> (manages date, time and both), <i>parameter set</i>, and <i>void</i>.",
"	Parameter sets | Very powerful type to combine any number of variables and nested parameter sets into one parameter set.<br>Example: <b>names[] = {Abel, Beata, Charly};</b>",
"	Dynamic weak typing | B4P uses dynamic weak typing.  The type is set once a value is assigned. Example: <b>a[] = 1;</b> automatically declares a[] as a numeric variable. <br>The type will change if something non-numeric is assigned, eg. <b>a[] = Hello;</b>.",
"	Tables | Tables are the heart of B4P.  Typically referenced as <b>[table name : row , column ]</b>.<br/>If a conext with table name and row number is given, e.g. inside a loop, then a simple reference like <b>[column]</b> is sufficient.<br>Example: <b>table process</b>( membership list, <b>echo</b>( [Family Name], \", \", [First Name] );",
"	Accessing multiple values in tables | Powerful schems are available to access individual cells, entire rows or parts of them, entire columsn or parts of them, or combination of all.",
"	Powerful table processing function library | A large number of procedures and functions is available to analyze, process and combine tables as you wish.  These functions deliver highest machine performance.",
"	Transactions | Very smart assignments for variables and table rows. You can replicate variables including all child members, or combine two variables including their member variables.",
"	Function parameters accept code pieces | Unlike in other languages, some functions accept pieces of code such as expressions and statements as input parameters.  These codes may be executed several time. <br/>Good example: <b>table process</b>( members, [full name] = [1st name] + ' ' + [last name] );",
"	Variable count function parameters | Some functions accept a variable number of parameters, with minimum, maximum and incrementals given.",
"	User definable procedures and functions | You can defined own procedures and functions.  Functions provide return values whereas procedures don't.  You can assign multiple function names to the same user-defined code. In this case, the pre-defined local variable <b>function name[]</b> allows to identify the function name used to call the code.",
"	Indirect parameter passing | Some procedures and functions allow one <i>parameter set</i> variable to be used to provide all function parameters in one.<br/>Example: a[] = { 2,3,4 }; <b>echo</b>( <b>min</b>( 2,3,4 ), ' and ', <b>min</b>( a[] ) ); // Output in both cases is 2.",
"	Deep unary and binary operators | Deep operators (supplemented with the circumflex '^' symbol) can be used to calculate with elements inside parameter sets. <br/>Example: { 1,2,3 } +^ { 4,5,6 } results in { 5,7,9 }.  However, { 1,2,3 } + { 4,5,6 } results in {1,2,3,4,5,6} instead.  Deep operations are analogous to vector and matrix operations.",
"	Control flow | Unless in other programming languages, control flow features like __if(__), __for(__), __while(__), __return__, etc. are actually procedure and function calls.  Something as simple as <b>if</b> takes one boolean value as function parameter and decides whether to execute or skip the next statement or code block.  In fact, this is made possible because procedures and functions can accept code pieces as it is required for functions like <b>for</b>.",
"	Portable directory paths | B4P accepts both '/' and '\\' for path separators. They will be adjusted automatically to match with the operating system requirements.",
"	===",
"	"
 ]
	,

"Description 03:Think Big to be Successful" : [
"",
"	You can unleash the full power of B4P if you are thinking big.  Writing a complete end-to-end solution (with loops, variable assignments, comparisons",
"	of individual values, etc.) is straighforward to learn with no special programming background.  Other languages like Python can do similar processing, but requires one to learn object-oriented programming, and does not scale for complexity.",
"	",
"",
"	=== 60, 940, noframe_1stcolbold, noheader",
"	Hint 1 | Use the rich B4P function library to process these tables and big data.  Large tables will be analyzed and processed at naked machine performance.<br/>",
"	Hint 2 | Use deep operations (vector and matrix operations) to process large amount of data inside tables and parameter sets.<br/>",
"	Hint 3 | Think how you can formulate your code in a very compact manner without compromising comprehensibility.  Doing great things with 5-20 lines of code is within reach.<br/>",
"	==="
 ]
	
  }


,

  "Licensing" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "licensing" ],
    "Keywords":			[ "licensing","unlock" ],
"Description 01:Licensing Scheme" : [
"",
"	Without possessing a license, B4P will start in a demo mode and exploit the full performance.  The demo mode is useful for evaluations,",
"	demo, education and doing small projects.  However, following restrictions apply:",
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"	Table size restrictions when saving	| Tables can only be saved if the table contains not more than 300 rows and not more than 40 columns.",
"	Number of savings 			| During a running B4P session, at most 5 tables can be saved.  The number of tables (and not files) also applies when using the procedure <b>table save multiple</b> to save two or more tables in one file.",
"	===",
"",
"	Table size restrictions do not apply while processing tables internally, i.e. you are able to load large amounts of data and do data processing and",
"	analysis, but need to condense your output accordingly inorder to meet the size limitations.",
"	<br/><br/>",
"	Individual licenses for one machine, a specific domain or site licenses will be provided on request.",
""
 ]
	
  },

  "Starting B4P" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "starting" ],
    "Keywords":			[ "installing","installation", "starting","launching", "command line options" ],
"Description 01:Installation" : [
"	A separate presentation is available which guides through the installation of B4P under Windows and Linux."
 ]
	,
"Description 02:Starting B4P from Windows" : [
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"	Start menu					| Click on the start menu and select \"B4P\".",
"	Desktop icon					| If activated during installation, then click on the desktop icon.",
"	Click on B4P ap (.b4p file)			| In a file explorer or on the desktop, double-click on a .b4p-file to run it directly.  Windows will automatically start B4P with that file when running .b4p files.",
"	Command line 					| Enter \"B4P\" alone or followed by B4P app file.  In Windows, the <b>Path</b> environment variable includes looking for B4P. Example: <b>B4P HelloWorld.b4p</b",
"	==="
 ]
	,

"Description 03:Starting B4P from Linux" : [
"",
"	=== 240, 760, noframe_1stcolbold, noheader",
"	Command line	| Enter <b>/usr/local/bin/b4p</b>.  To start a specific B4P application sript, then add the file name as command line parameter.  Example: <b>/usr/local/bin/b4p HelloWorld.b4p</b>",
"	Shebang		| If the file contains <b>#!/usr/local/bin/b4p</b> in the 1st row, and the B4P file contains Linux-compliant line breaks (line feeds without carriage return symbols), then B4P will be started automatically as the interpreter when executing the specified file.  The file must be configured as executable, e.g. with the command <b>chmod 755 *.b4p</b>",
"	==="
 ]
	,

"Description 04:Starting B4P from MacOS" : [
"",
"	The same rules apply as for Linux."
 ]
	,

"Description 05:Command Line Arguments" : [
"",
"	Additional information, for example file names, can be added as further command line arguments.  Inside the B4P app, the command line arguments are accessible by referencing the global variable <b>command line arguments[]</b> which is configured as an array of literals."
 ]
	,

"Description 06:Starting Behvavior" : [
"",
"	If B4P is started from the start menu, desktop icon or entered command without specifiying an application script, then B4P undertakes the following steps:",
"",
"	=== 40, 860, noframe_1stcolbold, noheader",
"	1.	| Look in the current working directory for the file name \"main.b4p\".  If found, then B4P starts this application script.",
"	2.	| Look in the starting directory (a memorized directory name you can inspect and change with the __starting directory(__) function) for \"main.b4p\".  If found, then the current working directory will be changed to the that starting directory (unless command line option -d is used) and the \"main.b4p\" will be started.",
"	3.	| If \"main.b4p\" cannot be found at all, then interactive mode will be started.",
"	===",
"",
"	If B4P is started with an application script, the following steps will be undertaken:",
"",
"	=== 40, 860, noframe_1stcolbold, noheader",
"	1.	| The current working directory will be set to the directory where the application script is located (unless command line option -d is used)",
"	2.	| The application script will be started immediately.",
"	===",
"",
"" ],
"Description 07:Command Line Options (Switches)" : [
"",
"	Following command line options influence B4P startup behavior. These options are not added to the global variable array <b>command line arguments[]</b>.",
"",
"	=== 40, 960, noframe_1stcolbold, noheader",
"	-d	| Suppress changeing the current working directory to the directory where the B4P app is started.",
"	-i	| Start B4P and enter interactive mode immediately. You can execute any B4P statement as a command. In addition, you can inspect variables and execute operating system commands. You can start B4P apps by typing <b>start (filename.b4p)</b>.",
"	-w	| Suppress B4P welcome text. <br><u>Attention 1:</u> Also the license info text (e.g. demo mode only if no valid license exists) will be hidden.<br><u>Attention 2:</u> Important B4P library files (e.g. \"Support Library\") will not be loaded automatically.<br>The system variable <b>runtime settings[verbose]</b> is set to <b>quiet</b>. This feature is useful for batch scripts which shall run fast and not outputting unnecessary text.",
"	-x	| Skip the \"<i>Press [Enter] to end the program</i>\" before B4P is exiting.  Useful for running B4P apps from batch scripts.",
"	-q	| Starts the B4P program with runtime <b>settings[verbose]= quiet</b> to suppress any unnecessary output.",
"	-I	| MacOS / Linux only: Starty B4P in installation mode where the welcoming text and loading library files are skipped.  Not recommended for normal applicaction use.",
"	===",
"",
"	Invalid command line parameters will provide descriptive error messages and stop B4P.<br><br>",
"	Command line arguments may be freely ordered and specified as combined or individual parameters.  See below."
 ]
	,

"Examples 07:5 ways to start B4P with the same command line options" : [
"	b4p -wx myprogram.b4p	// All 5 variants are equivalent.",
"	b4p myprogram.b4p -wx",
"	b4p myprogram.b4p -xw",
"	b4p -w -x myprogram.b4p",
"	b4p myprogram.b4p -w -x"
 ]
	,

     "See also": [ "Interactive Mode" ]

  }


,

  "Locales" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Locales" ],
    "Keywords":			[ "list of Locales", "locale" ],
"Description 01:Introduction" : [
"",
"	Beyond4P is able to support different locales (regional and language specific settings) which are managed in ",
"	a file called \"List of locales.csv\".  This file comes along with the installation package and will be referenced automatically",
"	whenever locale information is needed to carry out a particular function, e.g. converting a __date__ to a __literal__.",
"",
"	<br><br>",
"	The locale settings influence information processing such the following described below:",
"",
"	* Region-specific number formats (choice of decimal and thousand separator symbols)",
"	* Date formats (e.g. MM/DD/YYYY or DD/MM/YYYY as default)",
"	* Weekday and month names in different languages",
"	* Using the right list separator for loading and saving CSV files for interaction with Excel (some countries-specific installations use comma, others use semicolon)",
"	* Currency names and symbols",
""
 ]
	,
"Description 02:Specifying locales" : [
"	Locales typical comprise of a combination of abbreviated language name followed by country name with an underscore symbol inbetween, e.g. \"de_CH\" for",
"	<b>German language, Switzerland</b>.  You may also specifc country or language names only, however they create ambiguitiess with countries where more than",
"	one language is spoken (or better: supported, e.g. Canada), and languages which are spoken in several countries (e.g. English).",
"",
"	<br><br>",
"	For all functions asking for <i>locale</i> parameters, you can specify the locale, the language or the country.  No case sensitvity applies, meaning that",
"	both \"en_US\" and \"EN_us\" are accepted, as well as \"USA\" and \"usa\".  If only the language or the country is chosen, then the first match applies.",
"	Therefore, make it a habit to specify locales precisely using the pair of abbreviations.",
"",
"	<br><br>",
"	Special values:",
"	* none = Apply no locale specific context",
"	* local = Apply presently appliable settings, either set during program installation, or modified with __set locale(__) function call.",
"",
""
 ]
	,
"Description 03:Functions asking for locales" : [
"",
"	* __literal(__), __softquoted literal(__): 2nd function parameter",
"	* __set locale(__): 1st function parameter (must be a locale value, not country or language name alone=)",
""
 ]
	,
"Description 04:Supported locales" : [
"",
"	=== 100, 100, 100, 700",
"	Locale		| Language	| Country		| Explanation",
"	none		| none		| none			| Suppresses thousand separator, date is in universally recognized YYYY-MM-DD format",
"	en_US		| English	| USA			| Decimal point, 1000-comma, M/D/YYYY",
"	en_GB		| English	| Great Britain		| Decimal point, 1000-comma, DD/MM/YYYY",
"	en_CA		| English	| Canada		| Decimal point, 1000-comma, DD/MM/YYYY",
"	en_DE		| English	| Germany		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_CH		| English	| Switzerland		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_AT		| English	| Austria		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English",
"	en_FR		| English	| France		| Decimal comma, 1000-space, DD/MM/YYYY, weekday and month names are in English",
"	en_SE		| English	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD, weekday and month names are in English",
"	en_IN		| English	| India			| Decimal point, 1000-comma, D/M/YYYY, weekday and month names are in English, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89 ",
"	in_IN		| Indian	| India			| Decimal point, 1000-comma, D/M/YYYY, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89",
"	de_CH		| German	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY",
"	de_DE		| German	| Germany		| Decimal comma, 1000-point, YYYY-MM-DD",
"	de_AT		| German	| Austria		| Decimal comma, 1000-space, DD.MM.YYYY",
"	de_IT		| German	| Italy			| Decimal comma, 1000-point, DD.MM.YYYY, weekday and month names are in German",
"	fr_CA		| French	| Canada		| Decimal point, 1000-space, YYYY-MM-DD, weekday and month names are in French",
"	fr_FR		| French	| France		| Decimal comma, 1000-space, DD.MM.YYYY",
"	fr_CH		| French	| Switzerland		| Decimal comma, 1000-space, DD.MM.YYYY, weekday and month names are in French",
"	fr_BE		| French	| Belgium		| Decimal comma, 1000-space, D/MM/YYYY, weekday and month names are in French",
"	it_IT		| Italian	| Italy			| Decimal comma, 1000-point, DD/MM/YYYY",
"	it_CH		| Italian	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY, weekday and month names are in Italian",
"	es_ES		| Spanish	| Spain			| Decimal point, 1000-comma, D/MM/YYYY",
"	es_US		| Spanish	| USA			| Decimal point, 1000-comma, M/D/YYYY, weekday and month names are in Spanish",
"	sv_SE		| Swedish	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD",
"	===",
""
 ]
	

  }


,


"office document properties" :
{
	"Function Names":	[ "office document properties" ],
	"Documentation":	"Function Description",
	"Library":		"Office Library",
"Description" : [
"",
"		This function reveals the document properties of Microsoft office files with the extensions <br>",
"		.docx, .xlsx/.xlsm, .pptx, .vsdx, etc.  The properties may include info about persons who have created",
"		or modified the files, etc.",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls, .doc, .ppt) cannot be processed."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"3",
	"Restrictions":		"Under normal conditions, the 'Office Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Path and file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be a file name of a valid Microsoft open office file."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Property names",
		  "Direction": "output",
		  "Types": [ "parameter set" ],
"Description" : [
"			All identified property names will be stored in this variable."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Property values",
		  "Direction": "output",
		  "Types": [ "parameter set" ],
"Description" : [
"			All corresponding property values will be stored in this variable.  The number of elements in both 2nd and 3rd function ",
"			parameters will be equal."
 ]
			
		}
	],
	"Exceptions": "File is not an office file.",
"Examples" : [
"	include ( Office Library );",
"	office document properties( \"Examples\\Football Membership List.xlsx\", property names[], property values[] );",
"",
"	for all parameters( property names[], pn[], index[] )",
"	{",
"	    echo( literal( pn[], \"16#\", align right), \"  :  \", property values[]{index[]} );",
"	}"
 ]
	,
	"Output": "automatic"
},



//	advanced directory listing, advanced directory listing recursive
//  ________________________________________________________________________________________________________________________


"advanced directory listing ..." :
{
	"Function Names":	[ "advanced directory listing", "advanced directory listing recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		",
"		This function works very similarly as __directory listing(__) and __directory listing recursive(__).  The only difference to them is that",
"		all identified Microsoft office document properties from open office Word, Excel, Powerpoint and Visio files wll also be added as",
"		additional columns to the directory listing.",
"",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls, .doc, .ppt) cannot be processed.",
""
 ]
		,
	"Call as":		"procedure or function",
	"Parameter count":	"1-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The directory listing will be put into this table, with header names as lsited above.",
"			If the table is not yet existing, then it will be created.  Existing tables will be initialized first."
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "pattern name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "search option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "files and directories",
"Description" : [
"		    One of the following:",
"			=== 150, 500, noheader, noframe_1stcolbold",
"			files			| Files only",
"			directories		| Directories only",
"			files and directories	| Foth files and directoreies (default)",
"			all			| Also includes hidden and system files",
"			==="
 ]
			
		  }

		],
	"Return value":
	[
		{ "Name": "Entry count",
		  "Types": [ "numeral" ],
		  "Description": "Total number of files and/or directories found.  -1 = Error (e.g. invalid path). Table will be empty in this case."
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"",
"		rv[] = advanced directory listing( list, \"Examples/\", \"*.xlsx,*.xls\" );",
"		table delete remaining rows(list, 4 ); ",
"		// Just keep the first 3 rows to fit the output on the screen",
"",
"		table transpose( list ); // Make the list fit on the small output",
"		table list( list );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory listing", "directory listing recursive" ]
},




//	excel list sheets
//  ________________________________________________________________________________________________________________________


"excel list sheets" :
{
	"Function Names":	[ "excel list sheets" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function identifies all sheets (tabs) inside the Microsoft Excel workbook (Open Office format) and returns them in a parameter set containing literals.",
"		This information may be necessary in order to load the right table in the Excel file afterwards.",
"",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls) cannot be processed."
 ]
		,
	"Call as":		"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of Excel file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be an Excel file in Open Office format, e.g. with file type .xlsx, .xlsm, .xlst.",
"			<br><br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Sheet names",
		  "Types": [ "parameter set"],
		  "Description": "List of all sheet names from left to right as seen in the bottom tabs on Excel"
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"		sheets[] = excel list sheets( \"Examples\\Football Membership List.xlsx\" );",
"		echo(\"The sheets are: \", sheets[] );	  "
 ]
		,
	"Output": "automatic",
	"See also": [ "table load excel file" ]
},




//	table laod excel file
//  ________________________________________________________________________________________________________________________


"table load excel file" :
{
	"Function Names":	[ "table load excel file" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function loads Excel files (Open Office format) directly into B4P tables.",
"		If the 3rd function parameter (Excel sheet name) is not specified, then the visible sheet at the time the Excel file",
"		has been saved with Excel will be loaded.",
"",
"		<br><br>",
"		As of now, applied number formats will not be conveyed.  As an example, one Excel field contains 1.248 and the applied Excel number format ",
"		for display is \"0.0\", the value \"1.2\" is shown on the Excel sheet using Excel.  However the original value will be loaded: 1.248.",
"		Beyond4P is able to distinguish properly between literals (strings), numerals, boolean values (true, false), dates, times and date-time combinations ",
"		(YYYY-MM-DD  hh:mm:ss format) Other information such as formulas, cell formatting, etc. are ignored for the time being.",
"",
"		<br><br>",
"		<u>Note</u>: Only the plain data, but no no formatting information (e.g. text color), will be loaded.",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls) cannot be processed."
 ]
		,
	"Call as":		"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The contents of the selected table in the Excel file will be loaded into this table."
 ]
			
		},
		{ "Number": "2",
		  "Name": "name of Excel file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be an existing Excel file in Open Office format, e.g. with file type .xlsx, .xlsm, .xlst.",
"			<br><br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Excel sheet name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A particular sheet will be loaded.  This function is very useful if the Excel workbook contains multiple",
"			sheets.  The function __excel list sheets(__) is useful to identify all sheets, which is particularly useful",
"			if all sheets need to be loaded.  Every sheet needs to be loaded separately by repeatedly calling this function.",
"			<br><<br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"		table load excel file( football, \"Examples\\Football Membership List.xlsx\" );",
"		table list( football );"
 ]
		,
	"Output": "automatic",
	"See also": [ "excel list sheets", "table load" ]
}




,

"Path and File Names" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "path names" ],
    "Keywords":			[ "path name", "path names", "file name", "file names" ],
"Description 01:Introduction to portable Path Names" : [
"",
"	The different operating systems (Windows, LINUX, MACOS) use different conventions to specify drives, directory path names",
"	and file names.  Directory separators (slash or backslash) is one example.  FUll case sensitivity of path and file names in LINUX and MACOS",
"	environments is another example. Beyond4P supports some measures in order to make path and file naming more portable for the applications.",
"",
"	* Both directory separator symbols \"/\" (UNIX/ / LINUX style) and \"\\\" (WINDOWS style) are supported.  They will be changed to the right symbol automatically before accessing directories and files in the present operating system.",
"	* Returned directory and file names, e.g. in directory listings, __file search(__) function, etc. will use the directory separator native to the operating system (e.g. \"/\" under LINUX).",
"	* Under LINUX and MACOS, the file names are fully case sensitive.",
"	* Under Windows, case sensitivity only applies to creating new directory and file names.",
"	* Please avoid using following special symbols in file names:",
"	** : Colon - Used to specify drives in Windows environments",
"	** \", ' quotation marks - Not valid as part of file name.  Quotation marks may be needed at command level to specify path and file names containing spaces, but not to be done in Beyond4P code.",
"	** *, ? wildcard symbols",
"	** , comma - Beyond4P uses commas to specify multiple file names, e.g. in the __directory listing(__) function",
"	** & ampersand - Typically a control symbol for operating system command shells",
"	** &lt;, &gt;, | - Rediction and piping",
"	** /, \\ - Directory separators",
"	* Further OS-specific restrictions on path and file names may apply",
"	* __Wildcard symbols__ are resolved by Beyond4P and not by the operating system.",
""
 ]
	

},



"Wildcards" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "wildcards" ],
    "Keywords":			[ "wildcard symbols" ],
"Description 01:Introduction" : [
"",
"	B4P supports wildcards which enables for more effective search and comparison functions as they enable pattern matching with concepts such as",
"	* Begins with ...",
"	* Ends with ...",
"	* Contains ...",
"	* Multiple optios separated by cmmas ...",
"",
"",
"	Wildcards are used, amongst others, in following functionalities:",
"	* Comparison operators __equal to__ <b>=</b> and __not equal to__ <b>&lt;&gt;</b> where the operands on the right hand side may consist of literals containing wildcards",
"	* __Horizontal table access w. wildcards__ and __vertical table access w. wildcards__",
"	* Various B4P functions accepting parameters allowign wildcards for pattern matching",
"	* Searching for files, e.g. __directory listing(__) and __resolve path name(__) function.",
"",
"	Unless specified otherwise (like in searching files), wildcard symbols in strings will only work if specified as __softquoted literals__, for",
"	example using single (and not double) quotation marks.",
"",
" 	=== 100, 200, 100, 600, bold_column_1 bold_column_3",
"	Symbol	| Meaning						| Example			| Explanation",
"*	| Plaholder for any number of characters (incl. 0)	| A*<br>*s<br>*-*<br>A*E	| Begins with 'A' <br>Ends with 's'<br>Contains '-' <br> 													  Begins with 'A' and ends with 'E'",
"~	| Placeholder for any number of letters (incl. 0)<br> 		  Foreign (non-ANSI) characters are accepted here, too.	| ~ Street			| Expecting a name for the street (letters only)",
"	&amp;	| Placeholder for any number of numeric digits 0..9	| &amp; kg			| Expects a number of any size before ' kg'",
"	?	| Placeholder for exactly 1 character			| ???<br>A?			| Contains 3 characters of choice<br>A follwed by 1 character of choice",
"	#	| Placeholder for exactly 1 numeric digit 0..9		| ###-##-####			| Expect a social security number (U.S. number format)",
"^	| Placeholder for exactly 1 alphanumeric character<br> 		  Foreign (non-ANSI) characters are accepted here, too.	| ^^^				| Expect 3 letters",
"	,	| Defines additional pattern to compare			| A*,B*,C*			| May begin with A, B or C.",
"	===",
"",
"	For searching files using directory and file functions, the wildcards are limited to * and ?.",
""
 ]
	,
"Examples 01:Programming example" : [
"	include( Support Library );",
"",
"	table initialize ( demo wildcards,",
"	{ { Target string, '*', '~', 'A*', '&', 'Zip*#####', '??t', '*t', 'A*,B*,C*' },",
"	    Hello,",
"	    1234,",
"	    12345,              // Column headers contain wildcard symbols",
"	    Zip 12010,          // 1st column contain target strings to compare with these patterns",
"	    Cat,                // The blank rows will be filled in with comparison results",
"	    Bat,                // 'true' and 'false'.",
"	    halt } );",
"",
"	table configure( demo wildcards, read numerals, no ); // Read numbers from tables as strings",
"",
"	table process( demo wildcards,",
"	    for (c[] = 1, c[] < table row width( demo wildcards, 0 ), c[]++ )",
"	    {",
"	        [c[]]      = [0]      = softquoted literal( [c[], 0 ] ); // Compare and write the result",
"	        // Current   Column   Compared with corresponding header name above",
"	        // column    zero",
"	    } );",
"",
"	table list( demo wildcards );"
 ]
	,
	"Output 01": "automatic"
}


,

  "Reserved keywords" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "reserved keywords" ],
    "Keywords":			[ "keywords" ],
"Description 01:Introduction to reserved keywords" : [
"	Beyond4P has only six reserved symbols.  If not put into quotation marks, these special symbols are automatically converted into special characters or values.",
"",
"",
"	=== 120, 120, 360, noframe",
"	Keyword 	| Meaning | Description",
"	tab		| Tabulator | Converts to a tab character (ANSI and UNICODE 9)",
"	new line	| Line Break | Converts to CR+LF (Windows) or LF (LINUX) to continue on the next line",
"	escape		| Escape chracter | Converts to an escape character (ANSI and UNICODE 27)",
"	true		| Boolean true  | 'true' as boolean type, not literal",
"	false		| Boolean false | 'false' as boolean type, not literal",
"	else		| 'else' in code syntax | To be used in association with <b>if</b>, <b>switch</b> and other control flow functions",
"	===",
"",
"	You may wonder why obvious names such as 'if', 'while' and 'for' are not considered as similar reserved keywords.  In Beyond4P, the control flow statements",
"	are actually procedure names which then influence executing further statements or blocks.  Therefore, you can actually use 'if' as the given function."
 ]
	,
"Examples 01:" : [
"	echo( type(true) );",
"	echo( 1st line, new line, 2nd line );"
 ]
	,
    "Output 01:":		"automatic",
"Examples 02:" : [
"	echo( 1, tab, 2, tab, 3 );"
 ]
	,
    "Output 02:":		"automatic",
    "OS differences":		[ "LINUX uses a different representation of 'new line' than Windows." ],
    "See also":			[ "Flow control functions" ]

  }


,


"help" :
{
	"Function Names":	[ "help" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function provides an overview of the most important features provided in __interactive__ mode",
"		such as accessing help and support information, and how B4P statements and expressions can be ",
"		executed directly as commands.",
"",
"		<br><br>",
"		This help feature provides user interaction allowing to browse through different pages."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
"Examples:'help' entered in interactive mode" : [
">> help",
"",
"0. Interactive - Help Table of Contents",
"________________________________________________________________________________",
"",
"Page Number",
"",
"[1]     Entering interactive mode",
"",
"[2]     Help commands (for help text and accessing B4P documentation)",
"",
"[3]     Executing B4P statements and expressions by hand",
"",
"[4]     Basic commands (incl. leaving interactive mode)",
"",
"[5]     Operating system commands",
"",
"[6]     Inspecting tables",
"",
"[7]     Inspecting variables",
"",
"",
"_______________________________________________________________________________",
"Page [0]..[7], [N]ext / [P]revious page [C]lear screen on/off  [Q]uit:  Q",
">>"
 ]
,
	"See also": [ "docs", "web docs" ]
},



"docs" :
{
	"Function Names":	[ "docs" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function opens the PDF file stored on your machine which is part of the B4P installation.",
"		Just type 'docs', a PDF viewer opens with the documentation and you can continue working."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",

	"See also": [ "web docs" ]
},





"web docs" :
{
	"Function Names":	[ "web docs" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function accesses the on-line documentation.  If no function parameter is provided, then you will be prompted to",
"		start entering the keywordd in order to narrow down the search.  While typing the keyword, the number of available ",
"		choices will narrow down.  It is suggesested to type as much so the number of choices ends up below 20.  The search and",
"		comparison is not case sensitive.  The entered keyword supports wildcards, e.g. typing 'e*o' or 'e??o' finds 'echo.",
"",
"		<br><br>",
"		Three comparison modes are supported.  You can toggle among them by typing the minus sign '-'.",
"		* <b>begins with</b>: Keyword is compared with beginning letter(s) of the existing choices (applicable when beginning to narrow down)",
"		* <b>contains</b>: Keyword is checked as part of the existing choices",
"		* <b>equals</b>: Keyword is checked for perfect match (matches is 0 when nothing is typed and changes to 1 when a matching keyword is found)",
"",
"		<u>Note</u>: When you use <b>web docs</b> for the first time, you will be asked to select the web browser.  Select one which is installed on your system.<br>",
"		<u>Note</u>: Your own user-defined functions are not included here becasue this feature uses the B4P table of contents available on the B4P web page.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Keyword",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			If a matching keyword (e.g. 'echo') is entered, then the web page with the right contents will open directly.",
"			Wildcards like '*' and '?' are supported to provide a precise search.<br><br>",
"			<u>Note</u>: When using wildcard symbols, then put the expression in single or double quotation marks, e.g. <b>\"table lookup*\"</b>"
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a valid web browser name:",
"			=== 100, 400, noframe_1stcolbold, noheader",
"			Windows	| chrome, edge, explorer",
"			Linux   | chrome, firefox",
"			MACOS   | brave, chrome, firefox, safari",
"			===",
"			If the entered browser is not valid, then you will be asked to choose one of the valid browsers interactively.",
"			The chosen browser will be memorized for the next times you are using this function.<br><br>",
"			<u>Note</u>: This function does not check if the browser is installed, nor does it search for all browsers installed in your system."
 ]
			
		}

	],
"Examples:'web docs' entered in interactive mode" : [
">> web docs('table li*')",
"",
"Note: Web documentation is still under construction and not yet complete.",
"",
"Advice:  web docs ( [keyword] ) looks for specific keyword.",
"Exmaple: web docs ( for )   looks for help for 'for'",
"         web docs ( 'for*' )    looks for keywords beginning with 'for'",
"",
"Use 'single' quotation marks when using wildcard symbols *,?,..",
"",
"",
"Narrow down the number of matches for your keyword (target: Max 20).",
"Add text by typing, [Backspace] to delete last character",
"Press [Enter] to confirm, [Escape] to leave.",
"The number of matches will update automatically while typing",
"Press [-] to toggle comparison mode between 'begins with', 'contains' and 'equals'.",
"Comparison mode is equals",
"",
"   4 matches: table li*",
"",
"     A :  table lift contents",
"     B :  table lift header row",
"     C :  table lift headers",
"     D :  table list",
"     X :  Exit this menu",
"Please select: D",
">>"
 ]
	,
	"See also": [ "docs" ]
},





"table list" :
{
	"Function Names":	[ "table list" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function lists the entire table or selected rows and columns of a table",
"		on standard output (for example the console).  Since this function does not make use of any",
"		fancy I/O features, listing tables can also be integerated in B4P programs running in batch mode",
"		in order to provide some more visibility.",
"",
"		<br><br>",
"		<u>Hint</u>: This function is suitable for __interactive__ and __debugging__ use in order to inspect tables conveniently.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1, 3, 5, ...",
	"Restrictions":		["Indirect parameter passing is disabled",
				 "Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed." ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2., 4., ...",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Following options are supported:<br>",
"			=== 100, 700, noframe_1stcolbold, noheader",
"			1st row   | Specify first row number to list (e.g. 2 = begin with row 2).  The header row (row 0) will always be displayed.",
"			last row  | Specify last  row number to list",
"			1st col   | Specify first column number to list. Column numbering begins with 0, not 1.",
"			last col  | Specify last column number to list.",
"			briefly   | Specify top <i>n</i> and bottom <i>n</i> rows to list, skipping the ones in the middle (if any left).",
"			==="
 ]
			
		},
		{ "Number": "3., 5., ...",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			This is the value associated to the option in the previous function parameter.<br>",
"			__Negative indexing__ is supported for specifying rows (-1 = last row) and columns (-1 = last column acc. to widest row in the whole table)."
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table load ( t, \"Examples\\Cities.csv\" );",
"",
"	// Begin with row 2, skip last 3 columns, and for the rows to list, list only the first and last 3 of them.",
"	table list ( t, 1st row, 2, briefly, 3, last col, -3 );"
 ]
	,
	"Output": "automatic",
	"See also": [ "list" ]
},




"view" :
{
	"Function Names":	[ "view" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function provides a more elaborate approach to view tables than the function __table list(__) which is just outputting some or all",
"		rows and columns of the table to the console.  You have the choice to view and scan through the table in B4P (using the console) or",
"		the web browser.  For the web browser, you can view the table either in conventional manner (static HTML file) or as a browsable",
"		data table (Data table functionaltiy is craeted and provided by: SpryMedia Ltd, Scotland, MIT license).",
"",
"		<br><br>",
"		<u>Note</u>: Every time you view a table with this function, a copy of the table will be saved in the current working directory.",
"		The file name begins with \"_b4p_view... .html\" containing the table name.  The function __view reset(__) will do the clean-up by deleting all such files created.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a valid web browser name:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			Windows	| chrome, chrome datatables, edge, edge datatables, explorer, explorer datatables",
"			Linux   | chrome, chrome datatables, firefox, firefox datatablse",
"			MACOS   | brave, brave datatables, chrome, chrome datatables, firefox, firefox datatables, safari, safari datatabls",
"			All systems | here",
"			===",
"			<b>here</b> opens the table locally.",
"			All other options open the ",
""
 ]
			
		}

	],
"Examples:'view' entered in interactive mode" : [
">> table load( cities, Examples\\Cities.csv )",
"",
"    Loaded CSV/TSV file 'Examples\\Cities.csv':",
"    15 rows, max 8 columns, 8 columns in 1st row, 120 fields, list separator: ;",
"",
">> view ( cities, here )",
"000000: City          State / Province Country Inhabitants Famous attraction",
"        ------------- ---------------- ------- ----------- ------------------",
"000001: New York City New York         USA     8300000     St. of Liberty",
"000002: Washington    D.C.             USA     650000      Lincoln Statue",
"000003: Philadelphia  Pennsylvania     USA     1500000     Independence hall",
"000004: Boston        Massachusetts    USA     620000      Freedom trail",
"000005: San Francisco California       USA     805000      Golden Gate",
"000006: Montréal      Quebec           CAN     1700000     Hôtel du Parlement",
"000007: Copenhagen    Hovedstaten      DAN     580000      Little Mermaid",
"000008: Venice        Venetia          ITA     260000      Doge's Palace",
"000009: Los Angeles   California       USA     3800000     Hollywood",
"000010: Vienna                         AUT     1800000     Prater",
"_______________________________________________________________________________",
"Action ([?] for help):  ?",
"Navigation: l = Left,      r = Right       u = Page Up   d = Page Down   s = Search next",
"            L = 1st Col.   R = Last Col.   U = Top       D = Bottom      S = Search",
"            n = 1 column  narrower         w = 1 column wider            c = ClS on/off",
"            N = 5 columns narrower         W = 5 columns wider",
"            X = Change Screen Width        P = Change Page Height",
"",
"            Q = Quit",
"",
"Procedure call list:  list ( table name [, chars per row [, rows to show]] )",
"               e.g.:  list ( my table, 160, 20 ) // My table, 160 chars, 20 rows to show",
"",
"_______________________________________________________________________________",
"Action ([?] for help):  r",
"000000: State / Province Country Inhabitants Famous attraction  Alt. (m)",
"        ---------------- ------- ----------- ------------------ --------",
"000001: New York         USA     8300000     St. of Liberty     10",
"000002: D.C.             USA     650000      Lincoln Statue     7",
"000003: Pennsylvania     USA     1500000     Independence hall  12",
"000004: Massachusetts    USA     620000      Freedom trail      43",
"000005: California       USA     805000      Golden Gate        16",
"000006: Quebec           CAN     1700000     Hôtel du Parlement",
"000007: Hovedstaten      DAN     580000      Little Mermaid     24",
"000008: Venetia          ITA     260000      Doge's Palace      1",
"000009: California       USA     3800000     Hollywood          100",
"000010:                  AUT     1800000     Prater",
"_______________________________________________________________________________",
"Action ([?] for help):  q",
">>"
 ]
	,
	"See also": [ "table list", "view reset" ]
},



"view reset" :
{
	"Function Names":	[ "view reset" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function deletes all temporary HTML files beginning with \"_b4p_view... .html\".",
"		These files are create by the __view(__) command when viewing B4P tables using web browsers.  It is advised to use this ",
"		function in __interactive__ mode only."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"See also": [ "view"]
}






,

"Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "tables" ],
"Description 01:Introduction" : [
"",
"	Tables are the main structural objects on which this programming language has been developed for, namely processing tables of any size",
"	effectively and efficiently with minimum amount of code to be written and delivering highest possible performance when executing",
"	the code.  All tables are 2-dimensional data structures which hold all information as literals (text), including numeric valuesand dates."
 ]
	,
"Description 02:Table Characteristics" : [
"",
"	Table naming rules:",
"	* All tables are referred with table names",
"	* Table names must be of type __literal__ and may take practially any contents, even spaces, special symbols and foreign and non-ANSI characters",
"	* Table names may be referenced as string constants (with or without single or double quotation marks) or as expressions returing literals (e.g. variables, string calculations, etc.)",
"	* Multiple consecutive spaces (and tabs) in names not put into quotation marks will collapse to 1 space.  Example: <b>Last&nbsp;&nbsp;&nbsp;Name<b> collapses to <b>Last Name</b>.",
"	* Quotation marks must be used for table name if they contain special symbols which confuse with B4P code syntax, e.g. hyphens misinterpreted as minus signs.",
"	* Names may or end with numbers, even with spaces inbetween, e.g. <b>4200 Pennsylvania Ave.</b>.",
"	* Blank table names are also allowed, e.g. <b>['':0,0]</b>, but makes little sense unless you want to do esoteric programming.",
"	<br><br>",
"",
"	Table properties:",
"* All tables are global, i.e. accessible by called procedure and functions, no matter in which code file they are running, and retained if created  	  inside user-defined procedures and functions and then returned.",
"* The tables are fully stored and managed in working memory (dynamic RAM).  In case you work with very large tables and your system has not enough memory space,  the the operating system will move data to the <i>page file</i> in order to provide additional space.  With the very large memory space available  	  systems, this should not be an issue for most applications.  B4P uses full 64-bit performance, so you will not encounter the 4GB limit.",
"	* Tables may contain any number of rows, including 0 (= no) row.",
"	* Row counting starts with 0 (row 0 is typically referred as the header row), 1, 2, etc.",
"	* __Negative indexing__ is supported for referencing row numbers.  -1 refers to the last row in the table, -2 the one above, etc.",
"	* Blank rows are allowed",
"	* Column counting starts with 0, 1, 2, etc.",
"	* __Negative indexing__ is also supported for referencing column numbers.  -1 refers to the rightmost column, -2 the one to the left, etc.",
"	* The width of every table row row (i.e. number of columns) may vary.",
"	* The number of entries in a table row may exceed the number of header entries, but in this case these entries cannot be identified by column header names.  They can only be accessed with column numbers.",
"	* Blank columns are allowed",
"	* Multiple identical column header names are allowed, but referencing them by names will always match with the first occurrence (from left to right).",
"* Tables loaded, e.g. from HTML, XML, excel, contain no formatting attributes (e.g. font size, frame and cell background color, alignments, typefaces like bold, underline, etc.).   	  However, before saving the tables, you may want to append formatting attributes which will then be parts of the data contents. See the section on __styles__.",
"	* The function __table configure(__) is available to change table-specific properties."
 ]
	,

"Description 03:Creating tables" : [
"",
"	Various methods are available to create tables.<br>",
"	* Function calls such as __table create(__), __table initialize(__), etc.",
"	* Loading data into tables, e.g. with __table load(__), table load excel file(__)",
"	* Copying tables, e.g. with __table copy table(__), or using other functiosn which create new tables as output, e.g. directory listing(__)."
 ]
	,

"Description 04:Overview" : [
"	The next sections describe the synatax which allows for straightforward and powerful access to table contents, be it simple values, whole (or parts of) rows and",
"	columns, or a combination of both (e.g. accessing a matrix from the table).",
"	<br><br>",
"	__Partial table references__ is also a very efficient means to access contents with minimum syntax and is very useful when processing tables from to to",
"	bottom, e.g in loops or using the __table process(__) function call."
 ]
	,

"Description 05:Table used for examples throughout this chapter" : [
"",
"	The table \"cities.csv\" shown below will be used to demonstrate the various examples on accessing tables."
 ]
	,
"Examples 05:" : [
"	include( Support Library );",
"	table load( table, \"Examples\\cities.csv\" );",
"	table list( table );"
 ]
	,
    "Output 05:": "automatic"
},


"Accessing Tables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "accessing tables" ],
    "Keywords":			[ "table access methods" ],
"Description 01:Introduction" : [
"",
"	B4P provides the following four <i>table access methods</i> to access table contents:",
"	* __Simple table access__ to access individual table cells",
"	* __Horizontal table access__ to access multiple cells in different columns in a specific row.  Accessing entire rows belongs to this category, too.",
"	* __Vertical table access__ to access multiple cells in different rows in a specific colum.  Accessing entire columns belongs to this category, too.",
"	* __Matrix table access__ to access multiple cells in different rows and columns as well.",
"",
"	In addition to these basic acces modes, __transactions__ and various functions do also provide access to tables."
 ]
	,

"Description 02:Reading Values" : [
"",
"	With the intitial settings, all data which look like numbers will be read as numerals and everything else",
"	as literals.  The function __table configure(__) lets you decide whether to inteprete dates, booleans, etc. as such or read them as text.",
"	On the other hand, the table can be configured to force reading numbers as literals, too.",
"",
"	<br><br>",
"	Attempting to read values which lie outside the table (except if referencing above the header row or left of the first column) will return blank."
 ]
	,	

"Description 03:Writing Values" : [
"",
"	Please note that values can only written into the table if the table is existing (for example created, initailized, loaded, etc.).",
"",
"	All data written to tables will be converted to literals first. This also includes for numbers, dates, times, parameter sets, etc.",
"	For boolean values, 'true' and 'false' will be used.",
"",
"	<br><br>",
"	Attempting to write values which lie outside the table (except if referencing above the header row or left of the first column) will work successfully.",
"	If necessary, the size of the table will be extended accordingly.  Valid example: <b>[ table: 999, 999] = \"nine nine nine\";</b> ",
""
 ]
	
},


"Simple Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple table access" ],
"Description 01:Introduction" : [
"",
"	The <b>simple table access</b> is one of the four basic __table access methods__ where this one accesses exactly one cell in the table.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of literals and/or numerals.  These may be constant strings and numbers",
"	or expressions providing literals and numerals.  __Negative indexing__ is supported for both rows and columns.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Matching contents (literal), or 	|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|",
"		|				|	| - Negative column number	|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  Simple Column Specifier 2		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Matching contents (literal), or 	| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| - Positive row number, or		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| - Negative row number			|",
"	===",
"",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Simple_Access_Full.jpg\" alt=\"Simple table access, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1,    5 ] );",
"	echo( [ table: -7, -10 ] );",
"	echo( [ table:  1, -10 ] );",
"	echo( [ table: -7,    5 ], new line );",
"",
"	echo( [ table: City,    5 ] );",
"	echo( [ table: City, -10 ], new line );",
"",
"	echo( [ table: City, San Francisco] ); // Exception to rule: Returns row numbers",
"	echo( [ table: 1, San Francisco] );",
"	echo( [ table: -7, San Francisco], new line );",
"",
"	echo( [ table: City, San Francisco, Famous attraction] );",
"	echo( [ table: 1, 5, 4] );",
"	echo( [ table: -7, -10, -4] );"
 ]
	,
	"Output 03:Output - Consider travelling": "automatic",

"Description 04:Rule on Column Header Names" : [
"	You have full freedom to specify the header names as you wish.  Some rules need to be followed:",
"* If the header name contains 1 or more words and optionally single spaces inbetween, and they contain no special symbol which could be interpreted by  	  B4P otherwise (e.g. hypen as minus sign), then the name can be used without quotation marks.",
"* If you want to refer a header name which is a number (e.g. 1, 24.12, etc.), then make sure to provided these numbers as literals, e.g. with quotation  	  marks or using the __literal(__) function to convert numeric results to literals."
 ]
	
},



"Horizontal Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "horizontal table access" ],
"Description 01:Introduction" : [
"",
"	The <b>horizontal table access</b> is one of the four basic __table access methods__ where this one accesses multiple cells in the same table row.",
"	Multiple columns can be specified with following approaches:",
"	* __Horizontal table access using parameter sets__",
"	* __Horizontal table access using wildcards__ with the colon (:) prefix",
"	* __Horizontal table access using ranges__ with the '..' or leaving out the column specification to access all exsting columns",
"",
"	The value(s) read from the table will be provided in a __parameter set__.  This does also apply if only one or even no value being retrieved.  In the latter case,",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated), ",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
""
 ]
	,
"Description 02:Read Accesses" : [
"	The value(s) read from the table will be provided in a __parameter set__, regardless of the number of cells accessed. Empty parameter sets are returned",
"	if the read access results in no matches (e.g. empty parameter set for headers specified, wildcard yields no match, specified range is in the wrong",
"	(right to left) direction."
 ]
	,
"Description 03:Write Accesses" : [
"	When writing a parameter set horizontally to a table, then the elements of the parameter set will be written.  The write access stops prematurely if",
"	one of the two conditions are met:",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated).  Writing empty parameter sets will not result in a write opration because there is nothing to write.",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
"	<u>Note</u>:If an element in the parameter set is in turn a parameter set, then it will be converted to a literal in order to visualize the parameter set contents (with braces around, elements separated with commas).<br>",
"",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the horizontal table access."
 ]
	
},



"Horizontal Table Access w. Param. Sets":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using parameter sets" ],
"Description 01:Introduction" : [
"",
"	Instead of specifying one column header name (literal) or column number (numeral), a parameter set can be used to specify",
"	multiple columns in order to access multiple cells in a specific row at a time.  The resulting data read out is a parameter set",
"	containing the data which corresponds to the headers specified accordingly.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of literals and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing literals and numerals, as well as parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Multiple Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a literal		|	| - Parameter set containing	|	| - Matching contents (literal), or 	|",
"		|				|	| header names and/or positive	|	| - Positive row number, or		|",
"		|				|	| or negative column numbers	|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	| Multiple Column Specifier 2		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Matching contents (literal), or 	| 	| - Parameter set containing		|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| header names and/or positive	|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| or negative column numbers		|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Parameter_Set_Full.jpg\" alt=\"Horizontal table access using parameter sets, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table: {1,4}, 5 ] );",
"	echo( [ table: {-7,-4}, -10 ], new line );",
"",
"	echo( [ table: { City, 4 }, -10 ] );",
"	echo( [ table: { City, Famous attraction }, 5 ], new line );",
"",
"	echo(\"Special case\");	",
"	echo( [ table: { }, -10 ] ); // returns empty set",
"",
"",
"	echo( [ table: { City, Famous attraction }, San Francisco ] );",
"	// No exception to rule: It retrieves \"San Francisco\" and \"Golden Gate\"",
"",
"	echo( [ table: City, San Francisco, { Famous attraction, Country } ] );"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},



"Horizontal Table Access w. Wildcards":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using wildcards" ],
"Description 01:Introduction" : [
"",
"	Alternatively to parameter sets, __wildcards__ can be specified using __softquoted literals__ (strings values inside single quotation",
"	marks) to compare the header row.  A colon (:) must be added before this string to instruct B4P to search the table for matching",
"	contents. All headers matching to the string pattern will be included in the selecction.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The header name patterns must begin with a colon (2 consecutive colons are actually needed if the table name specified before), followed",
"	by the softquoted literal value.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| : Header Name Pattern		| ,	| Simple Row Specifier			| ]",
"		| Must be a literal		|	| - Must be a softquoted	|	| - Matching contents (literal), or 	|",
"		|				|	| literal, recommended to use	|	| - Positive row number, or		|",
"		|				|	| wildcard symbols		|	| - Negative row number			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  : Header Name Pattern		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Matching contents (literal), or 	| 	| - Must be a softquoted 		|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| literal, recommended to use		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| wildcard symbols			|",
"	===",
"	Lookup access: If a parameter set or a header name pattern is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), ",
"	then the 1st column found will be used to identify the row. If it contains no elements, then no lookup can be made and an empty set will be returned.",
"",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Wildcard_Full.jpg\" alt=\"Horizontal table access using wildcads, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  :'F*',   5 ] ); // 2 matches: looks for headers starting with \"F*\"",
"	echo( [ table:  :'F*', -10 ] ); // Same result",
"	echo( [ table:  :\"F*\",   5 ] ); // No match. Qquoted literal, looks for header name \"F*\"",
"	echo;",
"",
"	echo( [ table: :'F*', Golden Gate] ); // Golden Gate is 1st match",
"	echo( [ table: :'F*', SFMOMA] );      // SFMOMA is not 1st match, empty set returned",
"	echo;",
"",
"	echo( [ table : : 'F*', Golden Gate, { City, Famous cultural place } ] );",
"	echo;",
"",
"	echo( [ table : City, San Francisco, :'F*' ] );",
"	echo( [ table : City, 5, :'F*' ] );",
"	echo( [ table : 1, 5, :'F*' ] );",
"	echo( [ table : -7, -10, :'F*' ] );",
"",
"	echo( \"Output entire row with wildcards:\");",
"	echo( [ table : :'*', 5 ] );",
""
 ]
	,
	"Output 03:Output - Forgot to recommend Fisherman's Wharf": "automatic"
},



"Horizontal Table Access w. Ranges":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Horizontal table access using ranges" ],
"Description 01:Introduction" : [
"",
"	Ranges can be specified to select multiple adjacent table columns.  Ranges come in four flavors:",
"	",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	From .. To	| From starting header name or column number to ending header name or colum number",
"	.. To		| From 1st column (column 0) to ending header name or column number",
"	From ..		| From starting header name or column number to last column in table with header name",
"	..		| From 1st column (column 0) to last column in table with header name",
"	(blank)		| From 1st column (column 0) to last existing column in the current table row (ignoring the header row)",
"	===	",
"	In all cases, the data read will be in parameter sets, even if no or only 1 cell has been accessed.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	",
"	The table must be referenced inside brackets using a combination of literals and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing literals and numerals or parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Range Column Specifier	| ,	| Simple Row Specifier			| ]",
"		| Must be a literal		|	| - Starting .. Ending column	|	| - Matching contents (literal), or 	|",
"		|				|	| - .. Ending column		|	| - Positive row number, or		|",
"		|				|	| - Starting column ..		|	| - Negative row number			|",
"		|				|	| - .. or (blank)		|	| 					|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Simple Row Specifier			| ,	|  Range Column Specifier 2	| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Matching contents (literal), or 	| 	| - Starting .. Ending column	|",
"		|				|	| - Positive column number, or	|	| - Positive row number, or		|	| - .. Ending column		|",
"		|				|	| - Negative column number	|	| - Negative row number			|	| - Starting column ..		|",
"		|				|	|				|	|					|	| - .. or left blank		|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Horizontal_Access_Range_Full.jpg\" alt=\"Horizontal table access using ranges, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1..4,    5 ] );",
"	echo( [ table:  1..-4,   5 ] );",
"	echo( [ table: City..Famous attraction, -10 ] );",
"",
"	echo( [ table:  4..1,    5 ] ); // Empty set returned (ending column is left of starting column)",
"	echo;",
"",
"	echo( [ table:  1..4, San Francisco ] );",
"	echo( [ table:  City..Famous attraction, San Francisco  ] );",
"	echo;",
"",
"	echo( [ table: ..4, 5 ] );         		// San Francisco",
"	echo( [ table: City, San Francisco, ..4 ]);	// ",
"	echo;",
"	echo( [ table: 1.., Vienna] );    		// Vienna",
"	echo( [ table: City, Vienna, City..] );",
"	echo( [ table: City.., Vienna] );",
"	echo( [ table: 1.., 10] );",
"	echo;",
"",
"	[table:table row width(table, 0)..,5] = {\"Sightseeing boat\",\"RV\"}; // Append 2 vehicles",
"	echo( [ table: .., 5 ] );		    // San Francisco",
"	echo( [ table: , 5 ] );			    // San Francisco  inclduing the boat & RV",
"	echo( [ table: City, San Francisco, .. ] ); // Without the boat",
"	echo( [ table: City, San Francisco, ] );    // With the boat & RV"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},





"Vertical Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "vertical table access" ],
"Description 01:Introduction" : [
"",
"	The <b>vertical table access</b> is one of the four basic __table access methods__ where this one accesses multiple cells in the same table column.",
"	Multiple columns can be specified with following approaches:",
"	* __Vertical table access using parameter sets__",
"	* __Vertical table access using wildcards__ with the colon (:) prefix",
"	* __Vertical table access using ranges__ with the '..' or leaving out the column specification to access all exsting columns",
""
 ]
	,
"Description 02:Read Accesses" : [
"	The value(s) read from the table will be provided in a __parameter set__, regardless of the number of cells accessed. Empty parameter sets are returned",
"	if the read access results in no matches (e.g. empty parameter set for headers specified, wildcard yields no match, specified range is in the wrong",
"	(right to left) direction."
 ]
	,
"Description 03:Write Accesses" : [
"	When writing a parameter set vertically to a table, then the elements of the parameter set will be written.  The write access stops prematurely if",
"	one of the two conditions are met:",
"	an empty set is returned.  Coming to write access, writing to the destination will stop whenever <u>either one of the two conditions is met first</u>:",
"	* All elements in the parameter set have been written (not all specified cells in the table are updated).  Writing empty parameter sets will not result in a write opration because there is nothing to write.",
"	* The specified number of cells in the table is smaller than the number of elements in the parameter set (not all elements are written to the table).",
"	<u>Note</u>:If an element in the parameter set is in turn a parameter set, then it will be converted to a literal in order to visualize the parameter set contents (with braces around, elements separated with commas).<br>",
"",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the vertical table access."
 ]
	
},




"Vertical Table Access w. Param. Sets":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using parameter sets" ],
"Description 01:Introduction" : [
"",
"	Instead of specifying one row number (numeral) or matching contents (literal), a parameter set can be used to specify",
"	multiple rows in order to access multiple cells in a specific column at a time.  The resulting data read out is a parameter set",
"	containing the data which corresponds to the row numbers specified accordingly.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of literals and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing literals and numerals, as well as parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Multiple Row Specifier		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Parameter set containing		|",
"		|				|	| - Positive column number, or	|	| row numbers or contents to match	|",
"		|				|	| - Negative column number	|	| with the data in the table		|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by one or more rows, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Multiple Row Specifier		| ,	|  Simple Column Specifier 2	| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Parameter set containing 		| 	| - Header name, or		|",
"		|				|	| - Positive column number, or	|	| row numbers or contents to match	|	| - Positive column number, or	|",
"		|				|	| - Negative column number	|	| with the data in the table		|	| - Negative column number	|",
"	===",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Parameter_Set_Full.jpg\" alt=\"Vertical table access using parameter sets, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, {12,4,8} ] );     // Zürich, Boston, Venice",
"	echo( [ table: -7, {-3,-11,-7} ] );",
"	echo;",
"",
"	echo( [ table: City, {12,4,8} ] );",
"	echo( [ table: City, { Zürich, Boston, Venice } ] );	// Loads own contents",
"	echo( [ table: City, { Zürich, 4, Venice } ] );		// 4 -> Boston",
"	echo;",
"	echo( [ table: City, {  } ] );				// Returns empty set",
"	echo;",
"	echo( [ table: City, { 12,4,8 }, Moving along ] ); // Tram, walking, gondola",
"	echo;",
"	",
"	echo( [ table : 1, { 12,4,8}, -1 ] );",
"	echo( [ table : -7, {-3,-11,-7}, 7 ] );"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic"
},



"Vertical Table Access w. Wildcards":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using wildcards" ],
"Description 01:Introduction" : [
"",
"	Alternatively to parameter sets, __wildcards__ can be specified using __softquoted literals__ (strings values inside single quotation",
"	marks) to compare the header row.  A colon (:) must be added before this string to instruct B4P to search the table for matching",
"	contents. All headers matching to the string pattern will be included in the selecction.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	The header name patterns must begin with a colon (2 consecutive colons are actually needed if the table name specified before), followed",
"	by the softquoted literal value.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier		| ,	| : Contents Search Pattern		| ]",
"		| Must be a literal		|	| - Matching contents (literal), or	|	| - Must be a softquoted  		|",
"		|				|	| - Positive row number, or		|	| literal, recommended to use		|",
"		|				|	| - Negative row number			|	| wildcard symbols			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| : Contents Search Pattern		| ,	| Simple Column Specifier		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Must be a softquoted  		| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| literal, recommended to use		|	| - Positive column number, or		|",
"		|				|	| - Negative column number	|	| wildcard symbols			|	| - Negative column number		|",
"	===",
"	Lookup access: If a parameter set or a header name pattern is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), ",
"	then the 1st column found will be used to identify the row. If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Wildcard_Full.jpg\" alt=\"Vertical table access using wildcads, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, :'*n' ] );     // Cities ending with n",
"	echo( [ table: -7, :'*n*' ] );	  // Cities containing n",
"	echo( [ table:  1, :'*n,*s' ] );  // Ending with n or s",
"	echo( [ table:  1, :\"*n\" ] );     // No match (No data entry = \"*n*)",
"	echo;",
"",
"	echo( [ table:  City, :'*n' ] );     // Cities ending with n",
"	echo;",
"",
"	echo( [ table: City, :'*n', Moving along ] );",
"	echo;",
"",
"	[ table: City, 2, Moving along ] = Ambulance; // Makes more sense for the moment.",
"	echo( [ table: 1, :'*n',  -1 ] );",
"	echo( [ table: -7, :'*n',  7 ] );"
 ]
	,
	"Output 03:Output - Prefer choosing a climate friendly vehicle ...": "automatic"
},



"Vertical Table Access w. Ranges":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Vertical table access using ranges" ],
"Description 01:Introduction" : [
"",
"	Ranges can be specified to select multiple adjacent table rows.  Ranges come in four flavors:",
"	",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	From .. To	| From starting row number to ending row number",
"	.. To		| From 1st data row (row 1) to ending row number",
"	From ..		| From starting row number to last table row (end of table)",
"	..		| From 1st data row (row 1) to last table row (end of table)",
"	(blank)		| From top row (row 0 / header row) to last table row (end of table)",
"	===	",
"	In all cases, the data read will be in parameter sets, even if no or only 1 cell has been accessed.",
""
 ]
	,
"Description 02:Syntax for Full Table Specification" : [
"",
"	",
"	The table must be referenced inside brackets using a combination of literals and/or numerals and/or parameter sets.  These may be constant strings and numbers",
"	or expressions providing literals and numerals or parameter sets.",
"",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier		| ,	| Range Column Specifier		| ]",
"		| Must be a literal		|	| - Matching contents (literal), or	|	| - Starting .. Ending row		|",
"		|				|	| - Positive row number, or		|	| - .. Ending row			|",
"		|				|	| - Negative row number			|	| - Starting row ..			|",
"		|				|	| 					|	| - .. or (blank)			|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Simple Column Specifier	| ,	| Contents Search Pattern		| ,	| Simple Column Specifier		| ]",
"		| Must be a literal		|	| - Header name, or		|	| - Starting .. Ending row		| 	| - Header name, or			|",
"		|				|	| - Positive column number, or	|	| - .. Ending row			|	| - Positive column number, or		|",
"		|				|	| - Negative column number	|	| - Starting row ..			|	| - Negative column number		|",
"		|				|	| 				|	| - .. or (blank)			|	|					|",
"	===",
"",
"	Lookup access: If a parameter set is encountered in the Simple Column Specifier instead of a simple value (literal or numeral), then the 1st parameter element will be used",
"	identifying the row.  If it contains no elements, then no lookup can be made and an empty set will be returned.",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Vertical_Access_Range_Full.jpg\" alt=\"Vertical table access using ranges, full table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table:  1, 6..12 ] );",
"	echo( [ table: -7, -9..-3 ] );",
"	echo( [ table: -7, 6..-3 ] );",
"	echo( [ table: City, 6..Zürich ] );",
"	echo( [ table:  1, Montréal..Zürich ] );",
"	echo( [ table:  1, Zürich..Montréal ] );  // Empty set - Zürich is after Montréal",
"	echo;",
"",
"	echo( [ table:  1, .. 6 ] );",
"	echo( [ table:  1, ..-9 ] );",
"	echo( [ table: City, .. Montréal ] );",
"	echo;",
"",
"	echo( [ table:  1, 12.. ] );",
"	echo( [ table:  1,  -3.. ] );",
"	echo( [ table: City, Zürich .. ] );",
"	echo;",
"",
"	echo( [ table: 1, .. ] );	// Reads all rows except header row",
"	echo( [ table: City, .. ] );	// \"",
"	echo( [ table: -7, ] );		// Note the required final comma. Reads header row, too",
"	echo( [ table: City,  ] );	// \"",
"",
"	echo( new line, \"Some lookup examples:\");",
"	echo( [ table: City, .. Montréal, Moving along ] );",
"	echo( [ table:  1,  -3.. , Famous attraction ] );"
 ]
	,
	"Output 03:Output - Hope to come back next year": "automatic"
},





"Matrix Table Access" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix table access" ],
"Description 01:Introduction" : [
"",
"	The <b>matrix table access</b> is one of the four basic __table access methods__ which combines both __horizontal table access__ and __vertical table access__",
"	in order to access cells in multiple rows and columns in one.  You can freely combine different ways to access the rows and columns, for example",
"	parameter sets for the rows and wildcards for the columns, and so forth."
 ]
	,
"Description 02:Principle" : [
"	The following illustrations hows how the different approaches can be freely combined horizontally and vertically.",
"",
"	<br/><img src=\"Images/Description_Table_Matrix_Access_Full.jpg\" alt=\"Matrix table access using different methods, full table specification\"><br/>"
 ]
	,

"Examples 02:Programming examples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"",
"	echo( [ table : {1,7,4}, {12, 4, 8}] );",
"	echo;",
"",
"	echo( [ table : :'C*', :'*T*' ] );",
"	echo;",
"	// 1st horizontal match is country, therefore it checks for all countries containing 'T'",
"	// Country and City are retrieved",
"",
"	echo( [ table: ..'State/Province', 12..] );",
"	echo( [ table: 1..Inhabitants, Boston..6] );",
"	a[] = [ table: Inhabitants .. 'Alt. (m)', ]; // Read all rows incluuding the header",
"	for all parameters( a[], b[] ) echo( b[] );",
"",
"",
"	// Reading no data",
"",
"	echo;",
"	echo( [ table: :'xxx', :'yyy' ] );  // Returns 0 rews",
"	echo( [ table: :'C*', :'yyy' ] ); // Found 2 columns, but number of rows is 0.",
"	echo( [ table: :'xxx', :'*' ] ); // All rows, no column",
"	echo( [ table: {2,3,4}, {} ] );	// 3 columns, no row",
"	echo( [ table: {}, {2,3,4} ] );	 // No column, 3 rows",
"	echo( [ table: {}, {} ] ); // Nothing",
"	echo;",
"",
"	// Matrix access on one single row, column, cell.  Note: Always nested parameter sets",
"	// First level: Rows, 2nd level: COlumns",
"",
"	echo( [ table: {City}, 1..3 ] ); // One column",
"	echo( [ table: City..Inhabitants, {Venice} ] ); // One row",
"	echo( [ table: {Moving along}, {3} ] ); // One cell"
 ]
	,
    "Output 02:Output:": "automatic",

"Description 03:Read Accesses" : [
"	The value(s) read from the table will be provided in nested __parameter sets__: One complete set containing sets resembling rows which in turn",
"	contain the columns in their rows.<br>",
"	Example: <b>{ { Row 1 Column 1, Row 1 Column 2 }, { Row 2 Column 1, Row 2 Column 2 } } </b>.",
"	Even if the matrix access results in a single row, single column or even single cell, all such values are returned in nested parameter sets.",
"	Example: <b>[ table: { City }, { 4 } ]</b> returns <b>{ { Boston } }</b>.",
"	If the read access results in no matches (e.g. empty parameter sets provided to specify rows or columns, wildcard patterns yielding no matches",
"	and/or ranges in wrong direction), then empty sets will be returned.",
""
 ]
	,
"Description 04:Write Accesses" : [
"	Write access using matrix access method appears tricky but is not.  The most simple approach is to specify staring ranges for rows and columns",
"	and do the writing, e.g. <b>[ table: 3.., 4.. ]</b>.  Write access begins in row 4 and column 3.",
"	Alternatively, when writing a value (not parameter set) to a table, then the same value will be written into all cells as specified with the vertical table access."
 ]
	,
"Examples 04:Programming examples" : [
"	include( Support Library );",
"	table initialize( table, { { A0 .. O0 } } );",
"	[ table: .., 1..15 ] = '.'; // Initialize with points",
"",
"	// Writing some data (actually on row 3 and 5)",
"",
"	a[] = { { 3, 4, 5, 6 }, {}, { 23, 24, 25 } };",
"",
"	[ table: 2.., 3.. ] = a[]; // Write all values (as long if inside the table",
"	[ table: J0..K0, 3.. ] = a[];  // Note: Limited to 2 columns (5,6 and 25 are not written)",
"	[ table: N0.., 10.. ] = a[]; // Writes beyond the existing headers (note 2 unnamed columns added)",
"",
"	table list( table );",
"",
"	echo(\"Further write accesses:\");",
"	table initialize( table, { { A0 .. O0 } } );",
"	[ table: .., 1..15 ] = '.'; // Initialize again",
"",
"	[ table: ..1, ..2] = { { aa, bb, cc }, { dd, ee, ff }, { gg, hh, ii } }; // Only 4 elements written",
"	[ table: 2.., -3.. ] = { 1,2,3,4,5 }; // Last 3 rows",
"	[ table: 10.., -3.. ] = {{ 1,2,3,4,5 }}; // Only 1 row",
"	[ table: H0.., 1.. ] = { {1},{2},{3},{4},{5} }; // Only 1 column",
"	[ table: B0..D0, 6..8 ] = X; // 1 value written everywhere",
"",
"	[ table: { N0, M0, K0 }, {3,2,1}  ] = a[]; // Write in opposite directions",
"",
"	table list( table );"
 ]
	,
    "Output 04:Output:": "automatic"
},



"Partial Table Specification" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "partial table specification" ],
    "Keywords":			[ "partial table specifications" ],
"Description 01:Introduction" : [
"",
"	If a context for partial __partial table specification__ is provided, then the table name and/or row numbers are optionaland and can be left out.",
"	The context refers refers to a specific table and a <i>current</i> row number.",
"",
"	The function names listed below are the common ones which support partial table specification:",
"	* __with table(__) to provide a context (table name and row number) directly.",
"	* __for all table rows(__)",
"	* __table process(__) and __table process selected rows(__)",
"	* All standard table functions which contain the term <b>selected rows</b> at the end.  In this case, partial table specifciation is allowed in the __expression__ calculated for every row",
"",
"	With such a context available, the row number can also be retrieved directly with the function __row(__).",
""
 ]
	,
"Description 02:Syntax for Partial Table Specification" : [
"",
"	The table must be referenced inside brackets using a combination of literals and/or numerals.  These may be constant strings and numbers",
"	or expressions providing literals and numerals.",
"	<br><br>",
"",
"	Example 1: Current table name, current row number, specified column	",
"	=== 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		|  ]",
"		| - Header name(s)		|",
"		| - Column number(s)		|",
"		| - : Wildcards			|",
"		| - Ranges			|",
"	===",
"",
"	<br>Example 2: Other table name, current row number, specified column	",
"	=== 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Table Name			| :	| Column Specifier		|  ]",
"		| Must be a literal		|	| - Header name(s)		|",
"		|				|	| - Column number(s)		|",
"		|				|	| - : Wildcards			|",
"		|				|	| - Ranges			|",
"	===",
"",
"	<br>Example 3: Current table name, specified row number, specified column	",
"	=== 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		| ,	| Row Specifier				| ]",
"		| - Header name(s)		|	| - Matching contents (literal), or 	|",
"		| - Column number(s)		|	| - Row numbers				|",
"		| - : Wildcards			|	| : Wildcards				|",
"		| - Ranges			|	| - Ranges				|",
"	===",
"",
"	<br>Syntax for lookup access (Choose column, followed by the row, and pick up data from a different column):",
"	=== 10, 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	[	| Column Specifier		| ,	| Row Specifier				| ,	| Column Specifier 2	]",
"		| - Header name(s)		|	| - Matching contents (literal), or 	|	| - Header name(s)",
"		| - Column number(s)		|	| - Row numbers				|	| - Column number(s)	",
"		| - : Wildcards			|	| : Wildcards				|	| - : Wildcards	",
"		| - Ranges			|	| - Ranges				|	| - Ranges	",
"	===",
"",
""
 ]
	,

"Description 03:Principle" : [
"",
"	<br/><img src=\"Images/Description_Table_Simple_Access_Partial.jpg\" alt=\"Simple table access, partial table specification\"><br/>",
""
 ]
	,
"Examples 03:Programming xamples" : [
"	table load( table, \"Examples\\Cities.csv\");",
"	with table( table, 5 ) // Row 5",
"	{",
"	    echo( [ 1 ] );",
"	    echo( [ -7 ], new line );",
"",
"	    echo( [ City ], new line );",
"",
"	    echo( [ City, San Francisco], new line ); // Exception to rule: Returns row number",
"",
"	    echo( [ City, San Francisco, Famous attraction] );",
"	    echo( [ 1, row(), 4] );",
"	    echo( [ -7, row(), -4] );",
"",
"	    echo(\"Horizontal access:\");",
"	    [table row width( table, row() )] = Street roller;",
"	    echo( [0..\"State/Province\"] );",
"	    echo( [..] ); // Entire row (till column with last header on top row)",
"	    echo( [] )  ; // Entire row (all elements, inclding the Street roler)",
"	    echo( [,6] )  ; // Read data in next row",
"	    echo( [,row()-1] )  ; // Read data in previous row",
"",
"	    echo( [,0] ); // All header names",
"",
"	    echo(\"Vertical access:\");",
"	    echo( trim( [0,] ) ); // Column 0, including header ( trim: Countries listed only once )",
"	}	"
 ]
	,
	"Output 03:Output - Staying in San Francisco": "automatic",
	"See also": "Nested partial table specifications"
},


"Nested Partial Table Specification" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "nested partial table specification" ],
    "Keywords":			[ "nested partial table specifications" ],
"Description 01:Introduction" : [
"",
"	B4P supports nested table contexts and facilitates working with 2 tables directly.",
"	In order to reference to the next higher context, use the <b>deep</b> symbol (^) after the beginning bracket.  If 3 or more nested",
"	table context info are specified, then use additional ^ symbols to reference the even higher ones.  The __row(__) function also provides",
"	one parameter which can be used to reference the next higher levels up.",
""
 ]
	,

"Examples 01:Example" : [
"	include( Support Library );",
"	table initialize( master, { { Name, Score }, { Angela, 10 }, { Bob, 12 }, { Charlotte, 14 }, { Dan, 10 } } );",
"",
"	table initialize( new scores,",
"	{ { Name, Score },",
"	  { Bob,  3 }, { Angela, 5}, { Dan, 1 }, { Bob, 5 }, { Charlotte, 2 }, { Bob, 1 }, { Angela, 2 } } );",
"",
"	echo(\"Master table:\");	table list ( master );",
"	echo(\"New scores to add:\"); table list( new scores );",
"",
"	table process( master,  ",
"	    table process selected rows( new scores, [Name] == [^Name], [^Score] += [Score] ) );",
"",
"	echo(\"Updated master table:\"); table list( master );",
"",
"	echo(\"Demonstrate row numbers: \");",
"	with table( master, 1 ) with table ( new scores, 3 )",
"	{",
"	    echo( [Name], \" in 'new scores' row \", row() );",
"	    echo( [^Name], \" in 'master' row \", row(1) );",
"	}"
 ]
	,
	"Output 01:Output:Output": "automatic"

},



"Shifted Table Column Specifications" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "shifted table column specification","shifted table column specifications" ],
"Description 01:Introduction" : [
"",
"	In some situations, you know a specific column number for orientation, and want to use this column to reference a different",
"	column nearby, i.e. further to the left or to the right.  In this case, put the header name into <u>single</u> quotation marks ",
"	so it will be considered as a softquoted literal, and add one or multiple '&lt;' or '&gt' symbols before the name starts, but inside",
"	the single quotation marks.  Multiple consecutive symobls can be cascaded to refer to nearby columns which are not immediate neighbors.",
"",
"",
"	=== 40, 960, bold_column_1 noframe, noheader",
"	&lt;		| Refer to the next column to the left.  Example:  '&lt;First Name'",
"	&gt;		| Refer to the next column to the right.  Example:  '&lt;State or Province'",
"	&lt;&lt;	| Refer to 2 columns to the left left.  Example:  '&lt;&lt;First Name'",
"	&gt;&gt;	| Refer to 2 columns to the left right..  Example:  '&lt;&lt;State or Province'",
"	&lt;&gt;	| The two symbols neutralize each other",
"	&gt;&lt;	| Same here",
"	===",
"	<u>Attention</u>: The &lt; and &gt; symbols must be the 1st characters after the quotation marks.  If spaces lie inbetween, then these symbols are considered as part of header names.<br>",
"	<u>Attention</u>: Shifting does not happen in quoted literals, e.g. \"&gt;Last Name\". It assumes the header name containing the &gt; symbol.<br>",
"	",
"	<br><br>",
"	Attempting to left-shift beyond the first column (column 0) will assert exceptions.  Attempting to right-shift beyond the last column is OK as long",
"	the function allows it.  Otherwise exceptions will be asserted, too.",
"",
"	<br><br>",
"	Shifted table column specifications are supported referencing tables as well as in selected function parameters expecting __table columns as function parameters__.",
"" ],
"Examples 01:" : [
"	table initialize( t,  { { Col A, Col B, Col C, Col D, Col E, Col F },",
"	                        { Val A, Val B, Val C, Val D, Val E, Val F, Val G } } );",
"",
"	echo(\"Accessing the table directly:\");",
"	echo( [ t: '<Col D', 1 ] ); // Col C",
"	echo( [ t: '>>Col D', 1 ] ); // Col F",
"	with table( t, 1 ) echo( [ '>Col A'] ); // Partial table specifcation used here, too.",
"",
"	echo(new line, \"And with function parameters:\");",
"	echo( table read column selected rows ( t, Col B, true ) ); // Val B",
"	echo( table read column selected rows ( t, '<Col B', true ) ); // Val A",
"	// echo( table read column selected rows ( t, '<<Col B', true ) ); // would assert exception",
"	echo( table read column selected rows ( t, '<>Col B', true ) );	// Val B",
"	echo( table read column selected rows ( t, '>Col E', true ) ); // Val F",
"	echo( table read column selected rows ( t, '>>Col E', true ) ); // Val G"
 ]
	,
    "Output 01:": "automatic"

},


"Header Name Exception Handling":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "header name exception handling" ],
"Description 01:Exception on headers not found" : [
"",
"	Normally, exceptions will be asserted column header names specified are not existing, e.g. <b>[ cities : Best Restaurant, .. ]</b>.",
"	However, the function __table configure(__) allows differnt options such as",
"	* Referring to the 1st column (column 0) to return some default value",
"	* Referring to the last column to return some default value",
"	* Create a new column with header name Useful for write access.  E.g. <b>[ cities: City, Boston, Best Restaurant ] = Legal Seafood;</b> would add a new row."
 ]
	,
"Examples 01:" : [
"",
"	include ( Support Library );",
"",
"	table load( table, \"Examples\\Cities.csv\" );",
"",
"	table keep columns( table, { Country, City, Famous attraction, Moving along} );",
"",
"	table configure( table, column not found, first column );",
"	echo( [ table : City, Boston, Nation ] );",
"",
"	table configure( table, column not found, last column );",
"	echo( [ table : City, Boston, Nation ] ); // Walking",
"",
"	table configure( table, column not found, new column );",
"	[ table : City, Boston, Best Restaurant ] = Legal Seafood;",
"	[ table : City, Los Angeles, Best Restaurant ] = Jack in the Box; // A chain ...",
"	[ table : City, Zürich, Pizza Takeaway ] = Dieci; // A chain ...",
"",
"	table list( table  ); "
 ]
	,
    "Output 01:": "automatic"
},



"Lookup Access Exception Handling" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "lookup access exception handling" ],
"Description 01:Exception on rows not found" : [
"",
"	Normally, exceptions will be asserted when a table reference with lookup access fails, e.g. <b>[ cities : City, Tokyo ]</b>",
"	would assert an error message and stops program execution.",
"",
"	However, the function __table configure(__) allows differnt options such as",
"	* Referring to the header row and returning the header name",
"	* Referring to the 1st row (below the header row) to return some default value",
"	* Referring to the last row (below the header row) to return some default value",
"	* Create a new row. Useful for write access.  E.g. <b>[ cities: City, Toyko, Moving along ]</b> would add a new row."
 ]
	,

"Examples 01:" : [
"	include ( Support Library );",
"",
"	table load( table, \"Examples\\Cities.csv\" );",
"",
"	table keep columns( table, { City, Famous attraction, Moving along} );",
"",
"	table configure( table, row not found, header row );",
"	echo( [ table : City, Boston   , Moving along]  ); // 'Walking'",
"	echo( [ table : City, New Haven, Moving along]  ); // 'Moving along' (Header row)",
"	echo;",
"",
"	table configure( table, row not found, new row );",
"	[ table : City, Kiruna, Moving along ] = Cross Country Skis; // Adds new row",
"",
"	table list( table, 1st row, -3 ); // List last 3 rows"
 ]
	,
    "Output 01:": "automatic"

},



"Header Names - Memory Effect" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "memory effect" ],
"Description 01:Benefit - Increasing Performance" : [
"",
"	In order to increase overall performance, all header names which are explicitly mentioned with literal values,",
"	for example <b>[Family Name]</b>, <b>['Family Name]</b> or <b>[\"Family Name]</b>, the physical column position of these",
"	headers will normally be identified only once by comparing all headers from left to right, and are then memorized.",
"	<b>behind</b> the header name.  This will improve the performance when processing through entire tables whiles referencing the same headers, e.g.",
"	",
"	<br><br>",
"	<b>table process( table, [Full Name] = [First Name] + ' ' + [Last Name] )</b>.",
"	",
"	Beginning with the 2nd round, the column positions of <b>Full Name</b> and <b>First Name</b> are known and referencing these",
"	columns becomes much faster, especially on very large tables containing many columns.",
"",
"	<br><br>",
"	<u>Note:</u> Column numbers will not be memorized if variables, table references or any expressions with some algorithems are used instead.",
""
 ]
	,
"Description 02:Attentions - Memorized Columns can Strike Back!" : [
"",
"	In a different case, you create a user-defined function which proceses a particular table and refernce",
"	the the colum numbers.  See following example:",
""
 ]
	,
"Examples 02:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, literal } } )",
"	{",
"		table process( table name[], echo( literal([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 ); // Note: Weapons are listed and not the legs"
 ]
	,
    "Output 02:": "automatic",
"Description 03:Solving the Drawback" : [
"	The column numbers for 'Animal' and 'leg count' are memorized after their first reference, and becomes an issue when",
"	called with the 2nd table where the \"leg count\" lies further to the right and a column called \"weapon\" has taken is place there.",
"	The 2nd function call lists the weapons.",
"",
"	<br><br>",
"	Three different approches are available to solve this issue:",
"	* Instead of referencing the constant literal directly, do a simple <i>calculation</i> with it, e.g. putting parentheses around them: <b>[(Full Name)]</b>",
"	* Force B4P to forget the column numbers in the current proogram",
"	* Deactivate memorizing",
""
 ]
	,
"Examples 03:Using Parentheses:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, literal } } )",
"	{",
"		table process( table name[], echo( literal([Animal],\"8#\" ),\": \", [(leg count)] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 );"
 ]
	,
    "Output 03:Note the right output of leg count": "automatic",
"Description 04:" : [
"	You can apply the parentheses where you suspect table columns to shift.  The position of the column will then be recalculated every time it is ",
"	referenced.  For the example code, it's six times.  "
 ]
	,

"Description 05:Consider Forgetting Column Positions" : [
"	Alternativly, consider B4P to become forgetful using the function __forget memorized table columns(__).  This is a one-time acction over the",
"	entire code in the currently loaded and running B4P program file, covering all code lines.",
"",
"	<br><br>",
"	In the following program example, the column number for 'leg count' will be forgotten and re-memorized every time the user-defined ",
"	function is called again.  The advantage of this compared to adding simple algorithmes like parentheses around header names is that you ",
"	ill not have a performance comprormise particularly for very large tables since the header positions will only be calculated once after",
"	having them forgotten."
 ]
	,

"Examples 05:Let B4P forget memorized columns:" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, literal } } )",
"	{",
"		forget memorized table columns; // All memorized columns in this B4P program file will be forgotten",
"		table process( table name[], echo( literal([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	legs( table 1 );",
"	legs( table 2 ); "
 ]
	,
    "Output 05:The output is OK": "automatic",
"Description 06:Deactivate Memorizing" : [
"	Finally, the <i>brute force</i> appraoch is to disable all columns being memorized.  This makes programming very safe, but may also slow",
"	overall performance a bit, particularly if the tables contain many columns, because the header name provided is compared with the existing",
"	table header names every time.  You can disable it by setting the __system variable__ <b>runtime settings[memorize table columns]</b> to <b>false</b>.",
"	This setting will apply until the B4P program has ended or the variable has been enabled again."
 ]
	,
"Examples 06:Disable memorizing" : [
"	table initialize ( table 1, { { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"	table initialize ( table 2, { { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, literal } } )",
"	{",
"		table process( table name[], echo( literal([Animal],\"8#\" ),\": \", [leg count] ) );",
"	}",
"",
"	runtime settings[memorize table columns] = false;",
"	legs( table 1 );",
"	legs( table 2 );"
 ]
	,
    "Output 06:The output is OK": "automatic"



}




 	
,




"choose recent file" :
{
	"Function Names":	[ "choose recent file" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
"Description" : [
"",
"		This function will either identify the <i>most recent file</i> according to a specified ordering criteria.",
""
 ]
	,
	"Call as":		"function",
	"Parameter count":	"5",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Prompt text",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A prompt text is needed if the count (provided in the last function parameter) is not 1.",
"			The prompt will be displayed if needed so you can select from of the <i>n</i> recent files displayed."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify the path name to the directory where the files to be searched are located.  No wildcards are supported here."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "File name pattern to match",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify file name pattern where the file name part may contain wildcard symbols such as",
"			'*' and '?'. The pattern will be used to obtain a listing of matching files which will then be prioritzed",
"			by the ordering criteria.  Exammple: \"b4p*.txt\" covers all files beginning wtih \"b4p\" and ending with file type \".txt\"."
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Ordering criteria",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			One of the following values apply:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			oldest	| Selects the oldest file or list <i>n</i> (count) oldest files you can choose from.",
"			newest	| Selects the newest file or list <i>n</i> (count) newest files you can choose from.",
"			first	| Selects the first file or list the first <i>n</i> (count) files in alphabetical order you can choose from.",
"			last	| Selects the last file or list the last <i>n</i> (count) files in alphabetical order you can choose from.",
"			biggest	| Selects the biggest file (file size) or list the <i>n</i> biggest files you can choose from.7",
"			smallest| Selects the smallest file (file size) or list the <i>n</i> smallest files you can choose from.7",
"			==="
 ]
			
		},
		{ "Number": "5.",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Valid range: 1-35<br>",
"			If 1 is chosen, then no menu will be displayed because the first match according to the prioritization (e.g. newest file) is returned."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Identified file name",
		  "Types": [ "literal" ],
"Description" : [
"			The file name contains no directory path.  If no file has been found, then a blank string is returned."
 ]
			
		}
	],
	"Exceptions": "If no file is found, and verbose level is not 'quiet', then an error message will warn you about no files found.  You have the choice to stop or continue",
"Examples" : [
"	a[] = choose recent file( \"\", \"Examples\\\", \"*table*.b4p\", first, 1 ); // No user interaction",
"	echo(\"First file in alphabetic order containing 'table' is \", a[] );",
"",
"	a[] = choose recent file( \"\", \"Examples\\\", \"*table*.b4p\", last, 1 ); // No user interactino",
"	echo(\"First file in alphabetic order containing 'table' is \", a[] );",
"",
"	a[] = choose recent file( \"Please choose one of the newest files: \", \"Examples\\\", \"*.b4p\", newest, 5 );",
"",
"	echo(\"Chosen file is: \", a[] );"
 ]
	,
"Output" : [
"	savecode",
"First file in alphabetic order containing 'table' is REF_Features_Table_columns.b4p",
"First file in alphabetic order containing 'table' is REF_Function_with_table.b4p",
"Found 382 files.",
"",
"Please choose one of the newest files:",
"     1 :  REF_Function_variable_to_json.b4p         (2020-10- 3 17:57:34      0 kB)",
"     2 :  REF_Function_vertical.b4p                 (2020-10- 3 17:57:34      0 kB)",
"     3 :  REF_Function_week.b4p                     (2020-10- 3 17:57:34      0 kB)",
"     4 :  REF_Function_weekday.b4p                  (2020-10- 3 17:57:34      0 kB)",
"     5 :  REF_Function_while.b4p                    (2020-10- 3 17:57:34      0 kB)",
"Please select: 3",
"Chosen file is: REF_Function_week.b4p"
 ]
	,
	"See also": "directory listing"
},



"abbreviate name" :
{
	"Function Names":	[ "abbreviate name" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
"Description" : [
"		This function abbreviates names.  The abbreviation contains the first letters of the first, all middle and",
"		last names.  Multiple letters will be included for following sequences:<br>",
"		<b>Ch, Gh, Ll, Ph, Rh, Sch, Sh, Sp, St, Th, Zh</b>"
 ]
	,
	"Call as":		"function",
	"Parameter count":	"1",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name to abbreviate",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
	"Return value":
	[
		{ "Name": "Abbreviation",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"	include ( Utility Library );",
"	echo( abbreviate name( \"John Adams\" ) );	",
"	echo( abbreviate name( \"John F. Kennedy\" ) );	",
"	echo( abbreviate name( \"Ludwig van Beethoven\" ) );",
"	echo( abbreviate name( \"Sherlock Holmes\" ) );"
 ]
	,
	"Output": "automatic"
}


,

"Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "variables" ],
"Description 01:Introduction to Variables" : [
"",
"	B4P provides a unique storage model for variables.  ",
"",
"	Beyond4P provides a unique model to manage variables: You can create simple variables like in any programming language, but also",
"	define structures with named variable members and values as well as arrays. You can build up large and sophisticated variable trees containing",
"	a free combination of different array and structures and work with tehm.",
"",
"	<br><br>",
"",
"	Different than in common programming languages, specifing variables in B4P may appear outlandish, but there is a reason for this:",
"",
"	=== 230, 10, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| ]",
"	- Literal value or expression	|	|",
"	  as variable name		|	|",
"	===",
"",
"	All variable names must follow with 2 bracket symbols <b>[ ]</b>.  For simple variabler, no additional info needs to be spefified inside the",
"	brackets, but for structures and arrays, member names or array index numbers need to be specified inside them.  This format provides the freedom",
"	to use any variable name, even with special symbols, and you can reference variables indirectly by picking up variable names from other variables",
"	or expressions.  And the contents inside the bracket allows for additional freedoms other programming languages do not provide."
 ]
	,
"Examples 01:" : [
"	a[] = 123;",
"	a variable[] = 456;",
"	a   variable[] = 789; 	// redundant spaces collapse to 1 space if not put in quotation marks",
"	\"Total Value [€]\"[] = 98.95;",
"",
"	b[] = City;",
"	(b[])[] = Milano; // Write access: Don't forget the parentheses",
"	",
"	echo( a[] );",
"	echo( a  variable[] );",
"	echo( \"Total Value [€]\"[] );",
"	echo( City[] );",
"	echo( b[][] );"
 ]
	,
    "Output 01:": "automatic",
"Description 02:Basic Variable Naming Rules" : [
"",
"	Naming variables:",
"	* The naming rule applies to __base variables__ as well as member variables in __structures__.",
"	* Table names must be of type __literal__ and may take practially any contents, even spaces, special symbols and foreign and non-ANSI characters",
"	* Table names may be referenced as string constants (with or without single or double quotation marks) or as expressions returing literals (e.g. variables, string calculations, etc.)",
"	* Multiple consecutive spaces (and tabs) in names not put into quotation marks will collapse to 1 space.  Example: <b>Last&nbsp;&nbsp;&nbsp;Name</b> collapses to <b>Last Name</b>.",
"	* Quotation marks must be used for table name if they contain special symbols which confuse with B4P code syntax, e.g. hyphens misinterpreted as minus signs.",
"	* Names may or end with numbers, even with spaces inbetween, e.g. <b>4200 Pennsylvania Ave.</b>.",
"	* Blank variable names are also allowed, e.g. <b>''[]</b>.  Attention: Inside __structures__, blank member names will be referred as default member variables, e.g. <b>names[''] = All others;</b>.",
"	* Any expression returning a literal is allowed, e.g. <b>(\"Hel\" + \"lo\")[]</b> are allowed.",
"	* Indirect variable referencingis supported, e.g. <b>(a[])[] = 1; echo( a[][] );</b> meaning writing 1 to variable with name retrieved from variable a.",
"",
"	<br><br>",
"	Declaring variables:",
"	* No explicit variable declarations are required, unless you want to fully initialize arrays or structures using __dim(__), __array(__), __structure(__) or similar functions.",
"	* Variables are declared with their first assignment",
"	* If no __variable protections__ apply, the values of different (i.e. changing) __types__ can be written.",
"",
"	See also next section on variable scops (global, local, etc.).",
""
 ]
	
},


"Variable Scopes" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "variable scopes" ],
"Description 01:Introduction" : [
"",
"	B4P variables are created (also known as <i>declared</i>) at their first assignments.  For example, <b>a[] = 1;</b> creates the variable",
"	<b>a</b> and assigns the numeric value 1 to it.  3 different variable scopes exist:",
"",
"	* __Global variables__: Visible througout entire program execution",
"	* __Local variables__: Visible within a local context such as code inside a user-defined procedure or function",
"	* __System variables__: Set of variables with system-related information and configuration settings you can change"
 ]
	
},

"Global Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "global variables" ],
"Description 01:Introduction" : [
"",
"	If the variable is created in the B4P program file started first, and this happens outside user-defined procedures and functions, then it will be",
"	a global variable.  Global variables are visible during the entire program execution, even while running user-defined functions or other B4P programs",
"	using the __start(__) or __include(__) function.",
"",
"	<br><br>",
"	Global variables can also be created inside __user-defined procedures__ and __user-defined functions__, as well as in B4P programs which have been started from other",
"	B4P programs using __start(__) or __include(__) functions if they are put into a code block following the __global(__) function.",
"",
"	<br><br>",
"	Global varibles will exist until the B4P program has ended or the variable has been been deleted explicityl with the function __delete(__).",
""
 ]
	,
"Examples 01:Defining global variables inside user functions:" : [
"	g[] = 4;",
"	define procedure( foo )",
"	{",
"	    global",
"	    {",
"	        a[] = 5;",
"	    }",
"	    global() b[] = 6; // Alternative formulation for 1 statement",
"	    echo( g[] ); // Global variables are always visible.",
"	}",
"",
"	foo;",
"	echo( a[] );",
"	echo( b[] );"
 ]
	,
    "Output 01:": "automatic"
},



"Local Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "local variables" ],
"Description 01:Introduction" : [
"	Variables created inside __user-defined procedures__ and __user-defined functions__, as well as in B4P programs which have been started from other",
"	B4P programs using __start(__) or __include(__) functions, will be local variables.  Local variables are only visible locally, i.e.",
"	* Inside the presently running user-defined procedure or function",
"	* Inside a B4P program started with __start(__) or __include(__) from a different B4P program (or the same one because recursive calls are allowed).",
"	The local variables are not visible if a further procedure, function or B4P program is called.",
"",
"	<br><br>",
"	Variables may be deleted using the __delete(__) function.  Local variables will be deleted automatically when leaving (returning from) user-defined",
"	procedures and functions or called programs.",
""
 ]
	,
"Examples 01:Demonstrating global and local variables" : [
"	define procedure( foo, { { a, numeral } } )",
"	{",
"	    if (a[] < 4) // If a[] exists a local variable, then the local variable will be used preferentially.",
"	    {",
"	        foo( 4 ); // Recursive call",
"		a[] = 5;",
"	        echo( a[] ); // Called 3rd: 5",
"	    }",
"",
"	    echo( a[] ); // Called 1st and 4th: 4",
"	    a[] = 3;",
"	    echo( a[] ); // Called 2nd and 5th: 3",
"	}",
"",
"	a[] = 1;",
"	foo( 2 );",
"	echo(a[] ); // Called 6th: 1 (Global variable)"
 ]
	,
    "Output 01:": "automatic"
},

"System Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "system variables" ],
"Description 01:Introduction" : [
"	System variables are predefined variables which contain system-related information (e.g. <b>system info[user name]</b>) or configuration settings. e.g.",
"	<b>runtime settings[verbose]</b>.  For most system variables, __variable protections__ apply which may permit read-accesses, or impose restrictions",
"	on write accesses, e.g. limiting values to write to a selection of permitted values.  See the __list of system variables__ for existing system variables."
 ]
	,
"Examples 01:Demonstrating system and local variables" : [
"	define procedure( foo, { { system info, numeral } } )",
"	{",
"		// Local variable system info[] is not accessible here because system",
"		// variables are treated preferentially over local and global variables.",
"		echo( \"This is a \", scope( system info[]), \" variable.\" );",
"		echo( system info[operating system] );",
"	}",
"",
"	foo( 123 );"
 ]
	,
    "Output 01:": "automatic"
},


"List of System Variables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "list of system variables" ],
"Description 01:" : [
"",
"	=== 300, 100, 100, 500, bold_column_1",
"	Variable Name				| Variable Type	| Protection Settings	| Description",
"	command line arguments[]		| numeral	| read only		| Number of command line arguments, at least 1",
"	&nbsp;&nbsp;...[0]			| literal	| full access		| 1st command line argument (typically the name of the B4P program file)",
"	&nbsp;&nbsp;...[1, 2, ...]		| literal	| full access		| Additional command line arguments if available",
"						|		|			|",
"	local settings[]			| void		| locked		| <b>Following variables refer to local settings</b>",
"	&nbsp;&nbsp;...[locale]			| literal	| read only		| Configured locale as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[country name]		| literal	| read only		| Configured country as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[language]		| literal	| read only 		| Configured language as part of locale settings.  Use __set locale(__) to change.",
"	&nbsp;&nbsp;...[currency symbol]	| literal	| limited access	| Currency symbol as configured in locale settings",
"	&nbsp;&nbsp;...[decimal separator]	| literal	| limited access	| Typically 1 chracter, e.g. '.', ','",
"	&nbsp;&nbsp;...[thousand separator]	| literal	| limited access	| Typically 1 chracter, e.g. ',', '.', ' ', \"'\"",
"	&nbsp;&nbsp;...[date format]		| literal	| limited access	| E.g. \"DD.MM.YYYY\", \"MM/DD/YY\", etc.  See __date to literal formatting parameters__.",
"	&nbsp;&nbsp;...[date format short]	| literal	| limited access	| E.g. \"DMY\" or \"MDY\", used for resolving ambiguities in extracting dates from strings",
"	&nbsp;&nbsp;...[date separator]		| literal	| limited access	| Typically 1 chracter, e.g. '.', '/', '-'",
"	&nbsp;&nbsp;...[time format]		| literal	| limited access	| E.g. \"HH:II:SS\" Note the \"I\" for minute digits. See __date to literal formatting parameters__.",
"	&nbsp;&nbsp;...[time separator]		| literal	| limited access	| Typically 1 chracter, e.g. ':'",
"	&nbsp;&nbsp;...[list separator]		| literal	| limited access	| Typically 1 chracter, e.g. ',', ';'. Used for CSV file format.  Excel uses different symbols around the world.",
"						|		|			|",
"	runtime settings[]			| void		| locked		| <b>Following variables refer to run-time settings</b>",
"&nbsp;&nbsp;...[crlf]			| boolean	| limited access	| If true, then new-lines in files saved will be CR+LF, otherwise just line feed (LF).  For Linux and MACOS  											  releases, this variable is true, for Windows it is false.",
"	&nbsp;&nbsp;...[epsilon]		| numeral	| limited access	| __Epsilon__ as numeric tolerance value used for comparisons.  E.g. values below epsilon may be interpreted as zero.  Inital value is 1E-09.",
"	&nbsp;&nbsp;...[exit directly]		| boolean	| limited access	| Normally false, i.e. user must press [Enter] to finally leave the program and the console window may close.  If set to true, then B4P programs exist directly.",
"	&nbsp;&nbsp;...[search files ignore case]| boolean	| limited access	| Normally true under Windows and false under Linux/MACOS.  In Windows systems, finding files is not case sensitive.",
"&nbsp;&nbsp;...[input file character set]| literal	| limited access	| Default character set assumed if text file are loaded, are not of UTF-16 type and have no byte order marks,  and too few special symbols were inside to recognize the files properly.  Presently, its <b>win-1252</b> for Windows and <b>utf-8</b> for Linux/MACOS systems.<br> 											  Following character sets are supported: <b>ansi, iso8859-1, win1252, utf-8, utf-16, utr-16 big endian</b>.",
"	&nbsp;&nbsp;...[output file character set]| literal	| limited access	| Default character set assumed for saving files if no other format specified.  Presently it's <b>utf-8</b>.",
"	&nbsp;&nbsp;...[memorize table columns]	| boolean	| limited access	| See __memory effect__ regarding table header names begin memorized. Set to false to deactivate memorizing.",
"	&nbsp;&nbsp;...[prompt]			| literal	| limited access	| Current prompt as used in the __interactive mode__.  Change it using the __prompt(__) function.",
"	&nbsp;&nbsp;...[registry my space]	| literal	| limited access	| Obsolete.",
"	&nbsp;&nbsp;...[verbose]		| literal	| limited access	| Verbose levels.  See __verbose__ for more details.",
"						|		|			|",
"	system info[]				| void		| locked		| <b>Following variables refer to operating-system specific characeristics</b>",
"	&nbsp;&nbsp;...[app data directory]	| literal	| read only		| Local machine application data directory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config\"",
"	&nbsp;&nbsp;...[app data directory b4p]	| literal	| read only		| Local machine application data directory with B4P subdirectory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[user app data directory]     | literal	| read only		| User application data directory<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config\"",
"	&nbsp;&nbsp;...[user app data directory b4p] | literal	| read only		| User application data directory with B4P subdirectory<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[bin directory]		| literal	| read only		| Location of binary executable file<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/home/<i>user name</i>/.config/b4p\"",
"	&nbsp;&nbsp;...[program directory]	| literal	| read only		| Program directory<br>Windows: \"C:\\ProgramData\\b4p\"<br>Linux/MACOS: \"/usr/local/etc\"",
"	&nbsp;&nbsp;...[program directory b4p]	| literal	| read only		| Program directory with B4P subdirectory<br>Windows: \"C:\\Program Files\\b4p\"<br>Linux/MACOS: \"/usr/local/etc/b4p\"",
"	&nbsp;&nbsp;...[temp directory]		| literal	| read only		| Directory for temporary data storage:<br>Windows: \"C:\\Users\\<i>user name</i>\\AppData\\Local\\TEMP\"<br>Linux/MACOS: \"/tmp\"",
"	&nbsp;&nbsp;...[user directory]		| literal	| read only		| User directory after login:<br>Windows: \"C:\\Users\\<i>user name</i>\\\"<br>Linux/MACOS: \"/home/<i>user name</i>\"",
"	&nbsp;&nbsp;...[directory separator]	| literal	| read only		| Windows: '\\' and Linux/MACOS: '/'",
"	&nbsp;&nbsp;...[operating system]	| literal	| read only		| e.g. \"Windows\", \"Linux\", \"MACOS\"",
"	&nbsp;&nbsp;...[operating system product] | literal	| read only		| e.g. specific Windows OS product like \"Windows 10 Pro\" or Linux distribution name like \"Ubuntu\"",
"	&nbsp;&nbsp;...[user name] 		| literal	| read only		| Your login user name",
"	&nbsp;&nbsp;...[user domain] 		| literal	| read only		| Your user domain",
"	&nbsp;&nbsp;...[host name]		| literal	| read only		| Name of your system",
"&nbsp;&nbsp;...[privileges]		| literal	| read only		| Your privilege level for the operating system: <br> <b>standard</b>: Standard user privileges <br> <b>elevated</b>: Enhanced privileges, entitled to install software <br> 											  <b>administrator</b>: Administrator privileges.  Applicable if program is started with administration rights (e.g. 'sudo' added in front in Linux/MACOS systems)",
"	&nbsp;&nbsp;...[operating system version] | literal	| read only		| Version number of installed operating system",
"						|		|			|",
"	time stamp[]				| void		| read only		| Provides date and time at start-up. Example under Windows: \"Sat Oct 10 10:17:34 2020\"",
"	version info[]				| void		| read only		| Provides B4P version and release info",
"	===",
""
 ]
	
},




"Variable Attributes" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable attributes" ],
"Description 01:Introduction" : [
"	In B4P, every variable stored contains following information which help to describe the data stored and the variable form:",
"",
"	=== 200, 800, noframe_1stcolbold",
"	Attribute       | Description ",
"	Variable Name   | A literal of choice.  Exception: Array members have no names as they are just numbered",
"	Value		| Stored value (Base Variable)",
"	Data Type       | Distinguishes among __numeral__, __plain numeral__, __date__, __plain date__, __literal__, __softquoted literal__, __quoted literal__, __boolean__, __void__, and __parameter set__. ",
"	Variable Form   | Distinguishes whether the variable is a __simple variable__, an __array__ or a __structure__, or a simple variable containing __zero members__",
"	Members		| Contains all member variables (in __arrays__ and __structures__).  Every member is treated like an individual variable, too.",
"	Member count	| Number of existing members (0 for simple variables)",
"	Protection Setting | Applies rules on accessing and/or modifying these variables, e.g. read-only, prevent deleting, etc.  See function __protect(__)",
"	Locked          | Variables may be temporarily locked during the time while an assignment on that variable is executed or a __reference__ is pointing on this variable.  Locked variables cannot be deleted.",
"	==="
 ]
	
},



"Variable Forms and Trees":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable forms", "base variable" ],
"Description 01:Introduction" : [
"",
"	B4P lets you create variable trees which consist of __structures__, __arrays__ or free combinations of both and with quasi unlimited",
"	number of hierarchical levels.  Availabe memory space is the only limitation.  The illustartion below shows the impressive structures",
"	you can build up rapidly with a few write accesses:",
"",
"	<br/><img src=\"Images/Description_Variable_Forms_and_Trees.jpg\" alt=\"Illustration of a variable tree\"><br/>"
 ]
	,

"Description 02:Building Variable Trees with Arrays and Structures" : [
"",
"	With Beyond4P, you can create simple variables as well as arrays (containing numbered member variables) and structures (containing named member",
"	variables).  Full nesting flexibility is supported: Arrays and structures may contain further structures and/or arrays as you wish.",
"	In short, the variable storage model is a tree structure which can hold data in the root node (base variable), intermediate nodes (e.g. member",
"	variable also containing sub-members) and leaf nodes (final member variables without further members defined).",
"",
"	=== 200, 600, 200, noframe_1stcolbold",
"	Variable Form | Description | Example",
"	__Simple Variables__ | Simple variables hold one base variable value of any data type (numeral, literal, date, boolean, void and paramter set) and contain no members. | last name[]",
"        __Arrays__           | In addition to the base variable, arrays a defined number of numerically indexed members | member [1], member[3]",
"	__Structures__       | In addition to the base variable, structures contain one or more named member variables | animal[dog], animal[cat]",
"	__Zero Members__     | Very similar to simple variables.  Contains base variable and zero members, but has previously had array or structure members which have been deleted meanwhiel.  The variable form changes to __structure__ if a structure element is added, or to __array__ if an array member is added.",
"	==="
 ]
	
  },

  "Simple Variables" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple variables" ],
    "Keywords":			[ "simple variables", "simple variable" ],
"Description 01:Simple Variables" : [
"",
"	Simple variables contain only one value and posesses no further member variables in form of structures or arrays.  Syntax:",
"",
"",
"	=== 230, 10, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| ]",
"	- Literal value or expression	|	|",
"	  as variable name		|	|",
"	===",
""
 ]
	,

"Examples 01:" : [
"	a[] = Hello;",
"	(a[])[] = Hi; // Parentheses required on left hand side, ",
"	              // otherwise seen as \"right hand\" expression and not \"left hand\" expression",
"	(a[] + ' World')[] = Ahoi;",
"	echo(\"a[]     = \", a[] );",
"	echo(\"a[][]   = \", a[][] ); // Here it's OK",
"	echo(\"Hello[] = \", Hello[] );",
"	echo(\"Hello World[] = \", Hello World[], new line );",
"",
"	'1'[] = One; // Even these variable names are valid !",
"	' '[] = Space;",
"	''[] = Blank;",
"	'a[]'[] = aaaah;",
"	echo('1'[], \" \", ' '[], \" \", ''[], \" \", 'a[]'[], new line );",
"",
"	me too[] = Hmm;",
"	me  too[] = Me;   // Unquoted literal ignores redundant spaces, same as 'me too'",
"	'me  too'[] = Mee too;",
"	echo( me too[], \", \", me  too[], \", \", 'me  too'[] );"
 ]
	,
    "Output 01:":		"automatic"


  },

  "Arrays" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "arrays" ],
    "Keywords":			[ "array", "arrays" ],
"Description 01:Arrays" : [
"",
"	Arrays are variables with members which are only referenced numerically using an index value.  Arrays support negative indexing, meaning that -1, -2, etc. references",
"	the last, 2nd last and further array elements.  A variable cannot be an array and a structure at the same time, i.e referencing an array with a member name",
"	causes an error.",
"",
"",
"	=== 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Index			 		| ]",
"	- Literal value or expression	|	| - Numeral or numeric expression	|",
"	  as variable name		|	|   as index number			|",
"	===",
"",
"",
"",
"	<br/><br/>",
"	Syntax for referencing arrays:  <b>Variable Name [ index ]  </b>",
"	<br/><br/>",
"",
"	Following rules apply to the index:",
"	* The index must always be a numeric value.",
"	* Indexing begins with 0 (zero).",
"	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[4.99]</b> accesses the same member as <b>a[5]</b>.",
"	* Negative index values are supported. -1 refers to the last element in the array. -2, -3, etc. refer to the next members above.",
"	* Exceptions are asserted when attempting to read non-existing members",
"	* Arrays will be extended when attempting to write using index values bigger than the current array size.",
"",
"",
"	<br><br>",
"	Following approaches are avialable to create arrays:",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	dim...() function family | Functions such as __dim(__), __redim(__), __dim protect(__) and __redim protect(__) initialize arrays with a specified number of elements and initial values.",
"	array...() | Functions like __array(__) and __array protect(__) create arrays with initial values provided in parameter sets.",
"	Direct referencing | Assigning a simple variable with an index will automatically create an array with members 0...<i>index</i> where the members inbetween are not initialized and return __void__ values.",
"	===",
"",
"	<br><br>",
"	Individual member variables may be deleted using the __delete(__) function.  If a member in the beginning or middle of the arrary is deleted, then all other members move up accordingly.",
"",
"",
""
 ]
	,
"Examples 01:" : [
"	",
"	echo(\"Initialize variable with dim function:\");",
"	dim( a[], 5, '.' );",
"	inspect( a[] );",
"",
"	echo(new line, \"Initialize variable with array function:\");",
"	array( a[], { Ha, He, Hi, Ho, Hu, Ahoi } );",
"	inspect( a[] );",
""
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Nesting" : [
"	Nesting is supported: Every array element may be a simple variable, a further array of any size or a structure.",
"	A (m x n) multi-dimensional array is a nested array with <i>m</i> members and each member containing <i>n</i> sub-members.",
"	Since Beyond4P variable structure is a tree with values possible in both root, intermediate and end nodes, the base variables as well as",
"	member variables of those containing sub-members are preserved.",
"",
"",
"	<br>Nested arrays:",
"	=== 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Index			 		| ,	| Index					| ]",
"	- Literal value or expression	|	| - Numeral or numeric expression	|	| - Numeral or numeric expression	|",
"	  as variable name		|	|   as index number			|	|   as index number			|",
"	===",
"	* Nesting structures in arrays and vice versa is also allowed.",
"	* For deeper nesting, specify addtional index numbers and/or member names separated with commas.",
""
 ]
	,

"Examples 02:" : [
"",
"	echo(\"Initialize a 2-dimensional array:\");",
"	dim( a[], {2,3}, '0' );",
"	inspect( a[] );",
"",
"	echo(new line, \"Initialize two arrays (2nd one is nested) implicitly:\");",
"	b[2] = true;",
"	b[1,2] = 123;",
"	inspect( b[] );",
""
 ]
	,
    "Output 02:":		"automatic"

  },

  "Structures" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "structures" ],
    "Keywords":			[ "structure" ],
"Description 01:Structures" : [
"",
"	Structures are variables with members which are referenced by <i>member names</i>.  Structures are useful for following pruposes: 1) managing",
"	your variables in a structured manner, and 2) providing a form of associative storage.  Beyond4P maintains the members in alphabetical order automaatically",
"	and uses a very fast bisectional algorithm to find the specified variable.  For example, max. 16 internal queries are needed to",
"	access a a member with a given member name in a structure containing more than 65,536 members.",
"",
"",
"	=== 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Member Name		 		| ]",
"	- Literal value or expression	|	| - Literal value or expression		|",
"	  as variable name		|	|   as variable member name		|",
"	===",
"	<br>",
"	* Numeric indexing (like in arrays) is allowed to access <u>existing</u> members, e.g. 0..9 (and -1..-10 with __negative indexing__).",
"",
"",
"	<br><br>",
"	Similar to arrays, existing structures may also be referenced with numeric <i>index</i> values.  This is useful when using loops to process",
"	through the structure rapidly.  Please note that the structure is always held in an alphabetic order.  Negative indexing is also supported, where",
"	-1 refers to the last element (last in alphabetical order), and -2, etc., to the next ones above.",
"",
"	<br><br>",
"	Following approaches are avialable to create structures:",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	structure...() | Functions like __structure(__) and __structure protect(__) create structures with intial member names and values provided in two parameter sets.",
"	Direct referencing | Assigning a simple variable with a member name will initialize it with a structure.  This will not be possible if the variable is already an array.",
"	==="
 ]
	,
"Examples 01:" : [
"	",
"	echo(\"Initialize a structure directly\");",
"	a[dog] = Hund;",
"	a[cat] = Katze;",
"	a[gnu] = Gnu;",
"	echo(a[cat]);",
"	inspect( a[] );",
"",
"	echo(new line, \"Initialize with the structure function\");",
"	structure( leg count[], { snake, bird, dog, fly, tick }, { 0, 2, 4, 6, 8 } );",
"	inspect( leg count[] );",
""
 ]
	,
    "Output 01:":		"automatic",

"Description 02:Nesting" : [
"	Nesting is supported: Every structure element may be a simple variable, a further structure or array of any size.^",
"	Since Beyond4P variable structure is a tree with values possible in both root, intermediate and end nodes, the base variables as well as",
"	member variables of those containing sub-members are preserved.",
"",
"",
"	<br>Nested structures:",
"	=== 230, 10, 230, 10, 230, 10, noframe table_syntax",
"	Base Variable Name		| [ 	| Member Name				| ,	| Member Name				| ]",
"	- Literal value or expression	|	| - Literal value or expression		|	| - Literal value or expression		|",
"	  as variable name		|	|   as variable member name		|	|   as variable member name		|",
"	===",
"	<br>",
"	* Numeric indexing (like in arrays) is allowed to access <u>existing</u> members, e.g. 0..9 (and -1..-10 with __negative indexing__).",
"	* Nesting arrays in structures and vice versa is also allowed.",
"	* For deeper nesting, specify addtional member names and/or index numbers separated with commas",
"",
""
 ]
	,

"Examples 02:" : [
"	",
"	echo(\"Initialize a nested structure containing structure and array\");",
"",
"	city[] = Paris;",
"	array( city[district], {ignoe 0, Louvre, Bourse, Temple, Hotel de Ville, etc. } );",
"	city[district,2,area] = 99; // 99 hectars",
"	city[district,2,inhabitants] = 19500;",
"	echo(\"1st  district = \", city[district,1], \"   last district = \", city[district,-1] );",
"",
"	inspect( city[] );"
 ]
	,
    "Output 02:":		"automatic",

"Description 03:Default Members" : [
"",
"	Normally, attempting to access a structure with a non-existing element name will cause an error.  Beyond4P supports default members",
"	which will be returned in case of no matches.  Assign the default value using a blank literal ('') as member name and that's it.",
""
 ]
	,

"Examples 03:" : [
"	",
"	echo(\"Demonstrate default values\"); // a[''] is defined below and is used as default variable.",
"",
"	structure( a[], { cow, horse, pig, sheep, '' }, { Kuh, Pferd, Schwein, Schaf, No translation } );",
"	echo( \"cow : \", a[horse] );",
"	echo( \"goat: \", a[goat] );",
""
 ]
	,
    "Output 03:":		"automatic",
"Description 04:Referencing structures with numbers" : [
"	Similar to arrays, structure members can also be referenced with index numbers.",
"	The only difference is that the members will be rearranged in alphabetical order whenever a new member is added." ],
"Examples 04:" : [
"    names[Mozart] = Wolfgang Amadeus Mozart;",
"    names[Williams] = John Williams;",
"    names[Strauss] = Johan Strauss;",
"    names[Bach] = Johan Sebastian Bach;",
"    names[Beethoven] = Ludwig van Beethoven;",
"",
"    for (i[] = 0, i[] < member count(names[]), i[]+=1)",
"    {",
"        echo(i[], \": \", names[i[]]);",
"    }",
"",
"    echo(\"names[2] = \", names[2] );",
"    names[Bartok] = Bela Bartok;",
"    echo(\"names[2] = \", names[2] ); // List of names has shifted down",
"",
"    echo(\"Last entry is \", names[-1] ); // Negative indexing	"
 ]
	,
    "Output 04:": "automatic"
  },


"Zero Members Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "zero members" ],
"Description 01:Zero Members" : [
"",
"	Zero members avariables are very closely related to simple variables.",
"	The only difference is that these variables have contained __array__ or __structure__ members before, but all members have",
"	been deleted meanwhile.  In some application cases, e.g. loading variables from __JSON__ files, zero members may be useful to distinguish",
"	between loading empty arrys and no arrays at all.",
""
 ]
	,

"Examples 01:" : [
"	",
"	echo(\"Distinguish between simple and zero members variables\");",
"	a[] = Hi;",
"	echo(identify(a[0])); // simple",
"",
"	a[0] = Ho;",
"	echo(identify(a[0])); // array",
"",
"	delete(a[0]);",
"	echo(identify(a[0])); // not found",
"	echo(identify(a[])); // zero members",
"",
"	a[dog] = Hund;",
"	echo(identify(a[])); // structure",
"",
""
 ]
	,
    "Output 01:":		"automatic"

},



"Parameter Sets Specifying Members" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "specifying members with parameter sets" ],
"Description 01:Introduction" : [
"",
"	Variable members can either be specified with constant values, and expressions such as variables.",
"	This provides flexibility, but sometimes you need the flexibility to access different members",
"	in differently deep levels dynmically.  This is best done with using parameter sets which make up",
"	a part of the sequence of member names and/or index numbers or the whole one. See the following example:"
 ]
	,
"Examples 01:" : [
"	var[me,you,we,they] = those people;",
"	var[me,you,we,us] = we the people;",
"	var[me,you,we] = all of us;",
"	var[] = grandfather;",
"",
"	a[] = you;",
"	b[] = we;",
"	echo( var[ me, a[], b[] ] );",
"",
"	c[] = { you, we, us };",
"	echo( var[me, c[]] );	// Use parameter set to specify sub-members behind 'me'",
"",
"	c[] = {me} + c[];",
"	echo( var[c[]] );	// Use parameter set to specify all nested members",
"",
"	c[] = c[]{0..2}; 	// me, you we only",
"	echo( var[c[]]  );      // Use paramter set to specify first part of all nested members",
"",
"	echo( var[ {} ] );	// Empty set refers to base variable",
"	echo( var[ {}, {me, you}, {}, {we, they} ] );	// Combinations like this one are OK",
"	// Empty sets in the middle of the 'path' are considered as 'same location'"
 ]
	,
    "Output 01": "automatic"
},



"References to Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "references to variables" ],
"Description 01:Introduction" : [
"",
"",
"	In several cases, sophisticated variable structures with multiple levels, e.g. a[b,c,d,e] need to be referenced repeatedly where every reference checks for the existence of",
"	of the base variable name and all names a through e.  To address this problem, B4P provides the feature called <i>refrences to variables</i> which allows you to define ",
"	variables which poinnt to other base variables, regardless if they are base variables, intermediate or leaf members inside variable structures.",
"",
"	<br><br>",
"	References to variables in B4P have similarities with references in other modern programming languges such as C++, C# and Java.  References are not pointers, i.e. any for of",
"	mingling up pointers with pointer arithmetics is not supported here. ",
"",
"	<br><br>",
"	Destination variables which are pointed by references carry along a kind of blocking notice which forbids deleting them until all references applied on them have been",
"	released again.  This protection mechanism avoids working with disconnected references pointing to nowhere.  Automatic releases will happen with locally defined references to",
"	variables in program, procedure and function blocks when leaving.  The remaining references will be released in a coordinated manner when the program ends execution.",
""
 ]
	,
"Description 02:References in Function Parameters" : [
"	Some B4P functions and user-defined functions can accept parameters as references to variables, too.  These parameters provide access to the base variable as well as",
"	to all mebmer variables."
 ]
	
},

"Simple References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "simple references to variables" ],
    "Keywords":			[ "simple references" ],
"Description 01:Introduction" : [
"",
"	The following exmaple shows how a simple reference is designed and describes how to use the '^' symbol to do a reference.",
"",
"	<br/><img src=\"Images/Description_Variables_Simple_References.jpg\" alt=\"Simple References to Variables\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"	ref1[] =^ a[]; // ref1[] references a[]",
"",
"	a[]    = Hi;",
"	echo( a[],\", \",ref1[] ); // Outputs \"Hi, Hi\"",
"",
"	ref1[] = He;",
"	echo( a[],\", \",ref1[] ); // Outputs \"He, He\""
 ]
	,
    "Output 01:": "automatic"
},

"Through-Referencing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "through-referencing" ],
"Description 01:Introduction" : [
"",
"	Note that the variable name used to establish a reference must either be vacant (no variable defined yet) or just a __simple variable__ containing no members.",
"	This rules is insofar relevant because member (and subname) names and array index numbers specified in the references will be applied on the target variables directly.",
"	The following examples shows a typical through-referencing:",
"",
"	<br/><img src=\"Images/Description_Variables_Through_References.jpg\" alt=\"Through-Referencing\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]     = Hello;",
"	ref1[]  =^ a[]; // ref1[] references a[]",
"",
"	ref1[b] = Ho;   // Both assignments build members on a[]",
"	a[c]    = Hi;",
"",
"	echo( a[b],\", \",ref1[b] ); // Ho, Ho",
"	echo( a[c],\", \",ref1[c] ); // Hi, Hi"
 ]
	,
    "Output 01:": "automatic"
},


"Redirecting References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "redirecting references" ],
"Description 01:Introduction" : [
"",
"	<br/><img src=\"Images/Description_Variables_Redirecting_References.jpg\" alt=\"Redirecting References\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]     = Hello;",
"	a[b]	= Hi;",
"",
"	ref1[]  =^ a[]; // ref1[] references a[]",
"	echo( ref1[] ); // Hello",
"",
"	ref1[]  =^ a[b];",
"	echo( ref1[] ); // Hi",
"",
"	a[b]    = Ho;	",
"	echo( ref1[] ); // Ho"
 ]
	,
    "Output 01:": "automatic"
},

"Copying References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "copying references" ],
"Description 01:Introduction" : [
"",
"	Two flavors of copying references exist:",
"	* If <b>=^</b> is used, then the referencing process passes through all intermediate references and establishes the link to the target variable directly.",
"	* If <b>=^^</b> is used, then the reference will be made on the specified intermediate reference.",
"	The 1st choice ensures that all referncing are fast and direct.  The 2nd choice provides the flexibiltiy to make modifications on the intermediate",
"	references such as redirecting only the intermediate reference and not all intial references attached to them.",
"",
"	<br/><img src=\"Images/Description_Variables_Copying_References.jpg\" alt=\"Copying References\"><br/>",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"	a[b]   = Hi;",
"",
"	ref1[] =^ a[b]; 	// References a[b]",
"	ref2[] =^  ref1[];	// References a[b] directly",
"	ref3[] =^^ ref2[];	// References ref2[]",
"	ref4[] =^  ref3[];	// References a[] directly",
"",
"	ref3[] = He;",
"	echo( a[b],\", \",ref1[],\", \",ref2[],\", \",ref3[] );    // 4 x He",
"",
"	a[c]   = Ho;		// Visible in ref[2] and ref[3]",
"	ref2[] =^  a[c];	// Detach ref2[] from a[b] and link to a[c]",
"",
"	echo( ref1[],\", \",ref2[],\", \",ref3[],\", \",ref4[] );    // He, Ho, Ho, He"
 ]
	,
    "Output 01:": "automatic"
},

"Releasing References" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Releasing references" ],
"Description 01:Introduction" : [
"",
"	Following methods are available to release references:",
"	* Function call __release(__): 	Specify references to variables directly.  Example: <b>release ( ref1[ ], ref2[ ], ref3[ ] );</b>",
"	* Function call __release all(__): All locally defined references to variables will be released.  When called from the main program (neither function nor other program called), then all globally defined references will be released.",
"	* Function call __release all(__): Specify references to variables directly, or variables which contain one or more members / sub-members which are references to variables.  All of them will be released.",
"	* Exiting a user-defined procedure or function, or a B4P program called wiht __start(__) or __include(__): All locally defined references to variables will be released.",
"	* __Redirecting references__: The original reference will be leased and moved to a different variable.",
"",
"	<br/><img src=\"Images/Description_Variables_Releasing_References.jpg\" alt=\"Releasing References\"><br/>",
"",
"	<u>Note</u>: Please note that the target variables remain unaffected while releasing the references.  Once all references on a target variable are released, then the target variable may be deleted.",
"",
"	<br><br>",
"	Released references will not be deleted but mutate to simple variables containing void values.",
""
 ]
	,
"Examples 01:" : [
"	a[]    = Hello;",
"",
"	ref1[] =^ a[];",
"	echo( ref1[] );",
"",
"	release( ref1[] );",
"	echo( ref1[] );"
 ]
	,
    "Output 01:": "automatic"
},




"References in Member Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "References in member variables" ],
"Description 01:Introduction" : [
"",
"	The past examples have been made with simple references.  However B4P also allows declaring member variables in structures and arrays as references.",
"	Here, a similar rule applies that references can only be made on member variables which are not yet existing or do not contain their own sub-members.",
"	Two code examples below illustrate this powerful feature.",
"" ],
"Description 02:Example 1" : [
"",
"	In the following example, 3 members in variable c[] point to variable a[] and a[g] accordingly.  In addition, a[g] is a reference which",
"	referst to c[]. An \"eight-loop\" has been created, and the code example demonstrates that you can walk the path through the loop multiple times.",
"	",
"	<br/><img src=\"Images/Description_Variables_References_in_Member_Variables_1.jpg\" alt=\"References in Member Variables 2\"><br/>",
""
 ]
	,
"Examples 02:" : [
"// Black part in illustration",
"",
"a[] = Ha;",
"a[b] = He;",
"c[] = Hi;",
"",
"// Greeen part in illustration",
"",
"c[d] = ^a[];",
"c[e] = ^a[b];",
"c[f] = ^c[e]; // references to a[b]",
"echo( c[d],\", \", c[e] ); // Ha,He",
"",
"// Blue part of illustration",
"",
"a[g] = ^c[];",
"echo( a[g],\", \", a[g,d] ); // Hi, Ha",
"",
"// You can loop around multiple times if you wish:",
"",
"echo( a[g,d,b] ); // He",
"echo( a[g,d,g],\", \", a[g,d,g,d], \", \", a[g,d,g,d,g] ); // Hi, Ha, Hi"
 ]
	,
    "Output 02:": "automatic",
"Description 03:Example 2" : [
"",
"",
"	In the following example, 3 members in variable c[] point to variable a[] and a[g] accordingly.  In addition, a[g] is a reference which",
"	referst to c[]. An \"eight-loop\" has been created, and the code example demonstrates that you can walk the path through the loop multiple times.",
"	",
"	<br/><img src=\"Images/Description_Variables_References_in_Member_Variables_2.jpg\" alt=\"References in Member Variables 2\"><br/>",
""
 ]
	,
"Examples 03:" : [
"",
"// Black part in illustration",
"",
"array( a[ ],{Ha,He,Hi,Ho} );",
"",
"// Green part in illustration",
"",
"a[0] =^  a[3];",
"a[1] =^^ a[0]; // a[1] refers to a[0] (and not to a[3] directly)",
"",
"echo( a[0],\", \", a[1] ); // Ho, Ho",
"",
"// Blue part in illustration",
"",
"a[0] =^ a[2];",
"echo( a[0],\", \", a[1] ); // Hi, Hi"
 ]
	,
    "Output 03:": "automatic",
"Description 04:Avoid Tail-Biting" : [
"",
"	Be aware that you do not build up references resembling infinite loops because B4P will start circling around through 1 or more variables.",
"	See the following code examples with one variables and the tail-biting effect with two variables."
 ]
	,
"Examples 04:" : [
"	// Bad example 1: 1 dog runs in a circle, attempting to bite its own tail ",
"	a[] = a[];",
"",
"	// Bad example 2: 2 dogs run in a circle, attempting to bite each other's tails",
"	x[] = 5;",
"	y[] =^x[];",
"	x[] =^y[];"
 ]
	

},


"Protecting Variables" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "protecting variables" ],
"Description 01:Introduction" : [
"",
"	The functions __protect(__), __dim protect(__), __redim protect, __array protect(__), and structure protect(__) are available apply",
"	protection rules on the target variables.  It is always possible to change protection settings on local variable.  For global variables, this",
"	is only allwed in the global context (i.e. not in the code of user-defined procedures and functions and B4P programs started with __start(__) or __include(__)).",
"	Protection settings of system variables cannot be altered. If not specified otherwise, all newly created variables bear the protection setting <i>full access</i>.",
"",
"	The follwoing table provides an overview of the available protection settings and their functional impacts:",
"",
"	=== 400, 100, 100, 100, 100, 100, 100",
"	Protection Settings			| full access		| prvent deleting	| limited access			| read only		| locked		| tightly locked",
"	Read variables				| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| -			| -",
"	Read member variables <sup>1</sup>	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| -",
"	Use as input parameter to functions	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| -			| -",
"	Write variables				| &#x2714;		| &#x2714;		| Data of same type only <sup>2</sup>	| -			| -			| -",
"	Write member variables <sup>1</sup>	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| -",
"	Use as I/O paramters to functions	| &#x2714;		| &#x2714;		| -					| -			| -			| -",
"	Delete varibles				| local variables only	| -			| -					| -			| -			| -",
"	Create / add member variables		| &#x2714;		| &#x2714;		| -					| -			| -			| -",
"	Modify __variable forms__ <sup>3</sup>	| &#x2714;		| -			| -					| -			| -			| -",
"	Create arrays				| &#x2714;		| &#x2714; <sup>4</sup>	| -					| -			| -			| -",
"	Do __Transactions__			| &#x2714;		| -			| -					| -			| -			| -",
"	Use __protect(__) to check settings	| &#x2714;		| &#x2714;		| &#x2714;				| &#x2714;		| &#x2714;		| &#x2714;",
"	===",
"	<sup>1</sup> Provided no additional protection seetings restrict usage of the member variables.<br>",
"	<sup>2</sup> E.g. forbidden to overwrite literal contents with numeric contents.  Additional restrictions may apply on system variables, e.g. only specific values may be written.<br>",
"	<sup>3</sup> E.g. converting structures to arrays and back using __array to structure(__) or __structure to array(__) functions.<br>",
"	<sup>4</sup> Only possible if variable contains no other members so far.<br>",
"" ],
"Description 02:Variables temporarily locked with Blocking Notices" : [
"",
"	Variables may be temporarily locked with blocking notices in order to prevent adverse system behavior if they are deleted.  All other accesses are possible.  Blocking notices",
"	are temporarily applied in following cases:",
"	* Target variable is blocked during the time an assignment is calculated",
"	* A __transaction__ is applied between target and source variable",
"	* The variable is referenced as an I/O or reference function parameter to a B4P or user-defined function",
"	* __References to variables__ refer to the affected variable.",
"	Only if all block notices are removed again (assignment resp. transactions completed, function execution finished, references released), then the variable may be deleted again.",
""
 ]
	
}


 	
,

  "Verbose Levels" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "verbose" ],
"Description 01:Verbose Level Settings" : [
"",
"	The __system variable__ <b>runtime settings[verbose]</b> rules the amount of additional console output messages to be generated which",
"	could be helpful for developing the code.  The default verbose setting is <b>low</b>.  This setting can be changed anytime.",
"	In addition, if the B4P program is called from command line, the command line switches <b>-q</b> and <b>-w</b> will set this setting to <b>quiet</b>.",
"",
"	Following verbose settings are supported:",
"",
"	<b>quiet</b><br>",
"	* No additional output is generated other than explicitly instructed in the B4P programs, e.g. using __echo(__) or __print(__).",
"	* However, error messages and important warning messages will definitely appear.",
"",
"	<b>low</b>: in addition to 'quiet' (default setting):",
"",
"	* Outputs progress info (percentage figures shown) if selected functions are processing big amount of data (e.g. large tables, large variable trees)",
"	* Short feedback messages on tables and variables loaded and saved (name of file, number of rows, etc.)",
"	* Info about standard B4P library files loaded (e.g. Support Library)",
"	* Some warnings, e.g. obsolete character sets found in input files",
"",
"	<b>medium</b>: in addition to 'low':",
"",
"	* Outputs the function names for the more sophisticated functions (e.g. __table consolidate(__) is included, but __abs(__) is not in order to avoid excessive messages) with first few paramters",
"	* Informs about the intermediate processing steps inside selected functions, e.g. __table load excel file(__)",
"",
"	<b>high</b>: in addition to 'medium':",
"",
"	* In addition to the function names printed out, all parameters provided will also be shown.",
"	* Further information on intermediate processing steps inside selected functions, e.g. __table merge (__)",
""
 ]
	
  }

,


"zip compress" :
{
	"Function Names":	[ "zip compress" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"",
"		This function compresses a file or directory with all the contents into a ZIP file."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-3",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Source path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A dedicated archive file name is required if the 1st parameter does not specifcy a dedicated file or directory (with files inside), but to",
"			multiple files or directories (using wildcard symbols)."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Archive format",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			One of the following: <b>zip</b> and <b>7z<b> (latter applies for 7-Zip and is supported under Windows only. Will be rejected under other operating systems\")."
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\Cities.csv\" );",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"",
"		a[] = search files( \"*.zip\" );",
"		echo(\"Found following ZIP files: \", a[]);",
"",
"		zip extract all( \"All csv.zip\" );",
"",
"		echo(\"List the extracted contents from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"All csv\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"All csv\" );",
"		file delete( \"All csv.zip\" );",
"		file delete( \"Cities.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract files", "zip extract all" ]
},


"zip extract files" :
{
	"Function Names":	[ "zip extract files" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"",
"		This function extracts one or more files from the ZIP file.",
"		No exceptions are asserted in case a specified file has not been found in the archive.  If needed, check If the extracted file is existing after calling this function.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Content file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Specify all files to extract:",
"			* Use literal type to specify 1 file.",
"			* Use aparameter set to specify multiple files",
"			* Alternatively use softquoted literal (with single quotation marks) with file names spearated by comam to specify multiple files."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Target directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "(current working directory)",
"Description" : [
"			Specify the directory where the extracted files shall be copied to. "
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"		zip extract files( \"All csv.zip\", \"Examples\\Cities.csv\", \"My Dir\" );",
"",
"		echo(\"List the extracted file from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"My Dir\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"My Dir\" );",
"		file delete( \"All csv.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract all", "zip compress" ]
},

"zip extract all" :
{
	"Function Names":	[ "zip extract all" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"		Extracts the whole archive and stores the contents in a dedicated directory.",
"		The directory structure depicted in the archive will be used to build up the necessary structure in the target directory."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Target directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "(current working directory)",
"Description" : [
"			Specify the directory where the extracted files shall be copied to. "
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"		zip extract all( \"All csv.zip\", \"My Dir\" );",
"",
"		echo(\"List the extracted file from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"My Dir\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"My Dir\" );",
"		file delete( \"All csv.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract files", "zip compress" ]
}





}
