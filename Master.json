
{


"Table of Contents" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table of Contents" ],
    "Keywords":			[ "Reference Manual" ],
"Description 01:Table of Contents" : [
"",
"	See the navigator bar for full table of contents.",
""
 ]
	
},

"Function Library" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Function Library" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a large and comprehenisve library of different functions.",
"	Use the navigator bar to deep-dive into them.  Various fucntions can be called as <b>procedures</b>, others as",
"	functions in __expressions__ only, or in both.",
"",
"	<br><br>",
"",
"	Control flow functions are a variant of functions called as procedures which will then determineif the",
"	subsequent __statements__ or __blocks__ will be executed once, repeatedly, or not.",
"",
"	<br/><img src=\"Images/LIB_Function_Overview.png\" alt=\"Function overview\"><br/><br/>",
""
 ]
	
},


  "Control Flow Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Control Flow Functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a wide variety of control flow functions which include conditional branches and loops.",
"	In contrast to other programming languages, trivial features such as the __if(__) statement is actually",
"	a Beyond4P function which influences execution the next statement or block.",
"",
"	<br><br>",
"",
"	In case you miss the <b>goto</b> statement, there is a good reason for this.  The highly structured",
"	Beyond4P interpreter would have faced risky challenge if that statement would have been impleemented.",
""
 ]
	
   },

  "Loops" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loops" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a standard __do(__), __while(__) and __for(__) functions as they exist in quasi all",
"	common programming languages.  In addition, various <b>for all...</b> loops are available to work through",
"	tables and/or parameter sets.",
""
 ]
	
   },


  "Branches" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Branches" ],
"Description 01:Introduction" : [
"",
"	Branches include __if(__), __once(__), and __switch(__) and __check(__) combined with __case(__) functions.",
""
 ]
	
   },


  "Exception Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Exception Functions" ],
"Description 01:Introduction" : [
"",
"	Exception functions include the following: __pause__, __stop__, __end__, __exit__, __abort__, __throw__, __catch__ / __catch if__ and __interactive__.",
""
 ]
	
   },


  "Other Control Flow Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Other Control Flow Functions" ],
"Description 01:Introduction" : [
"",
"	Inclcudes: __with table(__) to provide a context allowing partial table references.",
""
 ]
	
   },

  "Code Execution Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Code Execution Functions" ],
"Description 01:Introduction" : [
"",
"	The functions enable translation of code fragments in string format and execute them directly.",
"	In addition, the __deep(__) function family allows to apply selected functions not only on single values",
"	but repeatedly across all values in parameter sets.",
""
 ]
	
   },




  "User-Defined Procedures and Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "User Defined Procedures and Functiions" ],
    "Keywords":			[ "User-defined procedures and functions", "user-defined procedures", "user-defined functions", "user procedures", "user functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P supports standard procedures which are in fact used to defined user-specific procedures and functions. ",
"	Procedures are defined as functions which do not provide a return value and must be called as a procedure.",
"	Functions are defined to always provide return values and must be called as functions where the return value must be used further.",
"	A combination of both is allowed which provides flexibility to use defined code either as a procedure or function.",
"",
"	<br><br>",
"	Additional function names may be defined for the same user code.  In this case, the local variable <b>function name[]</b> will be",
"	available to identify the function name used.",
"",
"",
"	<br><br>",
"	Inside the user-defined procedures and functions, following local variables are available, but cannot be deleted using __delete(__) function:",
"",
"	=== 300, 700, bold_column_1",
"	Name of local variable | Description",
"	function name[] | Name of called function.  This is insofar useful if __additional function names__ have been defined for the same code",
"	<i>parameter name</i>[] | Name of parameter provided.  Example: <b>hello[]</b> is defined if one of the parameters is called <b>hello</b>.",
"	parameter <i>n</i>[] | Numbered parameter provided.  If the number of parameter is not limited, then all remaining parameters are numbered, with 1 as 1st parameter.",
"	parameter count[] | Contains the number of parameters passed.  This is useful if the defined function allows for flexibility regarding number of parameters passed.",
"	===",
""
 ]
	
   },


  "Start or include Beyond4P Programs" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Start or include Beyond4P Programs" ],
    "Keywords":			[ "start programs", "include programs" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides __start(__) to start other Beyond4P programs.  Execution of this calling program continues when the Beyond4P program has ended.",
"	The __include(__) behaves similarly like __start(__), but memorizes the loaded program including the defined functions.  This features is useful",
"	to define and include user specific function libraries which can be re-used in different Beyond4P programs.",
""
 ]
	
   },




"Console I/O Functions":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console I/O Functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions text and console input / output features such as __echo(__) considered as a common",
"	building-block for text output, but also __console special effects__ like clearing screens (__cls(__)) and changing text colors.",
""
 ]
	
},


"Text Input / Output":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "text input output" ],
"Description 01:Introduction" : [
"",
"	This subsection covers text-based input/output such as __input(__), __echo(__), __print(__) and so forth.",
""
 ]
	
},


"Console Special Effects":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console special effects" ],
"Description 01:Introduction" : [
"",
"	This subsection covers special effects such as clearing screens, moving cursors and changing text and background colors.",
""
 ]
	
},




"Inspection and Debugging":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Inspection and debugging" ],
"Description 01:Introduction" : [
"",
"	The functions described in the following section are suited for __interactive mode__ and program use.  These functions provide",
"	convenient insight into variables and tables.",
""
 ]
	
},




"Type Conversion and Formatting" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Type Conversion Functions" ],
    "Keywords":			[ "type conversion" ],
"Description 01:Introduction" : [
"",
"	A set of functions are available to convert data in one type (e.g. __literals__) into other types (e.g. __dates__ and __numerals__).",
"	Converting values to __literal__ type supports a broad library of smart formatting features in order to output numbers, dates, etc. ",
"	in a desirable format.",
""
 ]
	
},




"Mathematics and Statistics" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Mathematics and Statistics" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a broad range of advanced mathematics and statistics functions.",
""
 ]
	
},



"Basic Math Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic math functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides various functions to check numeric values and carry out basic mathematis functions.",
""
 ]
	
   },


"Transcendental Functions" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "transcendental functions" ],
"Description 01:Introduction" : [
"",
"	Transcendental functions are less mystic than you are believing.",
"	They include advanced mathematical functions covering logarithmic, exponential, trigonomietric and hyperbolic functions",
"	and suitable for everyday mathematics tasks.",
""
 ]
	
},



"Series Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "series functions" ],
"Description 01:Introduction" : [
"",
"	This section covers all functions which can process value series of variable sizes.",
""
 ]
	
   },	

"Matrix Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a library of powerful matrix functions.  While vectors are modeled as 1-dimensional __parameter sets__ containing __numerals__,",
"	matrices are modeled as __parameter sets__ (rows) containing __parameter sets__ containing __numerals__ (columns).",
"",
"	Example: <b>{{ 1, 2, 3 }, { 4, 5, 6 }}</b> is a matrix consisting of 2 rows and 3 columns:<br><br>",
"",
"	| 1  2  3 |<br>",
"	| 4  5  6 |<br>",
"",
"	<br>",
"",
"	These matrix functions are a supplement to __matrix arithmetics__ which make use of so called __deep operators__.",
"	You won't find a matrix addition function (like <i>madd(a[],b[])</i>) because it is realized with <b>a[] +^^ b[]</b>.",
"",
"	<br><br>",
"",
"	In addition to Matrix Functions which are part of the mathematical function library, __Matrix Manipulations__ provide additional",
"	matrix functions where the contents may be of any data type.  These functions do not apply any arithmetics on the values.",
"",
""
 ]
	
   },	

 "Statistics Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "statistics functions" ],
"Description 01:Introduction" : [
"",
"	This section covers all statistics functions.",
""
 ]
	
  },



 "Finance and Business Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "finance functions" ],
    "Keywords":			[ "business functions" ],
"Description 01:Introduction" : [
"",
"	This section various functions needed for financial calculations, business and capacity planning.",
""
 ]
	
  },




 "Parameter Set Functions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set functions" ],
"Description 01:Introduction" : [
"",
"	This section describes various functions used to process or check parameter sets.",
"	<br>Additional powerful functions using parameter sets extensively are __series functions__, __matrix functions__, ",
"	__statistics functions__ and __conditional combination functions__.",
""
 ]
	
  },



"Set Search and Extraction Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "parameter set search and extraction" ],
    "Keywords":			[ "parameter set search functions", "parameter set extraction functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for parameter set patterns and extract subsets from parameter sets.",
""
 ]
	
  },



 "Matrix Manipulation Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "matrix manipulation functions" ],
    "Keywords":			[ "matrix manipulations" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides a library of powerful matrix functions.  While vectors are modeled as 1-dimensional __parameter sets__ containing __numerals__,",
"	matrices are modeled as __parameter sets__ (rows) containing __parameter sets__ containing __numerals__ (columns).",
"",
"	Example: <b>{{ 1, A, 3 }, { B, 5, F }}</b> is a matrix consisting of 2 rows and 3 columns:<br><br>",
"",
"	| 1  A  3 |<br>",
"	| B  5  F |<br>",
"",
"	<br>",
"",
"	In addition to these functions, a different section called __Matrix Functions__ provide arithmetic functions on matrixes containing",
"	numerals, for example matrix multiplication, inversion and calculating determinants.",
""
 ]
	
  },



"Date and Time Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "date and time functions" ],
"Description 01:Introduction" : [
"",
"",
"	Beyond4P provides some powerful functions to process date and time information (particularly the variable type __date__) as well as stopwatch functions.",
"",
"	The sections are:",
"	* __Date functions__",
"	* __Time functions__",
"	* __Stopwatch functions__",
"",
"	The following important date functions are found in the section __Type Conversion Functions__ and connvert data of other types, e.g. __literals__, to __dates__.:",
"	* __date(__)",
"	* __pure date(__)",
"	* __date time(__)",
"	* __time(__)",
"	* __pure time(__)",
""
 ]
	
  },

"Date Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "date functions" ],
"Description 01:Introduction" : [
"",
"",
"	Beyond4P provides some powerful functions to process date .",
"",
"	<br><br>",
"",
"	The following important date functions are found in the section __Type Conversion Functions__ and connvert data of other types, e.g. __literals__, to __dates__.:",
"	* __date(__)",
"	* __pure date(__)",
"	* __date time(__)",
"	* __time(__)",
"	* __pure time(__)",
""
 ]
	
  },


"Time and Stopwatch Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "time and stopwatch functions" ],
    "Keywords":			[ "time functions", "stopwatch functions" ],
"Description 01:Introduction" : [
"",
"	Beyond4P provides some powerful functions to process time information (particularly the variable type __date__ with time info contained)",
"	as well as stopwatch functions to measure the performance of your applications.",
""
 ]
	
  },


"Sleep and Wait Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "sleep and wait functions" ],
"Description 01:Introduction" : [
"",
"	The following functions suspend program execution for a specified time or until a specific time has been reached.",
"	The delay will pause Beyond4P's process and lets other application run at full speed.",
""
 ]
	
  },


"String Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "string functions" ],
    "Keywords":			[ "literal functions" ],
"Description 01:Introduction" : [
"",
"	This section describes procedures and functions for character and string manipulations.",
""
 ]
	
  },


"String Search and Extraction Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "string search and extraction" ],
    "Keywords":			[ "string search functions", "string extraction functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for string patterns and extract substrings from stings.",
""
 ]
	
  },


"Character Encoding and Decoding":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "character coding" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search for string patterns and extract substrings from stings.",
""
 ]
	
  },


"Miscellaneous String Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Other string functions" ],
"Description 01:Introduction" : [
"",
"	All other string functions, including random string generation, are explained next.",
""
 ]
	
  },



"Table Functions":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "table functions" ],
"Description 01:Introduction" : [
"",
"	The chapter on table functions covers following four sections",
"	* Table file and console I/O",
"	* Basic table access (creating, writing, reading, deleting)",
"	* Searching and expoorig tables",
"	* Processing tables with powerful functions",
"	* Multi-Table Integration (comparing, validating, lookups, merging, etc.)",
"	* Formatting and Styling Tables (color, column widths, fonts, borders, setting autofilters, etc.)",
""
 ]
	
},




"Table File and Console I/O":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table file and console IO" ],
"Description 01:Introduction" : [
"",
"	This section summarizes the basic fuctions which include the following:",
"	* Creating and deleting tables",
"	* Accessing table information (like sizes)",
"	* Accessing table contents",
"	* Loading and saving tables",
"	* Inputting and outputting tables (listing them, menu operations)",
""
 ]
	
},


"Loading and Saving Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loading and saving tables" ],
"Description 01:Introduction" : [
"",
"	The procedures and functions described next cover loading and saving tables with a broad variety of data formats such as",
"	* CSV (with various separation symbols like tabs, commas, semicolons)",
"	* HTML",
"	* XML",
"	* Text files",
"	* Excel file (.xlsx / .xlsm)",
"	* JSON",
""
 ]
	
  },


"Console I/O with Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console I/O with tables" ],
"Description 01:Introduction" : [
"",
"	The following functions relate to table-specific input / output features. They include:",
"",
"	* Listing tables",
"	* Using tables as menus and asking for choices"
 ]
	
},



"Basic Table Access":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Basic table access" ],
"Description 01:Introduction" : [
"",
"	The following functions basic functions to create and access tables:",
"",
"	* Creating tables and adding contents",
"	* Writing and writing tables",
"	* Clearing and deleting tables",
"	* Accessing table information",
""
 ]
	
},


	
"Creating Tables and Adding Contents":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Creating tables and adding contents" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic functions to create tables and add first contents:",
"",
"	* Create blank tables",
"	* Initialize tables with first contents",
"	* Adding further rows with contents",
"",
"	See the chapter on __tables__ to take advantage of various ways to read and write table contents effectively."
 ]
	
},


"Reading and Writing Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Reading and writing tables" ],
"Description 01:Introduction" : [
"",
"	See the chapter on __tables__  to explore the various means to read and write contents directly without function calls.",
"	<br>",
"	This subsection contains some advanced table functions to access table contents effectively:",
"",
"	* Accessing row and column numbers if context for __partial table references__ is available",
"	* Reading and writing table contents in selected rows using algorithmic expressions",
"	* Forget memorized table columns during program execution",
""
 ]
	
},



"Clearing and Deleting Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Clearing and deleting tables" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic functions to clear and delete tables",
"",
"	* Clear tables (remove all contents, but keep the table existing)",
"	* Delete tables entirely"
 ]
	
},



"Accessing Table Information":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Accessing table information" ],
"Description 01:Introduction" : [
"",
"	This subsection contains basic table functions to access following information:",
"",
"	* Does the specified table exist?",
"	* Table lengths",
"	* Table widths in specific rows and overall table widths"
 ]
	
},



"Searching and Exploring Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Searching and exploring tables" ],
"Description 01:Introduction" : [
"",
"	This subsection contains various search and exploration functions.",
"",
"	* Search functions across rows, columns and the entire table using different comparing methods",
"	* Exploration: explore - filter - extract sub-tables",
"	* Table widths in specific rows and overall table widths"
 ]
	
},



"Search Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Search functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes the basic fuctions which include the following:",
"",
"	* Search entire table for specific values",
"	* Search rows",
"	* Identify all rows with selection criteria met",
"	* Identify all columns or headers with selection criteria met",
"	* Search the header row",
""
 ]
	
},



"Explore, Filter, Extract Sub-Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Explore and filter and extract sub-tables" ],
"Description 01:Introduction" : [
"",
"	A new powerful B4P feature, consisting of three functions, is to identify, select and extract one or more sub-tables located inside a table.",
"	This becomes very useful when dealing with sophisticated tables created by external sources where you cannot advise them how to",
"	structure the data so you can use them easily.  Following three functions need to be called in sequence:",
"",
"	<br><br>",
"",
"	__table explore(__): This function identifies all sub-tables inside a table where a few criteria settings are available to identify tables and keep them ",
"	separate from other contents, e.g. title texts.",
"",
"	<br><br>",
"",
"	This function returns a parameter set containing 0, 1 or more coordinates for every sub-table found.",
"	The sub-tables beginning on the same row must contain a spacing of 1 column.  Direct neighboring is possible if the next table begins at a different tow (Illustration: See sub-table 2 and 3).",
"",
"	<br><br>",
"",
"	__table filter(__): The collection of coordinates can be narrowed down by matching header contents with given patterns and specifying minimum ",
"	table widths and heights.  This function also returns the same kind of parameter set, but probably with fewer coordinates.",
"",
"	<br><br>",
"",
"	__table extract(__): This final function will extract a selected sub-table based on the coordinates and sub-table chosen.  ",
"	Tables can be extracted either into new blank tables or added to existing tables, allowing to arrange them horizontally and/or vertically.",
"",
"	<br/><br/><img src=\"Images/Description_Exploring_and_Extracting_Tables.jpg\" alt=\"Exploring and Extracting Tables\"><br/><br/>"
 ]
	
},


"Processing Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to process tables effectively, including:",
"	",
"	* Checking and processing headers",
"	* Processing table columns",
"	* Processing table rows, and",
"	* Processing table contents",
"	* Pivoting and consolidating tables",
"	* Copying, renaming and splitting tables",
""
 ]
	
},


"Checking and Processing Headers":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Checking headers", "Processing headers" ],
"Description 01:Introduction" : [
"",
"	This subsection various functions which check table headers.",
"	It is highly advisable to check the input data to ensure that the corresponding headers and structures",
"	are available and error messages can be issued very early rather than somewhere in the middle of data processing steps.",
""
 ]
	
},


"Processing Table Columns":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table columns" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to process table columns, i.e. ",
"	inserting, deleting, rearranging, processing, etc.",
""
 ]
	
},


"Processing Table Rows":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table rows" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means process table rows, i.e.",
"	inserting, deleting, rearranging, manipulating, etc.",
""
 ]
	
},



"Processing Table Contents":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Processing table contents" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means process table contents.",
""
 ]
	
},


"Pivoting and Conosolidating Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Pivoting and consolidating tables" ],
"Description 01:Introduction" : [
"",
"	The functions described in this sections are building blocks to do powerful pivoting and consolidating tables.",
"	All functions have been optimized to deliver maximum performance, even with very large tables.  The functions",
"	described in the following sections cover follwing aspects:",
"",
"	* Transposing contents (i.e. contents in 1st column become row headers)",
"	* Serializing horizontally laid out data",
"	* Spreading serialized data out horizontally (opposite of above), and",
"	* Consolidating tables (boiling tables down to fewer rows with specific consolidation actions serving as ingredients)",
""
 ]
	
},


"Copying, Renaming and Splitting Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Copying, renaming and spitting tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to copy and split tables.",
""
 ]
	
},



"Multi-Table Integration":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Multi-table integration" ],
"Description 01:Introduction" : [
"",
"	This section summarizes the basic fuctions which include the following:",
"	* Comparing two tables",
"	* Checking tables according to rules provided",
"	* Looking up data from other tables",
"	* Combining multiple tables (e.g. merging data)",
"	* Exploring and extracting tables",
""
 ]
	
},



"Comparing and Validating Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Comparing and validating tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient means to check tables for consistency and duplications ",
"	as well as a simple-to-use function to compare tables and generate comparison reports.",
""
 ]
	
},



"Looking up Other Tables":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Looking up other tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next provide efficient lookup features to retrieve selected information from other",
"	tables.",
""
 ]
	
},


"Combining Multiple Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Combining multiple tables" ],
"Description 01:Introduction" : [
"",
"	The functions described next cover the art of combining two (or more) tables using the fine arts of <a href=\"https://en.wikipedia.org/wiki/Relational_algebra\" target=\"_blank\">relational algebra</a>",
"	where different algebraic rules can be applied to rows and columns.",
"",
"	<br><br>",
"",
"	In a simple example, two tables with members of two clubs (e.g. tennis and squash) need to be merged into one where the last and first names of the",
"	members shall act as matching identifiers.  In case no person has a membership in both clubs, no overlap applies, and the list will simply be",
"	appended where the data are aligned to the right columns, using header names as orientation.  The columns in both tables do not need to be aligned",
"	before the merger.  If one or more persons possess memberships in both clubs, then the information will be consolidated where the same ",
"	__consolidation actions__ rules are available as used by __table consolidate__.  As an example, the account receivable (e.g.",
"	indoor court reservation fees to be balanced) can be added up whereas the preferences at the club bar can be consolidated with <b>append once</b>",
"	so the preference for tonic water at one club and beer at the other club will appended into \"tonic water, beer\".",
"",
"	<br><br>",
"",
"	If no identifier columns are defined in the functions described next, then every row will be considered unique.  Merging the table is treated appending two tables,",
"	with aligning the data into the right columns.	 ",
"",
"	<br><br>",
"",
"	The following table summarizes the 25 functions in a 5 x 5 matrix with specifc rules to be applied on rows as wll as columns.",
"	The table contains illustrations on how the rows are combined (shades of red / orange / yellow) and how columns are combined (shades of",
"	gray and light blue).  The syntax of the function name does first describe the operation on the rows (e.g. __table merge__) followed by",
"	the operation on the columns (e.g. __table merge extend columns(__)).  If no extension like <b>... extend columns</b> is specified, then",
"	no additional columns are added in the target table and the data in the source table not fitting in the target table structure will not be taken over.",
"",
"	",
"		<br/><img src=\"Images/Description_Combining_Multiple_Tables.jpg\" alt=\"Combining Multiple Tables\"><br/><br/>",
"",
"	The term <i>exclusivity</i> is also known as <i>symmetric difference</i> and <i>disjunctive union</i>.",
"",
"" ],
"Description 02:Additional Functions" : [
"",
"	Following table operations are also described in this section:",
"	* Multiplying tables",
"	* Dividing tables (binary division in relational algebra)",
"	* Arranging tables sideways.",
"",
""
 ]
	
  },




"Formatting and Styling Tables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Formatting and styling tables" ],
"Description 01:Introduction" : [
"",
"	B4P provides a generic set of functions for giving a final touch to your tables.  They include:",
"	* Setting row widths and column hights",
"	* Formatting text (font name, font size, color, bold, underscore, line wraps, etc.)",
"	* Formatting tables (cell colors, etc.)",
"	* Number and date formats",
"	* Freezing panes",
"	* Setting the autofilter",
"	* and many more.",
"",
"	At present, the formatting and styling functions are supported for following file formats when saving the tables where minor differences in the",
"	interpretation of the formatting may apply:",
"",
"	* HTML (understood by both Excel and web browsers)",
"	* Excel (XML 2003) format",
"",
"	You can add formatting and style to multiple tables and then save them as multiple sheets in one Excel file.",
"",
"	<br><br>",
"",
"	<u>Note</u>: The whole function library has been written in B4P and is in the file \"Style Library.b4p\" in your installed library directory.",
"	In order to use these functions, you need to do the following function call at first:",
"	<br><br>",
"	<b>include ( Style Library );</b>",
"	<br><br>"
 ]
	,

"Description 02:Formatting Procedure" : [
"",
"	Follow the seven basic steps described below in order to do a successful and attractive finish .",
"",
"	=== 50, 950, noheader, noframe_1stcolbold",
"1.	| <b>Finalize the table with all necessary contents.</b>  You may want to have some helper columns on the right hand side which you  		  can delete after adding formatting features, but the formatted table contents must not move in any direction because the formatting info will not move along with them.",
"2.	| A broad pallette of named colors is already available. Optionally, you can __define user-specific colors__ so you can reference them conveniently by color name and not by red-green-blue codes: <br> __add color(__): Add user-defined colors<br> __lighten colors(__): Lighten the set of standard colors according to your specifications<br> __darken colors(__): Darken the set of standard colors according to your specifications<br> 		  __weaken colors(__): Weaken the intensity of standard colors according to your specifications<br>",
"3.	| <b>Be creative. Do the artistic work</b> on the table using the following four functions:<br> __table style table(__): Formatting instructions applicable for the whole table, e.g. general font name, font size, location of autofilter row, etc.<br> __table style rows(__): E.g row height, formatting all entries in the specified rows, etc.<br> __table style columns(__): E.g. column width, formatting all entries in the specified columns, etc.<br> 		  __table style cells(__): Style individual cells, a set of cells, a matrix of cells, or a rectangular area in the table, and applying Excel <i>mouse-over</i> comments.",
"4.	| If needed, <b>delete redundant contents on the right hand side or below the table</b> but without moving the final table around (e.g. with inserting / deleting  columns and/or rows. The formatting you have applied have a fixed association to the rows and columns.  If you delete a row, then the next row below will get the formatting. The same applies to sorting and rearranging table rows and columns after the formatting.<br> 		  <u>General advice</u>: Finalize the table first, then do the creative artwork.",
"5.	| <b>Generate the final formatting instructions specific to the file format</b> you intend to use for saving.  You need to call one of the two functions listed below<br> __translate style attributes for excel(__)<br> 		  __translate style attributes for html(__)",
"6.	| <b>Save your (art-)work</b> using one of the following functions:<br> __table save(__), and <br> __table save multiple(__).<br> <u>Note</u>: Make sure you choose the format as specified in step 5.  You can do the style attribute translation for multiple formats on the same table. If you save the file in a format for which no tranlsation has been made, then the table will be saved as if no formatting has been applied at all. The CSV file format 		  and close relatives (e.g. tab separated files, text files) do not support any formatting.",
"7.	| If needed, <b>reset all format attributes</b> using the function<br> __table style reset(__)<br> 		  in order to start doing a different formatting artwork on the same table.",
"	==="
 ]
	,
"Description 03:Important Info" : [
"	<b>The \"Style Library\" works with following global variables which shall not be manipulated directly as this could result in unexpected and erratic outcome</b>",
"	* <b>table style descriptions[]</b>: This variable contains all formatting attributes for all tables.",
"	* <b>hex[]</b>: Conversion of hexadecimal values",
"	* <b>table style rules[]</b>: Defines rules to properly interpret formatting codes",
"	* <b>table style html comments[]</b>: Template to put comments into HTML file format so opening them with Excel will make the comments show up.",
"	In addition, this library maintains one table called <b>global color table</b> which describes all available colors with their names.  See next section for details."
 ]
	
},

// See "Style Library.txt" for further documentation on styles.








"Variables Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "variables functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes all functions processing variables.  The functions are categorized into the following:",
"	* Obtaining information about the variables",
"",
""
 ]
	
  },


"Basic Variables Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic variables functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes all basic functions aroun variables",
"	* Information about variables",
"	* Simple data movements",
"	* Deleting variables",
"",
"	__Arrays and structures__ will be addressed in the following section.",
""
 ]
	
  },


"Arrays and Structures":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Arrays and Structures" ],
"Description 01:Introduction" : [
"",
"	This section provides an overview of functions defining and working with __arrays__ and __structures__.",
""
 ]
	
  },


"Loading and Saving Variables":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Loading and saving variables" ],
"Description 01:Introduction" : [
"",
"	The following functions provide convenient methods to save variables (including all the structure and array members and sub-members) into files or $",
"	text strings (literals) and vice versa in JavaScriopt Object Notation (JSON).  Focus is given on full data preservation in round trip cases, ",
"	i.e. data is saved as JSON and covered again, and vice versa.",
"",
"	<br><br>",
"",
"	Following rules will be applied when saving variables into JSON text. ",
"	These rules are insofar important because the Beyond4P can consist of both base variables, array and structure members and sub-members, ",
"	and the simple JSON representation focuses on leaf data, meaning the final members and sub-members without the intermediate one.  ",
"	In addition, special rules are applied to save Beyond4P specific formats such as dates (and times) and parameter sets.",
"",
"	Following special rules apply",
"	=== 200, 800, noframe_1stcolbold, noheader",
"	General			| The base variable as well as all members and sub-members, regardless if array or structures, will be saved.",
"	__Simple Variables__	| If the variable is a simple variable, then it will be saved as a JSON plain array containing 1 element.  Using 'JSON B4P' option in the loading process will recover the variable properly.",
"	__Arrays__		| B4P arrays are stored as JSON arrays",
"	__Structures__		| B4P structures are stored as JSON objects",
"	Literals		| Literal string contents are stored as text in double quotation marks",
"	Numerals		| Numerals are written as numbers without quotation marks.  When saving, scientific notation is not used.  However, JSON files containing scientific notation will be loaded correctly.",
"	Booleans		| Will be written as <b>true</b> and <b>false</b>.  B4P will recognize boolean values and convert them to Boolean type",
"	Void values		| Are written as <b>null</b> in JSON output.",
"	Dates			| Dates (and times) are written as text in following formats: \"YYYY-MM-DD\", \"hh:mm:ss\", \"YYYY-MM-DD hh:mm:ss\", and \"0000-00-00\".  The last value refers to a blank date and will be recognized as such. When reading JSON data, dates and times must adhere strictly with the given formats, otherwise they will be loaded as text (e.g. \"01 April 2020\").",
"	Parameter Sets		| Parameter sets will be converted to string format (similarly implemented as in the __literal(__) function) and stored as text.  Literals are stored in single qutoation marks, aiming to avoid confusion wtih double quotation marks for JSON text contents.  Example: \"{1,true,'Abc'}\".  Nested parameter sets are supported.",
"	Loading literals	| All loaded literals are declared as <b>quoted literals</b>",
"	Special characters	| Specific characters will be converted to JSON-compliant escape sequences, e.g. new line, quotation marks inside literals, etc. ",
"	==="
 ]
	,
"Description 02:Intermediate Nodes" : [
"	The JSON model describes a tree containing data at the end nodes only (leaves) whereas B4P variable model also supports data in intermediate",
"	nodes as well.  In these case, intermediate arrays containing 2 elements are introduced to describe the intermediate node followed by the ",
"	remaining data up the data tree.  See the program example below:" ],
"Examples 02:JSON code without and with intermediate nodes" : [
"	b[Red] = Rot;",
"	b[Green,light] = HellgrÃ¼n;",
"	b[Green,dark] = DunkelgrÃ¼n;",
"	b[Blue,light] = Hellblau;",
"	b[Blue,dark] = Dunkelblau;",
"",
"	inspect(b[]);",
"",
"	j[] = variable to json( b[], JSON);",
"",
"	echo(\"JSON code:\", new line, j[], new line, \"_______\" );",
"",
"	json to variable( c[], j[], JSON B4P );",
"	inspect( c[] );",
"",
"	echo(new line, \"Add data to intermediate nodes\");",
"",
"	b[] = Colors;",
"	b[Green] = Shades of green;",
"",
"	j[] = variable to json( b[], JSON);",
"",
"	echo(\"JSON code:\", new line, j[], new line, \"_______\" );",
"",
"	json to variable( c[], j[], JSON B4P );",
"	inspect( c[] ); // Same as before."
 ]
	,
	"Output 02": "automatic"

  },



"Variable References Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Variable references functions" ],
"Description 01:Introduction" : [
"",
"	This section describes functions related to __variable references__.",
""
 ]
	
  },


"Resident Attributes Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Resident attributes functions" ],
"Description 01:Introduction" : [
"",
"	Resident attributes are values which can be stored in dedicated files.  In contrast to loading and saving variables, attributes are tuples",
"	consisting of <i>attribute names</i> and <i>attribute values</i>.  Values can take any type, e.g. numeral, literal, date, Boolean and parameter set.",
"	Attribute names can be either flat (just one name) or hierarchical (parameter set containing multiple names representng a sort of path name).",
"",
"	<br><br>",
"	In contrast to Microsoft Windows registry, the B4P resident attributes is an operating-system independent solution to store small amounts of data",
"	or settings conveniently.  One file may contain one or more settings.  Thd data format used is JavaScript Object Notation (JSON).",
"",
"	<br><br>",
"	If a nested sub-attribute is created, then the values associated to the attributes are blank literals \"\", and not void.",
"	Example:  attribute write ( path[ ], file[ ], {local machine, local settings, date format}, \"YYYY-MM-DD\" ) will automatically assign \"\" to attribute name local machine, ",
"	and local settings if not yet existing.",
""
 ]
	
  },



"Comparison and Selection Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Comparison and selection functions" ],
"Description 01:Introduction" : [
"",
"	Common programming languages use standard constructs like <b>if ... else</b> or condensed statements",
"	such as <i>[condition]</i> <b>?</b> <i>[expression if true]</i> <b>?</b> <i>[expression if false]</i>,",
"	Aiming to allow for more dense and efficient coding, B4P provides a set of effective comparison and",
"	selection functions.  The functions come in two fragrances:",
""
 ]
	,
"Description 02:select ... ()" : [
"	In these functions all parameters are fully calculated regardless of the condition and/or if the values are finally selected or discarded.",
"	This approach is most efficient if the values are constants or simple expression (e.g. a constant, referring to variable, a table entry,",
"	a simple calculation, etc.) or if manipulations must be made in any case, e.g. doing a function call or incrementing/decrementing variables."
 ]
	,
"Examples 02:Program example - all expressions are calculated:" : [
"	a[] = select if( true, echo(yes), echo(no) ); // Note. Both 'yes' and 'no' are printed here",
"	echo(\"Result is \", a[] );"
 ]
	,
    "Output 02:Result:": "automatic",
"Description 03:pick ... ()" : [
"	In these functions, the expressions for the values to select are only calculated if the results are needed.  Otherwise, these expressions",
"	will be skipped.  This approach saves a lot of computation effort if more sophisticated expressions are contained.  In addition, if a variable",
"	in an expression not selected is not defined, this does not matter because that expression is skipped."
 ]
	,
"Examples 03:Program example - 'echo(no)' is not executed:" : [
"	a[] = pick if( true, echo(yes), echo(no) ); // Note: Only 'yes' if printed",
"	echo(\"Result is \", a[] );"
 ]
	,
    "Output 03:Output": "automatic"
},



"Directory and File System Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "directory and file system functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to access and process files and directories.  Following key features ",
"	are included.",
"",
"	* Accessing, searching and manipulating directories (create, change to, rename, remove directories)",
"	* Accessing, searching and manipulating files (directory listings, copy files, rename files, delete files)",
"	* Disk functions (e.g. disk size info)",
"	* Internet access (download files)",
""
 ]
	,

"Description 02:Path and File Names" : [
"",
"	Under Windows, the path names are a chain of directory and subdirectory names separated with backslash '\\' symbols.  Under LINUX and MACOS,",
"	the forward slash '/' is used.  Unless specified otherwise do add quotation marks to (sub-) directory and file names if they contain spaces.",
"	Avoid using symbols not supported or recommended by the operating systems, e.g. '<', , '&', '>' and ':'.",
"",
"	<br><br>",
"",
"	Beyond4P tolerates both slash symbols and does the operating system conversions automatically. Even a mix of both symbols are OK. Following examples are valid:",
"	* C:/Program Files\\Beyond4P.exe",
"	* \\usr\\local/bin\\Beyond4P",
"",
"	<br><br>",
"",
"	If the specified directory or file name contains no path name in front, then the current drive and working directory are assumed.",
"",
"	<br><br>",
"",
"	<u>Attention:</u> Directory and file names are case sensitive in LINUX and MACOS systems, but not in Windows.",
""
 ]
	,
"Description 03:Exception Handling" : [
"",
"	Various procedures and functions contain <b>... silently</b> as ending part of their names.  This suffix",
"	lets Beyond4P to issue return values which are either \"OK\" or contain a short error message.  Without the",
"	suffix, an exception happens, program execution will stop and enters __interactive mode__.",
"",
"	=== 250, 250, 500",
"	Return values for file functions	| Return values for directory functions | Description",
"	OK					| OK					| Successful execution",
"	Path not found				| Path not found			| Specified directory path not found or invalid",
"	File not Found				| Directory not found			| File / directory not found",
"	File access denied			| Directory access denied		| File / directory access denied. Insufficient privileges.",
"	File write-protected			| (n/a)					| File is write-protected.  Check protection settings.",
"	(n/a)					| Directory not empty			| Directory is not empty (contains files and/or sub-directories)",
"	File locked				| Directory locked			| File / directory is locked by other applications. Close the other application.",
"	File already existing			| Directory already existing		| File / The file already exists (e.g. attempt to overwrite with file copy function). For files, use the equivalent function name containing the suffix <b>overwrite</b>.",
"	File error				| Directory error			| Invalid file / directory name or file locked by other application.",
"	File invalid chars			| (n/a)					| File name contains invalid characters",
"	Can't move files across devices		| Can't move files across devices	| Can't move files across devices (with __file rename(__) function)",
"	File found directory expected		| Directory found file expected		| Specified directory name refers to an existing file, and vice versa",
"	===",
""
 ]
	
  },



"Basic Directory and File Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "basic directory and file functions" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to search to accesss directories and files.",
""
 ]
	
  },


"Listing and Searching Directories and Files":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "listing directories and files" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to obtain list of existing filse and directories, as well as searching for files and directories.",
""
 ]
	
  },

"Manipulating Directories and Files":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "manipulating directories and files" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions to create, copy, rename and delete files and directories",
""
 ]
	
  },




"File Compression and Decompression":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "file compression decompression" ],
"Description 01:Introduction" : [
"",
"	This subsection describes various functions compress and decompress files.  The data compression and decompression features are",
"	implemented in B4P in the library file 'Zip Library' and makes use of the zip program in the standard installation (Linux, MacOS)",
"	or relies on the installed 7-Zip program on Windows installations because 7-zip provides a set of compression and decompression commands",
"	which Windows does not.  See  <a class=\"bold_text\" target=\"_blank\" href=\"http://www.7-zip.org\">7-zip</a> for details.",
"	<br><br>",
"	<u>Note</u>: All Microsoft office featuers, e.g. loading Excel files, rely on these file compression and decompression functions.",
""
 ]
	
  },



"System Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "system functions" ],
"Description 01:Introduction" : [
"",
"	This section summarizes system specific functions including executing operating system commands (like Windows CMD, Linux shell, etc.)",
""
 ]
	
  },


"Executing System Commands":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "executing system commands" ],
"Description 01:Introduction" : [
"",
"	This section describes the __system(__) function to execute system commands and also provides a function called __quote path(__) to precondition ",
"	path and file names so they can be used as command line parameters for system commands accordingly.",
""
 ]
	
  },


"Registry Access Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "registry access functions" ],
"Description 01:Introduction" : [
"",
"	The Microsoft Windows operating system provides a <i>registry</i> which is a hierarchical database to store sytem and application",
"	settings.  The contents in the registry affect the behavior of the operating system, windows graphical user interface and application",
"	program.  B4P provides a set of registry access functions, however access to them have been restricted due to a considerable risk",
"	that unexperienced usage could cause severe and irreversible harm to the system.  The B4P installer program is actually accessing the registry in order to",
"	assign the file type \".b4p\" to the B4P program, and to assign the icon to that file type.",
"",
"	<br><br>",
"	For the reason above, the B4P contains no description of the registry access functions.  Linux and MacOS do not maintain such a registry.",
"	If you intended to use the registry for storing individual values, then consider using the __resident attributes functions__ instead, and this one",
"	works on all supported operating systems.",
"",
"	<br><br>",
"	Please contact us if you need to write a B4P program which needs to access the registry and you have a good reason for that."
 ]
	
  },


"Licensing and Privileges":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "licensing and privileges" ],
"Description 01:Introduction" : [
"",
"	The following functions relate to system and B4P programming privileges as well as functions needed to activate licensing.",
"	As an example, these functions are used in the B4P installation script.",
""
 ]
	
  },




"Help and Support Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "help and support functions" ],
"Description 01:Introduction" : [
"",
"	The functions described next are ideally suited for interactive use in order to obtain more information",
"	about specific functions and features and access on-line and off-line documentation directly.",
""
 ]
	
  },

// ________________________________________________________________________________________ "/


"Cross-Functional Info":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Cross-functional info" ],
"Description 01:Introduction" : [
"",
"	This section contains various information which apply to different functions across the function library,",
"	for example applicable sorting and consolidating options.",
""
 ]
	
  },


"Sorting and Ranking Options":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Sorting options", "Ranking options" ],
"Description 01:Introduction" : [
"",
"	The sorting options are used (amongst others) by following functions:",
"	* __table sort columns(__)",
"	* __table sort rows(__)",
"	* __table sort selected rows(__)",
"	* __table rank rows(__)",
"	* __table rank selected rows(__)",
""
 ]
	,
"Description 02:Overview of Available Options" : [
"",
"	=== 200, 800, bold_column_1",
"	Sorting / Ranking Option 	| Description",
"	alphabetic			| Alphabetic order by UNICODE character set.",
"	alphabetic down			| Opposite direction of above",
"	alphabetic ignore case		| Alphabetic order, but ignores case (e.g. 'the Hague' comes before 'Uruguay')",
"	alphabetic down ignore case	| Opposite direction of above",
"	alphabetic ignore blanks	| Same as alphabetic. Blanks (incl. new line, tabs, space) are ignored.  'St. Moritz' and 'St.Moritz' are equivalent.",
"	alphabetic down ignore blanks	| Opposite direction of above",
"	alphabetic ignore both		| Same as alphabetic, ignoring both case and blanks",
"	alphabetic down ignore both	| Opposite direction of above",
"	numeric				| Sorts by numbers.  Non-numeric contents are interpreted like zero.  Smallest number comes first.",
"	numeric down			| Opposite direction of above",
"	date				| Sorts by dates.  Fields containing no qualified dates are interpreted like blank dates.  See rules below the table.",
"	===",
"",
"	Rules on literals:",
"	* Blank literal '' comes first",
"	* One space symbol ' ' (UNICODE 32) comes next.",
"	* Sorting is done based on UNICODE character codes.",
"	* Sorting takes no cultural implications into consideration (e.g. Spanish: LL follows L).",
"	* Numbers are also treated as literals: 0100 comes before 10.",
"",
"	Rules on numerals:",
"	* For contents beginning a number: The 1st number will be recognized.",
"	* For contents beginning with non-numeric symbols: Interpreted as zero.",
"",
"	Rules on dates:",
"	* Blank dates come first.",
"	* If year is missing, current year is assumed.",
"	* If day is missing, the 1st day of month is assumed.",
"	* Month names in key languages like \"Jan\", \"feb\", \"MÃ¤rz\", \"avril\", \"May\", \"juni\", etc. are recognized as months and sorted accordingly.",
"	* Local settings are used as rules to resolve country dependent date formats like 01/02/2015 (day and month ordering: 2. Jan 2015 or 1. Feb 2015).  Local settings are in the system variables and can be changed.",
"	* Time values in the date are ignored.  E.g. \"14.07.2016 10:00\" and \"14.07.2016 11:00\" are treated as identical values",
"",
"	Rules on dates and times:",
"	* Blank dates come first.",
"	* Date values without time come before date values with time (e.g. \"00:00:00\") if date are on the same day.",
"	* Time values are not ignored",
"",
"	Rules on times:",
"	* Blank dates come first.",
"	* Date values are ignored.  \"14.07.2016 10:00â€? and â€œ15.07.2016 10:00â€? are treated as identical values",
"",
"	Following example shows a ranking based on the different options applied."
 ]
	,

"Examples 02:" : [
"	include( Support Library );",
"	",
"	table initialize ( t,",
"	{ { Scheme, alphabetic, alphabetic down, alphabetic ignore case, alphabetic down ignore case, numeric, numeric down, date, date down, time, time down },",
"	    \"02-Dec-2020 10:00\", \"02-Nov-2020 11:00\", \"05\", \"1\", \"Dec\", \"apr 15\", \"-1\", \"\", \"begin\" } );",
"",
"	for all parameters( [t:1..,0], option[] )  table rank rows( t, option[], Scheme, option[], 113 ); // 113 - Same ranking share same ranking position",
"	table transpose (t);",
"	table list (t);		"
 ]
	,

    "Output 02:": "automatic"

  },



"Consolidation Actions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "consolidation actions" ],
"Description 01:Introduction" : [
"",
"	The sorting options are used (amongst others) by following functions:",
"	* __table consolidate(__)",
"	* __table merge(__) function family",
""
 ]
	,
"Description 02:Overview of Available Consolidation Actions" : [
"",
"	The consolidation actions does only take place if a matching row further down in the table (or source table if 2 tables are combined) needs",
"	to be consolidated to the target fields.  No actions are applied if only one row exists with same identifer contents. ",
"",
"	=== 200, 800, bold_column_1",
"	Consolidation Action		| Description",
"	none				| No consolidation: The destination fields will not be overwritten.<br>At the end of the consolidation run, the destination field contains the data from the first row belonging to the group.",
"	overwrite			| Source field overwrites destination field. <br>At the end of the consolidation run, the destination field contains the data from the last row belonging to the group.",
"	overwrite if blank		| Source field overwrites destination field if the destination field is still blank. See <sup>1</sup>",
"	overwrite except blank		| Source field overwrites destination field if the soruce field is not blank. See <sup>1</sup>",
"	blank				| Destination field will be blanked.  Useful to void contents no longer needed after consolidation.",
"	zero				| Destination field will be set to 0. Useful to void contents no longer needed after consolidation.",
"	delete				| This column will be deleted after the consolidation run.  Useful to get rid of contents no longer needed.",
"	append				| Append string contents from source fields to destination fields.  A separator string will be inserted if available.",
"	append once			| Like above, but contents are only appended if not yet found in the destination string.",
"	must match			| Checks source and destination fields.  If they differ, then <b>(Inconsistent)</b> will be written.",
"	blank if different		| Checks source and destination fields.  If they differ, then the destination fields will be blanked.",
"	min abc				| Choose the entry in the lower alphabetc sorting order (e.g. abc preferred over def). Blanks have highest priority. ",
"	min abc ignore blanks		| Choose the entry in the lower alphabetc sorting order (e.g. abc preferred over def). Blanks have lowest priority. See <sup>1</sup>",
"	max abc				| Choose the entry in the higher alphabetc sorting order (e.g. def preferred over abc). Blanks have lowest priority.",
"	min				| Choose the entry with the smaller value. Blanks and non-numeric contents are treated as zero.",
"	min ignore blanks		| Choose the entry with the smaller value. Blanks have lowest priority. Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	min ignore zero			| Choose the entry with the smaller value.  Blanks and non-numeric contents and zero have lowest priority. See <sup>2</sup>",
"	max				| Choose the entry with the greater value. Blanks and non-numeric contents are treated as zero.",
"	max ignore blanks		| Choose the entry with the greater value. Blanks have lowest priority. Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	max ignore zero			| Choose the entry with the greater value.  Blanks and non-numeric contents and zero have lowest priority. See <sup>2</sup>",
"	sum				| Calculates the sum: Adds source fields to destination fields.",
"	sum blank if zero		| Calculates the sum: Adds source fields to destination fields. If destination field is 0, it will be set to blank.",
"	product				| Calculates the product: Multiplies source fields to destination fields.  Blanks and non-numeric contents are treated as zero.",
"	product ignore blanks		| Calculates the product: Multiplies source fields to destination fields.  Blanks are ignore, but non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	product ignore zero		| Calculates the product: Multiplies source fields to destination fields.    Blanks and non-numeric contents and zero are ignored.  See <sup>2</sup>",
"	average				| Calculates the average (sum divided by number of rows consolidated). Blanks and non-numeric contents are treated as zero.",
"	average ignore blanks		| Calculates the average (sum divided by number of rows consolidated). Non-numeric contents are treated as zero. See <sup>1,2</sup>",
"	average ignore zero		| Calculates the average (sum divided by number of rows consolidated).  Blanks and non-numeric contents and zero are ignored. See <sup>2</sup>",
"	count				| Count all fields.  Is always 1 or bigger.",
"	count ignore blanks		| Count non-blank fields only. See <sup>1</sup>",
"	count ignore zero		| Count non-zero fields. 0, blanks and non-numerals are ignored.",
"	count positive			| Count if value is > 0. 0, blanks and non-numerals are ignored.",
"	count positive or zero		| Count if value is >= 0.  Blanks and non-numerals are treated as 0 and will be counted.",
"	count negative			| Count if value is < 0. 0, blanks and non-numerals are ignored.",
"	count negative or zero		| Count if value is <= 0.  Blanks and non-numerals are treated as 0 and will be counted.",
"	===",
"",
"	<sup>1</sup> Fields are considered blank if they are absolutely blank, i.e. containing zero characters.  Fields containing white spaces (spaces, tabs, new lines, etc.) are not considered blank.<br>",
"	<sup>2</sup> If none of the fields qualify for calculation (e.g. min ignore blanks where all fields are blank), then the result will be zero.",
""
 ]
	

  }





,


"office document properties" :
{
	"Function Names":	[ "office document properties" ],
	"Documentation":	"Function Description",
	"Library":		"Office Library",
"Description" : [
"",
"		This function reveals the document properties of Microsoft office files with the extensions <br>",
"		.docx, .xlsx/.xlsm, .pptx, .vsdx, etc.  The properties may include info about persons who have created",
"		or modified the files, etc.",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls, .doc, .ppt) cannot be processed."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"3",
	"Restrictions":		"Under normal conditions, the 'Office Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Path and file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be a file name of a valid Microsoft open office file."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Property names",
		  "Direction": "output",
		  "Types": [ "parameter set" ],
"Description" : [
"			All identified property names will be stored in this variable."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Property values",
		  "Direction": "output",
		  "Types": [ "parameter set" ],
"Description" : [
"			All corresponding property values will be stored in this variable.  The number of elements in both 2nd and 3rd function ",
"			parameters will be equal."
 ]
			
		}
	],
	"Exceptions": "File is not an office file.",
"Examples" : [
"	include ( Office Library );",
"	office document properties( \"Examples\\Football Membership List.xlsx\", property names[], property values[] );",
"",
"	for all parameters( property names[], pn[], index[] )",
"	{",
"	    echo( literal( pn[], \"16#\", align right), \"  :  \", property values[]{index[]} );",
"	}"
 ]
	,
	"Output": "automatic"
},



//	advanced directory listing, advanced directory listing recursive
//  ________________________________________________________________________________________________________________________


"advanced directory listing ..." :
{
	"Function Names":	[ "advanced directory listing", "advanced directory listing recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		",
"		This function works very similarly as __directory listing(__) and __directory listing recursive(__).  The only difference to them is that",
"		all identified Microsoft office document properties from open office Word, Excel, Powerpoint and Visio files wll also be added as",
"		additional columns to the directory listing.",
"",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls, .doc, .ppt) cannot be processed.",
""
 ]
		,
	"Call as":		"procedure or function",
	"Parameter count":	"1-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The directory listing will be put into this table, with header names as lsited above.",
"			If the table is not yet existing, then it will be created.  Existing tables will be initialized first."
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "pattern name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "search option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "files and directories",
"Description" : [
"		    One of the following:",
"			=== 150, 500, noheader, noframe_1stcolbold",
"			files			| Files only",
"			directories		| Directories only",
"			files and directories	| Foth files and directoreies (default)",
"			all			| Also includes hidden and system files",
"			==="
 ]
			
		  }

		],
	"Return value":
	[
		{ "Name": "Entry count",
		  "Types": [ "numeral" ],
		  "Description": "Total number of files and/or directories found.  -1 = Error (e.g. invalid path). Table will be empty in this case."
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"",
"		rv[] = advanced directory listing( list, \"Examples/\", \"*.xlsx,*.xls\" );",
"		table delete remaining rows(list, 4 ); ",
"		// Just keep the first 3 rows to fit the output on the screen",
"",
"		table transpose( list ); // Make the list fit on the small output",
"		table list( list );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory listing", "directory listing recursive" ]
},




//	excel list sheets
//  ________________________________________________________________________________________________________________________


"excel list sheets" :
{
	"Function Names":	[ "excel list sheets" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function identifies all sheets (tabs) inside the Microsoft Excel workbook (Open Office format) and returns them in a parameter set containing literals.",
"		This information may be necessary in order to load the right table in the Excel file afterwards.",
"",
"		<br><br>",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls) cannot be processed."
 ]
		,
	"Call as":		"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of Excel file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be an Excel file in Open Office format, e.g. with file type .xlsx, .xlsm, .xlst.",
"			<br><br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Sheet names",
		  "Types": [ "parameter set"],
		  "Description": "List of all sheet names from left to right as seen in the bottom tabs on Excel"
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"		sheets[] = excel list sheets( \"Examples\\Football Membership List.xlsx\" );",
"		echo(\"The sheets are: \", sheets[] );	  "
 ]
		,
	"Output": "automatic",
	"See also": [ "table load excel file" ]
},




//	table laod excel file
//  ________________________________________________________________________________________________________________________


"table load excel file" :
{
	"Function Names":	[ "table load excel file" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function loads Excel files (Open Office format) directly into B4P tables.",
"		If the 3rd function parameter (Excel sheet name) is not specified, then the visible sheet at the time the Excel file",
"		has been saved with Excel will be loaded.",
"",
"		<br><br>",
"		As of now, applied number formats will not be conveyed.  As an example, one Excel field contains 1.248 and the applied Excel number format ",
"		for display is \"0.0\", the value \"1.2\" is shown on the Excel sheet using Excel.  However the original value will be loaded: 1.248.",
"		Beyond4P is able to distinguish properly between literals (strings), numerals, boolean values (true, false), dates, times and date-time combinations ",
"		(YYYY-MM-DD  hh:mm:ss format) Other information such as formulas, cell formatting, etc. are ignored for the time being.",
"",
"		<br><br>",
"		<u>Note</u>: Only the plain data, but no no formatting information (e.g. text color), will be loaded.",
"		<u>Attention</u>: Encrypted, binary and proprietary legacy file types (e.g. .xlsb, .xls) cannot be processed."
 ]
		,
	"Call as":		"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The contents of the selected table in the Excel file will be loaded into this table."
 ]
			
		},
		{ "Number": "2",
		  "Name": "name of Excel file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			It must be an existing Excel file in Open Office format, e.g. with file type .xlsx, .xlsm, .xlst.",
"			<br><br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Excel sheet name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A particular sheet will be loaded.  This function is very useful if the Excel workbook contains multiple",
"			sheets.  The function __excel list sheets(__) is useful to identify all sheets, which is particularly useful",
"			if all sheets need to be loaded.  Every sheet needs to be loaded separately by repeatedly calling this function.",
"			<br><<br>",
"			<u>Attention</u>: Binary (.xlsb), encrypted and legacy files (.xls) are not supported."
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Office Library );",
"		table load excel file( football, \"Examples\\Football Membership List.xlsx\" );",
"		table list( football );"
 ]
		,
	"Output": "automatic",
	"See also": [ "excel list sheets", "table load" ]
}




,



"Defining User Specific Colors":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Defining User Specific Colors" ],
    "Keywords":			[ "Color Specification" ],
"Description 01:Introduction" : [
"",
"	B4P provides 3 ways to specify text and cell colors in the tables:",
"	* Specifying the RGB value directly, e.g. <b>{ 255, 192, 0 }</b> for orange",
"	* Specifying the RGB value wiht a hexadecimal code as practiced in HTML files, e.g. <b>'#FFC000'</b> for orange",
"	* Specifying a color name from the __color palette__",
"",
"	B4P provides a decent palette of color names which includes the circle of vivid colors (red - orange - yellow - green - cyan - blue - purple - magenta),",
"	gray levels, some dedicated colors used by Microsoft Office tools, particularly Excel, and a decent collection of various colors in different shades and",
"	intensities.",
"",
"	<br><br>	",
"",
"	After having the style library file included, a B4P table called <b>global color table</b> is available which lists the entire palette of named colors.",
"	The table contains following columns:",
"",
"	=== 100, 900, bold_column_1",
"	Header Name		| Description	",
"	Color Name		| Assigned color name, e.g. 'green', 'gray 12', 'turquoise', 'teal', etc.  All colors named in this table can be used as color names in applicable function parameters",
"	Cat 1			| One of the following: standard, lightened, darkened, weakened, user defined",
"	Cat 2			| One of the following: primary, saturated, gray scales, excel color, red tones, yellow tones, green tones, blue tones, purple tones, pink tones, brown tones",
"	Red			| Intensity level of red, must be between 0 and 255",
"	Green			| Intensity level of green, must be between 0 and 255",
"	Blue			| Intensity level of blue, must be between 0 and 255",
"	HTML Color		| HTML #RRGGBB color coding, e.g. '#FFC000' for orange",
"	===",
"",
"	<u>Important</u>: You can make changes on this table directly, but it is more advisable to use the available function to introduce additional named colors.",
"	Functions are available to extend the named colors by applying functions to derive lightened, darkened and weakened (reduction of color saturation) varieties.",
"	The function __add color(__) allows you to add colors.",
"",
"	<br><br>",
"	<u>Note</u>: Microsoft Excel and web browers may interpret some text colors in a degraded manner, e.g. using the same text color if the specified color differs only slightly."
 ]
	
},



"Color Palettes":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Color Palettes" ],
    "Keywords":			[ "Color Palette" ],
"Description 01:Touring the Vivid Color Circle" : [
"",
"	<img src=\"Images/Description_Style_Colors_1.jpg\" alt=\"Color Circle\"><br/><br/>"
 ]
	,
"Description 03:Shades of Gray" : [
"	",
"	<img src=\"Images/Description_Style_Colors_2.jpg\" alt=\"Shades of Gray\"><br/><br/>",
""
 ]
	,
"Description 04:Excel Colors" : [
"	",
"	The following colors are found in the standard color template in Microsoft Excel and other Office tools.  For red and yellow, use the names 'red' and 'yellow'.<br>",
"",
"	<img src=\"Images/Description_Style_Colors_3.jpg\" alt=\"Excel Colors\"><br/><br/>",
""
 ]
	,
"Description 05:Shades of Red" : [
"",
"	<img src=\"Images/Description_Style_Colors_4.jpg\" alt=\"Shades of Red\"><br/><br/>",
""
 ]
	,
"Description 06:Shades of Yellow" : [
"",
"	<img src=\"Images/Description_Style_Colors_5.jpg\" alt=\"Shades of Yellow\"><br/><br/>",
""
 ]
	,
"Description 07:Shades of Green" : [
"",
"	<img src=\"Images/Description_Style_Colors_6.jpg\" alt=\"Shades of Green\"><br/><br/>",
""
 ]
	,
"Description 08:Shades of Blue" : [
"",
"	<img src=\"Images/Description_Style_Colors_7.jpg\" alt=\"Shades of Blue\"><br/><br/>",
""
 ]
	,

"Description 09:Shades of Purple" : [
"",
"	<img src=\"Images/Description_Style_Colors_8.jpg\" alt=\"Shades of Purple\"><br/><br/>",
""
 ]
	,
"Description 10:Shades of Pink" : [
"",
"	<img src=\"Images/Description_Style_Colors_9.jpg\" alt=\"Shades of Pink\"><br/><br/>",
""
 ]
	,
"Description 11:Shades of Brown" : [
"",
"	<img src=\"Images/Description_Style_Colors_10.jpg\" alt=\"Shades of Brown\"><br/><br/>"
 ]
	
},





"add color" :
{
	"Function Names":	[ "add color" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function adds a further color to the __color palette__."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"5",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "New color name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a new color name which does not yet exist in the color table"
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Category 2",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Apply a categorization, e.g. an existing one like \"gray scale\" or a new one of choice.  This value will noted down as",
"			\"Cat 2\" in the color table.  The 1st category is assigned automatically with \"user defined\"."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Red intensity",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Valid values: 0..255"
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Green intensity",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Valid values: 0..255"
 ]
			
		},
		{ "Number": "5.",
		  "Name": "Blue intensity",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Valid values: 0..255"
 ]
			
		}
	],
"Examples" : [
"	include( Style Library );",
"",
"	add color( crème, natural shades, 245,238, 222 );",
"",
"	table initialize( t, { { Item, Color }, { Jacket, crème }, { Trousers, gray 12 }, { scarf, teal } } );",
"",
"	table process( t, table style cells( t, Color, row(), single, fill color, [Color] ) );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Custom_Colors.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Custom_Colors.xls\", EXCEL );",
"	echo(\"Done. Open the file Custom_Colors.html with a web browser.\");"
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Custom_Colors.html\" target=\"_blank\">Style_Custom_Colors.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Custom_Colors.xls\" >Style_Custom_Colors.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},




"lighten colors" :
{
	"Function Names":	[ "lighten colors" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function Derives lightened shades of selected colors in the __color palette__."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"3",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Row numbers",
		  "Direction": "input",
		  "Types": [ "numeral", "parameter set" ],
"Description" : [
"			Specify one or multiple table row numbers in the table 'global color table'.  The colors specified in the corresponding row will be lightened.<br>",
"			<u>Hint</u>: Use __table selected rows(__) to select table rows by contents in the table.."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Suffix",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				Specify a suffix to be added to the color names in order to distinguish them from their original colors."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Lightening up factor",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			e.g. factor 2 is the color precisely between white and specified color<br>",
"			Example: mandarin (255,128,0) translates to (255,192,128)<br>",
"			Use lower factors (e.g. 1.5) for less lighter shades, and bigger factors (e.g. 4) for significantly lighter shades."
 ]
			
		}
	],
"Examples" : [
"	include( Support Library );",
"	include( Style Library );",
"",
"	lighten colors( table selected rows( global color table, [Cat 2]==primary), X, 3 );",
"",
"	table copy table selected rows( global color table, t, [Cat 2]==primary );",
"",
"	table list ( t );",
"	table process( t, table style rows( t, row(), table, fill color, [Color Name] ) );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Lightened_Colors.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Lightened_Colors.xls\", EXCEL );",
"	echo(\"Done.\");",
""
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Lightened_Colors.html\" target=\"_blank\">Style_Lightened_Colors.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Lightened_Colors.xls\" >Style_Lightened_Colors.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},


"darken colors" :
{
	"Function Names":	[ "darken colors" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function Derives darkened shades of selected colors in the __color palette__."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"3",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Row numbers",
		  "Direction": "input",
		  "Types": [ "numeral", "parameter set" ],
"Description" : [
"			Specify one or multiple table row numbers in the table 'global color table'.  The colors specified in the corresponding row will be darkened.<br>",
"			<u>Hint</u>: Use __table selected rows(__) to select table rows by contents in the table.."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Suffix",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				Specify a suffix to be added to the color names in order to distinguish them from their original colors."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Darkening down factor",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			e.g. factor 2 is the color precisely between white and specified color<br>",
"			Example: mandarin (255,128,0) translates to (255,192,128)<br>",
"			Use lower factors (e.g. 1.5) for less darker shades, and bigger factors (e.g. 4) for significantly darker shades."
 ]
			
		}
	],
"Examples" : [
"	include( Support Library );",
"	include( Style Library );",
"",
"	darken colors( table selected rows( global color table, [Cat 2]==primary), X, 5 );",
"",
"	table copy table selected rows( global color table, t, [Cat 2]==primary );",
"",
"	table list ( t );",
"	table process( t, table style rows( t, row(), table, fill color, [Color Name], text color, white ) );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Darkened_Colors.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Darkened_Colors.xls\", EXCEL );",
"	echo(\"Done.\");",
""
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Darkened_Colors.html\" target=\"_blank\">Style_Darkened_Colors.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Darkened_Colors.xls\" >Style_Darkened_Colors.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},


"weaken colors" :
{
	"Function Names":	[ "weaken colors" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function Derives weakened saturations of selected colors in the __color palette__."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"3",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Row numbers",
		  "Direction": "input",
		  "Types": [ "numeral", "parameter set" ],
"Description" : [
"			Specify one or multiple table row numbers in the table 'global color table'.  The colors specified in the corresponding row will be weakened.<br>",
"			<u>Hint</u>: Use __table selected rows(__) to select table rows by contents in the table.."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Suffix",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				Specify a suffix to be added to the color names in order to distinguish them from their original colors."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Weakening down factor",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			e.g. factor 2 is the color precisely between white and specified color<br>",
"			Example: mandarin (255,128,0) translates to (255,192,128)<br>",
"			Use lower factors (e.g. 1.5) for less weaker saturations, and bigger factors (e.g. 4) for significantly weaker saturations."
 ]
			
		}
	],
"Examples" : [
"	include( Support Library );",
"	include( Style Library );",
"",
"	weaken colors( table selected rows( global color table, [Cat 2]==primary), X, 5 );",
"",
"	table copy table selected rows( global color table, t, [Cat 2]==primary );",
"",
"	table list ( t );",
"	table process( t, table style rows( t, row(), table, fill color, [Color Name], text color, white ) );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Weakened_Colors.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Weakened_Colors.xls\", EXCEL );",
"	echo(\"Done.\");",
""
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Weakened_Colors.html\" target=\"_blank\">Style_Weakened_Colors.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Weakened_Colors.xls\" >Style_Weakened_Colors.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},






"Styling Functions":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Formatting the Tables" ],
"Description 01:Introduction" : [
"",
"	Four different functions are available to format the tables:",
"	* __table style table(__)",
"	* __table style rows(__)",
"	* __table style columns(__)",
"	* __table style cells(__)",
"",
"	<br><br>",
"	All four functions make use of __generic attribute names__ and __generic attribute values__, for exmple <i>font size</i> followed by a number.  These attributes",
"	will then be translated to the file-type specifc formatting attributes wich differ between HTML and Excel formats.  Even though greate effort has been invested",
"	to ensure that the formatting attributes provide equivalent outcome, some differences apply. One example is that formatting complete rows across the entire sheet",
"	works fine in Excel but for good reasons not in HTML where the color ends with the last table column.",
"",
"	<br><br>",
"	The attributes are summarized in the next section, followed by the description of the four formatting functions.",
""
 ]
	
},



"Generic Formatting Attributes":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Generic Formatting Attributes" ],
    "Keywords":			[ "Generic Attribute Names", "Generic Attribute Values" ],
"Description 01:Introduction" : [
"",
"	The formatting attributes are always tuples which consist of generic attribue names and generic attribute values which are described in the table below:",
"",
"	=== 200, 200, 100, 300, 200, bold_column_1",
"	Generic Attribute Name		| Generic Attribute Value		| Scope				| Descriptions					| Restrictions, Portability",
"	text color			| __color specification__		| table, row, column, cell	| Sets text color				| Excel and browsers may group slightly different colors together",
"	fill color			| __color specification__		| \"				| Sets background color of the table fields	|",
"top border<br>bottom border<br>left border<br>right border  					| border specificaction<sup>1</sup>	| \"				| Applies cell borders				| HTML: 'hairline' thickness is same as 'thin' thickness",
"	underscore<br>boldface<br>italic| Boolean: true / false			| \"				| Applies text formatting			|",
"	wrap text			| Boolean: true / false			| \"				| Text inside the cell will wrap to next row if too long | ",
"	comment				| Literal: text contents		| cell				| Adds comments which are visible in Excel when holding the mouse cursor above the red triangle symbol | See <sup>2</sup>",
"	font name			| Literal: font name			| table, row, column, cell	| Sets the font name				| The font name must be known to Excel or the web browser",
"	font size			| Numeral: size in points		| \"				| Sets the font size				| ",
"	number format			| Literal: Excel number format		| \"				| Applies Excel number format			| See <sup>3</sup>. It differs from B4P formatting.  Web browsers do not support this. Output the values as text if they should contain formatting.",
"type				| Literal: default, literal, numeral, boolean 	| \"			| default: No special rules<br>  literal: All contents are treated as literals, incl. numbers<br> numeral: Contents are treated as numerals<br> boolean: Contents are treated as booleans, e.g. 0 and 1 are TRUE and FALSE in Excel.  																				| <u>Attention</u>: Forcing text as numerals or booleans may result to unsuccessful file loading by Excel.",
"	horizontal align		| Literal: automatic, left, middle, right	| \"			| Alignment of cell contents			|",
"	vertical align			| Literal: automatic, top, center, bottom	| \"			| Alignment of cell contents			|",
"	column width			| Numeral: width (1..255)			| column		| Sets column width using Excel units		|",
"	row height			| Numeral: height (1..255)			| row			| Sets row height using Excel units		| Not 100% accurate if using HTML format (Difference by +/- 1 is possible)",
"	autofilter			| Numeral: row number				| table			| Use 0 for header row. No pre-filtering made	|",
"	freeze rows			| Numeral: row count				| table			| Number of top row frozen and always visible when scrolling		| Used by Excel",
"	freeze columns			| Numeral: column count				| table			| Number of left columns frozen and always visible when scrolling	| Used by Excel",
"	hidden				| Boolean: true, false				| row, column		| Hides a specific row or column		| In HTML, column width 0 is used",
"	hidden row			| Boolean: true, false				| row			| Like above, appliable to rows only		|",
"	hidden column			| Boolean: true, false				| column		| Like above, appliable to columns only		| In HTML, column width 0 is used",
"	===",
"",
"	<sup>1</sup>Parameter set with two values: thickness (literal) and __color specification__, e.g. <b>{ thin, red }</b>.  Valid thicknesses: hairline, thin, medium, thick<br>",
"	<sup>2</sup>Comments in HTML files loaded with Excel will work on the 1st table only in case multiple table are saved.</br>",
"	<sup>3</sup>See: <a href=\"https://exceljet.net/custom-number-formats\" target=\"_blank\"><b>Info about Excel number format codes</b></a><br>",
"",
"	<br>",
"",
"	The following table summarizes some of the identified differences between HTML and Excel results:",
"	=== 200, 400, 400",
"	Category, Attributes		| Excel										| HTML",
"	Default character set		| Arial 10 pt									| Calibri 11 pt (may differ among browsers)",
"	Spreadsheet grid visible	| Yes. To make invisible:<br><b>table style table ( table name, sheet, fill color, white );</b>	| No.  Need to specify border color.",
"	Unspecified column width	| Standard 10.71 pt (may differ if Excel start-up configuration is different)			| Width varies to fit contents.",
"	Specified column widths		| Fully supported								| Fully supported when opening with Excel.  Browsers will maintain at least minimum column width to fit the contents.",
"	Dates				| No autoamtic date recognition. You need to put numbers into the fields (e.g. with function abs ( date value ) and then apply a number format with values like \"DD.MM.YYYY\".	| Excel recognizes dates in an intelligent manner.  Dates in local format or specified as YYYY-MM-DD are detected automatically and loaded as dates.",
"	Horizontal align		| Default: left									| Default: left.  Header row: middle",
"	Vertical align			| Default: bottom								| Default: middle",
"	Header row			| Standard text									| Bold text",
"	Wrap text			| Default: false								| Default: true",
"	Text colors			| May be degraded (e.g. crimson shown in red)					| Normally not, but some browers may act differently",
"	Formulas			| Not supported									| Supported, but language specific.  Formulate as you work in Excel.  All formulas must begin with an equal sign. <br> Function names must be specified in the local language configured for Excel.  If it's German, use a function name like \"SUMME\" instead of \"SUM\".",
"	Output boolean values		| Not supported									| Supported, but language specific, and not case sensitive. Use \"WAHR\" and \"FALSCH\" if Excel is configured in German.",
"	Forcing data to literal format, including numbers | Use attribute name 'type' and value 'text'. e.g.<br><b>table style table( test, sheet, type, literal);</b> | The same rule applies",
"	==="
 ]
	,
"Examples 01:Different interpretation of numeric, date and boolean values" : [
"	include( Style Library );",
"	echo(\"Test various date, numeric and boolean representations\");",
"",
"	table initialize( t, ",
"	{   { Dates Lit 1,Dates Lit 2,Dates Num,Boolean EN,Boolean DE,Boolean Num,Numbers,Formulas },",
"	    { \"2017-01-30\",\"30.01.2017\",abs(date(\"2017-01-30\")),TRUE,WAHR,1,123.45,\"=WURZEL(4)\"  },",
"	    { \"2017-01-30\",\"30.01.2017\",abs(date(\"2017-01-30\")),TRUE,WAHR,1,123.45,\"=G2*2\"  },",
"	    { \"2017-01-30\",\"30.01.2017\",abs(date(\"2017-01-30\")),TRUE,WAHR,1,123.45,\"=G2*2\"  },",
"	    { \"2017-01-30\",\"30.01.2017\",abs(date(\"2017-01-30\")),TRUE,WAHR,1,123.45,\"=SQRT(4)\"  } } )	;",
"",
"	table style columns( t, {0..7}, table, column width, 14 );",
"	table style cells  ( t, Dates Num,   2, single, number format, \"DD.MMM.YYYY\" );",
"	table style cells  ( t, Dates Lit 1, 2, single, number format, \"DD.MMM.YYYY\" );",
"	table style cells  ( t, Dates Lit 2, 2, single, number format, \"DD.MMM.YYYY\" );",
"	table style rows   ( t, 3, sheet, type, literal );",
"	table style cells  ( t, Boolean Num, 4, single, type, boolean );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Number_Formats.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Number_Formats.xls\", EXCEL );",
"	echo(\"Done.\");"
 ]
	,
	"Output 01:": "automatic",
"Description 02:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Number_Formats.html\" target=\"_blank\">Style_Number_Formats.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Number_Formats.xls\" >Style_Number_Formats.xls</a> (Excel XML 2003 format - confirm the message box query).	",
"",
"	<br><br>",
"",
"	The Excel file looks like this one:",
"	<img src=\"Images/Description_Style_Number_Formats_1.jpg\" alt=\"Excel file\"><br/><br/>",
"	",
"	The HTML file loaded in Excel looks as follows:",
"	<img src=\"Images/Description_Style_Number_Formats_2.jpg\" alt=\"HTML file opened in Excel\"><br/><br/>",
"	",
"	The HTML file loaded in Excel looks as follows:",
"	<img src=\"Images/Description_Style_Number_Formats_3.jpg\" alt=\"HTML file opened in a browser\"><br/><br/>"
 ]
	

},


"Formatting Coverages and Precedences":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Formatting Precedences", "Formatting Coverages" ],
"Description 01:Introduction" : [
"",
"	The fnctiosn __table style table(__), __table style rows(__) and __table style columns(__) a parameter called <b>Coverage</b> which can take following values:",
"	=== 100, 600, 100, 100, 100, bold_column_1",
"	Coverage	| Explanation",
"sheet		| Covers entire sheet. In Excel the entire sheet and not just the table saved applies.  Following precedence rules apply:<br> Columns, rows and cells overpaint tables<br> Rows and cells overpaint columns<br> 			  Cells overpaint rows.",
"	table		| Covers entire table, but not outside the table.  Same precedence level as formatting cells. The last function call applies the last paint on the top.",
"	body		| Covers table body except header row.  Same precedence lvel as formating cells.  The last function call applies the last paint on the top.",
"	==="
 ]
	,
"Examples 01:Precedence example with the 'Cities' table" : [
"	include( Style Library );",
"",
"	echo(\"Demonstrate precedences in formatting sheets / rows / columns / cells\");",
"",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	table style cells( t, City, 1, single, fill color, yellow );",
"	table style cells( t, Famous attraction, 3, single, fill color, red );",
"	table style rows( t, 4, sheet, fill color, green );",
"	table style columns( t, City, sheet, fill color, aquamarine);",
"	table style rows( t, 3, sheet, fill color, saffron );",
"",
"	table style rows( t, 9, table, fill color, powder blue );",
"	table style columns( t, \"State/Province\", table, fill color, steel blue);",
"	table style rows( t, 10, table, fill color, plum );",
"	table style cells( t, \"State/Province\", 9, single, fill color, {255,255,128} );",
"",
"	table style table( t, sheet, fill color, gray 15 );",
"	// Calling the same function with 'table' instead of 'sheet' would overpaint every cell",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Precedences.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Precedences.xls\", EXCEL );",
"	echo(\"Done.\");"
 ]
	,
	"Output 01:": "automatic",
"Description 02:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Precedences.html\" target=\"_blank\">Style_Precedences.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Precedences.xls\" >Style_Precedences.xls</a> (Excel XML 2003 format - confirm the message box query).	",
"",
"	<br><br>",
"",
"	The Excel file looks like this one (Formatting rows and colums beyond the table):",
"	<img src=\"Images/Description_Style_Precedences_1.jpg\" alt=\"Excel file\"><br/><br/>",
"	",
"	The HTML file loaded in Excel looks as follows (Formatting inside table only):",
"	<img src=\"Images/Description_Style_Precedences_2.jpg\" alt=\"HTML file opened in Excel\"><br/><br/>",
"	",
"	The HTML file loaded in Excel looks as follows (Formatting horizontally beyond the table but not vertically):",
"	<img src=\"Images/Description_Style_Precedences_3.jpg\" alt=\"HTML file opened in a browser\"><br/><br/>"
 ]
	
	
},





"table style table" :
{
	"Function Names":	[ "table style table" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function applies style and formatting to a whole table or sheet"
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"4, 6, 8, etc.",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "2.",
		  "Name": "Formatting Coerage",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __formatting coverages__.  Valid values are: ",
"			* <b>sheet</b>: Covers entire sheet, even outside the table",
"			* <b>table</b>: Covers table, but sheet outside the table is not affected",
"			* <b>body</b>: Covers table except header row"
 ]
			
		},
		{ "Number": "3, 5, ....",
		  "Name": "Generic Attribute Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute names__ for available names."
 ]
			
		},
		{ "Number": "4, 6, ....",
		  "Name": "Generic Attribute Value",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute values__ for valid values.  Different rules apply for the different generic attribute names."
 ]
			
		}
	],
"Examples" : [
"	include( Style Library );",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	table style table( t, sheet, column width, 24, wrap text, true );",
"	table style table( t, body, text color, navy );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Function_table_style_sheet.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Function_table_style_sheet.xls\", EXCEL );",
"	echo(\"Done.\");",
""
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Function_table_style_sheet.html\" target=\"_blank\">Style_Function_table_style_sheet.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Function_table_style_sheet.xls\" >Style_Function_table_style_sheet.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},




"table style rows" :
{
	"Function Names":	[ "table style rows" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function applies style and formatting to a row inside the table or the whole sheet"
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"5, 7, 9, etc.",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "2.",
		  "Name": "Row numbers",
		  "Direction": "input",
		  "Types": [ "parameter set containing numerals", "numeral" ],
		  "Description": "Specify 1 or more row numbers.  <br><u>Hint</u>: Use __table selected rows(__) to identify row numbers using a condition to apply on every row."
		},
		{ "Number": "3.",
		  "Name": "Formatting Coerage",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __formatting coverages__.  Valid values are: ",
"			* <b>sheet</b>: Covers entire sheet, even outside the table",
"			* <b>table</b>: Covers table, but sheet outside the table is not affected",
"			* <b>body</b>: Same functionality as with <b>table</b>, even when applying this function on row 0 (header row)."
 ]
			
		},
		{ "Number": "4, 6, ....",
		  "Name": "Generic Attribute Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute names__ for available names."
 ]
			
		},
		{ "Number": "5, 7, ....",
		  "Name": "Generic Attribute Value",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute values__ for valid values.  Different rules apply for the different generic attribute names."
 ]
			
		}
	],
"Examples" : [
"	include( Style Library );",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	table style rows( t, 0, body, boldface, true, row height, 30 );",
"",
"	// for table style rows, coverage values 'body' and 'table' work similarly.",
"",
"	table style rows( t, table selected rows( t, [Country]==USA), body, fill color, gray 15, ",
"		top border, { thick, blue }, bottom border, { thick, blue },",
"		left border, { thick, red }, right border, { thick, red } );",
"",
"	// Here: Sheet wide coverage when viewing files with Excel",
"	table style rows( t, table selected rows( t, [Country]==ITA), sheet, fill color, lemon, italic, true );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Function_table_style_rows.html\", HTML );",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Function_table_style_rows.xls\", EXCEL );",
"	echo(\"Done.\");"
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Function_table_style_columns.html\" target=\"_blank\">Style_Function_table_style_columns.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Function_table_style_columns.xls\" >Style_Function_table_style_columns.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},



"table style columns" :
{
	"Function Names":	[ "table style columns" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function applies style and formatting to a column inside the table or the whole sheet"
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"5, 7, 9, etc.",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "2.",
		  "Name": "Table columns to format",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Description": "Specify 1 or more columns using header names and/or column numbers.  __Negative indexing__ is supported."
		},
		{ "Number": "3.",
		  "Name": "Formatting Coerage",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __formatting coverages__.  Valid values are: ",
"			* <b>sheet</b>: Covers entire sheet, even outside the table",
"			* <b>table</b>: Covers table, but sheet outside the table is not affected",
"			* <b>body</b>: Covers table except header row"
 ]
			
		},
		{ "Number": "4, 6, ....",
		  "Name": "Generic Attribute Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute names__ for available names."
 ]
			
		},
		{ "Number": "5, 7, ....",
		  "Name": "Generic Attribute Value",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute values__ for valid values.  Different rules apply for the different generic attribute names."
 ]
			
		}
	],
"Examples" : [
"	include( Style Library );",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	table style columns( t, {City,\"State/Province\"}, sheet, boldface, true, text color, burgundy, fill color, champagne );",
"	table style columns( t, Country,                 table, italic,   true, fill color, { 224, 229, 244 } );",
"	table style columns( t, {-3,-1},                 body,  fill color, lemon );",
"",
"	// Number format is supported in Excel only",
"	table style columns( t, {Inhabitants,\"Alt. (m)\"},body,  horizontal align, right, number format, \"#,##0\" );",
"",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Function_table_style_columns.xls\", EXCEL );",
"",
"	// How to apply number formats in HTML for browsers",
"",
"	table process              ( t,                      [Inhabitants] = literal([Inhabitants], '#,##0', local) );  ",
"	table process selected rows( t, ['Alt. (m)'] != '',  ['Alt. (m)']  = literal(['Alt. (m)'] , '#,##0', local) );",
"	table style columns( t, {Inhabitants,\"Alt. (m)\"},body,  type, literal );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Function_table_style_columns.html\", HTML );",
"	echo(\"Done.\");"
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Function_table_style_columns.html\" target=\"_blank\">Style_Function_table_style_columns.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Function_table_style_columns.xls\" >Style_Function_table_style_columns.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},


"table style cells" :
{
	"Function Names":	[ "table style cells" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function applies style and formatting to one or multiple cells inside the table.",
"		<u>Attention</u>: Formats added to cell locations which are outside of the table will not appear."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"6, 8, 10, etc.",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "2.",
		  "Name": "Table columns to format",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Description": "Specify 1 or more columns using header names and/or column numbers.  __Negative indexing__ is supported."
		},
		{ "Number": "2.",
		  "Name": "Row numbers",
		  "Direction": "input",
		  "Types": [ "parameter set containing numerals", "numeral" ],
		  "Description": "Specify 1 or more row numbers.  <br><u>Hint</u>: Use __table selected rows(__) to identify row numbers using a condition to apply on every row."
		},
		{ "Number": "4.",
		  "Name": "Formatting Coerage",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __formatting coverages__.  Valid values are: ",
"			* <b>single</b>: Single cell addressed.  If parameter set provided, then both parameter set must contain same number of elements. Each element pair corresponds to coordinates for one cell",
"			* <b>matrix</b>: Intersections of all specified rows and columns will be formatted",
"			* <b>field</b>: Pairs of 2 parameter set elements represent a field to format."
 ]
			
		},
		{ "Number": "5, 7, ....",
		  "Name": "Generic Attribute Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute names__ for available names."
 ]
			
		},
		{ "Number": "6, 8, ....",
		  "Name": "Generic Attribute Value",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			See __generic attribute values__ for valid values.  Different rules apply for the different generic attribute names."
 ]
			
		}
	],
"Examples" : [
"	include( Style Library );",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	table style cells( t, {City,City,Moving along},{1, 12, -2}, single, fill color, yellow );",
"	table style cells( t, {0,1}, {3,5}, single, fill color, lemon, font size, 20, font name, courier new );",
"	table style cells( t, {City,3,5}, {3,5,7,9}, matrix, fill color, green );",
"	table style cells( t, {Famous cultural place, Moving along}, {0,8}, field, fill color, cyan );",
"",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Function_table_style_cells.xls\", EXCEL );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Function_table_style_cells.html\", HTML );",
"	echo(\"Done.\");"
 ]
	,
	"Output": "automatic",
"Details 02:Viewing the Results:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Function_table_style_cells.html\" target=\"_blank\">Style_Function_table_style_cells.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Function_table_style_cells.xls\" >Style_Function_table_style_cells.xls</a> (Excel XML 2003 format - confirm the message box query).	"
 ]
	
},



"Finishing up formatting":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Finishing up formatting" ],
"Description 01:Introduction" : [
"",
"	After all the <b>table style ... ()</b> functions have been applied on cells, rows, columns and/or the entire table, one additional step",
"	is necessary before saving the tables, namely translating the generic formatting applied to target-specific formatting, i.e. HTML markups for",
"	HTML files, and Excel formatting markups for the Excel (XML 2003) file format.",
"",
"	The following function are available:",
"	* __translate style attributes for excel(__)",
"	* __translate style attributes for excel(__)",
"",
"	<br>",
"	You can save multiple formatted tables in one files using the __table save multiple(__) function.  In this case, the translation functions need to be",
"	called for every table to be included as sheets in the file.",
"	<br><br>",
"	<u>Attention</u>: The formatting is associated to the table names.  If you make a copy of the table, then the new table has no formatting information.",
"",
"	<br><br>",
"	If you want to apply different style and formatting on the same table, then use the function __table style reset(__) and begin again with formatting.",
""
 ]
	,
"Examples 01:The 'Cities' table in a nice and professional appearance" : [
"	include( Style Library );",
"	table load( t, \"Examples\\Cities.csv\" );",
"",
"	// Freeze panes and apply an autofilter",
"	table style table( t, sheet, freeze rows, 1, freeze columns, 2, autofilter, 0 );	",
"",
"	for all parameters( { 10, 20, 20, 14, 20, 10, 20, 20 }, width[], col[] )",
"	{",
"	    table style columns( t, col[], sheet, column width, width[] );",
"	}	",
"	",
"	table style rows( t, 0, table, row height, 32, vertical align, center, ",
"	    fill color, gray 14, boldface, true, font size, 12, wrap text, true );",
"",
"	table style columns( t, { City, Country }, body, text color, blue, boldface, true, italic, true );",
"	table process selected rows( t, [Inhabitants]>=1000000, ",
"	    table style cells( t, Inhabitants, row(), single, ",
"	    text color, royal purple, fill color, champagne, boldface, true ) );",
"",
"	border[] = { medium, red };",
"	table process selected rows( t, ([Famous cultural place]=+'*theater*','*opera*'), ",
"	    table style cells( t, { City, Famous cultural place}, row(), matrix, ",
"	    text color, mandarin, fill color, lemonchiffon, boldface, true,",
"	    left border, border[], right border, border[], top border, border[], bottom border, border[]  ) );",
"",
"	// Number format is supported in Excel only",
"	table style columns( t, {Inhabitants,\"Alt. (m)\"},body,  horizontal align, right, number format, \"#,##0\" );",
"",
"	translate style attributes for excel(t);",
"	table save( t, \"Images/Style_Function_table_style_professionally.xls\", EXCEL );",
"",
"	// How to apply number formats in HTML for browsers",
"",
"	table process              ( t,                      [Inhabitants] = literal([Inhabitants], '#,##0', local) );  ",
"	table process selected rows( t, ['Alt. (m)'] != '',  ['Alt. (m)']  = literal(['Alt. (m)'] , '#,##0', local) );",
"	table style columns( t, {Inhabitants,\"Alt. (m)\"},body,  type, literal );",
"",
"	translate style attributes for html(t);",
"	table save( t, \"Images/Style_Function_table_style_professionally.html\", HTML );",
"	file copy overwrite( \"Images/Style_Function_table_style_professionally.html\", \"Images/Style_Function_table_style_professionally_in_html.xls\" );",
"	echo(\"Done.\");"
 ]
	,
	"Output 01:": "automatic",
"Description 02:" : [
"	Test Click on the file name view the result: <a href=\"Images/Style_Function_table_style_professionally.html\" target=\"_blank\">Style_Function_table_style_professionally.html</a>.<br>",
"	Test Click on the file name open the file with Excel: <a href=\"Images/Style_Function_table_style_professionally.xls\" >Style_Function_table_style_professionally.xls</a> (Excel XML 2003 format - confirm the message box query).	",
"	Test Click on the file name open the HTML file with Excel: <a href=\"Images/Style_Function_table_style_professionally_in_html.xls\" >Style_Function_table_style_professionally_in_html.xls</a> (Note: HTML file opened with Excel).	"
 ]
	


},



"translate style attributes ..." :
{
	"Function Names":	[ "translate style attributes for excel", "translate style attributes for html" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		The generic formatting attributes will be translated to the target-specific format and will then be included when saving the",
"		file in the corresponding file format."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		}

	]
},


"table style reset" :
{
	"Function Names":	[ "table style reset" ],
	"Documentation":	"Function Description",
	"Library":		"Style Library",
"Description" : [
"",
"		This function clears all formatting attributes on the tables specified."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"Min. 0",
	"Restrictions":		"Don't forget to include 'Style Library' at the top of your program",
	"Parameters":
	[
		{ "Number": "1, 2, etc.",
		  "Name": "Name fo existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	]
}










,


"help" :
{
	"Function Names":	[ "help" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function provides an overview of the most important features provided in __interactive__ mode",
"		such as accessing help and support information, and how B4P statements and expressions can be ",
"		executed directly as commands.",
"",
"		<br><br>",
"		This help feature provides user interaction allowing to browse through different pages."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
"Examples:'help' entered in interactive mode" : [
">> help",
"",
"0. Interactive - Help Table of Contents",
"________________________________________________________________________________",
"",
"Page Number",
"",
"[1]     Entering interactive mode",
"",
"[2]     Help commands (for help text and accessing B4P documentation)",
"",
"[3]     Executing B4P statements and expressions by hand",
"",
"[4]     Basic commands (incl. leaving interactive mode)",
"",
"[5]     Operating system commands",
"",
"[6]     Inspecting tables",
"",
"[7]     Inspecting variables",
"",
"",
"_______________________________________________________________________________",
"Page [0]..[7], [N]ext / [P]revious page [C]lear screen on/off  [Q]uit:  Q",
">>"
 ]
,
	"See also": [ "docs", "docs search" ]
},



"docs" :
{
	"Function Names":	[ "docs" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function accesses the on-line B4P documentation.",
"		When calling this function for the very first time without providing a favorite web browser specified in the",
"		1st function parameter, then you will be asked to choose one.  Make sure that the favorite web browser is already",
"		installed.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0 or 1",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a valid web browser name:",
"			=== 100, 400, noframe_1stcolbold, noheader",
"			Windows	| chrome, edge, explorer",
"			Linux   | chrome, firefox, brave",
"			MacOS   | brave, chrome, firefox, safari",
"			===",
"			If the entered browser is not valid, then you will be asked to choose one of the valid browsers interactively.",
"			The chosen browser will be memorized for the next times you are using this function if you do not specify the browser expicitly.<br><br>",
"			<u>Note</u>: This function does not check if the browser is installed, nor does it search for all browsers installed in your system."
 ]
			
		}
	],
	"See also": [ "docs search" ]
},





"docs search" :
{
	"Function Names":	[ "docs search" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function uses the keyword provided to access the on-line B4P documentation and opens the page you are looking",
"		for.  When calling this function for the very first time without providing a favorite web browser specified in the",
"		2nd function parameter, then you will be asked to choose one.  Make sure that the favorite web browser is already",
"		installed.",
"",
"		<br><br>",
"",
"		If the keyword provided matches with an existing keyword in the online B4P documentation, then the targeted page",
"		will be opened immediately.  Try <b>docs search( table process )</b> to get the details about the function __table search(__).",
"		Otherwise, yo will be prompted to enter a keyword.  While typing the letters, the number of possible matches shown at the",
"		left will narrow down.  Try to type as match so the number of matches reduces to below 20 so they fit into one menu",
"		overview.  ",
"",
"		<br><br>",
"",
"		The keywords are not case-sensitive.  Wildcards are supported, e.g. typing 'e*o' or 'e??o' finds 'echo.",
"		You can use the question mark (?) to toggle among three comparison methods applied for the keyword:",
"		* <b>begins with</b>: Keyword is compared with beginning letter(s) of the existing choices (applicable when beginning to narrow down)",
"		* <b>contains</b>: Keyword is checked as part of the existing choices",
"		* <b>equals</b>: Keyword is checked for perfect match (matches is 0 when nothing is typed and changes to 1 when a matching keyword is found)",
"",
"		<u>Note</u>: When you use <b>docs search</b> for the first time, you will be asked to select the web browser.  Select one which is installed on your system.<br>",
"		<u>Note</u>: Your own user-defined functions are not included here becasue this feature uses the B4P table of contents available on the B4P web page.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Keyword",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			If a matching keyword (e.g. 'echo') is entered, then the web page with the right contents will open directly.",
"			Wildcards like '*' and '?' are supported to provide a precise search.<br><br>",
"			<u>Note</u>: When using wildcard symbols, then put the expression in single or double quotation marks, e.g. <b>\"table lookup*\"</b>"
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a valid web browser name:",
"			=== 100, 400, noframe_1stcolbold, noheader",
"			Windows	| chrome, edge, explorer",
"			Linux   | chrome, firefox, brave",
"			MacOS   | brave, chrome, firefox, safari",
"			===",
"			If the entered browser is not valid, then you will be asked to choose one of the valid browsers interactively.",
"			The chosen browser will be memorized for the next times you are using this function if you do not specify the browser expicitly.<br><br>",
"			<u>Note</u>: This function does not check if the browser is installed, nor does it search for all browsers installed in your system."
 ]
			
		}

	],
"Examples:'docs search' entered in interactive mode" : [
">> docs search('table li*')",
"",
"Note: Web documentation is still under construction and not yet complete.",
"",
"Advice:  docs search ( [keyword] ) looks for specific keyword.",
"Exmaple: docs search ( for )   looks for help for 'for'",
"         docs search ( 'for*' )    looks for keywords beginning with 'for'",
"",
"Use 'single' quotation marks when using wildcard symbols *,?,..",
"",
"",
"Narrow down the number of matches for your keyword (target: Max 20).",
"Add text by typing, [Backspace] to delete last character",
"Press [Enter] to confirm, [Escape] to leave.",
"The number of matches will update automatically while typing",
"Press [-] to toggle comparison mode between 'begins with', 'contains' and 'equals'.",
"Comparison mode is equals",
"",
"   4 matches: table li*",
"",
"     A :  table lift contents",
"     B :  table lift header row",
"     C :  table lift headers",
"     D :  table list",
"     X :  Exit this menu",
"Please select: D",
">>"
 ]
	,
	"See also": [ "docs" ]
},





"table list" :
{
	"Function Names":	[ "table list" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function lists the entire table or selected rows and columns of a table",
"		on standard output (for example the console).  Since this function does not make use of any",
"		fancy I/O features, listing tables can also be integerated in B4P programs running in batch mode",
"		in order to provide some more visibility.",
"",
"		<br><br>",
"		<u>Hint</u>: This function is suitable for __interactive__ and __debugging__ use in order to inspect tables conveniently.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1, 3, 5, ...",
	"Restrictions":		["Indirect parameter passing is disabled",
				 "Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed." ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2., 4., ...",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Following options are supported:<br>",
"			=== 100, 700, noframe_1stcolbold, noheader",
"			1st row   | Specify first row number to list (e.g. 2 = begin with row 2).  The header row (row 0) will always be displayed.",
"			last row  | Specify last  row number to list",
"			1st col   | Specify first column number to list. Column numbering begins with 0, not 1.",
"			last col  | Specify last column number to list.",
"			briefly   | Specify top <i>n</i> and bottom <i>n</i> rows to list, skipping the ones in the middle (if any left).",
"			==="
 ]
			
		},
		{ "Number": "3., 5., ...",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			This is the value associated to the option in the previous function parameter.<br>",
"			__Negative indexing__ is supported for specifying rows (-1 = last row) and columns (-1 = last column acc. to widest row in the whole table)."
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table load ( t, \"Examples\\Cities.csv\" );",
"",
"	// Begin with row 2, skip last 3 columns, and for the rows to list, list only the first and last 3 of them.",
"	table list ( t, 1st row, 2, briefly, 3, last col, -3 );"
 ]
	,
	"Output": "automatic",
	"See also": [ "view" ]
},




"view" :
{
	"Function Names":	[ "view" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function provides a more elaborate approach to view tables than the function __table list(__) which is just outputting some or all",
"		rows and columns of the table to the console.  You have the choice to view and scan through the table in B4P (using the console) or",
"		the web browser.  For the web browser, you can view the table either in conventional manner (static HTML file) or as a browsable",
"		data table (Data table functionaltiy is craeted and provided by: SpryMedia Ltd, Scotland, MIT license).",
"",
"		<br><br>",
"		<u>Note</u>: Every time you view a table with this function, a copy of the table will be saved in the current working directory.",
"		The file name begins with \"_b4p_view... .html\" containing the table name.  The function __view reset(__) will do the clean-up by deleting all such files created.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a valid web browser name:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			Windows	| chrome, chrome datatables, edge, edge datatables, explorer, explorer datatables",
"			Linux   | chrome, chrome datatables, firefox, firefox datatables, brave, brave datatables",
"			MacOS   | brave, brave datatables, chrome, chrome datatables, firefox, firefox datatables, safari, safari datatabls",
"			All systems | here",
"			===",
"			<b>here</b> opens the table locally.",
"			All other options open the ",
""
 ]
			
		}

	],
"Examples:'view' entered in interactive mode" : [
">> table load( cities, Examples\\Cities.csv )",
"",
"    Loaded CSV/TSV file 'Examples\\Cities.csv':",
"    15 rows, max 8 columns, 8 columns in 1st row, 120 fields, list separator: ;",
"",
">> view ( cities, here )",
"000000: City          State / Province Country Inhabitants Famous attraction",
"        ------------- ---------------- ------- ----------- ------------------",
"000001: New York City New York         USA     8300000     St. of Liberty",
"000002: Washington    D.C.             USA     650000      Lincoln Statue",
"000003: Philadelphia  Pennsylvania     USA     1500000     Independence hall",
"000004: Boston        Massachusetts    USA     620000      Freedom trail",
"000005: San Francisco California       USA     805000      Golden Gate",
"000006: Montréal      Quebec           CAN     1700000     Hôtel du Parlement",
"000007: Copenhagen    Hovedstaten      DAN     580000      Little Mermaid",
"000008: Venice        Venetia          ITA     260000      Doge's Palace",
"000009: Los Angeles   California       USA     3800000     Hollywood",
"000010: Vienna                         AUT     1800000     Prater",
"_______________________________________________________________________________",
"Action ([?] for help):  ?",
"Navigation: l = Left,      r = Right       u = Page Up   d = Page Down   s = Search next",
"            L = 1st Col.   R = Last Col.   U = Top       D = Bottom      S = Search",
"            n = 1 column  narrower         w = 1 column wider            c = ClS on/off",
"            N = 5 columns narrower         W = 5 columns wider",
"            X = Change Screen Width        P = Change Page Height",
"",
"            Q = Quit",
"",
"Procedure call  :  view ( table name [, chars per row [, rows to show]] )",
"            e.g.:  view ( my table, 160, 20 ) // My table, 160 chars, 20 rows to show",
"",
"_______________________________________________________________________________",
"Action ([?] for help):  r",
"000000: State / Province Country Inhabitants Famous attraction  Alt. (m)",
"        ---------------- ------- ----------- ------------------ --------",
"000001: New York         USA     8300000     St. of Liberty     10",
"000002: D.C.             USA     650000      Lincoln Statue     7",
"000003: Pennsylvania     USA     1500000     Independence hall  12",
"000004: Massachusetts    USA     620000      Freedom trail      43",
"000005: California       USA     805000      Golden Gate        16",
"000006: Quebec           CAN     1700000     Hôtel du Parlement",
"000007: Hovedstaten      DAN     580000      Little Mermaid     24",
"000008: Venetia          ITA     260000      Doge's Palace      1",
"000009: California       USA     3800000     Hollywood          100",
"000010:                  AUT     1800000     Prater",
"_______________________________________________________________________________",
"Action ([?] for help):  q",
">>"
 ]
	,
	"See also": [ "table list", "view reset" ]
},



"view reset" :
{
	"Function Names":	[ "view reset" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
"Description" : [
"		This function deletes all temporary HTML files beginning with \"_b4p_view... .html\".",
"		These files are create by the __view(__) command when viewing B4P tables using web browsers.  It is advised to use this ",
"		function in __interactive__ mode only."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"See also": [ "view"]
}






,



"directory create temp" :
{
	"Function Names":	[ "directory create temp" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
"Description" : [
"",
"		This function will create a dedicated temporary directory, located as a subdirectory where all othe other temp files ",
"		are located in your system.  Under Windows, the new directory is created in <b>C:\\Users\\Zur Bonsen Georg\\AppData\\Local\\Temp\\b4p\\B4P_XXXXXX\\</b>",
"		where XXXXXX stands for six random capital letters. Under Linux and MacOS, the new directory is created in <b>/tmp/b4p/B4P_XXXXXX/</b>.",
"",
"		<br><br>",
"		<u>Advice</u>: It is recommended to remove that directory including all contents when you are done using it.  Do not count on referring to that",
"		directory in a later B4P session and do not use it to store your valuable data for later use.  The temp directory is likely cleaned up in regular time intervals.",
""
 ]
	,
	"Call as":		"function",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Return value":
	[
		{ "Name": "Path name",
		  "Types": [ "literal" ],
"Description" : [
"			This is the full path name to the directory name just created.  A directory separator symbol (slash or backslash) has already been added at the end."
 ]
			
		}
	],
"Examples" : [
"	include ( Utility Library );",
"	dir[] = directory create temp();",
"	echo(\"Created temp directory '\", dir[], \"'.\");",
"",
"	// Do something",
"	table initialize ( little table, { Name, Andy, Beata, Charly, Daniela } );",
"	table save( little table, dir[] + \"Little Table.csv\"  );",
"",
"	// pause; // Remove comment symbols so you can look where the file has been saved.",
"",
"	directory delete recursive( dir[] ); // Clean up: Remove the temp directory"
 ]
	,
	"Output": "automatic",
	"See also": [ "directory create", "directory delete recursive" ]
},



"choose recent file" :
{
	"Function Names":	[ "choose recent file" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
"Description" : [
"",
"		This function will either identify the <i>most recent file</i> according to a specified ordering criteria.",
""
 ]
	,
	"Call as":		"function",
	"Parameter count":	"5",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Prompt text",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A prompt text is needed if the count (provided in the last function parameter) is not 1.",
"			The prompt will be displayed if needed so you can select from of the <i>n</i> recent files displayed."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify the path name to the directory where the files to be searched are located.  No wildcards are supported here."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "File name pattern to match",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify file name pattern where the file name part may contain wildcard symbols such as",
"			'*' and '?'. The pattern will be used to obtain a listing of matching files which will then be prioritzed",
"			by the ordering criteria.  Exammple: \"b4p*.txt\" covers all files beginning wtih \"b4p\" and ending with file type \".txt\"."
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Ordering criteria",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			One of the following values apply:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			oldest	| Selects the oldest file or list <i>n</i> (count) oldest files you can choose from.",
"			newest	| Selects the newest file or list <i>n</i> (count) newest files you can choose from.",
"			first	| Selects the first file or list the first <i>n</i> (count) files in alphabetical order you can choose from.",
"			last	| Selects the last file or list the last <i>n</i> (count) files in alphabetical order you can choose from.",
"			biggest	| Selects the biggest file (file size) or list the <i>n</i> biggest files you can choose from.7",
"			smallest| Selects the smallest file (file size) or list the <i>n</i> smallest files you can choose from.7",
"			==="
 ]
			
		},
		{ "Number": "5.",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Valid range: 1-35<br>",
"			If 1 is chosen, then no menu will be displayed because the first match according to the prioritization (e.g. newest file) is returned."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Identified file name",
		  "Types": [ "literal" ],
"Description" : [
"			The file name contains no directory path.  If no file has been found, then a blank string is returned."
 ]
			
		}
	],
	"Exceptions": "If no file is found, and verbose level is not 'quiet', then an error message will warn you about no files found.  You have the choice to stop or continue",
"Examples" : [
"	a[] = choose recent file( \"\", \"Examples\\\", \"*table*.b4p\", first, 1 ); // No user interaction",
"	echo(\"First file in alphabetic order containing 'table' is \", a[] );",
"",
"	a[] = choose recent file( \"\", \"Examples\\\", \"*table*.b4p\", last, 1 ); // No user interactino",
"	echo(\"First file in alphabetic order containing 'table' is \", a[] );",
"",
"	a[] = choose recent file( \"Please choose one of the newest files: \", \"Examples\\\", \"*.b4p\", newest, 5 );",
"",
"	echo(\"Chosen file is: \", a[] );"
 ]
	,
"Output" : [
"	savecode",
"First file in alphabetic order containing 'table' is REF_Features_Table_columns.b4p",
"First file in alphabetic order containing 'table' is REF_Function_with_table.b4p",
"Found 382 files.",
"",
"Please choose one of the newest files:",
"     1 :  REF_Function_variable_to_json.b4p         (2020-10- 3 17:57:34      0 kB)",
"     2 :  REF_Function_vertical.b4p                 (2020-10- 3 17:57:34      0 kB)",
"     3 :  REF_Function_week.b4p                     (2020-10- 3 17:57:34      0 kB)",
"     4 :  REF_Function_weekday.b4p                  (2020-10- 3 17:57:34      0 kB)",
"     5 :  REF_Function_while.b4p                    (2020-10- 3 17:57:34      0 kB)",
"Please select: 3",
"Chosen file is: REF_Function_week.b4p"
 ]
	,
	"See also": "directory listing"
},







"abbreviate name" :
{
	"Function Names":	[ "abbreviate name" ],
	"Documentation":	"Function Description",
	"Library":		"Utility Library",
"Description" : [
"		This function abbreviates names.  The abbreviation contains the first letters of the first, all middle and",
"		last names.  Multiple letters will be included for following sequences:<br>",
"		<b>Ch, Gh, Ll, Ph, Rh, Sch, Sh, Sp, St, Th, Zh</b>"
 ]
	,
	"Call as":		"function",
	"Parameter count":	"1",
	"Restrictions":		"Under normal conditions, the 'Utility Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name to abbreviate",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
	"Return value":
	[
		{ "Name": "Abbreviation",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"	include ( Utility Library );",
"	echo( abbreviate name( \"John Adams\" ) );	",
"	echo( abbreviate name( \"John F. Kennedy\" ) );	",
"	echo( abbreviate name( \"Ludwig van Beethoven\" ) );",
"	echo( abbreviate name( \"Sherlock Holmes\" ) );"
 ]
	,
	"Output": "automatic"
}


,


"zip compress" :
{
	"Function Names":	[ "zip compress" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"",
"		This function compresses a file or directory with all the contents into a ZIP file."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-3",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Source path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			A dedicated archive file name is required if the 1st parameter does not specifcy a dedicated file or directory (with files inside), but to",
"			multiple files or directories (using wildcard symbols)."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Archive format",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			One of the following: <b>zip</b> and <b>7z<b> (latter applies for 7-Zip and is supported under Windows only. Will be rejected under other operating systems\")."
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\Cities.csv\" );",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"",
"		a[] = search files( \"*.zip\" );",
"		echo(\"Found following ZIP files: \", a[]);",
"",
"		zip extract all( \"All csv.zip\" );",
"",
"		echo(\"List the extracted contents from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"All csv\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"All csv\" );",
"		file delete( \"All csv.zip\" );",
"		file delete( \"Cities.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract files", "zip extract all" ]
},


"zip extract files" :
{
	"Function Names":	[ "zip extract files" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"",
"		This function extracts one or more files from the ZIP file.",
"		No exceptions are asserted in case a specified file has not been found in the archive.  If needed, check If the extracted file is existing after calling this function.",
""
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "2.",
		  "Name": "Content file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Specify all files to extract:",
"			* Use literal type to specify 1 file.",
"			* Use aparameter set to specify multiple files",
"			* Alternatively use softquoted literal (with single quotation marks) with file names spearated by comam to specify multiple files."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Target directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "(current working directory)",
"Description" : [
"			Specify the directory where the extracted files shall be copied to. "
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"		zip extract files( \"All csv.zip\", \"Examples\\Cities.csv\", \"My Dir\" );",
"",
"		echo(\"List the extracted file from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"My Dir\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"My Dir\" );",
"		file delete( \"All csv.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract all", "zip compress" ]
},

"zip extract all" :
{
	"Function Names":	[ "zip extract all" ],
	"Documentation":	"Function Description",
	"Library":		"Zip Library",
"Description" : [
"		Extracts the whole archive and stores the contents in a dedicated directory.",
"		The directory structure depicted in the archive will be used to build up the necessary structure in the target directory."
 ]
	,
	"Call as":		"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Under normal conditions, the 'Zip Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Archive file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Choice of file or directory name.  If directory name is chosen, then the whole directory with all contents will be compressed.",
"			__Wildcards__ e.g. (pictures\\*.jpg)  are allowed. In this case, 2nd parameter (Archive file name) is also required to provide a concrete archive name."
 ]
			
		},
		{ "Number": "Opt. 2.",
		  "Name": "Target directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "(current working directory)",
"Description" : [
"			Specify the directory where the extracted files shall be copied to. "
 ]
			
		}
	],
"Examples" : [
"		include( Support Library );",
"		include( Zip Library );",
"",
"		zip compress( \"Examples\\*.csv\", \"All csv.zip\" );",
"		zip extract all( \"All csv.zip\", \"My Dir\" );",
"",
"		echo(\"List the extracted file from 'All csv.zip':\", new line);",
"		directory listing recursive( d, \"My Dir\" );",
"		table keep columns( d, 'Path,Name,Date Created,Directory,Size' );",
"		table list( d );",
"",
"		directory delete recursive ( \"\", \"My Dir\" );",
"		file delete( \"All csv.zip\" );"
 ]
	,
	"Output": "automatic",
	"See also": [ "zip extract files", "zip compress" ]
}





,

"null - Function" :
{
	"Function Names":		"null",
	"Documentation":		"Function Description",
	"Keywords":				"null function",
	"Synopsis": 			[ "null ( parameters ... );" ],

"Description" : [
"		This function does nothing, but is otherwise useful: ",
"		* As it accepts any number and type of parameters, it is automatically used as a placeholder function in case the original function name is not found but the code should not run (e.g. false condition inside an if(…) block).",
"		* Temporary placeholder for any other function to choose",
"		* Easy way to get obtain a 'void' value if needed.",
"		* Hidden to the programmer, it is used to parse over user-defined functions fast and efficiently.",
""
 ]
		 ,

	"Call as":				"procedure or function",
	"Restrictions":			"No indirect parameter passing",
	"Parameter count"	:	"min. 0",
	"Parameters" : [
		{   "Number":		"Any",
			"Name" :		"Parameter",
			"Direction" :	"input",
			"Types" :		"all types" ,
			"Description" : ["Any valid and invalid parameters.  They will be ignored."]
		}
	],
"Examples"  : [
"		null;				// No effect",
"		null (a, 1, true);		// No effect",
"		echo( null( ) );		// Outputs '# void value #'",
"		echo( null( a, 1, true ) );	// Outputs '# void value #'"
 ]
		 ,
	"Output" :		"automatic"

}

,

  "switch, check" :
  {
	"Function Names":	[ "switch", "check" ],
	"Keywords":			[ "alternative execution of code blocks" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "switch/check ( expression ) { case ( comparison expression ) statement; case ...  [ else : statement; ]", 
						  "switch/check ( expression ) { case ( comparison expression ) { statements }; case ...  [ else { statements } ]"	],
"Description" : [
"			The <b>switch</b> function allows to execute exactly one code block among alternatives where the condition is met.<br/>",
"			The <b>check</b> function allows to execute multiple code blocks wherever the conditions are met.",
"			The subsequent block may consist of a combination of <b>case</b> statements as well as <b>else</b>.  The statement(s) after",
"			<b>else</b> will be executed if none of the cases were executed.",
"			Following the <b>else</b>, additional <b>case</b> statements are allowed to do another comparison round.<br/>",
"			"
 ]
			,
	"Call as":			"procedure",
	"Restrictions":		"No indirect parameter passing",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Expression",
		  "Direction": "input",
		  "Types": [ "all types" ],
		  "Description":
			[ "The value provided here will be calculated once and then compared in the subsequent <b>case</b> procedures." ]
		}

	],
"Examples" : [
"		echo(\"Try 'switch:'\");",
"		for (a[] = 1, a[] <= 6, a[]++)",
"		{",
"			print ( \"  \",a[], \": \" );",
"			switch( a [] )",
"			{",
"				case (>1)   print(\"Greater than 1;   \");",
"				case (<>3)  print(\"Not equal to 3;   \");",
"				case (4,6)  print(\"Equals to 4 and 6;   \");",
"				else:       print (\"Not matching;  \");	// else will also enable another case round",
"				case (>2)   print (\"Greater than 2;  \");",
"				else:       print (\"Else: at most 2;  \");",
"				else: echo (\"Done\");",
"			}",
"		}",
"",
"		echo(\"Try 'check':\");",
"		for (a[] = 1, a[] <= 6, a[]++)",
"		{",
"			print ( \"  \",a[], \": \" );",
"			check( a [] )",
"			{",
"				case (>1)   print(\"Greater than 1;   \");",
"				case (<>3)  print(\"Not equal to 3;   \");",
"				case (4,6)  print(\"Equals to 4 and 6;   \");",
"				else:       print (\"Not matching;  \");	// else will also enable another case round",
"				case (>2)   print (\"Greater than 2;  \");",
"				else:       print (\"Else: at most 2;  \");",
"				else: echo (\"Done\");",
"			}",
"		}"
 ]
	 ,
	"Output": "automatic",
	"See also":	[ "case" ]
  },
  "case" :
  {
	"Function Names":	[ "case" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "switch/check ( expression ) { case ( comparison expression ) statement; case ...  [ else : statement; ]",
						  "switch/check ( expression ) { case ( comparison expression ) { statements }; case ...  [ else { statements } ]"	],
	"Description":		[ "See <b>switch</b> and <b>check</b> function for detail." ],
	"Call as":			"procedure",
	"Restrictions":		"No indirect parameter passing",
	"Parameter count":	"1",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Values to compare with",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
"Description" : [
"			This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__.",
"			<br><br>",
"			<u>Attention</u>: To avoid hijacking further function parameters as additional values to be compared, put the expression into parentheses",
"			if no operators, = or <> have been used.  Not an issue if <, >, == or != operators are used."
 ]
		  
	  }
	],
	"Examples":		"See example in switch and case statements",
	"See also":	[ "switch", "check" ],
	"Notes":		"Do not confuse syntax with C/C++! 'case' is always written with values inside parentheses and without colon behind"
  }



,

"once" :
{
	"Function Names":		"once",
	"Documentation":		"Function Description",
	"Keywords":				"one-time execution",
	"Synopsis": 			[ "once { statements; } else { statements }", "once () statement; else: statement", "once () { statements; }" ],

"Description" : [
"		Executes the following statement or block only for the first time and once.",
"		Further executions of this function will skip that code. This feature is very",
"		useful for repeated invocations of code (with <b>start()</b> or <b>include()</b>) or user defined",
"		functions and procedures where specific code should executed only once during the first invocation,",
"		e.g. blocks where variables are initialized and functions being defined.",
""
 ]
		 ,

	"Call as":				"procedure",
	"Restrictions":			"No indirect parameter passing",
	"Parameter count":		"0",
"Examples"  : [
"	define procedure ( hi )",
"	{",
"		once()",
"			echo(Hey folks);",
"		else: ",
"			echo(Good bye);",
"	}",
"",
"	// Main program part: Call 'hi' three times:",
"",
"	hi;",
"	hi;",
"	hi;"
 ]
	 ,
	"Output" : "automatic"

}

,

"else" :
{
	"Documentation":	"General Description", // Required value
		"Feature Names" : ["else"] ,
"Description 01:Introduction" : [
"",
"		In contrast other names such as __if(__), __while(__), etc. which are control flow functions, <b>else</b> is one of the very few __reserved keywords__.",
"		<b>else</b> is used in combination with following functions:",
"		* __if(__): Used to run the statement or block if the condition inside __if(__) is false.",
"		* __once(__): Used to run the statement or block if the condition inside __once(__) is false, i.e. it is the 2nd or further time __once(__) is encountered.",
"		* __switch(__): As default alternative to __case(__) to cover all remaining case possibilities",
"		* __check(__): Same as above",
"",
"",
"		If a code block with <b>{ ... }</b> follows the else keyword, then you can formulate it like in a C/C++ or Java program.  However if a single statement follows",
"		the <b>else</b> keyword, then you need to add a colon (<b>:</b>) to separate the 'else' from the following statement, otherwise it would cause some misinterpretations."
 ]
		,
"Examples 01:" : [
"",
"	define procedure ( else echo, {{ contents, all }} )",
"	{",
"		echo(\"Haha! Cought you!!  You tried to output \", contents[]);",
"	}",
"",
"	define procedure( test 1, {{ value, numeral }} )",
"	{",
"		if (value[] = 5)",
"		{",
"			echo(five);",
"		}",
"		else: echo(not five); // This is the right formulation",
"	}",
"",
"	define procedure( test 2, {{ value, numeral }} )",
"	{",
"		if (value[] = 5)",
"		{",
"			echo(five);",
"		}",
"		else echo(value[]); // Oops! Forgot the colon. Calling 'else echo' as procedure.",
"	}",
"",
"	test 1 ( 5 );",
"	test 1 ( 6 );",
"	test 2 ( 5 ); // Watch the output",
"	test 2 ( 6 ); // Watch the output, too"
 ]
		,
	"Output 01:": "automatic",
	"See also": [ "if", "once", "switch", "check", "case" ]
}

,

  "if, unless" :
  {
	"Function Names":	[ "if", "unless" ],
	"Documentation":	"Function Description",
	"Keywords":			[ "conditional branches" ],
	"Synopsis":			[ "if/unless (expression) { statements } [ else { statements } ]", "if/unless (expression) statement; else : statement" ],
	"Description":		"Executes statement or block after function name if parameter is true (for <b>if</b>) or false (for <b>unless</b>).",
	"Call as":			"procedure",
	"Restrictions":		"No indirect parameter passing",
	"OS differences":	"None",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Boolean expression",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":
			[ "If the expression is <i>true</i>, then the following statement or block will be executed.  Otherwise, it will be skipped." ],
		  "Default value": "n/a"
		}

	],
	"Exceptions":	"none",
"Examples" : [
"	for (a[] = 0, a[] <= 6, a[]++)",
"	{",
"		if     ( even(a[])) echo(a[], \" is even\" );",
"		unless ( a[] < 5  ) echo(a[], \" is not smaller than 5\" );",
"		else:  echo (a[], \" is smaller than 5\");",
"	}"
 ]
	 ,
	"Output": "automatic"
  },

  "while, until" :
  {

	"Function Names":	[ "while", "until" ],

	"Keywords":			"Loops",
	"Documentation":	"Function Description",
	"Synopsis":			[ "while (...) {...}", "until (...) {...}" ],
	"Description": 		"Repeats executing statement or block after function name while parameter is true (for <b>while</b>) or false (for <b>until</b>).",
	"Call as":			"procedure",
	"Restrictions":		"No indirect parameter passing",
	"OS differences":	"None",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Boolean expression",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":
			[ "If the expression is <i>true</i>, then the following statement or block will be executed.  Otherwise, it will be skipped." ],
		  "Default value": "n/a"
		}

	],
	"Exceptions":	"none",
"Examples"  : [
"    a[] = 0;",
"    while ( a[]++ < 10)  print( a[], ' ' );",
"    until ( a[]-- <= 5)  print( a[], ' ' );",
"    echo;"
 ]
     , // End marker
    "Output": "automatic",
	"See also":	[ "do", "for" ]
  }


,

"do" :
{
	"Function Names":	"do",
	"Documentation":	"Function Description",
	"Keywords":			[ "do-loop" ],
	"Synopsis":			[ "do { statements } while ( expression );", "do { statements } until ( expression )" ],

"Description"  : [
"		The statement(s) behind the <b>do</b> function will be executed at least once.",
"		The subsquent <b>while</b> and <b>until</b> functions will check whether to repeat executing the statements or not.",
""
 ]
	 ,
	"Call as":		"procedure",
	"Parameter count":	"0",

"Examples"  : [
"	a[] = 0;",
"	do { print( a[], ' ' ); } while ( a[]++ < 10);",
"	do { print( a[], ' ' ); } while ( a[]++ < 10); // Loop runs at least once more.",
"	echo;"
 ]
	 ,
	"Output": "automatic",
	"See also":	[ "while", "until" ]
  }


,

"for" :
{
	"Function Names":	"for",
	"Documentation":	"Function Description",
	"Keywords":			"for-loop",
	"Synopsis": 	    [ "for ( init statement, condition expression, loop statement ) statements;" , "for ( start statement, condition, next statement ) { statements; }" ],
"Description" : [
"		Repeated execution of statements inside a for-loop.  First, the <i>init statement</i> is executed and the <i>condition expression</i> is checked. ",
"		If this expression returns <i>true</i>, then the statements inside the loop will be executed.  The <i>loop statement</i> will be executed afterwards,",
"		following checking the </i>condition expression</i> again.  If the expression is <i>false</i>, then loop execution has finishe.",
"	"
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions":	"No indirect parameter passing",
	"Parameter count":	"3",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"init statement",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
		 "Description": "Will be executed once when the loop begins.  Useful to initialize loop counters."
	  },
	  {
		 "Number":		"2",
		 "Name":		"condition expression",
		 "Direction":	"code",
		 "Types":		["expression", ":literal"],
		 "Description": "Will be calculated before every loop round.  The statements in the loop will be executed if this value is <i>true</i>."
	  },
	  {
		 "Number":		"3",
		 "Name":		"loop statement",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
		 "Description": "Will be calculated after every loop round and before the <i>condition expression</i> is checked again."
	  }
	],
"Examples" : [
"		for (a[] = 3, a[] < 15, a[]+=2)",
"		{",
"			print(a[],' ');",
"			if (a[]==9) a[]++; // Increment to 10",
"		}",
""
 ]
		 ,
	"Output" : "automatic",
	"See also":	[ "while", "until", "do" ],
"Notes" : [
"		Do not confuse syntax with C/C++! The 3 parameters are separated with commas and not semicolons.  ",
"		You are allowed to add multiple statements into the 1st and 3rd parameter where these statements are separated with semicolons.\""
 ]
		
 }


,

"for all parameters" :
{
	"Function Names":		[ "for all parameters" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through parameter elements", "parameter set" ],
	"Synopsis": 			[ "for all parameters( parameter set value, iterator value, iterator counter ) statement; ",
							  "for all parameters( parameter set value, iterator value, iterator counter ) {statements; } "],
"Description" : [
"		The loop works through all elements in the parameter set provided in the 1st function parameter.",
"		If the parameter set is empty, then the loop will not be executed.  This loop will not step into nested parameter elements.",
""
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions":	"No indirect parameter passing",
	"Parameter count":	"2-3",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"parameters",
		 "Direction":	"input",
		 "Types": [ "parameter set", "literal" ],
"Description" : [
"			Elements in this parameter set will be provided.  ",
"			If a softquoted literal is provided, then the contents separated by commas are individual elements.",
"			If the literal is a quoted one, then it will be treated as one element.",
"			Empty parameter sets (and literal: '') make the loop skip."
 ]
			
	  },
	  {
		 "Number":		"2",
		 "Name":		"iterator value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function in order to provide the value of the current parameter element.  It is a copied value.  Modifying this variable will not influence the loop"
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples" : [
"		for all parameters( { He, Hi, Ho }, greetings[] ) print( \"   Say: \",greetings[]);",
"		echo;",
"		for all parameters( 'He,Hi,Ho', greetings[] )     print( \"   Say: \",greetings[]);",
"		echo;",
"		for all parameters( \"He,Hi,Ho\", greetings[] )     print( \"   Say: \",greetings[]);",
"		echo;",
"		a[] = {A..C};",
"		for all parameters( a[], greetings[], i[] )     print( \"   Say: \", i[], \":\", greetings[]);",
""
 ]
	 ,
	"Output":		"automatic", 
	"See also":		[ "for all variables" ],
"Notes" : [
"	",
"<b>Manipulation while inside the loop:</b><br/>",
"1. The iterator cannot be manipulated.  It will be overwritten at the next loop round.<br/>",
"2. If the iterator is deleted inside the loop, it will be reinstated at the next loop round. This applies to all loop variables.<br/>",
"3. If the target variable name is deleted, or its members are deleted / added, then the loop will end.  If some of the members are removed, it will have an impact such as fewer loop cycles.  Since the members are sorted in alphabetical order, the whole list of members may shift accordingly.  Therefore I recommend not to manipulate this variable while inside the loop.",
"Inside the loop: If the affected variable is deleted or a member variables removed, then the loop will do a premature end.",
""
 ]
	
}


,

"for all variables" :
{
	"Function Names":		[ "for all variables", "for all variables if existing", "for all variables if existing and valid" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through variables" ],
	"Synopsis": 			[ "for all variables ... ( base variable name, member variable value, iterator counter, member variable name  ) statement; ",
							  "for all variables ... ( base variable name, member variable value, iterator counter, member variable name  ) {statements; } "],
"Description" : [
"		The loop works through all direct member variables specified in the base variable provided in the 1st parameter.<br/><br/>",
"		The base variable provided may either be an array or a structure.",
"		The loop will be skipped if the specified variable has no members.",
"		The loop will not step into nested variable sub-members.",
"		The function <b>for all variables if existing</b> will not assert an exception if the base variable has not been defined and will also skip the loop.<br>",
"		The function <b>for all variables if existing and valid </b> works similar to the function above, but skips all variables containing <b>void</b> values.",
""
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions":	"No indirect parameter passing",
	"Parameter count":	"2-4",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"base variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			The loop will be executed if the variable is either a structure or an array containing members."
 ]
			
	  },
	  {
		 "Number":		"2",
		 "Name":		"member variable value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function in order to provide the value of the current variable.  It is a copied value.  Modifying this variable will not influence the loop"
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"member variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			If the base variable is a structure, then this variable is updated with the name of the member variable.  However, if it is an array, ",
"			then the value \"# Array Member #\" will be assigned.  This fourth parameter is not meaningful for running through arrays."
 ]
		
	  }
	],
"Examples" : [
"	structure( a[], { Animal, Plant, Alien, Nothing }, { Ape, Tulip, Chewbacca, null() } );",
"",
"	echo(new line, \"Output all structure members: \");",
"	for all variables( a[], value[], i[] , name[])",
"	{",
"	    echo( i[],\": \", name[],\" = \", value[] );",
"	}",
"",
"	echo(new line, \"Output all valid structure members: \");",
"	for all variables if existing and valid( a[], value[], i[] , name[])",
"	{",
"	    echo( i[],\": \", name[],\" = \", value[] );",
"	}",
"",
"	array( a[], { Charles, Dave, Abel, null(), Paul, Birgit, } ); // One void value inside",
"",
"	echo(new line, \"Output all array members: \");",
"	for all variables( a[], value[], i[] , name[])",
"	{",
"	    echo( i[],\": \", name[],\" = \", value[] );",
"	}",
"",
"	echo(new line, \"Output all valid array members: \");",
"	for all variables if existing and valid( a[], value[], i[] , name[])",
"	{",
"	    echo( i[],\": \", name[],\" = \", value[] );",
"	}",
"",
"	echo(new line, \"Attempt to output a non-existing variable: \");",
"	for all variables if existing and valid( nonexising name[], value[], i[] , name[])",
"	{",
"	    echo( i[],\": \", name[],\" = \", value[] );  // Nothing listed.",
"	}",
"",
"	echo(new line, \"Output array members with few of them defined: \");",
"",
"	a[1] = 33;",
"	a[9] = Hello;",
"	a[20] = 1;",
"	a[40] = true;",
"	a[2] = null();",
"",
"	for all variables if existing and valid( a[], val[], cnt[] )",
"	{",
"	    echo( cnt[],\": \", val[] );  // Only valid values listed.",
"	}"
 ]
	 ,
	"Output":		"automatic",
	"See also":		[ "for all parameters" ],
"Notes" : [
"",
"<b>Manipulation while inside the loop:</b><br/>",
"1. The iterator cannot be manipulated.  It will be overwritten at the next loop round.<br/>",
"2. If the iterator is deleted inside the loop, it will be reinstated at the next loop round. This applies to all loop variables.<br/>",
"3. If the target variable name is deleted, or its members are deleted / added, then the loop will end.  If some of the members are removed, it will have an impact such as fewer loop cycles.  Since the members are sorted in alphabetical order, the whole list of members may shift accordingly.  Therefore I recommend not to manipulate this variable while inside the loop.",
"Inside the loop: If the affected variable is deleted or a member variables removed, then the loop will do a premature end.",
""
 ]
	
}


,

"for all table columns" :
{
	"Function Names":		[ "for all table columns" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through table columns" ],
	"Synopsis": 			[ "for all table columns ( table name, reference row number, iterator value, iterator counter  ) statement; ",
							  "for all table columns ( table name, reference row number, iterator value, iterator counter  ) {statements; } "],
"Description" : [
"		The loops works through all columns in the table specified and executes the following statements specified."
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
	"Parameter count":	"1-4",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"table name",
		 "Direction":	"input",
		 "Types": [ "literal" ],
		 "Description": "Name of existing table"
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"reference row number",
		 "Direction":	"input",
		 "Types": [ "numeral" ],
		 "Default value": "0",
"Description" : [
"			Positive values must be between 0 and number of table rows minus 1.",
"",
"			<br><br>",
"",
"			Negative values allow addressing the last row upwards: -1 = last row, -2 = next row above.",
"			The negative number must not be smaller than the negated number of rows.",
""
 ]
		 
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"iterator value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			This variable is updated by this function in order to provide the current value taken from the specified table column and referenced row.  ",
"			The interator value can also be referenced with the partial table reference <b>[.]</b>, meaning specified row and current column.  Here, the 'quoted literal' rule specified above does not apply."
 ]
			
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			This variable is updated by this function in order to provide the current value taken from the specified table column and referenced row.",
"			The variable is always of type 'quoted literal', even if containing numbers or dates.  You need to convert the type by hand if needed."
 ]
			
	  }
	],
"Examples" : [
"	table initialize( animals,",
"		{{ Name, Class, Number of Legs},",
"		 { Dog, Mammal, 4 }, { Snake, Reptile, 0 }, { Human, Mammal, 2 }} );",
"",
"	for all table columns( animals, 2, value[], i[] )",
"	{",
"		echo( i[],\". \", [i[],0], \": \", value[] );",
"	}",
"",
"	echo; // You can also use the current column number known in the partial table context:",
"		  // [.] = Current table, column and row.  [.,0] = Current table, column and row 0",
"		  // Also allowed: ['.'], ['<.'] where then 2nd one refers 1 column to the left.",
"",
"	for all table columns( animals, 2 ) // A bit simpler",
"	{",
"		echo( [.,0], \": \", [.] );",
"	}",
"",
"	echo;",
"",
"	for all table columns( animals ) // Same output as above (row 0 assumed as default)",
"	{",
"		echo( [.], \": \", [.,2] );",
"	}"
 ]
	 ,
	"Output":		"automatic",
	"See also":		[ "for all current table columns", "for all table selected columns", "for all current table selected columns" ]
}

,

"for all current table columns" :
{
	"Function Names":		[ "for all current table columns" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through current table columns" ],
	"Synopsis": 			[ "for all current table columns ( iterator value, iterator counter  ) statement; ",
							  "for all current table columns ( iterator value, iterator counter  ) {statements; } "],
"Description" : [
"	",
"		The loops works through all columns in the table and row number provided in the current context and executes the following statements specified.<br/><br/>",
"",
"		Inside the loop, the iterator value (table cell read) and the index will be provided.",
"		The number of columns to process is determined by the 2nd function parameter (reference row number).",
"	"
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ must be enabled by a previously invoked procedure or function."] ,
	"Parameter count":	"0-2",
	"Parameters": [
	  {
		 "Number":		"Opt. 1",
		 "Name":		"iterator value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			This variable is updated by this function in order to provide the current value taken from the specified table column and referenced row.",
"			The variable is always of type 'quoted literal', even if containing numbers or dates.  You need to convert the type by hand if needed.",
"			The interator value can also be referenced with the partial table reference <b>[.]</b>, meaning specified row and current column.  Here, the 'quoted literal' rule specified above does not apply."
 ]
			
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples" : [
"	table initialize( animals,",
"		{{ Name, Class, Number of Legs},",
"		 { Dog, Mammal, 4 }, { Snake, Reptile, 0 }, { Human, Mammal, 2 }} );",
"",
"	with table ( animals, 1 )",
"		for all current table columns( value[], i[] )",
"		{",
"			echo( i[],\". \", [i[],0], \": \", value[] );",
"		}",
"",
"	echo(new line, \"Example with 0 parameters in 'for all current table columns':\", new line);",
"	// [.] = Current column and row, [.,0] = Current column from header row",
"",
"	table process ( animals,",
"		for all current table columns",
"		{",
"			echo( [.,0], \": \", [.] );",
"		}; echo; );"
 ]
	 ,
	"Output":		"automatic",
	"See also":		[ "for all table columns", "for all table selected columns", "for all current table selected columns" ]
}

,

"for all table selected columns" :
{
	"Function Names":		[ "for all table selected columns" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through table selected columns" ],

	"Synopsis": 			[ "for all table selected columns ( table name, comparison expression, reference row number, iterator column number, iterator value, iterator counter  ) statement; ",
							  "for all table selected columns ( table name, comparison expression, reference row number, iterator column number, iterator value, iterator counter  ) {statements; } "],
"Description" : [
"		The loops works through selected columns (where comparisons do match) in the table specified and executes the following statements specified.<br/><br/>",
""
 ]
	 ,
	"Call as":		"procedure",
		"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
	"Parameter count":	"2-6",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"table name",
		 "Direction":	"input",
		 "Types": [ "literal" ],
		 "Description": "Name of existing table"
	  },
	  {
		 "Number":		"2",
		 "Name":		"comparison expression",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
		 "Default value": "0",
"Description" : [
"		",
"			This expression is applied to compare the column header names, regardless of row number specified in the 2nd parameter.",
"			The checking is done once before the loop starts.  The loop behavior will not be affected if the header names are changed afterwards,",
"			for example renamed.  Attention to inserting and deleting columns: The loop has memorized the actual column numbers ",
"			(which will not change) and not the header names.",
"			<br><br>",
"			<u>Attention</u>: To avoid hijacking further function parameters as additional values to be compared, put the expression into parentheses",
"			if no operators, = or <> have been used.  Not an issue if <, >, == or != operators are used."
 ]
		 
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"reference row number",
		 "Direction":	"input",
		 "Types": [ "numeral" ],
"Description" : [
"			Positive values must be between 0 and number of table rows minus 1.",
"",
"			<br><br>",
"",
"			Negative values allow addressing the last row upwards: -1 = last row, -2 = next row above.",
"			The negative number must not be smaller than the negated number of rows.",
""
 ]
		 
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"iterator column number",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This value refers to the current column number"
	  },
	  {
		 "Number":		"Opt. 5",
		 "Name":		"iterator header name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This value refers to the current column header name"
	  },
	  {
		 "Number":		"Opt. 6",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples" : [
"	table initialize( animals,",
"		{{ Name, Class, Number of Legs,Surface},",
"		 { Dog, Mammal, 4, Hair }, { Snake, Reptile, 0, Skin }, { Parrot, Bird, 2, Feathers }} );",
"",
"	// Choose all columns with headers containing 's'. The list results for row 2.",
"",
"	for all table selected columns( animals, ('*s*'), 2, column[], header[], i[] ) // Leg count skipped",
"	{",
"		echo( i[],\": Column \", column[], \" (\", header[], \") = \", [column[]] );",
"	}",
"",
"	echo;",
"",
"	for all table selected columns( animals, ('*s*'), 2, column[]) // Leg count skipped",
"	{",
"		echo( \"Column \", column[], \" (\", [.,0], \") = \", [.] );",
"	}",
"",
"	echo;",
"",
"	for all table selected columns( animals, ('*s*') ) // Leg count skipped",
"	{",
"		echo( \" (\", [.], \") = \", [.,2] );",
"	}"
 ]
	 ,
	"Output":		"automatic",
	"See also":		[ "for all table columns", "for all current table columns", "for all current table selected columns" ]
}

,

"for all current table selected columns" :
{
	"Function Names":		[ "for all current table selected columns" ],
	"Documentation":		"Function Description",
	"Keywords":				[ "for-loop through table selected columns" ],
	"Synopsis": 			[ "for all table selected columns ( comparison expression, iterator column number, iterator value, iterator counter  ) statement; ",
							  "for all table selected columns ( comparison expression, iterator column number, iterator value, iterator counter  ) {statements; } "],
"Description" : [
"",
"		The loops works through selected columns (where comparisons do match) in the table and row number provided in the current context and executes the following statements specified.<br/><br/>",
"",
"		Inside the loop, the iterator value (table cell read) and the index will be provided.",
"		The number of columns to process is determined by the 2nd function parameter (reference row number).",
"",
""
 ]
	 ,
	"Call as":		"procedure",
	"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ must be enabled by a previously invoked procedure or function."] ,
	"Parameter count":	"2-4",
	"Parameters": [
	  {
		 "Number":		"1",
		 "Name":		"comparison expression",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
"Description" : [
"",
"			This expression is applied to compare the column header names, regardless of row number specified in the 2nd parameter.",
"			The checking is done once before the loop starts.  The loop behavior will not be affected if the header names are changed afterwards,",
"			for example renamed.  Attention to inserting and deleting columns: The loop has memorized the actual column numbers",
"			(which will not change) and not the header names.",
"",
"			<br><br>",
"			<u>Attention</u>: To avoid hijacking further function parameters as additional values to be compared, put the expression into parentheses",
"			if no operators, = or <> have been used.  Not an issue if <, >, == or != operators are used."
 ]
		 
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"iterator column number",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This value refers to the current column number"
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"iterator header name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This value refers to the current column header name"
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples" : [
"	table initialize( animals,",
"		{{ Name, Class, Number of Legs,Surface},",
"		 { Dog, Mammal, 4, Hair }, { Snake, Reptile, 0, Skin }, { Parrot, Bird, 2, Feathers }} );",
"",
"	// Choose all columns with headers containing 's'. The list results for row 2.",
"",
"	with table ( animals, 2 )",
"	{",
"	    for all current table selected columns( ('*s*'), column[], header[], i[] )",
"	    {",
"	    echo( column[],\": Column \", column[], \" (\", header[], \") = \", [column[]] );",
"	    }",
"	}",
"",
"	echo;",
"",
"	// The simplified approach: [.] = current table, row and column. [.,0] = current table, column, and row 0",
"",
"	with table ( animals, 2 )",
"	{",
"		for all current table selected columns('*s*')",
"	    {",
"	        echo( col(), \": Column (\", [.,0], \") = \", [.] );",
"	    }",
"	}"
 ]
	 ,
	"Output":		"automatic",
	"See also":		[ "for all table columns", "for all current table columns", "for all table selected columns" ]
}

,

"for all table rows" :
{
	"Documentation":		"Function Description", // Required value
	"Function Names" :		"for all table rows" ,
	"Keywords" :			["for-loop through table rows"] ,
    "Synopsis": 			[ "for all table rows ( table name, reference column, iterator value, iterator counter  ) statement; ",
							      "for all table rows ( table name, reference column, iterator value, iterator counter  ) {statements; } "],
"Description"  : [
"		This loop works through all rows (except the header row) in the table and executes the subsequent statements accordingly.",
"	"
 ]
		 ,
		"Call as"			: "procedure",
		"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
		"Parameter count"	: "3-4",
		"Parameters" : [
		{   "Number":		"1.",
			"Name" :		"Table Name",
			"Direction" :	"input",
			"Types" :		"literal" ,
			"Description" : ["Name of exsting table"]
        },
		{	"Number":		"2.",
			"Name" :		"Reference Column",
			"Direction" :	"input",
			"Types" :		"table columns" ,
			"Description" : ["Specify 1 column header name or 1 column number.  This column will be used to count the rows in the table and return the iterator value from every row."]
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"iterator value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			This variable is updated by this function in order to provide the current value taken from the specified table column and referenced row.",
"			The variable is always of type 'quoted literal', even if containing numbers or dates.  You need to convert the type by hand if needed."
 ]
			
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "Equivalent to current row number while working throuh the table.  This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples"  : [
"		table initialize ( colors, { { EN, FR }, { red, rouge }, { blue, blue }, { green, vert }, { yellow, jaune } } );",
"		for all table rows( colors, EN, value[], index[] )",
"		{",
"			echo( index, \": \", value[], \" / \", [FR] );",
"		}"
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	["table process", "for all table columns" ]

},

"for all table selected rows" :
{
	"Documentation":		"Function Description", // Required value
	"Function Names" :		"for all table selected rows" ,
	"Keywords" :			["for-loop through selected table rows"] ,
	"Synopsis": 			[ "for all table selected rows ( table name, reference column, iterator value, iterator counter  ) statement; ",
							  "for all table selected rows ( table name, reference column, iterator value, iterator counter  ) {statements; } "],
"Description"  : [
"		This loop works through all selected rows (except the header row) in the table and executes the subsequent statements accordingly.<br/><br/>",
"",
"		The selecction is done with the expression provided in the 2nd function parameter.  This expression is executed for every row in order",
"		to decide whether to run the following statements inside the loop or not.<br/><br/>.",
""
 ]
		 ,
		"Call as"			: "procedure",
		"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
		"Parameter count"	: "4-5",
		"Parameters" : [
		{   "Number":		"1.",
			"Name" :		"Table Name",
			"Direction" :	"input",
			"Types" :		"literal" ,
			"Description" : ["Name of exsting table"]
		},
		{	"Number":		"2.",
			"Name" :		"Reference Column",
			"Direction" :	"input",
			"Types" :		"table columns" ,
			"Description" : ["Specify 1 column header name or 1 column number.  This column will be used to count the rows in the table and return the iterator value from every row."]
	  },
		{   "Number":		"3.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description"  : [
"",
"				Specify the conditions or rules to selecte the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
	  {
		 "Number":		"Opt. 4",
		 "Name":		"iterator value",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
"Description" : [
"			This variable is updated by this function in order to provide the current value taken from the specified table column and referenced row.",
"			The variable is always of type 'quoted literal', even if containing numbers or dates.  You need to convert the type by hand if needed."
 ]
			
	  },
	  {
		 "Number":		"Opt. 5",
		 "Name":		"iterator counter",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "Equivalent to current row number while working throuh the table.  This variable is updated by this function and provdes the index. It always begins with 0 and continues with 1, 2, etc."
	  }
	],
"Examples"  : [
"		table initialize ( colors, { { EN, FR }, { red, rouge }, { blue, blue }, { green, vert }, { yellow, jaune } } );",
"		for all table selected rows( colors, EN, ([FR]='*e'), value[], index[] )",
"		{",
"			echo( index, \": \", value[], \" / \", [FR] ); // All French colors ending with 'e'",
"		}"
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	["table process selected rows", "for all table selected columns" ]

}


,

"with table" :
{
	"Documentation":		"Function Description", // Required value
	"Function Names" :		"with table" ,
	"Synopsis": 			[ "with table ( table name, row number ) statement; ",
						      "with table ( table name, row number ) {statements; } "],
"Description"  : [
"		This procedure enables __partial table specification__ in the subsequent code using the table name and current row number provide",
"		through the procedure parameters. ",
""
 ]
		 ,
		"Call as"			: "procedure",
		"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
		"Parameter count"	: "2",
		"Parameters" : [
		{   "Number":		"1.",
			"Name" :		"Table Name",
			"Direction" :	"input",
			"Types" :		"literal" ,
			"Description" : ["Name of exsting table"]
		},
		{	"Number":		"2.",
			"Name" :		"Row Number",
			"Direction" :	"input",
			"Types" :		"numeral" ,
			"Description" : ["Row number to apply apply"]
	  }
	  
	],
"Examples"  : [
"		table initialize ( colors, { { EN, FR }, { red, rouge }, { blue, blue }, { green, vert }, { yellow, jaune } } );",
"",
"		with table ( colors, 2 )",
"		{",
"			echo( row(), \": \", [EN],\" / \", [FR] );",
"		}",
"		// Without the context, the full table specification is requierd, see below",
"		echo( \"2: \", [colors:EN,2],\" / \", [colors:FR,2] );"
 ]
		 ,
	"Output" :		"automatic",
"Examples 01:Specify the columns as well" : [
"	table load( cities, \"Examples\\cities.csv\" );",
"",
"	for (a[]=1, a[]<=4, a[]++)",
"	    with table( cities, 2, a[]  )",
"	    {",
"	        echo(\"Header  : \", [.,0], new line, \"Contents: \", [.], new line );",
"	    }"
 ]
	,
	"Output 02":	"automatic",
	"See also" :	["row", "for all table rows", "table process" ]

}

,


"break, continue" :
{
	"Documentation":		"Function Description", // Required value
	"Function Names" :		[ "break case" ,"continue case" ,"continue with next case" ,"break loop" ,"continue loop" ,"break" ,"continue" ],
	"Synopsis": 			[ "break...; ",
							  "continue... ;"],
"Description"  : [
"		The influence the control flow inside loops (including <b>do</b>, <b>while</b>, <b>until</b>, <b>for</b>, <b>for all .. </b>, ",
"		<b>table process ...</b> as follows:<br/>",
"		<b>break case</b> skips the remaining code till the end of the <b>switch/check</b> block.  Even the <b>else</b> statement will be skipped.",
"		<b>continue case</b> skips the remaining code inside that <b>case</b> block, then continues checking the next <b>case</b> and <b>else</b> statements.<br/>",
"		<b>break loop</b> skips the remaining code till loop end, stops the loop and continues with next statements after the loop.<br/>",
"		<b>continue loop</b> skips the remaining code till loop end and continues with the next loop round, provided the loop condition is met.<br/>",
"		<b>continue with next case</b> skips the remaining code inside that <b>case</b> block and executes the next case block, regardless if the condition inside the case is met or not.",
"",
"		<b>break</b> applies to loops or case, whatever is closer.<br/>",
"		<b>continue</b> applies to loops or cases, whatever is closer.<br/>",
""
 ]
		 ,
	"Call as"			: "procedure",
	"Restrictions"		: ["No indirect parameter passing",
							  "__Partial table specifications__ referring to current table name and row number is enabled for the subsequent statement(s)."] ,
	"Parameter count"	: "0",

"Examples"  : [
"		echo(\"Try 'break' and 'continue with next case':'\");",
"		for (a[] = 1, a[] <= 4, a[]++)",
"		{",
"			print ( \"  \",a[], \": \" );",
"			switch( a [] )",
"			{",
"				case (1)",
"				{",
"					print(\"= 1;   \");",
"					continue with next case;",
"				}",
"				case (2)",
"				{",
"					print(\"= 2;   \");",
"					break;",
"				}",
"				case (4,1)  print(\"= 1 or 4;   \");",
"				else:	print(\"else;  \");",
"				else:       print(\"2nd else;  \");",
"			}",
"			echo;",
"		}",
"		echo(\"Break and continue loops\");",
"		for (a[] = 1, a[] <= 4, a[]++)",
"		{",
"			echo(\"  Loop begin \", a[] );",
"			if (a[] = 2) continue;",
"			if (a[] = 3) break;",
"			echo(\"  Loop end \", a[] );",
"		}"
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	["switch", "check", "various loops" ]

},


"return" :
{
	"Documentation":		"Function Description", // Required value
	"Function Names" :		[ "return"  ],
	"Synopsis": 			[ "return;",
							  "return ( return value );"],
"Description"  : [
"",
"		If used inside a user-defined procedure or function: Returns from that called procedure / function, along with a return value, if provided.<br>",
"		In other cases: Similar functionality like __end(__) procedure where control is either returned to the calling B4P program, or, if this is not the ase,",
"		program execution will end.",
""
 ]
		 ,
	"Call as"			: "procedure",
	"Restrictions"		: [ "The return value will be ignored in defined procedures or if the code is called as a procedure without retrieving the returned value." ],
	"Parameter count"	: "Max. 1",

	"Parameters" : [
		{   "Number":		"1.",
			"Name" :		"Return Value",
			"Direction" :	"input",
			"Types" :		"all types" ,
			"Description" : ["Return value to be passed to the calling program"]
		} ],

"Examples"  : [
"		define function ( current time ) { return( time(now) ); }",
"		echo( \"Now, it's \", current time() );"
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	["define function", "end" ]

}




,




  "define procedure / function" :
  {
	"Function Names":	[ "define procedure", "define function", "define procedure and function" ],
	"Keywords":			[ "defining user procedures and user functions", "user-defined function" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "define ... ( expression, parameters ... ) { statement(s); } " ],
"Description" : [
"			<b>define procedure </b> defines a user procedure to be called as statements and without providing return values.<br/>",
"			<b>define function </b> defines a user function which provides a return value and must be called inside an expression.<br/>",
"			<b>define procedure and function </b> defines functions which can be called as procedures and functions as well.<br/>",
"			<br/>",
"			All procedures and functions can be declared with fixed or variable user-definable number of parameters.",
"			<br/><br/>",
"			User functions can be defined anywhere in the code, but as a good practice, do this outside the main block.  ",
"			Inside the block function definition will only take place if the code runs (and not skips) over it.  ",
"			You may want to use an __if(__) clause to define a function <i>function name</i>() either one or the other way, but be aware that presence of the function ",
"			will be checked regardless if running or skipping over it."
 ]
			,
	"Call as":			"procedure",
	"Restrictions":		[ "No indirect parameter passing",
						  "Unlike other flow control functions, subsequent statements must always be encapsulated in a block using braces: { statement(s); } ",
						  "The subsequent code block assumes <i>local variable scope</i> related to this procedure / function whenever new variables are created.  Local variables will be discarded after returning to the caller."],
	"Parameter count":	"1-5",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "New Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Give your procedure or function a new name.  Then name may consist of multpile words with spaces, e.g. <b>my sort function</b>." ]
		},

		{ "Number": "Opt. 2",
		  "Name": "Parameter Declaration",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			This 2nd parameter must be specified if the new procedure or function comes with parameters to pass through.",
"			It must be a 2-level nested parameter set where each such parameter set declares one function parameter. The syntax is as follows:<br/>",
"			{  { parameter name 1, parameter type 1, parameter direction 1 }, { parameter name 2, ... }, ... }<br/>",
"			 Zero parameters may also be specified as 2 nested empty sets. { { } }<br/><br/>.",
"			 <i>parameter name</i> must be a literal which uses this name to it as a locally accessible variable.  Not recommended to add '[]' at the end of the name here",
"			 because it would expect a pre-defined variable to be used as parameter name.<br/>",
"			 <i>parameter type</i> must be a literal which declares the type(s) allowed.  Both single types (e.g. numeral) as well as combined types",
"		     are supported.  See __list of parameter types in user functions__ for all valid types and ther functionality.<br/><br/>",
"			 <i>parameter direction</i>: One of the following:<br/>",
"			 === 100, 600",
"			 Parameter direction  |   Explanation ",
"			 input				  | Input parameter which may be any expression: Value, variable, table or a calculation.  Changing the value inside the user procedure / function code is allowed and has no impact outside the procedure / function.",
"			 output				  | Output parameter, must be a variable or table reference.  Nonexisting variables will be initialized automatically.  The final value assigned to the variable will be written back to the variable specified as parameter, or table entry.  In the latter case, the value will be converted to literal automatically.",
"			 io					  | I/O parameter, must be a variable or table reference.  Variables specified must exist before the function call is made.  The final value assigned to the variable will be written back to the variable specified as parameter, or table entry.  In the latter case, the value will be converted to literal automatically.",
"			 reference			  | Reference to variable.  In this case, the code in the defined procedure or function gets the __reference__ to the variable so the __base variable__ and all __member variables__ are visible and can be modified.",
"			 ==="
 ]
		  
		},

		{ "Number": "Opt. 3",
		  "Name": "Minimum Parameter Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "According to number of parameter names specified",
		  "Description":
			[ "Rules the minimum required number of parameters to be passed.  Passing the remaining parameters is optional" ]
		},

		{ "Number": "Opt. 4",
		  "Name": "Maximum Parameter Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "According to number of parameter names specified",
		  "Description":
			[ "Rules the maximum required number of parameters to be passed.  The maximum number may be higher than the number of parameter names defined.",
			  "Specify -1 if no upper limit applies." ]
		},

		{ "Number": "Opt. 5",
		  "Name": "Repetition Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value":  "1",
"Description" : [
"			The Repetition Count specifies the number of additional parameters to be specified if variable parameter count is enabled. 1 specifes any number",
"			is allowed between minimum and maximum number of parameters.  And if the parameter lies outside range of defiend parameter types, then the last type",
"			appeis.  2 specifies that 2 additional parameters need to be added, and if the parameter lies outside the range of defined parameter types,",
"			then the last two parameter types apply sequentially.  Similar rules apply to  larger numbers specified."
 ]
			
		} ],
	"Exceptions": [
		"Procedure or function name is already defiend" ],
"Examples" : [
"		define function( my private function, { { guest name, literal }, { vegetarian, boolean } }, 2, -1, 2 )",
"		{",
"			echo( \"Name of function: \", function name[] );",
"			echo( \"First invited guest: \", guest name[], select if( vegetarian[], \" (vegetarian menu)\", \" (fish menu)\" ) );",
"",
"			for (i[] = 3, i[] <= parameter count[], i[]+=2 ) // Additional guests",
"			{",
"				name[] = (\"parameter \" + literal(i[]  ))[];",
"				vegi[] = (\"parameter \" + literal(i[]+1))[];",
"",
"				echo( \"And: \", name[], select if( vegi[], \" (vegetarian menu)\", \" (fish menu)\" ) );",
"			}",
"",
"",
"			return( parameter count[] / 2 ); // Number of guests",
"		}",
"",
"",
"		guest count[] = my private function( Jim Bean, true );",
"		echo(new line, \"Number of guests invited: \", guest count[], new line);",
"",
"		guest count[] = my private function( Jim Bean, true, Tina Turner, false, Tom Cruise, false, Amsel Adams, true );",
"		echo(new line, \"Number of guests invited to bigger party: \", guest count[]);		",
"		"
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	[ "define additional procedure", "define additional function", "define additional procedure and function" ]
    },  


  "define additional procedure / function" :
  {
	"Function Names":	[ "define additional procedure", "define additional function", "define additional procedure and function" ],
	"Keywords":			[ "additional function names" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "define additional ... ( expression, parameters ... ); " ],
"Description" : [
"",
"		You want to define an additional function which is very similar to a custom function defined before, i.e. most of the code ",
"		for the implementation is common and you do not want to repeat that code.  The idea is to share the code among multiple user-defined",
"		functions rather than duplicating the code or doing sophisticated things like creating nested functions.<br/><br/>",
"		You are free to",
"		* Use different number of parameters",
"		* Use different parameter names",
"		* Use different types for the parameters",
"		* The additional function may be a procedure, function or both, regardless how the original user-defined function has been declared.",
"		* The code distinguishes among the function names used with following automatically generated local variable: function name [].",
"		This function defined here expects no subsequent code because the code is provided in the primary function definition.",
"		Deleting and redefining the first user-defined function will not have an impact on the additional functions defined.<br/><br/>",
"		The three procedure names (e.g. <b>define additional function</b> defined here are closely related to their counterparts",
"		<b>define function</b>, with following exception: The original procedure or function name must be provided in the 2nd parameter, and",
"		no additional code related to this definition follows afterwards."
 ]
		 ,
	"Call as":			"procedure",
	"Restrictions":		[ "No indirect parameter passing",
						  "No subsequent code is expected for these procedures" ],
	"Parameter count":	"2-6",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "New Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Give your procedure or function a new name.  Then name may consist of multpile words with spaces, e.g. <b>my sort function</b>." ]
		},

		{ "Number": "2",
		  "Name": "Existing Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Specify the name of an existing procedure or function to refer to." ]
		},

		{ "Number": "Opt. 3",
		  "Name": "Parameter Declaration",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description": [ "Same rules as for the 2nd parameter in <b>define procedure<b>,<b>define function<b> ,<b>define procedure and function<b> ." ]
		},

		{ "Number": "Opt. 4",
		  "Name": "Minimum Parameter Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "According to number of parameter names specified",
		  "Description": [ "Same rules as for the 3rd parameter in <b>define procedure<b>,<b>define function<b> ,<b>define procedure and function<b> ." ]
		},

		{ "Number": "Opt. 5",
		  "Name": "Maximum Parameter Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "According to number of parameter names specified",
		  "Description": [ "Same rules as for the 4th parameter in <b>define procedure<b>,<b>define function<b> ,<b>define procedure and function<b> ." ]
		},

		{ "Number": "Opt. 6",
		  "Name": "Repetition Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value":  "1",
		  "Description": [ "Same rules as for the 5th parameter in <b>define procedure<b>,<b>define function<b> ,<b>define procedure and function<b> ." ]
		} ],
	"Exceptions": [
		"Procedure or function name is already defined", "Original procedure or function not found" ],
"Examples" : [
"		define function( private function, { { guest name, literal }, { vegetarian, boolean } }, 2, -1, 2 )",
"		{",
"			echo( \"Name of function: \", function name[] );",
"			main menu[] = select if( function name[] == bbq party, \" (beef menu)\", \" (fish menu)\" );",
"			echo( \"First invited guest: \", guest name[], select if( vegetarian[], \" (vegetarian menu)\", main menu[] ) );",
"",
"			for (i[] = 3, i[] <= parameter count[], i[]+=2 ) // Additional guests",
"			{",
"				name[] = (\"parameter \" + literal(i[]  ))[];",
"				vegi[] = (\"parameter \" + literal(i[]+1))[];",
"",
"				echo( \"And: \", name[], select if( vegi[], \" (vegetarian menu)\", main menu[] ) );",
"			}",
"",
"			return( parameter count[] / 2 ); // Number of guests",
"		}",
"",
"		define additional function( bbq party, private function, { { guest name, literal }, { vegetarian, boolean } }, 2, -1, 2 );",
"		define additional function( fish for 2, private function, { { guest name, literal }, { vegetarian, boolean } }, 2, 2, 0 );",
"",
"		guest count[] = fish for 2( Susanne Ellen, false );",
"		echo(new line, \"Number of guests invited: \", guest count[], new line);",
"",
"		guest count[] = bbq party( Jim Bean, true, Tina Turner, false, Tom Cruise, false, Amsel Adams, true );",
"		echo(new line, \"Number of guests invited bbq: \", guest count[]);",
""
 ]
		 ,
	"Output" :		"automatic",
	"See also" :	[ "define procedure", "define function", "define procedure and function" ]
},


  "Parameter Types in User-Defined Functions" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "user parameter types" ],
	"Keywords":			[ "list of parameter types in user functions" ],
"Description 01:Overview" : [
"",
"	List of supported parameter types <br/>",
"	X = Accepted type<br>",
"	C = This parameter type will be converted to targeted type (e.g. a literal containing a number to a numeral) <br>",
"",
"	=== 300, 100, 100, 100, 100, 100, 100, 100, bold_column_1",
"	Mnemonic							| Numeral		| Date			| Literal		| Boolean		| Parameter set		| Void			| Code",
"	numeral								| X				|				|				|				|					|				|",
"	to numeral (see 1)					| X				| C				| C				| C				|					|				|",
"	date								|				| X				|				|				|					|				|",
"	to date (see 2)						| C				| X				| C				|				|					|				|",
"	numeral or date						| X				| X				|				|				|					|				|",
"	numeral or date or blank 			| X				| X				| X if blank	|				|					|				|",
"	literal								|				|				| X				|				|					|				|",
"	to literal (see 3)					| C				| C				| X				| C				|					|				|",
"	numeral or blank					| X				|				| X if blank	|				|					|				|",
"	numeral or blank to zero			| X				|				| 0 if blank	|				|					|				|",
"	numeral or literal					| X				|				| X				|				|					|				|",
"	date or literal						|				| X				| X				|				|					|				|",
"	numerals							| C (see 4)		|				|				|				| X 				|				|",
"	numeral or literal or date			| X				| X				| X				|				|					|				|",
"	numeral or literal or date literal	| X				| X				| X				|				|					|				|",
"	boolean								|				|				|				| X				|					|				|",
"	columns								| X				|				| X				|				| X					|				|",
"	numeral or boolean					| X				|				|				| X				|					|				|",
"	scalars								| X				| X				| X				| X				|					|				|",
"	parameters							| 				|				|				|				| X					|				|",
"	to parameters 						|				|				| C (see 5)		|				| X					|				|",
"	parameters members to literal		|				|				|				|				| X (see 6)			|				|",
"	to parameters members to literal	|				|				| C (see 5)		|				| X (see 6)			|				|",
"	literal or parameters				|				|				| X				|				| X					|				|",
"	valid								| X				| X				| X				| X				| X					|				|",
"	all									| X				| X				| X				| X				| X					| X				|",
"	===",
"",
"	Notes:<br/>",
"	1. Conversion similar as implemented in the  __numeral(__) function.<br/>",
"	2. Conversion similar as implemented in the  __date(__) function.<br/>",
"	3. Conversion similar as implemented in the  __literal(__) function.<br/>",
"	4. Even if only one numeral is provided, the user function gets a __parameter set__ containing one numeric element.<br/>",
"	5. Conversion similar as implemented in the  __literal(__) function.  Softquoted literals: Items separated with commas are seen as separate elements and empty soft quoted literal will be converted to empty set.<br/>",
"	6. The members in the parameter set will be converted to literal. Example: {1,2,true} -> {'1','2','true'}<br/>",
""
 ]
	

  }






,

  "delete user function" :
  {
	"Function Names":	[ "delete user function" ],
	"Keywords":			[ "delete user function" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "delete user function ( function name )" ],
"Description" : [
"",
"	Deletes a user-defined procedure or function.  Note: Actually, the user-specific function name will be delisted. The underlying code containing the ",
"	function implementation will not deleted. In case __additional function names__ are defined, then only the affected function name will be deleted.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing user function",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Must be a function name defined with __define procedure(__), __define function(__), __define procedure and function(__), __define additional procedure(__), __define additional function(__), or __define additional procedure and function(__), ." ]
		} ],
	"Exceptions": [
		"User function not found", "Specified function is not a user function" ],
"Examples" : [
"		define procedure (foo)",
"		{",
"			print(\"Function name = \", function name[],\"  \" );",
"			if (function name[] = bar) echo(\"Message = \", message[] ); else: echo;",
"		}",
"",
"		define additional procedure (bar, foo, { { message, literal } } );",
"",
"		{   // Main part",
"			foo;",
"			bar(salad bar);",
"			delete user function( foo );",
"			bar(desert bar);",
"			define procedure(foo) { echo (new line, \"Fooled.\"); };",
"			foo;",
"			bar(wine bar);",
"			delete user function (bar);",
"			define procedure(bar) { echo (new line, \"Bar closed.\"); };",
"			bar;",
"		}",
""
 ]
		,
	"Output": "automatic",
	"See also" :	[ "user function existing" ]
},


  "function / user function existing" :
  {
	"Function Names":	[ "function existing", "user function existing" ],
	"Keywords":			[ "function existing" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "... function existing ( function name )" ],
"Description" : [
"",
"	Checks if the procedure function is existing.  <b>user function existing</b> returns <b>true</b> only if the specified function name refers to an existing user procedure or function.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing user function",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Any literal can be specified here" ]
		} ],
	"Return value":
	[
		{ "Name": "returned value",
		  "Types": [ "boolean" ],
		  "Description": "true if procedure or function (or user procedure or function) is existing"
		}
	],
"Examples" : [
"		define procedure (foo) { echo( Fool ); };",
"		",
"		echo(\"Test if existing:\");",
"		echo(\"  foo : \", function existing( foo )); // user defined",
"		echo(\"  bar : \", function existing( bar )); // not existing",
"		echo(\"  abs : \", function existing( abs )); // existing",
"		echo(new line, \"Test if user function:\");",
"		echo(\"  foo : \", user function existing( foo )); // user defined",
"		echo(\"  bar : \", user function existing( bar )); // not existing",
"		echo(\"  abs : \", user function existing( abs )); // existing"
 ]
		,
	"Output": "automatic",
	"See also" :	[ "additional function names" ]
}




,
 
  "start" :
  {
	"Function Names":	[ "start" ],
	"Keywords":			[ "start B4P program" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "start  ( program file name, parameters )" ],
"Description" : [
"",
"	Starts a separate B4P application script as a sub program and waits until the sub program has ended.",
"",
"	* Global variables defined (with __global(__) function) will be preserved.",
"	* The code will not stay resident in memory after completion.  When called again with start (...), the program will be reloaded.",
"	* User procedures and functions defined in the called program will be deleted when execution of the program has ended.",
"	* Local variables created inside the program will be discarded when execution has ended",
"	* Since the code is removed after completion, memorized __once(__) calls will also get lost.  Next time the file will be loaded, __once(__) {} behaves as if the code is being run for the first time and the subsequent code is executed.",
"	* If a program previously called with __include(__) and is now called with start(), then the resident code is made non-resident again and will be removed when done.",
""
 ]
	,

"Restrictions" : [
"		When using <b>start</b> function from command line, then encapsulate this function in braces in order to avoid confusion with the interactive __start__ command.",
"",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"Min. 1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Program Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Name of B4P program to start.  Do not forget to specify the suffix, e.g. '.b4p' or '.txt'." ]
		},

		{ "Number": "Opt. 2, etc.",
		  "Name": "Additional parameters",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"",
"			Any additional optional parameter. If specified, then they will replace the existing \"command line parameters\" by the ones supplied here."
 ]
		  
		} ],
	"Return value":
	[
		{ "Name": "returned value",
		  "Types": [ "all types" ],
		  "Description": "Value returned by called program"
		}
	],
	"Exceptions": [
		"Program file not found" ],
"Examples" : [
"		start( \"start.txt\", 123, abc, true, date(24.12.2015),{});",
"		// The parameters will be passed in their given typs to 'command line arguments.",
"		// command line argument[0]: start.txt   (The file name of the program)",
"		// command line argument[1]: 123 (numeral)",
"		// command line argument[2]: abc (literal)",
"		// command line argument[3]: true (boolean)",
"		// command line argument[4]: 2015-12-24 (date)",
"		// command line argument[5]: {} (empty parameter set)",
"		//",
"		// How to start this program in interactive mode:",
"	    { start( \"start.txt\", 123, abc, true, date(24.12.2015),{}); } ",
""
 ]
	    ,
	"See also" :	[ "include" ]
},


  "include" :
  {
	"Function Names":	[ "include" ],
	"Keywords":			[ "include B4P program", "include library", "include libraries" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "include ( program file name, parameters )" ],
"Description" : [
"",
"	Starts a separate B4P application script as a sub program and waits until the sub program has ended.",
"	In contrast to __start(__), this function provides specific features which are suitable to define B4P libraries containing procedures and functions:",
"",
"	* Global variables defined (with __global(__) function) will be preserved.",
"	* The code will stay resident in memory after completion.  When called again, the already loaded code will be used.  Performance is better than with __start(__) since the internal compilation process is not repeated.",
"	* User procedures and functions defined in the called program will be preserved.  You can create B4P libraries and use <b>include()</b> to include them.",
"	* Local variables created inside the program will be preserved and are available for later use.  Note: Local variables created inside __user-defined procedures__ and __user-defined functions__ will be discareded when the procedure or function execution has completed.",
"	* The __once(__) calls will be memorized.  A second program execution will skip the once-declared code accordingly.",
"	* If the specified program file name contains no file type (e.g. '.b4p', '.txt'), then B4P will look for the file in the standard libary directory.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"Min. 1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Program Name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Name of B4P program or library to include. <br>",
"			If a file type is specified, e.g. '.b4p' or '.txt', then B4P will look for this file in the current or specified directgory.<br>",
"			If no path and no file type is specified, then B4P will look in the standard library folder."
 ]
			
		},

		{ "Number": "Opt. 2, etc.",
		  "Name": "Additional parameters",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"			Any additional optional parameter. If specified, then they will replace the existing \"command line parameters\" by the ones supplied here."
 ]
		  
		} ],
	"Return value":
	[
		{ "Name": "returned value",
		  "Types": [ "all types" ],
		  "Description": "Value returned by called program"
		}
	],
	"Exceptions": [
		"Program file not found" ],
"Examples" : [
"		include ( Office Library ); // Looks for 'Office Library.b4p' in the standard B4P library folder.",
"		include ( My Library.b4p, English ); // Looks for \"My Libary.b4p\" in the current folder, and pass a parameter.",
"		//",
"		// command line argument[0]: start.txt   (The file name of the program)",
"		// command line argument[1]: English (literal)",
""
 ]
		,
	"See also" :	[ "start" ]
}


,

  "pause" :
  {
	"Function Names":	[ "pause" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program execution will be paused.  The user can decide whether to continue or to stop.",
"	If function parameters are provided, then they will be printed out like in __echo(__).",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1, ...",
		  "Name": "Contents to print out",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":  "The values in these parameters will be printed out."
		}
	],
"Examples" : [
"	pause(\"Lunch break\");",
"	echo(\"Left the restaurant\");",
"	pause;",
"	echo(Back at home.)"
 ]
	,
"Output" : [
"Lunch break",
"Press [ENTER] to continue or [CTRL+C] or [ESCAPE] to exit.",
"",
"Left the restaurant",
"pause (); called",
"",
"Press [ENTER] to continue or [CTRL+C] or [ESCAPE] to exit.",
"",
"Back at home."
 ]
	,
	"See also" :	[ "interactive" ]
  },


"stop" :
{
	"Function Names":	[ "stop" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program execution will stop and enters interactive mode.  This exception is actually applied for most program errors.",
"	In the interactive mode, you can inspect the global and local variables and table contents.  Typing \"return\" will move",
"	you one level up if 'stop' was called in a user-defined function or B4P program called with __start(__) or __include(__).",
"	Otherwise the (last) return command will exit B4P.",
"",
"	<br><br>",
"	This function call is recommended for __program debugging__.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	define procedure( foo )",
"	{",
"		a[] = 123;",
"		stop;",
"		echo(\"Continuing\");",
"	}",
"",
"	echo(\"Started.\");",
"	foo;",
"	echo(\"Finished.\");	"
 ]
	,
"Output" : [
"Started.",
"stop (); called",
"Code execution will stop.  Going to interactive mode",
"________________________________________________________________________",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">> echo( a[] )",
"123",
">> return",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">> echo( a[] )",
"",
"Row #: Code Text _______________________________________________________",
"	1: echo( a[] )",
"			 ^",
"Inside the program code entered interactively:",
"Attempting to read variable 'a[...]'.",
"Failed to access variable: Variable name not found.",
"Code execution will stop.  Going to interactive mode",
"________________________________________________________________________",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">> return",
"Done - Press ENTER key"
 ]
	,
	"See also" :	[ "interactive" ]
},




 "interactive" :
{
	"Function Names":	[ "interactive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program execution will stop and enters interactive mode.  Typing \"return\" will continue executing the next statements.",
"",
"	<br><br>",
"	This function call is recommended for __program debugging__.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	define procedure( foo )",
"	{",
"		a[] = 123;",
"		interactive;",
"		echo(\"Continuing\");",
"	}",
"",
"	echo(\"Started.\");",
"	foo;",
"	echo(\"Finished.\");"
 ]
	,
"Output" : [
"Started.",
"interactive (); called",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">> =a[]",
"123 [numeral]",
">> return",
"Continung",
"Finished.",
"Done - Press ENTER key"
 ]
	,
	"See also" :	[ "stop" ]
},



"exit" :
{
	"Function Names":	[ "exit" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program execution will stop.  If a numeric parameter is provided, then it will be passed as exit code back",
"	to the operating system or calling process.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"0 - 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "Exit code",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description":  ""
		}
	],
"Examples" : [
"	savecode",
"	if (member count(command line arguments[]) == 2)",
"	{",
"		echo( command line arguments[1] );",
"		echo( \"Returning 5\" );",
"		exit(5);",
"	}",
"",
"	echo(\"Start this program recursively\");",
"	rv[] = system( \"b4p REF_Function_exit.b4p -wx Nesting\" );",
"	echo(\"Exit code received = \", rv[] );"
 ]
	,
"Output" : [
"Start this program recursively",
"Nesting",
"Returning 5",
"exit (); called",
"Code execution will stop.  Exiting program.",
"________________________________________________________________________",
"Exit code received = 5",
"Done - Press ENTER key"
 ]
	,
	"See also" :	[ "end", "abort" ]
},




"end" :
{
	"Function Names":	[ "end" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program execution will stop.  If a numeric parameter is provided, then it will be passed as exit code back",
"	to the operating system or calling process or superior B4P program which has started this program",
"	using __start(__) or __include(__) functions.  The key difference to __exit(__): Exit will stop B4P in",
"	all cases, even if called by a superior B4P program.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"0 - 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "Exit code",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description":  ""
		}
	],
"Examples" : [
"	savecode",
"	if ( member count(command line arguments[]) == 2 ) // Define function only once",
"	{",
"		define procedure( foo )",
"		{",
"		echo(\"Demonstrate ending from here with code 5\");",
"		end(5);",
"		}",
"	}",
"",
"	if (member count(command line arguments[]) == 2)",
"	{",
"		echo( command line arguments[1] );",
"		echo(\"Calling foo ...\");",
"		foo;",
"		echo(\"This text will not appear\");",
"	}",
"",
"	echo(\"Start this program recursively\");",
"	rv[] = start( \"./REF_Function_end.b4p\", \"Nesting\" );",
"	echo(\"Exit code received = \", rv[] );"
 ]
	,
"Output" : [
"	savecode",
"Start this program recursively",
"Nesting",
"Calling foo ...",
"Demonstrate ending from here with code 5",
"end (); called",
"Code execution will end.  Leave or go to superior code.",
"________________________________________________________________________",
"Exit code received = 5",
"Done - Press ENTER key"
 ]
	,
	"See also" :	[ "exit" ]
},



"abort" :
{
	"Function Names":	[ "abort" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Program will do an immediate exit with exit code -1",
"	No user interaction will happen, e.g. asking to press [ENTER] to leave.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"0",
"Examples" : [
"	abort;"
 ]
	,
	"See also" :	[ "exit" ]
},




"throw" :
{
	"Function Names":	[ "throw" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function discontinues executing and skips executing all further code until the __catch(__) or __catch if(__) function calls or the",
"		end program have been encountered.  One variable of any valid type (including bigger payloads packed in parameter sets) may be thrown",
"		like a frisbee and caught and returned by the corresponding catch functions.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"0 - 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "Frisbee value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Default value": "0",
		  "Description":  "This value will be returned by the next __catch(__) or __catch if(__) function."
		}
	],
"Examples" : [
"	define procedure( foo )",
"	{",
"		echo(\"Test throw\");",
"		throw( \"my Frisbee\");",
"		echo(\"This text does not appear\");",
"	}",
"",
"	foo;",
"	echo(\"This text does not appear, too\");",
"	catch( c[] )",
"	{",
"		echo(\"Caught: \", c[] );",
"	}",
"	else: echo(\"Nothing thrown\");"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "catch", "catch if" ]
}


,

"catch, catch if" :
{
	"Function Names":	[ "catch", "catch if" ],
	"Documentation":	"Function Description",
	"Synopsis":			[ "catch/catch if (expression, condition expression) { statements } [ else { statements } ]" ],
"Description" : [
"		In case __throw(__) has been called, all furhter code statements will be skipped until one of these functions are encountered.<br>",
"		<b>catch</b> will always give recover \"frisbee\" value issued with the __throw(__) function, whereas <br>",
"		<b>catch if</b> will only catch the value if the \"frisbee\" value compared with the comparison expression returns true.  Otherwise, the frisbee",
"		continues flying, i.e. the code further below will be skipped, including the 'else' block if added."
 ]
	,
	"Call as":			"procedure",
	"Restrictions":		"No indirect parameter passing",
	"OS differences":	"None",
	"Parameter count":	"1 (catch), 2 (catch if)",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"frisbee value caught",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The frisbee value issued with the __throw(__) function call will be recovered here."
	  },
	  {
		 "Number":		"2",
		 "Name":		"Values to compare with",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
"Description" : [
"			Applicable to <b>catch if</b>: Catching the value and continuing normal execution will only happen if the thrown \"frisbee\"",
"			value matches with the comparison expression.",
"",
"			This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__.",
"			<br><br>"
 ]
		  
	  }
	],
"Examples" : [
"	define procedure( foo, {{ value, numeral }} )",
"	{",
"		if (value[]== 1) return; // No throw with value 1",
"		echo(\"Throw: \", value[] );",
"		throw( value[] );",
"		echo(\"This text does not appear\");",
"	}",
"",
"	for (i[] = 1, i[] <= 3, i[]++)",
"	{",
"		echo(new line, \"Round \", i[],\":\");",
"		foo( i[] );",
"",
"		catch if( x[], <>2 )",
"		{",
"			echo(\"'catch if': Successful catch: \", x[] );",
"		}",
"		else",
"		{",
"			echo(\"'catch if': Nothing thrown\" );",
"		}",
"",
"		catch ( x[]  )",
"		{",
"			echo(\"'catch'   : Successful catch: \", x[] );",
"		}",
"		else",
"		{",
"			echo(\"'catch'   : Nothing thrown\" );",
"		}",
"	}"
 ]
	 ,
	"Output": "automatic"
}


,

  "exception" :
  {
	"Function Names":	[ "exception" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function asserts an exception in a similar way as programming errors are handled",
"	This feature is very useful if you want to assert an error message associated plausible info (including listing a few lines of code above",
"	the place where the exception is happening). The exception shows up like any other exception you typically encounter, ",
"	for example divisions by zero or unable to find table columns.",
"",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Indirect parameter passing is enabled for 'select by value'.",
	"Parameters":
	[
	  { "Number": "1",
		  "Name": "Action",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Supported values: <b>pause, interactive, throw, stop, end, exit, abort</b><br>",
"			See the corresponding function names desribed in the previous section which correspond to the values above to learn more about the consequential behavior."
 ]
		  
	  },
	  { "Number": "2",
		  "Name": "Message",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Provide the error message.  If you need to compose multiple values like in an __echo(__) call, then use the __compose(__) funtion to put all values into them."
 ]
		  
	  },
	  { "Number": "Opt. 3",
		  "Name": "Calling hierarchy",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			The calling hierarchy determines the hierarchical calling level of the code where to eventually display the lines of code along with the exception message.",
"			The level increases by 1 with every call to user functions, and starting B4P programs with start or include.",
"",
"			=== 50, 750, noframe_1stcolbold, noheader",
"			0		| The code where this exception call is made will be shown.",
"			1		| One level up, e.g. the code where the function call to this code with the exception call is made will be shown.",
"			2, 3, ... | urther levels up",
"			&lt; 0	| Suppress showing code lines",
"			===",
""
 ]
		  
	  }
	],
"Examples" : [
"	define function ( square root, { { n, numeral } } )",
"	{",
"		// If the last parameter is 0, then the code up here will be shown and not at the function call.",
"		if (n[] < 0) exception( stop, \"1st parameter: Negative values are not allowed for square roots\", 1 );",
"		return( sqrt(n[]) );",
"	}",
"",
"	// Main Program",
"",
"	{",
"		echo(\"Try a negative square root.\");",
"		a[] = square root( -1 );",
"	}"
 ]
	,
"Output" : [
"	savecode",
"Try a negative square root.",
"",
"Row #: Code Text _______________________________________________________",
"	7:    }",
"	8:",
"	9:    // Main Program",
"   10:",
"   11:    {",
"   12:        echo(\"Try a negative square root.\");",
"   13:        a[] = square root( -1 );",
"									 ^",
"1st parameter: Negative values are not allowed for square roots",
"",
"Code execution will stop.  Going to interactive mode",
"________________________________________________________________________",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">>"
 ]
	,
	"See also" :	[ "interactive" ]
}


,

  "select, pick" :
  {
	"Function Names":	[ "select", "pick" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function selects a following parameter depending on the value of the first parameter.",
"	Positive numbers count from left to right, where 0 refers to the 2nd function parameter.  Negative numbers count from right to left, where -1 refers to the last parameter.",
"",
"	<br><br>",
"	<b>select</b> will calculate the expressions in all parameters.<br>",
"	<b>pick</b> will calculate the expression of the applicle parameter and skip calculating the other ones.  This approach saves processing time,",
"		especially if the expressions contain heavy calculations or large contents (e.g. parameter sets retrieved from tables).",
"	",
"	<br><br>",
"",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"Min. 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Number als selector",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":  "0, 1, 2, etc. select 2nd, 3rd, 4th, etc. function parameter.  -1, -2, etc. selects the last function parameter."
		},
		{ "Number": "2, etc.",
		  "Name": "Selected value",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"			Applicable to <b>select</b>: The values of all function parameters will be calculated. The selected value will be returned."
 ]
		  
		},
	   {
		  "Number":		"Alt. 2, etc.",
		  "Name":		"Selected expression",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
"Description" : [
"			Applicable to <b>pick</b>: Only the expression of the selected parameter will be calculated.  The other expressions will be skipped."
 ]
		  
	  }
	],
	"Return value":
	[
		{ "Name": "Selected value",
		  "Types": [ "all types" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Value is out of bounds" ],
"Examples" : [
"	a[] = 1; b[] = 2; c[] = 3; d[] = 4;",
"",
"	echo(\"Function 'select':\");",
"	for (i[] = 0, i[] <= 3, i[]++ )",
"	{",
"		print( select( i[], a[]++, b[]++, c[]++, d[]++ ), \"  \" );",
"	}",
"	// Note: All 4 variables have been incremented 4 times.",
"	echo(new line, \" a[]..d[] = \", a[], \" \", b[], \" \", c[], \" \", d[], \" \" );",
"	echo;",
"",
"	a[] = 1; b[] = 2; c[] = 3; d[] = 4;",
"",
"	echo(\"Function 'pick':\");",
"	for (i[] = 0, i[] <= 3, i[]++ )",
"	{",
"		print( pick( i[], a[]++, b[]++, c[]++, d[]++, e[]++ ), \"  \" );",
"		// Note: e[] added, but will never be executed, so no error message occurs (variable not existing)",
"	}",
"	// Note: All 4 variables have been once only",
"	echo(new line, \" a[]..d[] = \", a[], \" \", b[], \" \", c[], \" \", d[], \" \" );"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "select if", "pick if" ]
}


,

  "select if, pick if" :
  {
	"Function Names":	[ "select if", "pick if" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function selects and returns the 2nd function parameter if the 1st parameter is 'true', otherwise the 3rd function parameter is returned.",
"	",
"	<br><br>",
"	<b>select</b> will calculate all function parameters.<br>",
"	<b>pick</b> will calculate the 1st parameter and then either the 2nd (if true) or 3rd function parameter (if false).  In C/C++, the function works similar to",
"	the following trinary operator: <b>?</b> ... <b>?</b> ... .",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Boolean value",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  ""
		},
		{ "Number": "2",
		  "Name": "Selected value if true",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"			This expression will be always calculated.  It will be returned if 'true' is provided in the 1st function parameter."
 ]
		  
		},
	    {
		  "Number":		"Alt. 2",
		  "Name":		"Selected expression if true",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
"Description" : [
"			Applicable to <b>pick if</b>: This expression will be calculated and the value returned if 'true' is provided in the 1st function parameter.",
"			Otherwise, calculating this parameter will be skipped."
 ]
		  
	    },
		{ "Number": "3",
		  "Name": "Selected value if false",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"			This expression will be always calculated.  It will be returned if 'false' is provided in the 1st function parameter."
 ]
		  
		},
		{
		  "Number":		"Alt. 3",
		  "Name":		"Selected expression if false",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
"Description" : [
"			Applicable to <b>pick if</b>: This expression will be calculated and the value returned if 'false' is provided in the 1st function parameter.",
"			Otherwise, calculating this parameter will be skipped."
 ]
		  
	   }

	],
	"Return value":
	[
		{ "Name": "Selected value",
		  "Types": [ "all types" ],
		  "Description": ""
		}
	],
"Examples" : [
"	a[] = 1; b[] = 2;",
"",
"	echo(\"Function 'select if':\");",
"	print( select if( true, a[]++, b[]++ ) ); // Both a[] and b[] are incremented",
"	echo( \"   a[] = \", a[], \" b[] = \", b[] );",
"",
"	echo;",
"",
"	a[] = 1; b[] = 2;",
"",
"	echo(\"Function 'pick if':\");",
"	print( pick if( false, a[]++, b[]++ ) ); // Only b[] is incremented",
"	echo( \"   a[] = \", a[], \" b[] = \", b[] );"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "select ifs", "pick ifs", "select", "pick" ]
}


,

  "select ifs, pick ifs" :
  {
	"Function Names":	[ "select ifs", "pick ifs" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These two functions act like a cascaded arrangement of multiple <b>select if</b> resp. <b>pick if</b> function calls.",
"	The first parameter contains the default value.  Following this, the even-numbered parameters take boolean expressions, for example from",
"	comparisons.  If the outcome is true, then the value specified in the parameter is taken over, otherwise the next boolean expression wil be checked.",
"	If all boolean expressions were false, then the defalt value will be returned.",
"",
"	<br><br>",
"	<b>select</b> will calculate all function parameters<br>",
"	<b>pick</b> will calculate the 2nd function parameter followed by the 3rd parameter if true, otherwise it will calculate the 4th parameter, and so forth.",
"	Long story short, only the parameter values needed will be calculated and this save a lot of processing time especialy for <i>heavy</i> expressions.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"3, 5, 7, etc.",
	"Restrictions":		"Indirect parameter passing is enabled for 'select ifs'.",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Default value",
		  "Direction": "input",
		  "Types": [ "all types" ],
		  "Description": "Applicable to <b>select ifs</b>: This value will be returned if all boolean values provided in the even-numbered function paramters are false."
		},
		{
		  "Number":		"Alt. 1",
		  "Name":		"Default expression",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick ifs</b>: This expression will be calculated and the value returned if all boolean values provided in the even-numbered function paramters are false."
		},
		{ "Number": "2, 4, ...",
		  "Name": "Boolean value",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>select ifs</b>: This value is true, then the value in the next function parameter will be returned."
		},
		{
		  "Number":		"Alt. 2, 4, ...",
		  "Name":		"Boolean expression",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick if</b>: If this expression calculated returns true, then the expression in the next function parameter will be calculated and the value returned."
		},
		{ "Number": "3, 5, ...",
		  "Name": "Selected value if true",
		  "Direction": "input",
		  "Types": [ "all types" ],
		  "Description": "Applicable to <b>select ifs</b>: This value will be returned if true is provided in the previous function parameter."
		},
		{
		  "Number":		"Alt. 3, 5, ...",
		  "Name":		"Selected expression if true",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick if</b>: This expression will be calculated and returned if true is provided in the previous function parameter."
		}
	],
	"Return value":
	[
		{ "Name": "Selected value",
		  "Types": [ "all types" ],
		  "Description": ""
		}
	],
"Examples" : [
"	echo(\"Demonstrate 'select ifs':\");",
"	a[] = 1; b[] = 2; c[] = 3;",
"	x[] = select ifs( echo(\"Others \"), (a[]++=0), echo(\"1st \"), (b[]++ = 2), echo(\"2nd \"), (c[]++ = 3), echo(\"3rd \") );",
"	// All parameter will be calculated.",
"",
"	echo(\"a..c[] = \", a[], \" \", b[], \" \", c[],\".  Result is \", x[] );",
"",
"	echo(new line, \"Demonstrate 'pick ifs':\");",
"	a[] = 1; b[] = 2; c[] = 3;",
"	x[] = pick ifs( echo(\"Others \"), (a[]++=0), echo(\"1st \"), (b[]++ = 2), echo(\"2nd \"), (c[]++ = 3), echo(\"3rd \") );",
"	// The first two conditions will be calculated as well as 'echo(\"2nd \")'.",
"",
"	echo(\"a..c[] = \", a[], \" \", b[], \" \", c[],\".  Result is \", x[] );"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "select if", "pick if", "select by value", "pick by value" ]
}


,

  "select / pick by value" :
  {
	"Function Names":	[ "select by value", "pick by value" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These two functions compare the value provided in the 1st function parameter with the 2nd function parameter.  If the value in both function parameters",
"	are equal, then the value provided in the 3rd funtion parameter will be returned.  If this is not the case, the 4th fuction parameter will be checked,",
"	and so on.  If none of the values are matching, and the number of function parameters is even, then the last value is considered as default value and",
"	will be returned.  In case the number of parameters is odd and no matches have been identified, then void value is returned.",
"",
"	<br><br>",
"",
"	<u>Note</u>: Special cases with incomplete number of function parameters<br>",
"	If only 1 function parameter is provided, then void value will be returned all times.<br>",
"	If only 2 function parameters are provided, then the last parameter will be returned all times.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is enabled for 'select by value'.",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Selector value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description": "The value provided in the 1st function parameter will be compared with the values in the even-numbered parameters."
		},
		{ "Number": "2, 4, ...",
		  "Name": "Value to match",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>select ifs</b>: This value will be compared with the 1st function parameter."
		},
		{
		  "Number":		"Alt. 2, 4, ...",
		  "Name":		"Expression to match",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick ifx</b>: This expression will be calculated (as long no match has been found yet) and the value will be compared with the 1st function parameter."
		},
		{ "Number": "3, 5, ...",
		  "Name": "Value to select",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>select ifs</b>: This value will be returned if a match with the previous parameter applies."
		},
		{
		  "Number":		"Alt. 3, 5, ...",
		  "Name":		"Expression to select",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick ifx</b>: This expression will be calculated and the value returned if a match with the previous parameter applies.  Otherwise, the expression will not be calculated."
		},
		{ "Number": "last (even number)",
		  "Name": "Value to select",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>select ifs</b>: This is the default value to be returned if no matches have been identified."
		},
		{
		  "Number":		"Alt. last (even number)",
		  "Name":		"Expression to select",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>pick ifx</b>: This is the default expression to be calculated and the value returned if no matches have been identified."
		}
	],
	"Return value":
	[
		{ "Name": "Selected value",
		  "Types": [ "all types" ],
		  "Description": ""
		}
	],
"Examples" : [
"",
"	a[] = Hund;",
"",
"	echo(\"Demonstrate 'select by value':\");",
"	// Note: All parameters are executed, i.e. printed out",
"	x[] = select by value( a[], print(Katze), print(Cat), print(Hund), print(Dog), print(Maus), print(Mouse) );",
"	echo(new line, \"Result is \", x[] );",
"",
"	echo(\"Demonstrate 'pick by value':\");",
"	// Note: The calculated expressions will be printed out: Katze, Hund and Dog. No need to execute the other ones",
"	x[] = pick by value( a[], print(Katze), print(Cat), print(Hund), print(Dog), print(Maus), print(Mouse) );",
"	echo(new line, \"Result is \", x[] );"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "select ifs", "pick ifs" ]
}


,

  "compare select / pick" :
  {
	"Function Names":	[ "compare select", "compare pick" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These two functions carry out a sequence of comparisons with __comparison expressions__ provided and then return the corresponding value in the ",
"	following parameter.",
"",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"4, 6, 8, etc.",
	"Restrictions":		"Indirect parameter passing is enabled for 'select by value'.",
	"Parameters":
	[
	  { "Number": "1",
		  "Name": "Value to compare",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description": "The value provided in the 1st function parameter will be compared with the comparison expresssions in the following odd-numbered parameters."
	  },
	  { "Number": "2",
		  "Name": "Default Value",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>compare select</b>: This is the default value to be returned if all comparisons specified in the following function parameters turned out false."
	  },
	  {
		  "Number":		"Alt. 2",
		  "Name":		"Default Expression",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>compare pick</b>: This is the default expression to be calculated if all comparisons in the following function parameters turned out false."
	  },
	  {
		 "Number":		"3, 5, ...",
		 "Name":		"Values to compare with",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
"Description" : [
"		    The value provided in the 1st function parameter will be compared with the comparison expressions provided in these odd-numbered",
"			function parameters.  Once a positive match (comparison returns true) has been found, then comparison will stop and the value from the next",
"			function aparameter will be returned.",
"		 ",
"		    This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '&lt;&gt;'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__.  ",
"			",
"			<br><br>",
"			<u>Attention</u>: To avoid hijacking further function parameters as additional values to be compared, put the expression into parentheses",
"			if no operators, = or &lt;&gt; have been used.  This hijacking issues does not apply if the following operators are used: <b>&lt;, &gt;, ==, !=</b> ."
 ]
		  
	  },
	  { "Number": "4, 6, ...",
		  "Name": "Value to select",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Description":  "Applicable to <b>compare select</b>: This value will be returned if a match with the previous parameter applies."
	  },
	  {
		  "Number":		"Alt. 4, 6, ...",
		  "Name":		"Expression to select",
		  "Direction":	"code",
		  "Types":		["expression", ":literal"],
		  "Description": "Applicable to <b>compare pick</b>: This expression will be calculated and the value returned if a match with the previous parameter applies.  Otherwise, the expression will not be calculated."
		}
	],
	"Return value":
	[
		{ "Name": "Selected value",
		  "Types": [ "all types" ],
		  "Description": ""
		}
	],
"Examples" : [
"	echo( \"Demonstrate 'compare pick': 'Greater than 5' is only printed out when the value is needed\");",
"	for (i[] = 1, i[] <= 10, i[]++)",
"	{",
"		a[] = compare select( i[], Others, (2,5,7), \"Is 2 or 3\", >5, print(\"Greater than 5  \") );",
"		echo( i[], \": \", a[] );",
"	}",
"",
"	echo( new line, \"Demonstrate 'compare pick': 'Greater than 5' is only printed out when the value is needed\");",
"	for (i[] = 1, i[] <= 10, i[]++)",
"	{",
"		a[] = compare pick ( i[], Others, (2,5,7), \"Is 2 or 3\", >5, print(\"Greater than 5  \") );",
"		echo( i[], \": \", a[] );",
"	}	"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "select ifs", "pick ifs", "select by value", "pick by value" ]
}


,

  "call" :
  {
	"Function Names":	[ "call" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function calls a B4P function with the function name provided as a literal.",
"	The 2nd function parameter may contain a parameter set which will then be passed as function parameters to the targeted function.",
"	User-defined functions can be referenced here, but no flow-control functions and functions requiring code pieces in their",
"	parameters such as __table process(__), __pick if(__), etc."
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"Min. 1",
	"Restrictions":		[ "Indirect parameter passing is disabled", "Limited choice of function names, see above" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Function name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":  "The name must refer to an existing B4P or user-defined function."
		},
		{ "Number": "2",
		  "Name": "Function parameters",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			The values in the parameter set will be provided as function parameters to the target function"
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Return value",
		  "Types": [ "all types" ],
		  "Description": "It is the return value as provided by the specified target function"
		}
	],
"Examples" : [
"	define function( diag, { { value 1, numeral }, { value 2, numeral } } )",
"	{",
"		return( sqrt( value 1[] * value 1[] + value 2[] * value 2[] ) );",
"	}",
"",
"	for all parameters( { diag, sum, product }, function name[]  )",
"	{",
"		echo( \"Call \", function name[], \"(3,4): \", call( function name[], { 3, 4 } ) );",
"	}"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "deep", "deepr", "define function" ]
}


,

  "deep, deepr" :
  {
	"Function Names":	[ "deep", "deepr" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		These functions complement the __deep operators (e.g. +^) where the specified function will be applied on all elements in the parameter sets provided.",
"		The depth is also adjustable and is by default 1 (corresponding to operators like +^), but can also be increased (e.g. 2 corresponding  to +^^)",
"		to process contents in 2-dimensinoal matrices.",
"		<br><br>",
"		Restrictions:<br>",
"		* No flow control functions",
"		* Functions taking code pieces must take them as strings.  The variables in the code piece are used as given (no deep operations).",
"		* For functions with I/O parameters, e.g. exchange(), the function itself will be called successfully, but resulting parameters will not be written back.",
"		Allowed: User defined functions.",
"		<br><br>",
"		The differences in the functions deep and deepr come into effect if the size of the parameter sets are different so the remaining elements in the shorter sets ",
"		need to be repeated or padded with 0 or 1 as long they are not treated as scalars:",
"		<br><br>",
"		<b>deep</b>:  Elements are padded with 0 or, if 4th parameter (padding) is available, with the padding value.  Example: <b>{1,2} --> {1,2,0,0,0,0}</b> if largest parameter has 6 elements<br>",
"		<b>deepr</b>: Elements are repeated over and over again^.  Example: <b>{1,2} --> {1,2,1,2,1,2}</b> if largest parameter has 6 elements.  If the number of elements is 0, then padding is used (see <b>deep</b>).",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"2, 4",
	"Restrictions":		[ "Indirect parameter passing is disabled", "Limited choice of function names, see above" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Function name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":  "The name must refer to an existing B4P or user-defined function."
		},
		{ "Number": "2",
		  "Name": "Function parameters",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			At least one element in this parameter set must in turn be a parameter set which will be processed individually."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Depth",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":  "The name must refer to an existing B4P or user-defined function."
		},
		{ "Number": "Opt. 4",
		  "Name": "Padding vluae",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Default value": "0",
		  "Description":  "This value will be used to fill up parameter sets so the number of elements are the same before processing them"
		}
	],
	"Return value":
	[
		{ "Name": "Return value",
		  "Types": [ "all types" ],
		  "Description": "It is the return value as provided by the specified target function"
		}
	],
"Examples" : [
"	echo(new line, \"Processing 2 vectors of equal sizes:\");",
"	a[] = {1..6};  b[] = 7 -^ a[];                  // Output: b[] contains {6,5,4,3,2,1}",
"",
"	echo( deep ( sum, {a[], b[]} ) );               // {7,7,7,7,7,7}",
"	echo( deepr( sum, {a[], b[]} ) );               // {7,7,7,7,7,7}",
"",
"	echo(new line, \"Processing 1 vector and 1 scalar:\");",
"	a[] = {1..6};                                   // Output:",
"	echo( deep( sum, {a[], 10} ) );                 // {11,12,13,14,15,16}, same also for deepr",
"	echo( deep( sum, {20, a[]} ) );                 // {21,22,23,24,25,26}, same also for deepr",
"",
"",
"	echo(new line, \"Processing with 2 vectors of different sizes:\", new line,",
"				   \"Shorter vectors are extended to match length of longest one:\");",
"	a[] = {1..6};  b[] = {10,20};                   // Output:",
"",
"	echo( deep ( sum, {a[], b[]} ) );               // {11,22,3,4,5,6}  (shorter vector padded with 0)",
"	echo( deep ( sum, {a[], b[]}, 1, 0) );          // {11,22,3,4,5,6}  (shorter vector padded with 0)",
"	echo( deep ( sum, {a[], b[]}, 1, 1) );          // {11,22,4,5,6,7}  (shorter vector padded with 1)",
"	echo( deepr( sum, {a[], b[]} ) );               // {11,22,13,24,15,26} (shorter vector repeated)",
"",
"	echo( deep ( product, {a[], b[]} ) );           // {10,40,0,0,0,0}",
"	echo( deep ( product, {a[], b[]}, 1, 0 ) );     // {10,40,0,0,0,0}",
"	echo( deep ( product, {a[], b[]}, 1, 1 ) );     // {10,40,3,4,5,6}",
"	echo( deepr( product, {a[], b[]} ) );           // {10,40,30,80,50,120}",
"",
"	echo(new line, \"Example with 3 vectors of different sizes:\");",
"	a[]={1}; b[]={10,11}; c[]={100,101,102};        // Output",
"	echo( deep ( sum, {a[],b[],c[]} ) );            // {111,112,102}",
"	echo( deep ( sum, {a[],b[],c[]}, 1, 1 ) );      // {111,113,104}",
"	echo( deepr( sum, {a[],b[],c[]} ) );            // {111,113,113}",
"",
"	echo(new line, \"Example with 2-dimensional Vectors:\");",
"	a[] = {{1..5},{11..15},{21..25}};",
"	b[] = a[]*^^2;	                                // b[] contains {{2,4,6,8,10},… } all values doubled",
"	echo( deep( sum, {a[], 1}, 2 ) );               // {{2,3,4,5,6},{12,13,14,15,16},{22,23,24,25,26}}",
"	echo( deep( sum, {a[], {1,2,3}},2 ) );          // {{2,3,4,5,6},{13,14,15,16,17},{24,25,26,27,28}}",
"	echo( deep( sum, {a[],b[]}, 2) );               // {{3,6,9,12,15},{33,36,39,42,45},{63,66,69,72,75}}"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "call" ]
}


,

  "statements" :
  {
	"Function Names":	[ "statements" ],
	"Documentation":	"Function Description",
	"Keywords": "statements [function]",
"Description" : [
"		This function executes the statement either formulated as direct code or provided in a string."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1",
	"Restrictions":		[ "Indirect parameter passing is disabled"  ],
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"statement to execute",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
		 "Description": ""
	  }
    ],
"Examples" : [
"	st[] = \"for (a[] = 1, a[] <= 3, a[]++) echo(a[]);\";",
"",
"	statements( for (a[] = 1, a[] <= 3, a[]++) echo(a[]) ) ;",
"	statements( :st[] );",
"",
"	// Note the required colon.  Otherwise st[] is seen as an incomplete statement."
 ]
	,
	"Output": "automatic",
	"See also" :	[ "expression [function]" ]
}


,

  "expression" :
  {
	"Function Names":	[ "expression" ],
	"Documentation":	"Function Description",
	"Keywords": "expression [function]",
"Description" : [
"		This function executes the expreesion either formulated as direct code or provided in a string. The return value will be provided as calculated in the expression"
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"1",
	"Restrictions":		[ "Indirect parameter passing is disabled"  ],
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"expression to execute",
		 "Direction":	"code",
		 "Types":		["expression", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "Return value",
		  "Types": [ "all types" ],
		  "Description": "It is the return value as provided by the specified expression"
		}
	],
"Examples" : [
"	ex[] = \"sqrt( x[]*x[] + y[]*y[] )\";",
"	x[] = 3;",
"	y[] = 4;",
"",
"	r[] = expression( sqrt( x[]*x[] + y[]*y[] ) );",
"	echo(\"Output r[] = \", r[] );",
"",
"	r[] = expression( : ex[] );",
"	echo(\"Output r[] = \", r[] );",
"",
"	// Note the required colon.  Otherwise ex[] as variable is returned."
 ]
	,
	"Output": "automatic",
	"See also" :	[ "statements [function]", "compare [function]" ]
}


,

  "compare" :
  {
	"Function Names":	[ "compare" ],
	"Documentation":	"Function Description",
	"Keywords": "compare [function]",
"Description" : [
"		This function performs a comparing between 1st parameter (a value) and 2nd parameter containing a code piece or literal containing the __comparison expression__."
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled" ],
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Value to compare",
		 "Direction":	"input",
		 "Types":		["all types"],
		 "Description": "This value will be compared with the comparison expression in the 2nd function parameter."
	  },
	  {
		 "Number":		"2",
		 "Name":		"Comparison expression",
		 "Direction":	"code",
		 "Types":		["comparison expression", ":literal"],
"Description" : [
"			This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__."
 ]
		  
	  }
	],
	"Return value":
	[
		{ "Name": "Comparison result",
		  "Types": [ "boolean" ],
		  "Description": ""
		}
	],
"Examples" : [
"	a[] = 3; b[] = 5; c[] = 7;",
"	ex[] = \">6\";",
"",
"	echo(\"Greater than 4: \", compare( a[],  >4 ), \" \", compare( b[],  >4 ), \" \", compare( c[],  >4 ) );",
"	echo(\"Greater than 6: \", compare( a[],:ex[]), \" \", compare( b[],:ex[]), \" \", compare( c[],:ex[]) );",
"",
"	// Note the required colon.  Otherwise ex[] is seen as variable to compare with."
 ]
	,
	"Output": "automatic",
	"See also" :	[ "expression [function]" ]
}


,

  "assign" :
  {
	"Function Names":	[ "assign" ],
	"Documentation":	"Function Description",
	"Keywords": "assign [function]",
"Description" : [
"		This function assigns a value to a variable which is specified in the 1st function parameter containing a code piece or literal containing the assignment destination."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled" ],
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"destination variable",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  },
	  {
		 "Number":		"2",
		 "Name":		"Value to assign",
		 "Direction":	"input",
		 "Types":		["all types"],
"Description" : [
"			The specified value provided in this parameter will be assigned in the target variable."
 ]
		  
	  }
	],
"Examples" : [
"	v[] = \"b[]\";",
"",
"	assign(  c[]  , 456 );",
"	assign( :v[]  , 123 );",
"	assign( :\"d[]\", 789 );",
"	// Note the required colon.  Otherwise v[] is the variable to assign to.",
"",
"	echo(\"Variable b[] = \", b[] );",
"	echo(\"Variable c[] = \", c[] );",
"	echo(\"Variable d[] = \", d[] );"
 ]
	,
	"Output": "automatic",
	"See also" :	[ "statements [function]", "expression [function]" ]
}


,

"echo, print ..." :
{
  "Function Names":	[ "echo", "print", "print line" ],
  "Documentation":	"Function Description",
"Description" : [
"    The following functions compose the contents in the function parameters into one string and outputs them on the screen.<br>",
"    <b>echo</b> outputs the contents onto the screen, followed by new line. Indirect parameter passing is disabled, so parameter sets provided",
"    in the 1st function parameter will not be interpreted as individual function parameters but is considered as an actual parameter set value.<br>",
"    <b>print line</b> works like <b>echo</b>, but indirect parameter passing is enabled.  E.g. <b>print({a,1});</b> is treated as <b>print(a,1);</b>.",
"    <b>print</b> works like <b>print line</b>, but stays on the same line afterwards (no 'new line'.)",
"",
"    <br><br>",
"    In addition of outputting the composed string onto the screen, it is available as return value, too.",
"   "
 ]
    ,
    "Call as":			"procedure or function",
    "Restrictions":		"Indirect parameter passing is disabled for function 'echo'.",
    "Parameter count":	"Min 0",
    "Parameters":
    [
        { "Number": "1, ...",
          "Name": "Contents",
          "Direction": "input",
          "Types": [ "all types" ],
          "Description": ["Contents to be output"]
        }

    ],
    "Return value":
    [
        { "Name": "Composed string",
          "Types": [ "literal" ],
          "Description": "Same contents as output to the console"
        }
    ],
"Examples"  : [
"    c[] = 3+5*2;",
"    a[] = echo( \"Calculation: \", c[], \" compared with 13 gives \", c[]==13, \".\" );",
"    echo(\"Return value: \", a[] );",
"    r[] = print(\"Note the line break ... \" );",
"    print(r[]); // Repeat",
"    print (\"in a[] at the end.\");",
"    echo;",
"    echo;",
"",
"    s[] = { \"Calculation: \", c[], \" compared with 13 gives \", c[]==13, \".\" };",
"    echo(\"Output parameter set with 'echo':\");",
"    echo( s[] );",
"    echo(\"Output parameter set with 'print line':\");",
"    print line( s[] );"
 ]
    ,
    "Output": "automatic",
    "See also": ["compose", "compose line" ]
},


"compose ..." :
{
  "Function Names":	[ "compose", "compose line" ],
  "Documentation":	"Function Description",
"Description" : [
"    The functions <b>compose</b> and <b>compose line</b> work similarly like __print(__) and __print line(__).  The only difference is that",
"    only the composed string will be returned as return value, but nothing is output onto the console."
 ]
    ,
    "Call as":			"procedure or function",
    "Restrictions":		"Indirect parameter passing is enabled",
    "Parameter count":	"Min 0",
    "Parameters":
    [
        { "Number": "1, ...",
          "Name": "Contents",
          "Direction": "input",
          "Types": [ "all types" ],
          "Description": ["Contents to be output"]
        }

    ],
    "Return value":
    [
        { "Name": "Composed string",
          "Types": [ "literal" ],
          "Description": "Same contents as output to the console"
        }
    ],
"Examples"  : [
"    c[] = 3+5*2;",
"",
"    a[] = compose line( \"Calculation: \", c[], \" compared with 13 gives \", c[]==13, \".\" );",
"    echo(\"The composed string using 'compose line' is\", new line, a[], \"... Done ...\" );",
"",
"    a[] = compose ( \"Calculation: \", c[], \" compared with 13 gives \", c[]==13, \".\" );",
"    echo(\"The composed string using 'compose' is\", new line, a[], \"... Done ...\" );"
 ]
    ,
    "Output": "automatic",
    "See also": ["compose", "compose line" ]
}

,

"input" :
{
  "Function Names":	[ "input" ],
  "Documentation":	"Function Description",
"Description" : [
"    This function prompts a message on the screen (asking for user input) and then expects user input for a variable.",
"    Type and value checking can be enabled if needed, e.g. numbers only, integers with in a specific range, etc."
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"1-3",
    "Parameters":
    [
      { "Number": "1",
        "Name": "Prompt",
        "Direction": "input",
        "Types": [ "literal" ],
        "Description": ["The prompt will be displayed before input is requested"]
      },
      { "Number": "Opt. 2",
        "Name": "Checked value type",
        "Direction": "input",
        "Types": [ "literal" ],
        "Default value": "literal",
"Description" : [
"            Use one of the following values:",
"            === 200, 600, noframe_1stcolbold, noheader",
"            literal     | A literal string is expected.  Actually, all inputs (even number, true, false, {a,b,}) are treted literally. No input is rejected for its contents.",
"            numeral     | A numeral is expected",
"            integer     | An integer is expected (no digits behind decimal point)",
"            character   | Expects exactly 1 character.  Blank inputs are rejected as well as inputs containing more than 1 character.",
"            boolean     | Expects boolean value true or false.  Following replies will be translated: true, t, yes, y, 1 ='true'; false, f, no, n, 0 for = 'false'. Input is not case sensitive.",
"            date        | Valid and unambiguous date expected",
"            time        | Valid time expected (e.g. hh:mm, hh:mm:ss)",
"            date and time | Expects combination of date and time",
"            ===",
"            If the entered value does not match with the tpye, then the user will be requested to repeat the input."
 ]
            
      },
      {
        "Number":		"Opt. 3",
        "Name":		"Validation expression",
        "Direction":	"code",
        "Default value": "true (no limitations)",
        "Types":		["comparison expression", ":literal"],
"Description" : [
"            If the entered value does not match with the tpye, then the user will be requested to repeat the input.",
"            ",
"            <br><br>",
"",
"            This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"            ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"            literal is of type __softquoted literal__."
 ]
          
      }
    ],
    "Return value":
    [
        { "Name": "Entered value",
          "Types": [ "valid types" ],
          "Description": "The value entered is returned, using the appropriate type."
        }
    ],
"Examples"  : [
"    a[] = input(\"Enter both date and time: \", date and time  );",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter any value: \");",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter any integer greater than or equal to 3: \", integer, >=3);",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter one lower-case latin character: \", character, 'a'..'z');",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter a boolean value (true, false, y, n, ... ): \", boolean);",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter a date in 2020: \", date, date(01.01.2020)..date(31.12.2020) );",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input(\"Enter a time before 15:00 \", time, <time(\"15:00\") );",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );"
 ]
    ,
    "Output": [ "savecode" ],
    "See also": [ "input quick" ]
}


,

"input quick ..." :
{
  "Function Names":	[ "input quick", "input quick ignore case" ],
  "Documentation":	"Function Description",
"Description" : [
"    These two functions prompts a message on the screen (asking for user input) and then expects user input for a single character.",
"    The character will be read in immediately without [Enter] to be pressed afterwards.  Optioally, the 2nd function parameter may contain",
"    a collection of allowed characters.  The function <b>input quick ignore case</b> ignore case while checking with the allowed characters",
"    and the returned character is in upper case.",
" ",
""
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"1, 2",
    "Parameters":
    [
      { "Number": "1",
        "Name": "Prompt",
        "Direction": "input",
        "Types": [ "literal" ],
        "Description": ["The prompt will be displayed before input is requested"]
      },
      { "Number": "Opt. 2",
        "Name": "Allowed characters",
        "Direction": "input",
        "Types": [ "literal" ],
        "Description": ["Put all allowed characters into the string.  Execution will only continue if the check is OK."]
      }
    ],
    "Return value":
    [
        { "Name": "Entered character",
          "Types": [ "literal" ],
          "Description": ""
        }
    ],
"Examples"  : [
"    a[] = input quick ignore case(\"Enter N/Y/1/0 \", ny10 );",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );",
"",
"    a[] = input quick (\"Enter äbcdé (lower case only, note the accents): \", äbcdé );",
"    echo(\"Entered value is : \", a[],\"   The type is : \", type (a[]) );"
 ]
    ,
    "Output": [ "savecode" ],
    "See also": [ "getch", "getch ignore case", "input", "table menu" ]
}


,

"getch ..." :
{
  "Function Names":	[ "getch", "getch ignore case" ],
  "Documentation":	"Function Description",
"Description" : [
"    These two functions read one single character without need to push [Enter] and without the charactered echoed on the screen which is ",
"    the case in the functions __input quick(__) and __input quick ignore case(__).",
""
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"0 or 1",
    "Parameters":
    [
      { "Number": "Opt. 1",
        "Name": "Allowed characters",
        "Direction": "input",
        "Types": [ "literal" ],
        "Description": ["Put all allowed characters into the string.  Execution will only continue if the check is OK."]
      }
    ],
    "Return value":
    [
        { "Name": "Entered character",
          "Types": [ "literal" ],
          "Description": ""
        }
    ],
"Examples"  : [
"    do",
"    {",
"        echo(\"Enter a character between 'a' and 'e'. 'x' = exit\");",
"        ch[] = getch ignore case( abcdex );",
"        echo(\"Character entered: \", ch[] );",
"    } while (ch[] <> X);",
"    echo(\"Done.\");"
 ]
    ,
    "Output": [ "savecode" ],
    "See also": [ "input quick", "input quick ignore case" ]
}


,

  "text / background color" :
  {
    "Function Names":	[ "text color", "background color" ],
    "Documentation":	"Function Description",
    "Keywords":			[ "font color", "foreground color", "screen color" ],
    "Description":		[ "Standard and portable approach to set the text and background colors on the console.",
                          "This function memorizes one previous text and background color (and not more) and can be recalled with color name 'previous'." ],
    "Call as":			"procedure or function",
    "Restrictions":		"Indirect parameter passing is disabled",
"OS differences" : [
"            Windows: Uses console attribute system calls.",
"            LINUX / MACOS: Terminal chosen to use must support escape sequences.  Scrolling up the entire row at the bottom fills the new row with current background color."
 ]
            ,
    "Parameter count":	"0-1",
    "Parameters":
    [
        { "Number": "1",
          "Name": "Color",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description":
            [ "Color name.  Vaid names are: black, dark blue, blue, dark read, red, dark magenta, magenta, dark green, green, dark cyan, cyan, dark yellow, yellow, white, gray, dark gray, default, previous.",
              "<i>default</i> means referring to the original color settings.  <i>previous</i> refers to the previously set color. " ],
          "Default value": "Text color stays unchanged"
        }

    ],
    "Return value":
    [
        { "Name": "Current color",
          "Types": [ "literal" ],
          "Description": "Presently set color. 'default' is returned if default color is effective."
        }
    ],
    "Exceptions":	"none",
"Examples"  : [
"    savecode",
"    echo( Default color );",
"    text color( red ); // Will not show up in red in this documentation",
"    echo( Red text );",
"    text color; // Back to default color",
"    echo( Back to default color );"
 ]
     , // End marker
"Output" : [
"    Default color",
"    Red text",
"    Back to default color"
 ]
    ,
    "Notes": "Highly recommend to set default color before the app is finishing."
  }


,

  "cursor" :
  {
    "Function Names":	[ "cursor" ],
    "Documentation":	"Function Description",
    "Keywords":			[ "cursor position", "move cursor" ],
    "Description":		[ "The cursor will be moved to a specified location on the screen." ],
    "Call as":			"procedure",
    "Restrictions":		"Indirect parameter passing is disabled",
"OS differences" : [
"            Windows: Uses console attribute system calls.",
"            LINUX / MACOS: Terminal chosen to use must support escape sequences."
 ]
            ,
    "Parameter count":	"2",
    "Parameters":
    [
        { "Number": "1",
          "Name": "X",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": "Column position, beginning with 1. 1 is assumed for values below 1."
        },
        { "Number": "2",
          "Name": "Y",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": "Row position, beginning with 1. 1 is assumed for values below 1."
        }

    ],
    "Exceptions":	"none",
"Examples"  : [
"    savecode",
"    cursor( 5, 3 );",
"    echo( \"Text appears on row 3, column 5\" );"
 ]
     , // End marker
"Output" : [
"    Text appears on row 3, column 5"
 ]
    
  }


,

  "cls" :
  {
    "Function Names":	[ "cls" ],
    "Documentation":	"Function Description",
    "Keywords":			[ "clear the screen" ],
    "Description":		[ "Clear the screen" ],
    "Call as":			"procedure",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameter count":	"0",
    "Exceptions":	"none",
"Examples"  : [
"    savecode",
"    cls;",
"    echo( \"Text appears on the top of the empty screen\" );"
 ]
     , // End marker
"Output" : [
"    Text appears on the top of the empty screen"
 ]
    
  }


,

  "inspect" :
  {
    "Function Names":	[ "inspect" ],
    "Documentation":	"Function Description",
"Description" : [
"    This function checks inspects a variable and displays all contents including those of all memeber variables.  The types",
"    are displayed as well as protection settings. Regarding types: <b>'literal'</b> means softquoted literal and <b>\"literal\"</b>",
"    means quoted literal.",
"",
"    <br><br>",
"    <u>Hint</u>: This function is suitable for __interactive__ and __debugging__ use in order to inspect variables conveniently.",
""
 ]
    ,

    "Call as":			"procedure",
    "Parameter count":	"1",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameters":
    [
      {
         "Number":		"1",
         "Name":		"Variable to inspect",
         "Direction":	"code",
         "Types":		["variable", ":literal"],
         "Description": ""
      }
    ],
"Examples" : [
"    simple[] = 0123.00;",
"    array( words[], { 1, Me, you, true } );",
"    words[1] = { one, 2, { 2.5, two point six, 2.8 } };",
"    structure( sizes[], { whale, dog, ant }, {huge, small, tiny } );",
"    structure( sizes[dog], { jack russel, poodle, setter }, { smaller, medium, bigger } );",
"",
"    inspect(simple[]);",
"    inspect(words []);",
"    inspect(sizes []);"
 ]
    ,
    "Output": "automatic",
    "See also": "list variables"
  }

,

  "list variables ..." :
  {
    "Function Names":	[ "list variables", "list system variables", "list global variables", "list local variables" ],
    "Documentation":	"Function Description",
"Description" : [
"",
"    These functions list the contents of all / system / global / or local variables.",
"    For every variable and the members, the types  are displayed as well as protection settings. Regarding types: <b>'literal'</b> means softquoted ",
"    literal and <b>\"literal\"</b> means quoted literal.",
"    <br><br>",
"    <u>Hint</u>: This function is suitable for __interactive__ and __debugging__ use in order to inspect variables conveniently.",
""
 ]
    ,

    "Call as":			"procedure",
    "Parameter count":	"1",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameters":
    [
      {
         "Number":		"1",
         "Name":		"Variable search string",
         "Direction":	"input",
         "Types":		["literal"],
         "Description": "The search string narrows down the name of the base variable to be included in the listing.  __Wildcard__ symbols are supported here."
      }
    ],
"Examples" : [
"    define procedure( foo, {{ parameter passed, literal }} )",
"    {",
"       echo(\"All local variables:\");",
"       abc[] = Hello World;",
"       def[] = 123;",
"       list local variables;",
"       echo(\"Some global variables:\");",
"       list global variables('my*');",
"    }",
"",
"    my world[] = Globe;",
"    my continents[Europe] = {UK, Germany, France};",
"    my continents[Africa] = {Namibia, Egypt, Ivory Coast};",
"    my continents[Asia] = { India, Thaland };",
"",
"    echo(\"All system variables with base variable name beginning with 'r':\");",
"    list system variables(\"r*\");",
"",
"    foo(Works beautifully);"
 ]
    ,
    "Output": "automatic",
    "See also": "inspect"
  }

,

  "function list / explain" :
  {
    "Function Names":	[ "function list", "function explain" ],
    "Documentation":	"Function Description",
"Description" : [
"",
"    These functions lists provide information about the available functions",
""
 ]
    ,

    "Call as":			"procedure",
    "Parameter count":	"1",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameters":
    [
      {
         "Number":		"1",
         "Name":		"Function name search string",
         "Direction":	"input",
         "Types":		["literal"],
         "Description": "The search string narrows down the name of the functions to be included in the listing.  __Wildcard__ symbols are supported here."
      }
    ],
"Examples" : [
"    define procedure( mode, {{ meaningful text, literal }} )",
"    {",
"        echo(\"Test\");",
"    }",
"",
"    echo(\"Functions listed:\");",
"    function list( \"mo*\" ); // Lists 3 functions: mod, mode (defined here) and month.",
"    echo;",
"    echo(\"Functions explained:\");",
"    function explain( \"mo*\" ); "
 ]
    ,
    "Output": "automatic",
    "See also": "function dump"
  }

,

  "function dump" :
  {
    "Function Names":	[ "function dump" ],
    "Documentation":	"Function Description",
"Description" : [
"",
"    This function creates a B4P table which contains all availbale function names including their parameters,",
"    and rules such as minimum required and maximum allowed number of parameters.",
"    It also contains all user-defined procedures and functions, such as those provided in the included library files.",
"",
"    <br><br>",
"",
"    <u>Advice</u>: Call this function, the save the table as a file and open the file with Excel for inspection.",
"",
"    <br><br>",
"    The table contains following info:",
"    === 200, 800, bold_column_1",
"    Header Name     | Description",
"    Function Name   | Name of function.  All visible functions, including user-defined functions are listed.",
"    Function Type   | Takes 'procedure', 'procedure or function' or 'function'",
"    Min Param       | Minimum number of parameters required",
"    Max Param       | Maximum number of parameters allowed",
"    Para Repetition | If 'Max Param' > 'Min Param', the this value rules the intervals, e.g. from 4-8 in steps of 2 (4,6,8).",
"                    | The following rows releate to every function parameter and are listed separately with contents to the left kept blank.",
"    Para #          | Parameter number, begins with 1",
"    Para Name       | Parameter namee",
"    Para Direction  | See __function parameter directions__",
"    Para Type Expected  | Lists the parameter types",
"    Para Type Addtl Info | Provides additional info, e.g. values looking like dates being converted to dates before the function is called.",
"    ==="
 ]
    ,

    "Call as":			"procedure",
    "Parameter count":	"1",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameters":
    [
      {
         "Number":		"1",
         "Name":		"Name of table",
         "Direction":	"input",
         "Types":		["literal"],
         "Description": "A table will be created using this name."
      }
    ],
"Examples" : [
"    include( Support Library );",
"    define procedure( mode, {{ meaningful text, literal }} )",
"    {",
"        echo(\"Test\");",
"    }",
"",
"    function dump( table );",
"",
"    // table save( table, \"All functions.csv\" ); // Advisable for you to use.",
"",
"    table keep selected rows( table, [Function Name]='mo*' );",
"    table transpose ( table ); // fits better in the output (wide table)",
"    table list( table );",
"",
"    // The bottom paramters are blank because they are not listed on the",
"    // same row as the function name.",
""
 ]
    ,
    "Output": "automatic",
    "See also": ["function list", "function explain"]
  }

,

  "prompt" :
  {
    "Function Names":	[ "prompt" ],
    "Documentation":	"Function Description",
"Description" : [
"",
"    This function changes the prompt to be displayed in interactive mode and memorizes it so it will be used",
"    whenever B4P is started.  The prompt can be enriched with useful data such as current date and time,",
"    current working directory, etc.",
"",
"    <u>Advice</u>: Use this function in __interactive__ mode.  Not recommended to specify it inmidst a B4P program."
 ]
    ,

    "Call as":			"procedure or function",
    "Parameter count":	"1",
    "Restrictions":		"Indirect parameter passing is disabled",
    "Parameters":
    [
      {
         "Number":		"Opt. 1",
         "Name":		"B4P expression",
         "Direction":	"input",
         "Types":		["literal"],
"Description" : [
"            Specify a B4P expression (as a string, not code piece like in other functions) which will be saved and applied whenever interactive mode is invoked.<br>",
"            Providing a blank string ('') will restore factory settings, i.e. '>>'. "
 ]
            
      }
    ],
    "Return value":
    [
        { "Name": "Currently defined prompt",
          "Types": [ "literal" ],
          "Description": "The prompt as shown in interactive mode will be returned"
        }
    ],
"Examples:Example using Interactive Mode" : [
">> prompt( \"working directory()+ ' >>'\" )",
"C:\\Users\\Zur Bonsen Georg\\Documents\\Programme\\Beyond4P\\B4P_Docu_Maker >> echo (Hello)",
"Hello",
"C:\\Users\\Zur Bonsen Georg\\Documents\\Programme\\Beyond4P\\B4P_Docu_Maker >> prompt( \"literal(date time( now )) + '>'\"  )",
"2020-10-01 20:15:29>",
"2020-10-01 20:15:31> prompt( \"right last match( working directory(), \"\\\") + ' >>'\" )",
"B4P_Docu_Maker >> $ cd ..",
"B4P: Verify and resolve path '..' ...",
"     OK. Current directory changed to 'C:\\Users\\Zur Bonsen Georg\\Documents\\Programme\\Beyond4P\\'",
"",
"Beyond4P >> $ cd *Maker",
"B4P: Verify and resolve path '*Maker' ...",
"     OK. Current directory changed to 'C:\\Users\\Zur Bonsen Georg\\Documents\\Programme\\Beyond4P\\B4P_Docu_Maker\\'",
"",
"B4P_Docu_Maker >> prompt (\"\")",
">> =prompt()",
">> [\"literal\"]",
">>"
 ]
    
  }

,

  "is numeric / integer - Functions" :
  {
	"Function Names":	[ "is numeric", "is integer", "is numeric or blank", "is integer or blank", "is strictly numeric", "is strictly integer", "is strictly numeric or blank", "is strictly integer or blank" ],
	"Keywords":			[ "checking numbers" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	<b>is numeric</b> returns true if the value provided is a numeral<br/>",
"	<b>is numeric or blank</b> returns true if the value provided is a numeral or a blank literal.<br/>",
"	<b>is integer</b> returns true if the value provided is a whole number (aka integer)<br/>",
"	<b>is integer or blank</b> returns true if the value provided is a whole number (aka integer) or a blank literal.<br/>",
"	<b>is strictly numeric</b> returns true if the value provided is a numeral<br/>",
"	<b>is strictly numeric or blank</b> returns true if the value provided is a numeral or a blank literal.<br/>",
"	<b>is strictly integer</b> returns true if the value provided is a whole number (aka integer)<br/>",
"	<b>is striclty integer or blank</b> returns true if the value provided is a whole number (aka integer) or a blank literal.<br/>",
"",
"	<br><br>",
"	Attention: If the function name does not contain the word <b>strictly</b>, then literals containing legitimate numbers with and without",
"	decimal point, minus sign and scientific notation (exponents) are also considered as numbers.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "Value to check." ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if criteria is met."
		}
	],
"Examples" : [
"		for all parameters( { 1, '1', 1.1, '1.1', '1.1E+03', '1.1234E+03', '', ' ', 'a' }, p[] )",
"		{",
"			print(p[],\": is \");",
"			if (is numeric(p[])) print (\"numeric, \");",
"			if (is strictly numeric(p[])) print (\"strictly numeric, \");",
"			if (is integer(p[])) print (\"integer, \");",
"			if (is strictly integer(p[])) print (\"strictly integer, \");",
"			if (is numeric or blank(p[])) print (\"numeric or blank, \");",
"			if (is strictly numeric or blank(p[])) print (\"strictly numeric or blank, \");",
"			if (is integer or blank(p[])) print (\"integer or blank, \");",
"			if (is strictly integer or blank(p[])) print (\"strictly integer or blank, \");",
"			echo;",
"		}"
 ]
		,
	"Output": "automatic"
}



,

  "even, odd, whole" :
  {
	"Function Names":	[ "even", "odd", "whole" ],
	"Keywords":			[ "even numbers", "odd numbers", "whole numbers" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	<b>whole</b> returns true if the number is a whole number<br/>",
"	<b>even</b> returns true if the number is a whole number and even<br/>",
"	<b>odd</b> returns true if the number is a whole number and odd<br/>",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to check." ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if criteria is met."
		}
	],
	"Exceptions": [ "Value provided is not a numeral" ],
"Examples" : [
"		for all parameters( { 1, 1.5, 2, 3, -1, -1.5 }, p[] )",
"		{",
"			print(p[],\": is \");",
"			if (even (p[])) print (\"even, \");",
"			if (odd  (p[])) print (\"odd, \");",
"			if (whole(p[])) print (\"whole, \");",
"			echo;",
"		}"
 ]
		,
	"Output": "automatic"
}


,

  "abs - Absolute Value" :
  {
	"Function Names":	[ "abs" ],
	"Keywords":			[ "absolute value" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Derives the absolute value.  Functional behavior depends on __basic data types__ provided:",
"",
"	=== 100, 500, bold_column_1 ",
"	data type | Description",
"	numeral | Turns number positive",
"	literal | Returns 0 all time",
"	date    | Returns __Microsoft Excel serial date__. If time is provided, then time is the fraction of the day (e.g. 0.5 for 12:00 noon time). ",
"	boolean | Returns 0 if false, 1 if true",
"	parameter set | Activates __indirect parameter passing__.  Parameter set must contain 1 element of type described above.",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "Value to convert to absolute value" ]
		} ],
	"Return value":
	[
		{ "Name": "Absolute value",
		  "Types": [ "numeral" ],
		  "Description": "Absolute value as calculated using rules described above"
		}
	],
"Examples" : [
"		echo( abs(-1) );",
"		echo( abs(true) );",
"		echo( abs(Hello World) );",
"		echo( abs(date(today)) );",
"		echo( abs(date(now)) );",
"		echo( abs(time(now)) );"
 ]
		,
	"Output": "automatic"
}


,

  "round, round up / down" :
  {
	"Function Names":	[ "round", "round up", "round down" ],
	"Keywords":			[ "rounding functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Rounds the number (automatically or up or down) to the next rounding interval.  The rounding intervals may be integers as well as non-integers.",
"	Example: 0.25 rounds in steps of 0.25.",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1, 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Number to round",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Any positive or negative number" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Rounding interval",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Defines the steps how the rounding is done.  E.g. 0.4 rounds numbers to 0, 0.4, 0.8, 1.2, and the same in the negative direction." ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Rounded number"
		}
	],
	"Exceptions": [ "Values provided is not a numerals", "rounding intervals is negative or zero" ],
"Examples" : [
"		for all parameters( { {1.4, 1}, {1.5,1}, {-1.5,1}, {18, 10}, { 3.14159, 0.01 } }, p[] )",
"			echo( \"round \", p[]{0}, \" using \", p[]{1}, \": \", round( p[]{0}, p[]{1} ),",
"			      \"  up: \", round up( p[]{0}, p[]{1} ), \"  down: \", round down( p[]{0}, p[]{1} ) );"
 ]
	,
	"Output": "automatic"
}


,

  "mod - Modulo function" :
  {
	"Function Names":	[ "mod" ],
	"Keywords":			[ "modulo" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the remainder (modulo) of a value.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Divisor",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to divide by dividend" ]
		},
		{ "Number": "2.",
		  "Name": "Dividend",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
		  "Description":
			[ "Dividend is used for the division following extracting the remainder value" ]
		} ],
	"Return value":
	[
		{ "Name": "Remainder",
		  "Types": [ "numeral" ],
		  "Description": "Calculated remainder"
		}
	],
	"Exceptions": [ "Values provided is not a numerals", "rounding intervals is negative or zero" ],
"Examples" : [
"		for all parameters( { {10, 3}, {10.25,0.02}, {10.5, 2} }, p[] )",
"			echo( p[]{0}, \" mod \", p[]{1}, \" = \", mod( p[]{0}, p[]{1} ) );"
 ]
	,
	"Output": "automatic"
}


,

  "random - Random Integers" :
  {
	"Function Names":	[ "random" ],
	"Keywords":			[ "random" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Generates a random integer number. Biggest range (from lower to upper boundary) is 2^31-1.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1, 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "1st boundary value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "If specified alone, then random numbers returned lie between 0 and specified value." ]
		},
		{ "Number": "Opt. 2.",
		  "Name": "2nd boundary value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "If specified, then it will serve as 2nd boundary value. It does not matter if it is smaller or greater than the 1st boundary value." ]
		} ],
	"Return value":
	[
		{ "Name": "Random number",
		  "Types": [ "numeral" ],
		  "Description": "Randomly generated number"
		}
	],
	"Exceptions": [ "Values provided is not a numerals"  ],
"Examples" : [
"		for (i[]=1, i[]<=10, i[]++) print( random(1000),        \" \" ); echo;",
"		for (i[]=1, i[]<=10, i[]++) print( random( 1000,  950), \" \" ); echo;",
"		for (i[]=1, i[]<=10, i[]++) print( random(-1000, -950), \" \" ); echo;",
"		for (i[]=1, i[]<=10, i[]++) print( random(   -5,    3), \" \" ); echo;",
"		for (i[]=1, i[]<=10, i[]++) print( random(   -1,    1), \" \" ); echo;"
 ]
	,
	"Output": "automatic"
}


,

  "pow - Power Function" :
  {
	"Function Names":	[ "pow" ],
	"Keywords":			[ "power function" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the x (base value) ^ y (power exponent).",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Base value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to be raised to the power exponent" ]
		},
		{ "Number": "2",
		  "Name": "Exponent",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
		  "Description":
			[ "Exponent value to apply." ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated result"
		}
	],
	"Exceptions": [ "Values provided is not a numerals", "rounding intervals is negative or zero" ],
"Examples" : [
"		echo( pow( 7, 2 ) );",
"		echo( pow( 3, 3 ) );",
"		echo( pow( 81, 0.5 ) );",
"		echo( pow( 27, 1/3 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Square Root" ]
}


,

  "Trigonometric Functions" :
  {
	"Function Names":	[ "sin", "sin deg", "cos", "cos deg", "tan", "tan deg", "asin", "asin deg", "acos", "acos deg", "atan", "atan deg" ],
	"Keywords":			[ "trigonometric functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	All common trigonometric functions are supported.  The function names ending with <b>deg</b> use angle measures in degrees and not in radians.",
"",
"	=== 100, 100, 400, bold_column_1 bold_column_2",
"	Radian based	| Degree based		| Function description",
"	sin				| sin deg			| Sine",
"	cos				| cos deg			| Cosine",
"	tan				| tan deg			| Tangent",
"	asin			| asin deg			| Arcsine (inverse sine)",
"	acos			| acos deg			| Arccosine (inverse cosine)",
"	atan			| atan deg			| Arctangent (inverse tangent)",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Angle or value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to be raised to the power exponent" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated value"
		}
	],
	"Exceptions": [ "For selected functions (e.g. asin): Values are outside valid range" ],
"Examples" : [
"		pi[] = asin(1)*2;",
"		echo( cos( pi[] / 4 ) ); // 45 deg.",
"		echo( sin deg( 30 ) );   // 30 deg.",
"		echo( asin deg( 1 ) );   // 90 deg."
 ]
	,

	"Output": "automatic",

	"See also": [ "Hyperbolic Functions" ]

},

  "Hyperbolic Functions" :
  {
	"Function Names":	[ "sinh", "cosh", "tanh", "asinh", "acosh", "atanh" ],
	"Keywords":			[ "hyperbolic functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	All common trigonometric functions are supported.  The function names ending with <b>deg</b> use angle measures in degrees and not in radians.",
"",
"	=== 100, 700, bold_column_1",
"	Function		| Function description",
"	sinh			| Hyperbolic sine",
"	cosh			| Hyperbolic cosine",
"	tanh			| Hyperbolic tangent",
"	asinh			| Hyperbolic arcsine (inverse hyperbolic sine / areasinus hyperbolicus)",
"	acosh			| Hyperbolic arccosine (inverse hyperbolic cosine / areacosinus hyperbolicus)",
"	atanh			| Hyperbolic arctangent (inverse hyperbolic tangent / areatangens hyperbolicus)",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to be raised to the power exponent" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated value"
		}
	],
	"Exceptions": [ "For selected functions (e.g. asinh): Values are outside valid range" ],
"Examples" : [
"		pi[] = asin(1)*2;",
"		echo( sinh(1) );",
"		echo( tanh(9999) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Trigonometric Functions" ]
},


  "Exponential Functions" :
  {
	"Function Names":	[ "exp", "10p" ],
	"Keywords":			[ "exponential functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	exp(x) calculates e ^ x <br/>",
"	10p(x) calculates 10 ^x <br/>",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Exponent value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to be raised to the power exponent" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated value"
		}
	],
"Examples" : [
"		echo( exp( 1 ) );",
"		echo( 10p( 3 ) );",
"		echo( 10p( 3.5 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Logarithmic Functions" ]
},

  "Logarithmic Functions" :
  {
	"Function Names":	[ "ln", "log" ],
	"Keywords":			[ "logarithmic functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	ln(x) calculates logarithm on base e<br/>",
"	log(x) calculates logarithm on base 10.<br/>",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to use for logarithmic calculation" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated logarithm value"
		}
	],
"Examples" : [
"		echo( log( 1000 ), \" \", log( 0.001 ) );",
"		echo( ln(1000) / ln( 10 ), \" \", ln( 0.001) / ln(10) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Exponential Functions" ]
}



,


  "sqrt - Square Root" :
  {
	"Function Names":	[ "sqrt" ],
	"Keywords":			[ "Square Root" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the square root of a value",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Value to use for logarithmic calculation" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated square root value"
		}
	],
	"Exceptions": [ "Negative square root" ],
"Examples" : [
"		echo( sqrt( 4 ) );",
"		echo( sqrt( 2 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Power Functions" ]
}



,


"Arithmetic and Boolean Series Functions" :
{
	"Function Names": ["add", "sub", "mul", "div", "and", "or", "xor", "xnor"] ,
	"Keywords" : ["Arithmetic and Boolean Series Functions", "Two parameter passing methods for series functions"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	The following functions calculate the parameters from left to right in the same way as if the corresponding operator is used.  All variable types",
"	as supported by the operators are supported in this function, too.  For example, <b>sub(10,2,3)</b> is the same as <b>10-2-3</b>, both returning 5.",
"	=== 200, 200, 200, 200, bold_column_1 bold_column_3",
"	Function Name	| Related operator	| Function Name | Related operator",
"	add				| +					| and			| &amp;",
"	sub				| -					| or			| &#124;",
"	mul				| *					| xor			| !=",
"	div				| /					| xnor			| ==",
"	===",
"",
"	As long the corresponding operators allow mixed types (e.g. using __numerals__ to add days to a __date__, or adding boolans to numerals where booleans",
"	are implicitly converter to 0 or 1), then they are also supported by this function.  These functions are very useful for processing large series",
"	and series of different sizes efficiently.",
"	<br><br>",
"	<b>Two parameter passing methods for series functions</b><br/>",
"	The functions described on this page as well as a large number additional series and statistics functions (e.g. __min(__), __max 123(__)', etc.) support the following two different methods to pass parameters",
"	into the functions:",
"	=== 300, 700, bold_column_1, noheader",
"	Direct Parameter Passing			| Put all parameters to be calculated into the this function and they will be processed from left to right",
"	Advanced Indirect Parameter Passing | Put all parameters to be caluclated into a __parameter set__ and provide them into the 1st function parameter.<br>2 additional function parameters are available to limit the range of elements to be processed.",
"	===",
"	",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "Value",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["All values to be applied in the calculations"]
		},

		{ "Number": "Alt. 1",
		"Name" : "Value",
		"Direction" : "input",
		"Types" : ["parameter set"] ,
		"Description" :
		["All values to be calculated from left to right are in the parameters set"]
		},

		{ "Number": "Alt. 2",
		"Name" : "Starting parameter element to include",
		"Direction" : "input",
		"Types" : ["numeral"] ,
		"Default value" : "0" ,
		"Description" :
		["Points to the starting parameter element.  __Negative indexing__ is allowed here, i.e. -1 refers to last element in the parameter set."]
		},

		{ "Number": "Alt. 3",
		"Name" : "Last parameter element to include",
		"Direction" : "input",
		"Types" : ["numeral"] ,
		"Default value" : "Last value",
		"Description" :
		["Points to the last parameter element.  __Negative indexing__ is allowed here, i.e. -1 refers to last element in the parameter set."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["valid types"] ,
		"Description" : "Calculated value"
		}
	] ,
"Examples" : [
"",
"		echo( add( 1, 2, 3 ) ); // 6",
"		echo( add( {1,2,3} ) ); // 6",
"		echo( add( {1,2,3}, 1) ); // 5",
"		echo( add( date('2013-12-31'), 1, 2 ) ); // 03. Jan 2014",
"		echo( add( Hello, ' ', World) ); // Hello World",
"		echo( sub( 10, 2,3 ) ); //  5",
"		echo( div( 1000, 2, 50) ); // 10",
"		echo( xor( true, false, true ) ); // false",
""
 ]
	 ,
	"Output": "automatic",
	"See also": [ "sum", "product" ]
}

,

"min, max Functions" :
{
	"Function Names": ["min",     "max ignore zero",     "min ignore blanks",  "max", "max ignore zero", "max ignore blanks"] ,
	"Keywords" : ["min and max functions"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	min / max…: Compares all values inside the function parameter or parameter set together, using type checking and comparison rules as given for ",
"	the binary operators &lt; (for min) and &gt; (for max). <br>",
"	The suffix <b>... ignore zero</b> excludes all zero values and blank (=zero) dates.<br>",
"	The suffix <b>... ignore blanks</b> excludes all literals with blank contents.  Note: Blank dates can be ignored with <b>... ignore zero</b>.  For the functions desccribed here, literals containing white spaces only are considered blank, too.<br>",
"",
"	Providing mixed types, e.g. a combination of numerals and literals, will assert exceptions.  Only the <b>... ignore blanks</b> suffix tolerates",
"	blank literals in the parameters where the others are other types, e.g. __numerals__.",
"",
"	=== 150, 150, 100, 600, bold_column_1 bold_column_2",
"	Minimum Function Name		| Maximum Function Name		| Autom. Type conversion | Description",
"	min 						| max						| No					 | Picks minimum or maximum value provided",
"	min ignore zero				| max ignore zero			| No					 | \",  but ignores 0 and blank dates",
"	min ignore blanks			| max ignore blanks			| No					 | \", but ignores blank literals.",
"	===",
"",
"	Please note that equivalent __conditional combination functions__ are also available for the function names listed above which allows",
"	you to pre-select specific parameters to include in the calculation using one or more comparisons .",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "All function parameters:",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["Same parameter passing principle is applied like other series functions such as __add(__), __sub(__), etc. <br/>See __Two parameter passing methods for series functions__ for details.."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["valid types"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Attempting to compare incompatible types, e.g. numerals with literals" ],
"Examples" : [
"		echo( \"dates, 0 ignored  : \", min ignore zero( date(\"\"), date(\"2020-03-23\"), date(\"2020-03-20\") ) );",
"		echo( \"dates compared    : \", min ( date(\"\"), date(\"2020-03-23\"), date(\"2020-03-20\") ) );",
"		echo( \"numbers w/o blanks: \", min ignore blanks( 5, 8, \"\", 1 ) );",
"		echo( \"literals          : \", max( \"He\", \"he\", \"hi\", \"Hi\" ) ); // Max = last in alphabetic order",
"// 		echo( \"causes exception  : \", max ( 1, a, 2, b ) ); // Commented out because it's wrong."
 ]
	 ,
	"Output": "automatic",
	"See also": [ "min 123", "max 123", "min numeral", "max numeral", "min abc", "max abc", "min literal", "max literal" ]
}

,

"min, max Functions on Literals" :
{
	"Function Names": ["min abc",     "max abc",     "min abc ignore blanks",     "min abc ignore case",     "max abc ignore case",     "min abc ignore both", 
	                   "min literal", "max literal", "min literal ignore blanks", "min literal ignore case", "max literal ignore case", "min literal ignore both"] ,
	"Keywords" : ["min and max functions on literals"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	These functions identify the minimum or maximum literal values using alphabetic ordering rules based on UNICODE character codes.  If cases are not ignored, then min( 'A', 'a' ) returns 'A' because",
"	'A' has the smaller character code.  If cases are ignored two values of the same letter with different casesare compared, then the first of the two",
"	letters will be used for comparing with the remaining parameters, or returned. Note: \"AA\" is greater than \"A\", and \"A \" is greater than \"A\".",
"",
"	* The suffix <b>min ... ignore blanks</b> ignores comparing values against blanks as blanks are the most minimum literal value and you may want to skip comparing these blank ones.<br><u>Attention:</u> Other functions with ending <b>... ignore blanks</b> ignore all white spaces in the parameters, but this is not the case in this function. ",
"	* In the case above, if all values are blank, then blank will be returned.",
"	* Function names containing <b>literal</b> require the parameters to be __literal__. Otherwise exceptions happen.",
"	* Function names containing <b>abc</b> will convert the parameters into literals before comparing them, e.g. Boolean <i>true</i> changes to literal 'true', and numbers change to literals ('12' is bigger than '111').",
"",
"",
"	=== 150, 150, 100, 600, bold_column_1 bold_column_2",
"	Minimum Function Name		| Maximum Function Name		| Autom. Type conversion | Description",
"	min abc						| max abc					| Yes					 | Picks minimum or maximum value provided",
"	min literal					| max literal				| No					 | \"",
"	min abc ignore case			| max abc ignore case		| Yes					 | Ignore upper/lower case, and picks minimum or maximum value provided",
"	min literal ignore case		| max literal ignore case	| No					 | \"",
"	min abc ignore blanks		| ---						| Yes					 | Picks minimum or maximum value provided, but ignores the blank ones",
"	min literal ignore blanks	| ---						| No					 | \"",
"	min abc ignore both			| ---						| Yes					 | Picks minimum or maximum value provided, but ignores the blank ones and ignores case",
"	min literal ignore both		| ---						| No					 | \"",
"	===",
"",
"	Please note that equivalent __conditional combination functions__ are also available for the function names listed above which allows",
"	you to pre-select specific parameters to include in the calculation using one or more comparisons .",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "All function parameters:",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["Same parameter passing principle is applied like other series functions such as __add(__), __sub(__), etc. <br/>See __Two parameter passing methods for series functions__ for details.."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["literal"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Function names containing 'literal' assert exceptions if values provided are not of type iteral" ],
"Examples" : [
"		echo( min abc ( 13, 100 ) ); // It's 100",
"		echo( max abc ( AH, ah, aH, Ah ) ); // Picks ah",
"		echo( max abc ignore case ( AH, ah, aH, Ah ) ); // Picks 1st parameter",
"		echo( min abc ( Abel, '', '', Beat, '' ) ); // Unpleasant outcome",
"		echo( min literal ignore blanks ( Abel, '', '', Beat, '' ) ); // This one is better	",
"		echo( min literal ignore both( Beat, Abel, ABEL, '' ) ); // Picks Abel (cases ignored)"
 ]
	 ,
	"Output": "automatic",
	"See also": [ "min 123", "max 123", "min numeral", "max numeral", "min", "max" ]
}

,

"min, max Functions on Numerals" :
{
	"Function Names": ["min 123", "max 123", "min 123 ignore zero", "max 124 ignore zero", "min numeral", "max numeral", "min numeral ignore zero", "max numeral ignore zero" ] ,
	"Keywords" : ["min and max functions on numerals"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	These functions identify the minimum or maximum numeric values.  Following rules apply",
"",
"	* The suffix <b>... ignore zero</b> ignores all 0 (zero) values in the comparison process.  If all parameters contain 0, then 0 is returned.",
"	* Function names containing <b>numeral</b> require the parameters to be of type __numeral__. Otherwise exceptions happen.",
"	* Function names containing <b>abc</b> will convert the parameters into numerals before comparing them, e.g. \"0123\" converts to \"123\".  Literals not containing numbers will be treated as zero which you may want to ignore.",
"",
"",
"	=== 150, 150, 100, 600, bold_column_1 bold_column_2",
"	Minimum Function Name		| Maximum Function Name		| Autom. Type conversion | Description",
"	min 123						| max 123					| Yes					 | Picks minimum or maximum numeric value provided",
"	min numeral					| max numeral				| No					 | \"",
"	min 123 ignore zero			| max 123 ignore zero		| Yes					 | Picks minimum or maximum numeric value provided, but 0's are ignored",
"	min numeral ignore zero		| max literal ignore zero	| No					 | \"",
"	===",
"",
"	Please note that equivalent __conditional combination functions__ are also available for the function names listed above which allows",
"	you to pre-select specific parameters to include in the calculation using one or more comparisons .",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "All function parameters:",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["Same parameter passing principle is applied like other series functions such as __add(__), __sub(__), etc. <br/>See __Two parameter passing methods for series functions__ for details.."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["numeral"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Function names containing 'numeral' assert exceptions if values provided are not of type numeral." ],
"Examples" : [
"		echo( max 123( 1, 3, 5 ) ); // 5",
"		echo( min 123( \"0002\", \"1\", \"3\" ) ); // 1",
"		echo( max 123 ignore zero( -4, -2, 0, -1 ) ); // -1"
 ]
	 ,
	"Output": "automatic",
	"See also": [ "min abc", "max abc", "min literal", "max literal", "min", "max" ]
}

,

"count Functions" :
{
	"Function Names": ["count", "count ignore zero", "count ignore blanks", "count ignore both" ] ,
	"Keywords" : ["count functions"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	These functions counts number of affected parameters.",
"	The suffix <b>... ignore zero</b> excludes all zero values: Numeral 0, Boolean false and blank dates.",
"	The suffix <b>... ignore blanks</b> excludes all literals with blank values: Literal blank (0 characters), blank dates and empty sets in parameter sets (but includes sets containing something, including nested empty sets).<br>",
"	The suffix <b>... ignore both</b> covers both of the above.<br>",
"",
"	Please note that equivalent __conditional combination functions__ are also available for the function names listed above which allows",
"	you to pre-select specific parameters to include in the calculation using one or more comparisons .",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "All function parameters:",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["Same parameter passing principle is applied like other series functions such as __add(__), __sub(__), etc. <br/>See __Two parameter passing methods for series functions__ for details.."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["numeral"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Function names containing 'numeral' assert exceptions if values provided are not of type numeral." ],
"Examples" : [
"		echo( count              ( 1, 2, 3, a, '', ' ',0 )  ); // 7",
"		echo( count ignore zero  ( 1, 2, 3, a, '', ' ',0 )  ); // 6",
"		echo( count ignore blanks( 1, 2, 3, a, '', ' ',0 )  ); // 5 (only pure blank ignored)",
"		echo( count ignore both  ( 1, 2, 3, a, '', ' ',0 )  ); // 4 (both 0 and blank ignored)",
"",
"		echo( count              ( date(today), date(\"\"), true, false )  ); // 4",
"		echo( count ignore zero  ( date(today), date(\"\"), true, false )  ); // 2 (blank date, false)",
"		echo( count ignore blanks( date(today), date(\"\"), true, false )  ); // 3 (blank date)",
"		echo( count ignore both  ( date(today), date(\"\"), true, false )  ); // 2 (both)"
 ]
	 ,
	"Output": "automatic",
	"See also": [ "counting parameter set elements with {}" ]
}

,

"Basic Statistics Functions" :
{
	"Function Names": [ "average",			"average ignore zero",			"average ignore blanks",
						"variance",			"variance ignore zero",			"variance ignore blanks",
						"deviation",		"deviation ignore zero",		"deviation ignore blanks",
						"rms",				"rms ignore zero",				"rms ignore blanks",
						"geometric mean",	"geometric mean ignore zero",	"geometric mean ignore blanks",
						"median",			"median ignore zero",
						"product",			"product ignore zero",			"product ignore blanks",
						"sum",				"parallel",						"harmonic mean"] ,
	"Keywords" : ["basic statistics functions"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	These functions identify the minimum or maximum numeric values.  Following rules apply",
"",
"	* The suffix <b>... ignore zero</b> ignores all 0 (zero) values and blank values (otherwise treated as zero)",
"	* The suffix <b>... ignore blanks</b> ignores blanks, but not 0 (zero) values.",
"",
"",
"	=== 150, 150, 150, 550, bold_column_1 bold_column_2 bold_column_3",
"	Standard approach			| Ignore zero				| Ignore blanks					| Description",
"	average						| average ignore zoero		| average ignore blanks			| Sum of all applicable values divided by the count. Also known as <i>mean</i>",
"	variance					| variance ignore zero		| variance ignore blanks		| Measure of how far numbers spread out from their average",
"	deviation					| deviation ignore zero		| deviation ignore blanks		| Square root of variance",
"	rms							| rms ignore zero			| rms ignore blanks				| Root mean square: Applicable values squared, averaged, and square root applied. Also known as <i>quadratic mean</i>.",
"	geometric mean				| geometric mean ignore zero | geometric mean ignore blanks | n-th root of product of all applicable values where n is the number of alues multiplied together.",
"	median						| median ignore zero		| (always ignored)				| Identifes the <i>middle value</i> with half of all values below and half of all values above",
"	product						| product ignore zero		| product ignore blanks			| All applicable values are multiplied together",
"	parallel					| (always ignored)			| (always ignored)				| <i>Resistors-in-parallel</i> formula (sum of inverted value, inverted) = 1/( 1/x1 + 1/x2 + ... + 1/xn )",
"	harmonic mean				| (always ignored)			| (always ignored)				| Also known as <i>Average of rates</i>, calculated = n/( 1/x1 + 1/x2 + ... + 1/xn )",
"	===",
"",
"	Please note that equivalent __conditional combination functions__ are also available for the function names listed above which allows",
"	you to pre-select specific parameters to include in the calculation using one or more comparisons .",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "Min 1",
	"Parameters" :
	[
		{ "Number": "1, etc.",
		"Name" : "All function parameters:",
		"Direction" : "input",
		"Types" : ["valid types"] ,
		"Description" :
		["Same parameter passing principle is applied like other series functions such as __add(__), __sub(__), etc. <br/>See __Two parameter passing methods for series functions__ for details.."]
		}
	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["numeral"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Function names containing 'numeral' assert exceptions if values provided are not of type numeral." ],
"Examples" : [
"		echo( average(10,12,14,20 ) );         // returns 14",
"		echo( average({10,12,14,20}, 1) );     // ~15.33 (1st parameter excluded in this case)",
"		echo( geometric mean( 10,12,14,20 ) ); // ~13.54",
"		echo( harmonic mean(10,12,14,20 ) );   //  13.125",
"		echo( rms(10,12,14,20) );              // ~14.49",
"		echo( parallel(1,3) );                 //   0.75",
"		echo( product ignore zero( 0,3,4 ) );  //  12",
"		echo( product ( 3,\"\",2) );             //   0",
"		echo( product ignore blanks(3,\"\",2) ); //   6"
 ]
	 ,
	"Output": "automatic",
	"See also": [ "add", "mul" ]
}

,

"Conditional Combination Functions" :
{
	"Function Names": [ 
	
	"sum if",							"sum if any",
	"product if",	 					"product if any",
	"product ignore blanks if",			"product ignore blanks if any",
	"product ignore zero if",			"product ignore zero if any",
	"average if",						"average if any",
	"average ignore blanks if",			"average ignore blanks if any",
	"average ignore zero if",			"average ignore zero if any",
	"rms if",							"rms if any",
	"rms ignore blanks if",				"rms ignore blanks if any",
	"rms ignore zero if",				"rms ignore zero if any",
	"geometric mean if",				"geometric mean if any",
	"geometric mean ignore blanks if",	"geometric mean ignore blanks if any",
	"geometric mean ignore zero if",	"geometric mean ignore zero if any",
	"harmonic mean if",					"harmonic mean if any",
	"median if",						"median if any",
	"median ignore zero if",			"median ignore zero if any",
	"variance if",						"variance if any",
	"variance ignore blanks if",		"variance ignore blanks if any",
	"variance ignore zero if",			"variance ignore zero if any",
	"deviation if",						"deviation if any",
	"deviation ignore blanks if",		"deviation ignore blanks if any",
	"deviation ignore zero if",			"deviation ignore zero if any",
	"parallel if",						"parallel if any",
	"count if",							"count if any",
	"count ignore blanks if",			"count ignore blanks if any",
	"count ignore zero if",				"count ignore zero if any",
	"count ignore both if",				"count ignore both if any",	
	"max if",							"max if any",
	"max ignore zero if",				"max ignore zero if any",
	"max ignore blanks if",				"max ignore blanks if any",
	"min if",							"min if any",
	"min ignore zero if",				"min ignore zero if any",
	"min ignore blanks if",				"min ignore blanks if any",
	"max abc if",						"max abc if any",
	"min abc if",						"min abc if any",
	"min abc ignore blanks if",			"min abc ignore blanks if any",
	"max abc ignore case if",			"min abc ignore case if any",
	"min abc ignore case if",			"min abc ignore case if any",
	"min abc ignore both if",			"min abc ignore both if any",
	"max literal if",					"max literal if any",
	"min literal if",					"min literal if any",
	"min literal ignore blanks if",		"min literal ignore blanks if any",	
	"max literal ignore case if",		"min literal ignore case if any",
	"min literal ignore case if",		"min literal ignore case if any",
	"min literal ignore both if",		"min literal ignore both if any",
	"max 123 if",						"max 123 if any",
	"min 123 if",						"min 123 if any",
	"max 123 ignore zero if",			"max 123 ignore zero if any",
	"min 123 ignore zero if",	 		"min 123 ignore zero if any",
	"max numeral if",					"max numeral if any",
	"min numeral if",					"min numeral if any",
	"max numeral ignore zero if",		"max numeral ignore zero if any",
	"min numeral ignore zero if", 		"min numeral ignore zero if any",
	"join if",							"join if any",
	"join ignore blanks if",			"join ignore blanks if any",
	"join unique if",					"join if any",
	"join unique ignore blanks if",		"join ignore blanks if any"	] ,

	"Keywords" : ["conditional combination functions"] ,
	"Documentation" : "Function Description",
"Description" : [
"",
"	The conditional combination functions apply a specific function not on all values supplied, but on a selected set of values for which the comparison specified in the following",
"	function parameters is matching.  The function names belonging to this function family consist of previously defined <i>base function names</i>, for example <b>sum</b>, <b>count</b>, <b>average</b>, <b>min 123</b>,",
"	followed by a suffix which is either <b>if</b> or <b>if any</b>.  For the base function names, please refer to the corresponding function desriptions in the sections __Series Functions__ and __Statistics Functions__.",
"",
"	<br><br>",
"	The series of values must be provided in a __parameter set__ and then provided in the 1st function parameter.  Simply putting the values into individual fuction parameters like in the original",
"	functions is not allowed here.",
"",
"	<br><br>",
"	The 2nd (and even numbered) function parameters also contain a __parameter set__ containing values where the number of elements should be the same as in the 1st function parameter containing the values to process",
"	because each element in the 2nd (and even numbered) parameter corresponds to their counter part elements in the 1st parameter.",
"",
"	<br><br>",
"	The 3rd (and odd numbered) function parameters contain a __comparison expression__ which can either be a value (implies equal comparison) or an expression containing a __comparison operator__ followed",
"	by an expression as expected in comparisons.  All values in the 2nd (and even numbered) function parameters will be compared with this expression.  For all comparisons turning out <i>true</i>, the corresponding value",
"	in the  1st parameter will be included in the calculation.",
"",
"	* If the 2nd (and even numbered) function parameters contain more elements than the parameter set in the 1st function parameter, then the excessive elements will be ignored.",
"	* If the 2nd (and even numbered) function parameters contain fewer elements than the parameter set in the 1st function parameter, then <i>false</i> is assumed for the remaining parameters in the 1st function parameter and will not be considered for the calculations.",
"",
"	Example: <b>sum if( {1,2,3,4}, {a,b,a,c}, (=a) )</b> sums the 1st and 3rd parameter element (values 1, 3) because the corresponding elements in the 2nd parameter sets meet the expression <i>equals to a</i>.",
"",
"	<br><br>",
"",
"	The differenntiation between <b>if</b> or <b>if any</b> at the end of the function names play a role if additional comparisons are specified using additional two function parameters.",
"	* The ending <b>if</b> includes those parameter set elements in the 1st function parameter for calculations if the corresponding elements in <i>all</i> even numbered parameters result in a positive comparison. <br>In shoret: <i>AND</i> combination of all comparisons.",
"	* The ending <b>if any</b> includes those parameter set elements in the 1st function parameter for calculations if the corresponding elements in <i>any of the</i> even numbered parameters result in a positive comparison. <br>In shoret: <i>OR</i> combination of all comparisons.",
"",
"	<u>Attention:</u> The function nnames beginning with \"join \" requires 1 additional parameter to provide the separation symbols",
""
 ]
	,
	"Call as":			"function",
	"Parameter count" : "3, 5, 7, ... (if not 'join ...'), and 4, 6, 8 ... (if 'join ...')",
	"Parameters" :
	[
		{ "Number": "1",
		"Name" : "Values to calculate",
		"Direction" : "input",
		"Types" : ["parameter set"] ,
		"Description" :
		["These are the values which will be pre-selected and then passed to the <i>base function</i>."]
		},

		{ "Number": "2,4,...",
		"Name" : "Corresponding values to compare",
		"Direction" : "input",
		"Types" : ["parameter set"] ,
		"Description" :
		["Recommended to provide the same number of elements as provided in the 1st functionj parameter."]
		},

		{ "Number": "3,5,...",
		"Name" : "Comparison expression",
		"Direction" : "code",
		"Types" : ["comparison expression", ":literal"] ,
		"Description" :
		["The parameter elements in the previous function parameter will be compoared with this expression.  <br><u>Attention:</u> If function parameter is not the last one, then do not forget to specify parentheses if comparing without operator, = equal sign or <> not equal sign because would be interpreted as compareing with additional values separated by commmas."]
		},

		{ "Number": "Opt. Last",
		"Name" : "Separation symbols for function names beginning wtih join...",
		"Direction" : "input",
		"Types" : ["parameter set containing literals"] ,
		"Description" :
		["This parameter set must contain at least 0 and at most 3 elements of type __literal__.  These 3 elements correspond to the 2nd, 3rd and 4th function parameters in the function __join(__).  <br>For exmaple, <b>{'(', ', ', ')' }</b> is a valid example.<br>Do not use literals if only one element is needed. "]
		}

	] ,
	"Return value":
	[
		{ "Name": "Result",
		"Types" : ["numeral"] ,
		"Description" : "Calculated value"
		}
	] ,
	"Exceptions": [ "Function names containing 'numeral' assert exceptions if values provided are not of type numeral." ],
"Examples" : [
"		echo( sum if  ( { 1, 2, 3, 4, 5 }, { 10, 8, 6, 4, 2 }, >4 ) ); // 6, because first 3 elements are added",
"",
"		echo( sum if  ( { 1, 2, 3, 4, 5 }, { 2, 8, 6, 4, 2 }, >=4, { a, b, c, d, e }, c..e ) );",
"		// Returns 7 because comparisons of the 2nd-4th elements in 2nd parameter and last 3 elements in the 4th",
"		// parameter givei true.  Intersecting both, the 3rd and 4th elements will be summed.",
"",
"		echo( sum if any  ( { 1, 2, 3, 4, 5 }, { 2, 8, 6, 4, 2 }, >=4, { a, b, c, d, e }, c..e ) );",
"		// Returns 14 because comparisons of the 2nd-4th elements in 2nd parameter and last 3 elements in the 4th",
"		// parameter give true.  Taking the union of both, the 2nd - 5th elements will be summed.",
"",
"		echo( join if ( { Jim, Jane, John, Kate, Nic }, { 25, 18, 30, 17, 40 }, >=20, {\"(\", \", \",\")\"} ) );",
"		// Returns (Jim, John, Nic) because their ages are 20 or higher."
 ]
		 ,
	"Output": "automatic",
	"See also": [ "sum", "product", "basic statistics functions", "count functions" ]
}

,

  "covariance, correlation" :
  {
	"Function Names":	[ "covariance", "correlation" ],
	"Keywords":			[ "covariance and correlation" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the covariance resp. correlation of two vectors (= parameter sets containing numerals).",
"	Zero is returned if number of parameter elements is 0 or 1.",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"2",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "1st vector",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "2nd vector",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Description":
			[ "" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Calculated covariance resp. correlation"
		}
	],
	"Exceptions": [ "Vectors have different lengths", "parameter sets provided contain non-numeric elements" ],
"Examples" : [
"		echo( covariance( {},{} ) ); // Returns 0",
"		echo( covariance( {10,20,30}, {10,30,20} ) ); //   50",
"		echo( covariance( {10,20,30}, {30,20,10} ) ); // -100",
"",
"		echo( correlation( {1},{1} ) ); // 0",
"		echo( correlation( {10,20,30}, {10,30,20} ) ); //  0.5",
"		echo( correlation( {10,20,30}, {30,20,10} ) ); //  -1"
 ]
		,
	"Output": "automatic",
	"See also": [ "variance", "deviation" ]
}

,

  "gini Coefficient Functions" :
  {
	"Function Names":	[ "gini", "gini ignore blanks", "gini ignore zero" ],
	"Keywords":			[ "gini coefficient", "income disparity" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the gini coefficient (e.g. to identify the income disparity) of a set of values.  This function will also return the corresponding Lorenz curve",
"	if a 2nd parameter is provided.",
"",
"	<br><br>",
"	The suffix <b>... ignore zero</b> excludes all zero values.  Note: Blank values are also considered zero and are therefore ignored<br>",
"	The suffix <b>... ignore blanks</b> excludes blank values, but includes zeros.<br>",
"",
""
 ]
	,
	
	"Call as":			"function",
	"Parameter count":	"1-2",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "The parameter set shall contain numerals and/or blank literals." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Lorenz curve",
		  "Direction": "code",
		  "Types": [ "variable" ],
		  "Description":
			[ "Specify a variable name to which the parameter set of numbers describing the Lorenz curve will be written to.  The variable will be created if it does not exist yet." ]
		} ],
	"Return value":
	[
		{ "Name": "Gini coefficient",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "1st parameter is not a parameter set containing positive numerals and/or blank literals." ],
"Examples" : [
"		echo( gini( { 1,1,1,1,1 } ) ); // Everyone is equal, returns 1",
"		echo( gini( { 1, 1.2, 1.3, 1, 1.4, 1.2 } ) ); // ca 0.93, some dispartiy",
"		echo( gini( { 1, 1, 1, 1, 16 }, lorenz[] ) ); // 0.4, big disparity",
"		echo( \"Lorenz curve: \", lorenz[] );"
 ]
		,
	"Output": "automatic",
	"See also": [ "variance", "deviation" ]
}

,

  "cagr - Compond Annual Growth Rate" :
  {
	"Function Names":	[ "cagr" ],
	"Keywords":			[ "compound annual growth rate" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the compound annual growth rate (CAGR).  The traditional appraoch is to calculate the growth by considering the first value",
"	and the last value, taking the ratio of them and annualizing them.  Formula: (xn / n1) ^ (1 / number of years).",
"",
"	<br><br>",
"",
"	Since the standard appraoch ignores some intermediate values (for example last year was lousy, but previous years were successful",
"	and should be merited), the CAGR can also be calculated using the average of the first <i>n</i> and last <i>n</i> values.",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "Set of numerals (blank literals are allowed and recognized as zero) to be used to calculate the CAGR" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Grouping",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			Use the average of the first n and the last n values for the CAGR.  This feature eliminates the limited focus on just the first and last value.",
"			If the parameter set contains fewer values, then the grouping figure will be reduced anyway.",
"			Example: Grouping of 3 for parameter with 5 elements would overlap in the middle, therefore it will be reduced to 2 in order to compare first two and last two figures."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "time base",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "years",
"Description" : [
"				Accepts following three values: <b>year</b>, <b>semesters</b>, <b>quarters</b>, and <b>months</b> in order to identify wheter the values provided are on an annual, quarterly or monthly base.",
"				If quarter or month are chosen, then the compound avarage growth rate will be automatically adjusted to years."
 ]
				
		} ],
	"Return value":
	[
		{ "Name": "CAGR result",
		  "Types": [ "numeral" ],
		  "Description": "0 if parameter set provided contains 0 or 1 parameter only."
		}
	],
	"Exceptions": [ "Growth figure from zero yields mathematics error." ],
"Examples" : [
"		echo( cagr( { 1, 3, 2, 3, 4, 6, 8, 3 } ) );  // ca 17%. Ignores values in the middle",
"		echo( cagr( { 1, 3, 2, 3, 4, 6, 8, 3 }, 3 ) );  // ca 23%, looks better now",
"		echo( cagr( { 1, 1.2, 1.1, 1.2, 1.3 }, 1, quarters ) );  // 30% growth in 1 year"
 ]
		,
	"Output": "automatic",
	"See also": [ "average" ]
}

,

  "Linear and Exponential Regression" :
  {
	"Function Names":	[ "regression" ],
	"Keywords":			[ "linear regression", "exponential regression" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Calculates the linear or exponential regression for a set of points along a given timeline and outputs them as parameter set reflecting a linear or exponential curve.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "Set of numerals (blank literals are allowed and recognized as zero) to be used to calculate the CAGR" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Regression calculation method",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "linear",
"Description" : [
"				Accepts following three values: <br>",
"				<b>linear</b> for linear regression, and <br>",
"				<b>exponential</b> for exponential regression."
 ]
				
		} ],
	"Return value":
	[
		{ "Name": "Regression curve",
		  "Types": [ "parameter set" ],
		  "Description": "Contains as many elements as provided in the 1st function parameter and describes the linear or exponential regression curve."
		}
	],
"Examples" : [
"		echo( regression( {1, 1.5, 2.5, 4, 6.5 } ) ); // returns { 0.4, 1.75, 3.1, 4.45, 5.8 }",
"		echo( regression( {1, 1.5, 2.5, 4, 6.5 }, exponential) ); // returns an exponential pattern"
 ]
		,
	"Output": "automatic",
	"See also": [ "average" ]
}

,

  "discount - Discount Values" :
  {
	"Function Names":	[ "discount" ],
	"Keywords":			[ "discount" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Applies a discounting on a sequence of values (typically annual cashflow figures) using a Working Average Cost of Capital (WACC) value.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"2-3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "values to discount",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "Set of numerals (blank literals are allowed and recognized as zero) to be discounted using the WACC value" ]
		},
		{ "Number": "2",
		  "Name": "WACC",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Working average Cost of Capital (WACC)" ]
		},
		{ "Number": "Opt. 3",
		  "Name": "time base",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "years",
"Description" : [
"				Accepts following three values: <b>years</b>, <b>semesters</b>, <b>quarters</b>, and <b>months</b> in order to identify wheter the values provided are on an annual, quarterly or monthly base.",
"				If quarter or month are chosen, then the compound avarage growth rate will be automatically adjusted to years."
 ]
				
		} ],
	"Exceptions": ["Input parameter set contains values of invalid type (e.g. literals)"],
"Examples" : [
"		fcf [ ] = { 100, 150, 200, 250 };",
"		discount ( fcf[ ] , 0.1);",
"		echo( fcf[ ] );"
 ]
		,
	"Output": "automatic",
	"See also": [ "irr" ]
}

,

  "irr - Internal Rate of Return" :
  {
	"Function Names":	[ "irr" ],
	"Keywords":			[ "irr" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function calculates the <i>Internal Rate of Return</i> (IRR) for an investment where the invested sums as well as anticipated return in absolute (cash flow)",
"		values are known.  The calculation is based on the following discounted cash flow formula where the the unknown <i>r</i> is calculated from given cashflow figure",
"		for periods 0 to N and the sum of the final NPV is zero (initial investments and subsequent returns balanced to 0).",
"",
"		<br/><br/><img src=\"Images/Function_irr_Formula.jpg\" alt=\"B4P General Overview\"><br/>",
"",
"		In a typical investment case, at least one (the first) cash flow value is negative and the remaining values are positive to reflect the returns to achieve."
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "cashflow values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "Set of numerals (blank literals are allowed and recognized as zero) to be discounted using the WACC value" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "time base",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "years",
"Description" : [
"				Accepts following three values: <b>years</b>, <b>semesters</b><b>quarters</b>, and <b>months</b> in order to identify wheter the values provided are on an annual, quarterly or monthly base.",
"				If quarter or month are chosen, then the compound avarage growth rate will be automatically adjusted to years."
 ]
				
		} ],
	"Return value":
	[
		{ "Name": "Calculated IRR",
		  "Types": [ "numeral" ],
		  "Description": "A positive value reflects good chances that the investment made is paying off."
		}
	],
	"Exceptions": ["Input parameter set contains values of invalid type (e.g. literals)"],
"Examples" : [
"		echo( irr( {-100, 5, 105} ) ); // Returns 0.05"
 ]
		,
	"Output": "automatic",
	"See also": [ "tv" ]
}

,

  "tv - Terminal Value" :
  {
	"Function Names":	[ "tv" ],
	"Keywords":			[ "tv" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		Sorry, this function does not broadcast your favorite series.<br><br>",
"",
"		This funtion calculates the terminal value based on the perpetual growth method.<br>",
"		tv = FCFn * (1+growth rate) / (WACC - growth rate)",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "FCFn",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Free Cash Flow value at year <i>n</i>" ]
		},
		{ "Number": "2",
		  "Name": "Growth Rate",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Perpetual growth rate of Free Cash Flow (FCF)" ]
		},
		{ "Number": "3",
		  "Name": "WACC",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Working Average Cost of Capital (WACC)" ]
		} ],
	"Return value":
	[
		{ "Name": "TV",
		  "Types": [ "numeral" ],
		  "Description": "Calculated Terminal Value"
		}
	],
	"Exceptions": ["Division by zero error happens if WACC equals to the perpetual growth rate"],
"Examples" : [
"		echo( tv ( 100, 0.05, 0.12 ) ); // Returns 1500"
 ]
		,
	"Output": "automatic",
	"See also": [ "irr" ]
}

,

  "distribute - Value Distribution over Timeline" :
  {
	"Function Names":	[ "distribute", "distribute advance" ],
	"Keywords":			[ "distribution over timeline" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function distributes a value over a time line of intervals such as days, weeks, months, quarters and years.  Either a fixed total value is distributed",
"	between two specified dates, or a combination of start date and capacity (unit per day) is provided and the end date will be calculated automatically",
"	(e.g. Total value = 10, capacity per day = 2 means 5 days).",
"",
"	<br><br>",
"	Doing a production planning with production start date, production end date and number of items to produce is a good example.<br>",
"	If a batch size is given (e.g. 10 items produced at a time), then specify it.<br>",
"	If the distribution should not be bound to deliveries, but to purchasing / receiving required material for these items, then use the function <b>distribute advance</b>.",
"",
"	<br><br>",
"	Alternative to total value, the softqutoed literal '#days' (use no or single quoatation marks, but not double quotation marks) can be specified instead of the total ",
"	value in order to return the number of days instead. 	Note regarding dates: Dates are always considered as plain dates, ignoring time of day info if contained in the date values.",
"",
"	<br><br>",
"	Detailed overview with many examples: See <a href=\"images/function_distribute_examples.pdf\">available PDF overview</a>",
"",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"10-14",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Total value",
		  "Direction": "input",
		  "Types": [ "numerals or literals" ],
		  "Description":
			[ "Total value to be distributed over the timeline.<br>Alternatively, specify <b>#days</b> (only this literal value is allowed here), sot the total value will relate to the total number of identified work days." ]
		},
		{ "Number": "2",
		  "Name": "Batch size",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"				The batch size must be 0 or a positive value.<br>",
"				<b>0</b> = No subsivision.  The total value will be distributed proportionally across the periods.<br>",
"				<b>1</b> = Batch size of 1 unit.<br>",
"				The bach size must not necessarily be an integer.  Choosing <b>0.5</b> is valid and would rule batch sizes of half items."
 ]
		  
		},
		{ "Number": "3",
		  "Name": "Start date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Must provide a valid date.  Any time of day info will be ignored." ]
		},
		{ "Number": "4",
		  "Name": "End date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Must provide a valid date which must be after the start date or at the same day.  Any time of day info will be ignored." ]
		},
		{ "Number": "Alt. 4",
		  "Name": "Capacity per day",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Instead of specifying an end date, you an also specify a capacity value in units per day.  The end date will be calculated automatically." ]
		},
		{ "Number": "5",
		  "Name": "Intervals",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"				This parameter determinse if you want to do a plan on daily, weekly, monthly or other basis.  Note that a daily planning is the most fine-grained",
"				option and produces the biggest and most detailed plans.",
"",
"				=== 200, 500, bold_column_1",
"				Intervals parameter		| Description",
"				days					| Distribution over days",
"				weeks					| Distribution over weeks",
"				whole weeks				| Distribution over weeks, all weeks are considered as full weeks (even if start and/or end dates lie in the middle of the weeks)",
"				months					| Distribution over months",
"				whole months			| Distribution over months, all months are considered full months (even if start and/or end dates lie in the middle of the months)",
"				quarters				| Distribution over quarters",
"				whole quarters			| Distribution over months, all quarters are considered full quarters (even if start and/or end dates lie in the middle of the quarters)",
"				quarters whole months	| Distribution over quarters, full months are considered if start and/or end dates are in the middle of the quarters)",
"				years					| Distribution over years",
"				whole years				| Distribution over years, all years are considered full years (even if start and/or end dates lie in the middle of the years)",
"				years whole months		| Distribution over years, full months are considered if start and/or end dates are in the middle of the years)",
"				years whole quarters	| Distribution over years, fullquarters are considered if start and/or end dates are in the middle of the years)",
"				==="
 ]
		  
		},
		{ "Number": "6",
		  "Name": "Usance",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"				Usance is a work and trade practice parameter which is used in association with the 5th function parameter <i>Intervals</i>.",
"",
"				=== 100, 600, bold_column_1",
"				Usance Parameter	| Description",
"				calendar			| Based on 365/366 days per year calendar, 7 days per week work time.  Respects bank and school holidays (vacation days) if specified.",
"				mon_fri				| Based on 365/366 days per year calendar, 5 days per week work time (Mondays through Fridays).  Respects bank and school holidays (vacation days) if specified.",
"				mon_sat				| Based on 365/366 days per year calendar, 6 days per week work time (Mondays through Saturdays).  Respects bank and school holidays (vacation days)if specified.",
"				30_360				| Rules all months having 30 days and all years having 360 days.  Common in finance.  Ignores bank and school holidays (vacation days) if specified.<br>Only valid in combination with following Intervals: <b>months, whole months, quarters, whole quarters, years, whole years</b>.",
"				===",
""
 ]
		  
		},
		{ "Number": "7",
		  "Name": "Output Start date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
"Description" : [
"			This value specifies the starting date for the output to generate.  If 5th parameter is not 'days', then the date will be moved back to the begin of the chosen interval (weeks, months, quarters, years).  ",
"			E.g. if '31.05.2017' is specified for months, then the whole month of May will be considered."
 ]
		  
		},
		{ "Number": "8",
		  "Name": "Output End date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
"Description" : [
"			This value specifies the ending date for the output to generate.  If 5th parameter is not 'days', then the date will be moved forward to the end of the chosen interval (weeks, months, quarters, years).  ",
"			E.g. if '01.05.2017' is specified for months, then the whole month May will be considered."
 ]
		  
		},
		{ "Number": "9",
		  "Name": "Timeline Start Dates",
		  "Direction": "output",
		  "Types": [ "parameter set containing dates" ],
		  "Description": ["Parameter set containing dates related to the values returned in the next parameter (Distributed values).  If interval other than days is specified, then the starting date of the week/month/etc... will be returned."]
		},
		{ "Number": "10",
		  "Name": "Distributed Values",
		  "Direction": "output",
		  "Types": [ "parameter set containing numerals" ],
		  "Description": ["Actual result: Total values distributed over the specified timeline"]
		},
		{ "Number": "Opt. 11",
		  "Name": "Earlier Sum",
		  "Direction": "output",
		  "Types": [ "numeral" ],
		  "Description": ["Non-zero if distributed values exist before the output start date specified in order not to miss them."]
		},
		{ "Number": "Opt. 12",
		  "Name": "Later Sum",
		  "Direction": "output",
		  "Types": [ "numeral" ],
		  "Description": ["Non-zero if distributed values exist after the output end date specified in order not to miss them."]
		},
		{ "Number": "Opt. 13",
		  "Name": "Bank Holidays",
		  "Direction": "input",
		  "Types": [ "parameter set containing dates" ],
		  "Default value": "{}  (Empty set)",
"Description" : [
"			A set of dates may be supplied to declare specific days as bank holidays so these days will not be counted.  This parameter is rejected if the Usance '30_360' is chosen.",
"			The dates may be provided as data type __date__ or __literal__ containing legitimate dates.  Type conversion to dates takes place automatically.",
"",
"			<br><br>",
"			Use the year 1900 (lies well in the past and this is good so) in order to declare bank holidays as anually repeating bank holidays.",
"			Example: \"1900-07-14\" declares French national holiday for every year."
 ]
			
		},
		{ "Number": "Opt. 13",
		  "Name": "School Holidays",
		  "Direction": "input",
		  "Types": [ "parameter set containing dates" ],
		  "Default value": "{}  (Empty set)",
"Description" : [
"",
"			A set of dates may be supplied to declare school holidays (vacation days).  This parameter is rejected if the Usance '30_360' is chosen.",
"			The dates may be provided as data type __date__ or __literal__ containing legitimate dates.  Type conversion to dates takes place automatically.",
"			<b>An even number of dates</b> must be specified as the first date describes the first vacation day and the next date describes the last vacation day.",
"",
"			<br><br>",
"			Use the year 1900 (lies well in the past and this is good so) in order to declare school holidays (vacation) as anually repeating events.<br>",
"			Example: \"1900-07-01\", \"1900-07-21\" declares the first 3 weeks of every July as vacation.",
""
 ]
			
		} ],
	"Return value":
	[
		{ "Name": "Total value fully distributed",
		  "Types": [ "boolean" ],
		  "Description": [ "<b>true</b> if the total value has been fully distributed between output start and output end date and optionally to the output values Earlier Sum and Later Sum.<br>" ]
		}
	],
	"Exceptions": ["Division by zero error happens if WACC equals to the perpetual growth rate"],
"Examples" : [
"		distribute( #days, 0, '06.01.2018', '25.01.2018', days, calendar, '01.01.2018','31.01.2018', date line[], distributed values[] );",
"		echo( date line[]{0},\", \", date line[]{1},\", \", date line[]{2},\", \", date line[]{date line[]{}-1} );",
"		echo( join( distributed values[], \", \" ) );"
 ]
		,
	"Output": "automatic",
	"See also": [ "table distribute" ]
}

,

  "table distribute ..." :
  {
	"Function Names":	[ "table distribute", "table distribute advance", "table distribute accumulate", "table distribute advance accumulate" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function facilitates applying the __distribute(__) function on entire tables.  It integrates all necessary preparations such as inserting vacant columns",
"	for the results and does distribution work on every table row automatically, and all with one single function call.  The function names ending with the",
"	suffix <b>accumulate</b> will add up on values (rather than overwriting them) if the columns are already existing.  In this case, specify as unquoted or softquoted",
"	literal '#existing' (single quotation marks are OK, but not double) in the 11th function parameter.",
"",
"	<br><br>",
"	<u>Note</u>: Regarding dates, days are always considered as whole days, regardless if date functions come with a time of day information or not.<br>",
"	This function distributes a value over a time line of intervals such as days, weeks, months, quarters and years.  Either a fixed total value is distributed",
"	between two specified dates, or a combination of start date and capacity (unit per day) is provided and the end date will be calculated automatically",
"	(e.g. Total value = 10, capacity per day = 2 means 5 days).",
"",
"	<br><br>",
"	Doing a production planning with production start date, production end date and number of items to produce is a good example.<br>",
"	If a batch size is given (e.g. 10 items produced at a time), then specify it.<br>",
"	If the distribution should not be bound to deliveries, but to purchasing / receiving required material for these items, then use the function <b>distribute advance</b>.",
"",
"	<br><br>",
"	Alternative to total value, '#days' (softquoted literal, use no or single quotation marks) can be specified instead of the total value in order to return the number of days instead.",
"",
"	<br><br>",
"	Detailed overview with many examples: See <a href=\"images/function_distribute_examples.pdf\">available PDF overview</a>",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"9-15",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Total values",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"			If <b>literal</b>: Existing header name in the table where the total values are located which need to be distributed.<br>",
"			If <b>numeral</b>: This will be the generalized total value applicable for all table rows."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Batch sizes",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"			If <b>literal</b>: Existing header name in the table where the batch sizes are located which need to be distributed.<br>",
"			If <b>numeral</b>: This will be the generalized batch size applicable for all table rows."
 ]
			
		},
		{ "Number": "4",
		  "Name": "Start Dates",
		  "Direction": "input",
		  "Types": [ "literal", "date" ],
"Description" : [
"			If <b>literal</b>: Existing header name in the table where the start dates are specified for every row.<br>",
"			If <b>date</b>: This will be the generalized start date applicable for all table rows."
 ]
			
		},
		{ "Number": "5",
		  "Name": "End Dates or capacity per day",
		  "Direction": "input",
		  "Types": [ "literal", "date", "numeral" ],
"Description" : [
"			If <b>literal</b>: Existing header name in the table where the end dates are specified for every row.<br>",
"			If <b>date</b>: This will be the generalized end date applicable for all table rows.<br>",
"			If <b>numeral</b>: Capacity (number of units) per day, applicable for all table rows.",
"",
"			<br><br>",
"",
"			<u>Attention</u>: In case a table column for end dates is specified, then only the table rows <u>containing valid end dates as well as end",
"			dates not earlier than start dates or valid capacity per day values</u> will be processed.  Otherwise, the rows will be skipped.  ",
"			No exceptions (error messages) are asserted.  This feature may be useful to skip specific rows intentionally."
 ]
			
		},
		{ "Number": "6",
		  "Name": "Intervals",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"				This parameter determinse if you want to do a plan on daily, weekly, monthly or other basis.  Note that a daily planning is the most fine-grained",
"				option and produces the biggest and most detailed plans.",
"				<br>",
"				Valid values are: days, weeks, whole weeks, months, whole months, quarters, whole quarters, quarters whole moths, years, whole years, years whole months, years whole quarters.<br>",
"				Theese values are exaplined listed in the 5th parameter of the function __distribute(__)."
 ]
		  
		},
		{ "Number": "7",
		  "Name": "Usance",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"				Usance is a work and trade practice parameter which is used in association with the 5th function parameter <i>Intervals</i>.",
"				<br>",
"				Valid values are: calendar, mon_fri, mon_sat, 30_360.<br>",
"				Theese values are exaplined listed in the 6th parameter of the function __distribute(__)."
 ]
		  
		},
		{ "Number": "8",
		  "Name": "Output Start date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
"Description" : [
"			This value specifies the starting date for the output to generate.  If 5th parameter is not 'days', then the date will be moved back to the begin of the chosen interval (weeks, months, quarters, years).",
"			E.g. if '31.05.2017' is specified for months, then the whole month of May will be considered."
 ]
		  
		},
		{ "Number": "9",
		  "Name": "Output End date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
"Description" : [
"			This value specifies the ending date for the output to generate.  If 5th parameter is not 'days', then the date will be moved forward to the end of the chosen interval (weeks, months, quarters, years).",
"			E.g. if '01.05.2017' is specified for months, then the whole month May will be considered."
 ]
		  
		},
		{ "Number": "Opt. 10",
		  "Name": "Header date format",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "{} (not specified)",
"Description" : [
"			Specify '' (single quotation marks) or {} (empty set) for standard date format YYYY-MM-DD<br>",
"			Specify 1 value (1 element in parameter set, or 1 literal) to specify the formatting template as specified in __numeral to literal conversion and formatting__.<br>",
"			Specify 2 values (parameter set or softquoted literal, values separated by comma) where the 2nd value is the locale value (formatting option), (exmaple: en_US).<br>",
"			Specify 3 values (like above) where the 3rd value is the placeholder symbol, also defined in __numeral to literal conversion and formatting__."
 ]
		  
		},
		{ "Number": "Opt. 11",
		  "Name": "Column for distributed values",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "-1 (append the columns after the right-most column)",
"Description" : [
"",
"			Specify the column name or column number where to insert the distributed values.  Use -1  (__negative indexing__ is supported) to append the values on the right hand side",
"			of the table.  <br>",
"			<u>Attention</u>: Column insertion takes place regardless if the column with same date line names do already exist or not.  All other columns further to the right will",
"			be shifted accordingly to avoid overwriting existing contents.",
"",
"			<u>Exception to the rule</u>: If the unquoted or softquoted literal '#existing' (use no quotation or single quotation marks, but not double quotation marks) is specified, ",
"			then B4P looks for the existing column names along the time line.  The existing columns must be in the same sequence as the new ones being created.  This allows you to",
"			call the function <b>table distribute</b> followed by <b>table distribute accumulate</b> on the same table where the distributed values are added up.",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 12",
		  "Name": "Earlier sum",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no column specified)",
"Description" : [
"			Specify at most 1 column header name or column number where to insert the values which lie before the range specified between output start date (8th function parameter).",
"",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 13",
		  "Name": "Later sum",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no column specified)",
"Description" : [
"			Specify at most 1 column header name or column number where to insert the values which lie after the range specified between output end date (9th function parameter).",
"",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 14",
		  "Name": "Bank Holidays",
		  "Direction": "input",
		  "Types": [ "parameter set containing dates" ],
		  "Default value": "{}  (Empty set)",
"Description" : [
"			A set of dates may be supplied to declare specific days as bank holidays so these days will not be counted.  This parameter is rejected if the Usance '30_360' is chosen.",
"			The dates may be provided as data type __date__ or __literal__ containing legitimate dates.  Type conversion to dates takes place automatically.",
"",
"			<br><br>",
"			Use the year 1900 (lies well in the past and this is good so) in order to declare bank holidays as anually repeating bank holidays.",
"			Example: \"1900-07-14\" declares French national holiday for every year."
 ]
			
		},
		{ "Number": "Opt. 15",
		  "Name": "School Holidays",
		  "Direction": "input",
		  "Types": [ "parameter set containing dates" ],
		  "Default value": "{}  (Empty set)",
"Description" : [
"",
"			A set of dates may be supplied to declare school holidays (vacation days).  This parameter is rejected if the Usance '30_360' is chosen.",
"			The dates may be provided as data type __date__ or __literal__ containing legitimate dates.  Type conversion to dates takes place automatically.",
"			<b>An even number of dates</b> must be specified as the first date describes the first vacation day and the next date describes the last vacation day.",
"",
"			<br><br>",
"			Use the year 1900 (lies well in the past and this is good so) in order to declare school holidays (vacation) as anually repeating events.<br>",
"			Example: \"1900-07-01\", \"1900-07-21\" declares the first 3 weeks of every July as vacation.",
""
 ]
			
		} ],
	"Return value":
	[
		{ "Name": "Total value fully distributed",
		  "Types": [ "boolean" ],
"Description" : [
"		    <b>true</b> if all values have been distributed successfully into the date columns or columns designated for earlier sums or later sums as defined with the",
"			12th and 13th function parameters.<br>",
"			<b>false</b>At least in one table row, the total value cannot be distributed into the tiven output range.  Either the earlier sums / later sums have not been",
"			provided, or all days are blocked (e.g. time range consisting just of weekends, bank holidays or school holidays (vacation)), or end dates lie before start dates."
 ]
			
		}
	],
	"Exceptions": ["Batch size is negative, end date is earlier than start date, invalid combinations of intervals and usances."],
"Examples" : [
"	include ( Support Library );",
"	table initialize( demo table,",
"	{",
"		{ Total Value, Start Date, End Date,    Batch Size    },",
"		{ #days,       01.01.2017, 20.08.2017,  1 },  // Count number of days",
"		{ 500,         01.01.2017, 20.08.2017,  0 },  // Produce 500 in 200 days (shifts on 7 days/week)",
"		{ 500,         01.01.2017, 20.08.2017,  1 },  // Use whole numbers",
"		{ 500,         01.01.2017, 20.08.2017, 10 },  // Deliver in batches of 10",
"		{ 500,         01.01.2018, 20.08.2017, 10 },  // Skipped (end date is before start date)",
"	                                                  // and causes return value to be 'false'",
"		{ 500,         01.01.2017, 2         , 10 },  // Capacity: 2 per unit",
"		{ 500,         01.12.2016, 2         , 10 }   // Start a month earlier",
"	} );",
"",
"	holidays[] = { 01.08.1900 };                      // Public holiday every year",
"	vacation[] = { 01.07.2017,31.07.2017 };           // Summer vacation",
"",
"	ret[] = table distribute( demo table, Total Value, Batch Size, Start Date, End Date,",
"			months, calendar, '15.01.2017', '15.08.2017',Mmm,-1, Earlier, Later, holidays[], vacation[] );",
"",
"	        // Note: For monthly intervals, output start date is moved back",
"	        // to 1st day and output end date to last day of month.",
"",
"	table list( demo table);",
"	echo(\"return value = \", ret[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "distribute" ]
}

,

 "minv - Matrix Inversion" :
 {
	"Function Names":	[ "minv" ],
	"Keywords":			[ "matrix inversion" ],
	"Documentation":	"Function Description",
	"Restrictions":		"Indirect parameter passing is disabled",
"Description" : [
"",
"		This function calculates the inversion of the matrix: M<sup>-1</sup>.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix to invert",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
		  "Description":
			[ "" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "matrix of numerals" ],
		  "Description": "Inverted matrix"
		}
	],
	"Exceptions": [ "Division: Matrix is not a square (number of rows and columns differ)" ],
"Examples" : [
"		echo( minv ( {{1,2},{3,4}} ) ); // returns {{-2,1},{1.5,-0.5}}"
 ]
		,
	"Output": "automatic"
},


 "mdet - Matrix Determinant" :
 {
	"Function Names":	[ "mdet" ],
	"Keywords":			[ "matrix determinant" ],
	"Documentation":	"Function Description",
	"Restrictions":		"Indirect parameter passing is disabled",
"Description" : [
"",
"		This function calculates the determinant of the matrix.  A non-zero determinant indicates that the set of equations modeled with the matrix can be solved.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
		  "Description":
			[ "" ]
		} ],
	"Return value":
	[
		{ "Name": "Determinant",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Division: Matrix is not a square (number of rows and columns differ)" ],
"Examples" : [
"		echo( mdet ({{1,2},{3,4}} ) ); // returns 2"
 ]
		,
	"Output": "automatic"
},


 "linear - Solve Linear Equations" :
 {
	"Function Names":	[ "linear" ],
	"Keywords":			[ "linear equation" ],
	"Documentation":	"Function Description",
	"Restrictions":		"Indirect parameter passing is disabled",
"Description" : [
"",
"		This function solves a linear equation system A &bull; x = B",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"2",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix A",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
		  "Description":
			[ "2-dimensional matrix" ]
		},
		{ "Number": "2",
		  "Name": "Vector B",
		  "Direction": "input",
		  "Types": [ "matrix of numerals", "parameter set of numerals" ],
		  "Description":
			[ "Following represenations of the 1-D vector are allowed: As vector:{1,2,3}, 1-row matrix: {{1,2,3}}, 1-column matrix: {{1},{2},{3}}" ]
		} ],
	"Return value":
	[
		{ "Name": "Solution vector x",
		  "Types": [ "parameter set of numerals" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Division: Matrix is not a square (number of rows and columns differ)" ],
"Examples" : [
"		echo( linear( {{1,2},{3,4}}, {5,6} ) ); // returns {-4,4.5}"
 ]
		,
	"Output": "automatic"
}




,

  "mmul, mmdiv - Multiplication and Division" :
  {
	"Function Names":	[ "mmul", "mdiv" ],
	"Keywords":			[ "matrix multiplication", "matrix division" ],
	"Documentation":	"Function Description",
	"Restrictions":		"Indirect parameter passing is disabled",
"Description" : [
"",
"		These functions do true matrix multiplication and division (and not not simple scalar multiplication or division)",
"		Matrices must be provided as 2-level parameter sets, e.g. {{1,2},{3,4}}<br><br>",
"		",
"		<b>mmul</b>: For matrix multiplications, the number of columns (and / rows) in the left matrix needs to match with the number of rows (/ columns) in the right matrix.<br>",
"		<b>mdiv</b>: For matrix divisions, both matrices need to be squares, i.e. row and column count must equal.<br>",
"		",
"		<br><br>",
"		In case of division, 2nd matrix must also be a square matrix as it is inverted before a multiplication (like mmul) is applied.  Result = A &bull; B<sup>-1</sup>,",
"		The function will reject calculations and assert exceptions if not all criteria are properly met.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"2",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Left Matrix",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Right Matrix",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
		  "Description":
			[ "" ]
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "matrix of numerals" ],
		  "Description": "Matrix with number of rows as specified in the left matrix and number of columns as specified in the right matrix"
		}
	],
	"Exceptions": [ "Mismatching matrix sizes", "Division: Matrices are not squares" ],
"Examples" : [
"		echo( mmul ( {{1,2},{3,4}}, {{8,6},{4,2}} ) ); // returns {{16,10},{40,26}}",
"		echo( mdiv ( {{1,2},{3,4}}, {{3,1},{1,2}} ) ); // returns {{0,1}, {0.4,1.8}}"
 ]
		,
	"Output": "automatic"
}


,

  "Interpolation Functions" :
  {
	"Function Names":	[ "linear interpolation", "nearest neighbor interpolation", "nearest right neighbor interpolation", "spline interpolation", "polynomial interpolation" ],
	"Keywords":			[ "interpolation" ],
	"Documentation":	"Function Description",
	"Restrictions":		"Indirect parameter passing is disabled",
"Description" : [
"",
"		These functions calculate a value based on known points in a 2-dimensional space by applying one of the following interpolation schemes:",
"		=== 200, 500, bold_column_1",
"		Function name					| Description",
"		linear interpolation			| Straight lines are drawn between the points",
"		nearest neighbor interpolation	| Staircase pattern: Y-value takes value of nearest neighbor. If both distances are equal, then the nearest left neighbor is chosen.",
"		nearest right neighbor interpolation |	Same as above, nearest right neighbor chosen if distances are equal.",
"		spline interpolation			| Natural cubic spline interpolation",
"		polynomial interpolation		| Creates n-th order polynomial (n = number of points - 1) which passes	through all specified points.",
"		===",
"",
"		All interpolation functions ensure that the calculated lines cross the specified points.  If discontinuities are undesirable, use spine or polynomial interpolation.",
"		Note that the polynomial interpolation create some oscillation effects between the outer 2-3 points at the beginning and at the end.  ",
"		The spline interpolation does not have this problem.",
"",
"		<br><br>See __interpolation examples__ with visualized charts.",
""
 ]
		,

	"Call as":			"function",
	"Parameter count":	"3-5",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "X-values",
		  "Direction": "input",
		  "Types": [ "numeral", "parameter set of numerals" ],
		  "Description":
			[ "One or more X-values provided in order to calculate one or more Y-values " ]
		},
		{ "Number": "2",
		  "Name": "X-coordinates of points",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Description":
			[ "The list of known points consist of X-coordinates provided in this function parameter and Y-coordinates in the next function parameter." ]
		},
		{ "Number": "3",
		  "Name": "X-coordinates of points",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Description":
			[ "The list of known points consist of X-coordinates provided in the previous function parameter and Y-coordinates in this function parameter.  The X-values must be in ascending order." ]
		},
		{ "Number": "Opt. 4",
		  "Name": "Extrapolation options beyond left side",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "reject",
"Description" : [
"",
"		  Extrapolation option left side (and also applicable to beyond the right side if the 5th parameter is not specified). Following options exist:",
"		  === 100, 500, noheader, noframe bold_column_1",
"		  reject		| Assert an error if the X value lies outside the interpolation range",
"		  flat			| Continue with flat value (extended with a horizontal line)",
"		  continue		| Continue with using same formula for extrapolation:<br>nearest (right) neighbor interpolation:	flat (horizontal line)<br>linear interpolation: continue with same slope<br>spline / polynomial interpolation:	use same formula.<br>Note: spline and polynomial interpolation will result in over / under-shooting effects outside the interpolation points.  Use them carefully.",
"		  zero			| Zero returned",
"		  <i>numeral</i>| Apply line with specific slope.  Using 0 has same effect as <b>flat</b> (and not <b>zero</b>).",
"		  ==="
 ]
		  
		},
		{ "Number": "Opt. 5",
		  "Name": "Extrapolation options beyond right side",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "same as specified in 4th parameter, otherwise reject",
"Description" : [
"		  Extrapolation option right side.  Same value selection as defined for the 4th aprameter (extrapolation options beyond left side)."
 ]
		  
		} ],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral", "parameter set of numerals" ],
		  "Description": "Calculated Y-value (or Y-values if parameter set with multiple numerals are passed into 1st function parameter)."
		}
	],
	"Exceptions": [ "Rejected extrapolation", "X-values not in ascending order", "Empty sets or sets of different lengths provided for X- and/or Y-coordinates" ],
"Examples" : [
"		x[] = {-1 .. 12 };",
"		y[] = linear interpolation( x[], {0, 4, 8, 10}, {0, 8, 5, 0}, flat, continue );",
"		// Note: Extrapolation is done for for x[] = -1, 11 and 12.",
"",
"		echo(y[]);"
 ]
		,
	"Output": "automatic",
	"See also": "Interpolation Examples"
},

  "Interpolation Examples Visualized" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Interpolation Examples" ],
	"Keywords":			[ "interpolation examples" ],
"Description 01:Nearest Neighbor Interpolations" : [
"",
"		Assumption, applicable to all examples below: <b>x[] = = {-2 .. -1.9 .. 12 }; // Creates sequence of -2, -1.9, -1.8, … 11.8, 12.</b><br><br>",
"",
"		Example 1: <b>nearest neighbor interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, flat );</b><br>",
"		<img src=\"Images/Function_nearest_neighbor_interpolation.jpg\" alt=\"Nearest Neighbor Interpolation\"><br/>",
"",
"		Example 2: <b>nearest right neighbor interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, continue );</b><br>",
"		<img src=\"Images/Function_nearest_right_neighbor_interpolation.jpg\" alt=\"Nearest Right Neighbor Interpolation\"><br/>"
 ]
		,

"Description 02:Linear Interpolations" : [
"",
"		Example 1: <b>linear interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, 0.1 ); // Using slope = 0.1</b><br>",
"		<img src=\"Images/Function_linear_interpolation_1.jpg\" alt=\"Linear Interpolation with specified slope\"><br/>",
"",
"		Example 2: <b>linear interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, continue );</b><br>",
"		<img src=\"Images/Function_linear_interpolation_2.jpg\" alt=\"Linear Interpolation with same slopes outside\"><br/>"
 ]
		,

"Description 03:Spline Interpolations" : [
"",
"		Example 1: <b>spline interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, zero );</b><br>",
"		<img src=\"Images/Function_spline_interpolation_1.jpg\" alt=\"Spline Interpolation with zero outside\"><br/>",
"",
"		Example 2: <b>spline interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, continue );</b><br>",
"		<img src=\"Images/Function_spline_interpolation_2.jpg\" alt=\"Spline Interpolation with continuation outside\"><br/>"
 ]
		,

"Description 04:Polynomial Interpolations" : [
"",
"		Example 1: <b>polynomial interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, flat );</b><br>",
"		<img src=\"Images/Function_polynomial_interpolation_1.jpg\" alt=\"Polynomial Interpolation with flat outside\"><br/>",
"",
"		Example 2: <b>polynomial interpolation ( x[ ], { 1, 3, 4, 7 }, { 1, 3, 5, 2 }, continue );</b><br>",
"		<img src=\"Images/Function_polynomial_interpolation_2.jpg\" alt=\"Polynomial Interpolation with continuation outside\"><br/>",
""
 ]
	
  }





,

"vertical" :
{
	"Function Names":	[ "vertical" ],
	"Keywords":			[ "vertical" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Converts a vector (parameter set) or (horizontal 1D) matrix (nested parameter set) to a vertical 1D-matrix.",
"	In other words: Moves all parameter elements of parameter set one deeper, so every parameter element is embedded in its own parameter set.",
"	",
"	<br><br>",
"	The matrices may contain contents of all data types and not just numerals.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix",
		  "Direction": "input",
		  "Types": [ "parameter set", "matrix" ],
		  "Description":
			[ "Vector or matrix to change to a vertical matrix" ]
		} ],
	"Return value":
	[
		{ "Name": "Vertical matrix",
		  "Types": [ "matrix" ],
		  "Description": ""
		}
	],
"Examples" : [
"		echo( vertical ( {1,2,abc } ) );     // returns { {1},{2},{abc} }",
"		echo( vertical( {{1},{2},{abc}} ) ); //	Same (is already a vertical matrix)",
"		echo( vertical( {{1,2,abc}} ) );     //	Same (horizontal to vertical matrix)",
"		echo( vertical( { } ) );             // returns { }  (empty set)"
 ]
		,
	"Output": "automatic",
	"See also": [ "horizontal", "flat", "diagonal" ]
},


"horizontal" :
{
	"Function Names":	[ "horizontal" ],
	"Keywords":			[ "horizontal" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Converts a vector (parameter set) or (vertical 1D) matrix (nested parameter set) to a horizontal 1D-matrix.  In other words: The 2-level parameter set structure is",
"	flattened and then all of contents is pushed into a 2nd level so the result looks always like <b>{{ a,b,c,... }}</b>.",
"",
"	<br><br>",
"	The matrices may contain contents of all data types and not just numerals.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix",
		  "Direction": "input",
		  "Types": [ "parameter set", "matrix" ],
		  "Description":
			[ "Vector or matrix to change to a horizontal matrix" ]
		} ],
	"Return value":
	[
		{ "Name": "Horizontal matrix",
		  "Types": [ "matrix" ],
		  "Description": ""
		}
	],
"Examples" : [
"		echo( horizontal ( {1,2,abc } ) );     // returns {{1,2,abc}}",
"		echo( horizontal( {{1},{2},{abc}} ) ); // Same (vertical to horizontal matrix)",
"		echo( horizontal( {{1,2,abc}} ) );     // Same (is already a horizontal matrix)",
"		echo( horizontal( { } ) );             // returns { }  (empty set)"
 ]
		,
	"Output": "automatic",
	"See also": [ "vertical", "flat", "diagonal" ]
},


"flat" :
{
	"Function Names":	[ "flat" ],
	"Keywords":			[ "flat" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	In a parameter set, all elements which are also parameter sets (for example matrices), will be flattened by shifting all members upward.  ",
"	This function is not recursive, i.e. deeper parameter sets beyond 2nd level remain unaffected.",
"	<br><br>",
"	The matrices may contain contents of all data types and not just numerals.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Matrix",
		  "Direction": "input",
		  "Types": [ "parameter set", "matrix" ],
		  "Description":
			[ "Vector or matrix to flatten to parameter set" ]
		} ],
	"Return value":
	[
		{ "Name": "Flattened vector",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		echo( flat( {1,2,3} ) );        // Returns {1,2,3}",
"		echo( flat( {{1,2,3}} ) );      // Same",
"		echo( flat( {{1},{2},{3}} ) );  // Same",
"		echo( flat( {{{1,2}}, {3}} ) ); // Returns {{1,2},3} (Only 2-level flattening("
 ]
		,
	"Output": "automatic",
	"See also": [ "vertical", "horizontal", "diagonal" ]
}

,

"diagonal" :
{
	"Function Names":	[ "diagonal" ],
	"Keywords":			[ "diagonal" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts 1-dimensional vectors (i.e. parameter sets containing values) into 2-dimensional matrices with values",
"	arranged diagonally and all remaining values are zero or a different value if specified in the 2nd function parameter.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",

	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "The values provided will be arranged diagonally into the matrix." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Value outside diagonal",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Default value": "0",
"Description" : [
"			The remaining filds (outside the diagonal) will be written with this value provided."
 ]
		  
		} ],
	"Return value":
	[
		{ "Name": "Output matrix",
		  "Types": [ "matrix" ],
		  "Description": "Contains values across the diagonal"
		}
	],
"Examples" : [
"		echo( diagonal( { 5:1 } ) ); // 5x5 identity matrix",
"		echo( diagonal( { a, 1, true, 2 } ) );"
 ]
		,
	"Output": "automatic",
	"See also": [ "vertical", "horizontal", "flat" ]
}

,

"transpose" :
{
	"Function Names":	[ "transpose" ],
	"Keywords":			[ "transpose matrix", "transpose matrices" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function transposes an <i>m x n</i> matrix to a <i>n x m</i> matrix.",
"	<br><br>",
"	The matrix must not necessarily be recctangular.  All matrices can be transposed if the number of elements in the",
"	rows below contain the same number of elements or fewer elements than the previous row.  Otherwise, the matrix cannot",
"	be transposed due missing values to include.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",

	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input matrix",
		  "Direction": "input",
		  "Types": [ "matrix" ],
		  "Description":
			[ "Matrix to be transposed" ]
		} ],
	"Return value":
	[
		{ "Name": "Transposed matrix",
		  "Types": [ "matrix" ],
		  "Description": ""
		}
	],
"Examples" : [
"		echo( transpose( { {1,2,3,4}, {a,b,c,d}, {5,6,7,8} } ) ); // Rectangular matrix",
"		echo( transpose( { {1,2,3,4}, {a,b,c}, {5,6} } ) ); // Bottom rows with fewer elements",
"		// echo( transpose( { {1,2,3,4}, {a,b,c}, {5,6,7,8} } ) ); // Would cause an exception"
 ]
		,
	"Output": "automatic"
}

,

"left ... (string function)" :
{
	"Function Names":	[ "left", "left include", "left last match", "left last match include" ],
	"Keywords":			[ "left [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a left part of the string either with a character position number or a matching pattern.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __left [parameter set function]__ instead.  Values of types other than literal will be converted to literals first." ]
		},
		{ "Number": "2",
		  "Name": "character position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  Keep number of characters counted from the left (0 = blank string, 1 = 1st character, etc.)<br>",
"			Larger than character count: Full string returned<br>",
"			Negative: Keep number of characters counted from the right (-1 = all except last character)<br><br>",
"			Smaller than minus character count: Empty string returned<br>",
"			Zero: Empty string returned<br><br>",
"			The function name ending '<b>... include</b>' will be ignored.  Using the function name part <b>'... last match ...'</b> will assert an error."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>left ...</b>: Return the left part of the string <u>without</u> the matching pattern.<br>",
"			Function <b>left include ...</b>: Return the left part of the string <u>including</u> the matching pattern.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching pattern in the string and not the first one.<br>",
"			Empty strings will be interpreted as positive match before the 1st character and this function returns empty strings.",
"",
"			<br><br>",
"			Matching patterns are case-sensitive.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.<br>",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Extracted substring",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"		st[] = \"The taste of the coffee!\";",
"",
"		echo( left( st[], 0 ), \" / \", left( st[], 1 ), \" / \", left( st[], -2 ), \" / \", left( st[], -1 ) );",
"		echo( left( st[],99 ), \" / \", left( st[],-99) );",
"		echo;",
"		echo( left( st[], ' taste' ), \" / \", left include( st[], ' taste' ) );",
"		echo( left( st[], ' ' ), \" / \", left last match( st[], ' ' ) );",
"		echo( left last match include( st[], 'e' ) ); // Strips exclamation mark only",
"		echo;",
"		echo( left( st[], 'c^ffee' ) ); // Softquoted literal (no or single quotation marks) - matched",
"		echo( left( st[], \"c^ffee\" ) ); // Quoted literal     (double quotation marks) - not matched"
 ]
		,
	"Output": "automatic",
	"See also": [ "right [string function]", "middle [string function]", "outside [string function]", "left [parameter set function]" ]
}

,

"left ... (parameter set function)":
{
	"Function Names":	[ "left ", "left include ", "left last match ", "left last match include " ], // Added spaces at end to distinguish from equally named string functions
	"Keywords":			[ "left [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a left part of the parameter set either with a element position number or a subset resembling a matching element.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __left [string function]__ instead." ]
		},
		{ "Number": "2",
		  "Name": "parameter set position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  Select the first <i>n</i> elements of the parameter set.<br>",
"			Larger than number of elements in the parameter set: Full parameter set returned<br>",
"			Negative: Keep number of elements counted from the right (-1 = all except last element)<br>",
"			Smaller than minus number of elements: Empty set returned<br>",
"			Zero: Empty set returned<br><br>",
"			The function name ending '<b>... include</b>' will be ignored.  Using the function name part <b>'... last match ...'</b> will assert an error."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>left ...</b>: Return the left part of the parameter set <u>without</u> the matching element.<br>",
"			Function <b>left include ...</b>: Return the left part of the parameter set <u>including</u> the matching element.<br>",
"			Empty sets are interpreted as no matches.  The full set will be returned<br>",
"",
"			<br><br>",
"",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching element in the parameter set and not the first one.",
""
 ]
		  
		},
		{ "Number": "Opt. 3+",
		  "Name": "follower",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
"Description" : [
"		    Other parameter sets in addition to the one provided as the first function parameter can be extracted in the same same way.",
"			Add any number of additional parameter set variables.  They will be manipulated at the exact same positions as the returned value.",
""
 ]
		  
		}


	],
	"Return value":
	[
		{ "Name": "Extracted subset",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		set[] = { the, taste, of, the, 12, coffees, '!' };",
"",
"		echo( left( set[], 0 ), \", \", left( set[], 1 ), \", \", left( set[], -2 ), \", \", left( set[], -1 ) );",
"		echo( left( set[],99 ), \", \", left( set[], -99) );",
"		echo;",
"		echo( left( set[], { 12, of } ), \" / \", left include( set[], { 12, of } ) ); // Recognized 'of' as 1st match",
"		echo( left last match ( set[], {the} ), \", \", left last match include( set[], {the} ) );",
"		echo( left( set[], {tea } ) ); // Returns full set because element not found",
"",
"		echo( new line, \"Demonstrate the follower feature: \");",
"",
"		set2[] = { A, fragrance, coming, from, 120, espressos, '!' };",
"		set3[] = { Der, Geschmack, kommt, von, 120, Tassen Kaffee, '!' };",
"",
"		echo( \"Extraction 1: \", left( set[], {of}, set2[], set3[] ) );",
"		echo( \"Extraction 2: \", set2[] );",
"		echo( \"Extraction 3: \", set3[] );"
 ]
		,
	"Output": "automatic",
	"See also": [ "right [parameter set function]", "middle [parameter set function]", "outside [parameter set function]", "left [string function]" ]
}

,

"right ... (string function)" :
{
	"Function Names":	[ "right", "right include", "right last match", "right last match include" ],
	"Keywords":			[ "right [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a right part of the string either with a character position number or a matching pattern.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __right [parameter set function]__ instead.  Values of types other than literal will be converted to literals first." ]
		},
		{ "Number": "2",
		  "Name": "character position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  Keep number of characters counted from the right (0 = blank string, 1 = last, etc.)<br>",
"			Larger than character count: Full string returned<br>",
"			Negative: Keep number of characters counted from the left (-1 = all except first character)<br>",
"			Smaller than minus character count: Empty string returned<br>",
"			Zero: Empty string returned<br><br>",
"			The function name ending '<b>... include</b>' will be ignored.  Using the function name part <b>'... last match ...'</b> will assert an error."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>right ...</b>: Return the right part of the string <u>without</u> the matching pattern.<br>",
"			Function <b>right include ...</b>: Return the right part of the string <u>including</u> the matching pattern.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching pattern in the string and not the first one.<br>",
"			Empty strings will be interpreted as positive match before the 1st character and this function returns the complete strings.",
"",
"			<br><br>",
"			Matching patterns are case-sensitive.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.<br>",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Extracted substring",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"		st[] = \"The taste of the coffee!\";",
"",
"		echo( right( st[], 0 ), \" / \", right( st[], 1 ), \" / \", right( st[], -2 ), \" / \", right( st[], -1 ) );",
"		echo( right( st[],99 ), \" / \", right( st[],-99) );",
"		echo;",
"		echo( right( st[], ' taste' ), \" / \", right include( st[], ' taste' ) );",
"		echo( right( st[], ' ' ), \" / \", right last match( st[], ' ' ) );",
"		echo( right last match include( st[], 'e' ) ); // Last 'e' and exclamation mark",
"		echo;",
"		echo( right( st[], 't?ste' ) ); // Softquoted literal (no or single quotation marks) - matched",
"		echo( right( st[], \"t?ste\" ) ); // Quoted literal (double quotation marks) - not matched"
 ]
	,
	"Output": "automatic",
	"See also": [ "left [string function]", "middle [string function]", "outside [string function]", "right [parameter set function]" ]
}

,

"right ... (parameter set function)":
{
	"Function Names":	[ "right ", "right include ", "right last match ", "right last match include " ], // Added spaces at end to distinguish from equally named string functions
	"Keywords":			[ "right [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a right part of the parameter set either with a element position number or a subset resembling a matching element.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	" Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __right [string function]__ instead." ]
		},
		{ "Number": "2",
		  "Name": "parameter set position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  Select the last <i>n</i> elements of the parameter set.<br>",
"			Larger than number of elements in the parameter set: Full parameter set returned<br>",
"			Negative: Keep number of elements counted from the right (-1 = all except last element)<br>",
"			Smaller than minus number of elements in parameter set: Empty set returned<br>",
"			Zero: Empty set returned<br><br>",
"			The function name ending '<b>... include</b>' will be ignored.  Using the function name part <b>'... last match ...'</b> will assert an error."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>right ...</b>: Return the right part of the parameter set <u>without</u> the matching element.<br>",
"			Function <b>right include ...</b>: Return the right part of the parameter set <u>including</u> the matching element.<br>",
"			Empty sets are interpreted as no matches.  The full set will be returned<br>",
"",
"",
"			<br><br>",
"",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching pattern in the parameter set and not the first one.",
""
 ]
		  
		},
		{ "Number": "Opt. 3+",
		  "Name": "follower",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
"Description" : [
"			Other parameter sets in addition to the one provided as the first function parameter can be extracted in the same same way.",
"			Add any number of additional parameter set variables.  They will be manipulated at the exact same positions as the returned value.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Extracted subset",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		set[] = { the, taste, of, the, 12, coffees, '!' };",
"",
"		echo( right( set[], 0 ), \", \", right( set[], 1 ), \", \", right( set[], -2 ), \", \", right( set[], -1 ) );",
"		echo( right( set[],99 ), \", \", right( set[], -99) );",
"		echo;",
"		echo( right( set[], { 12, of } ), \" / \", right include( set[], { 12, of } ) ); // Recognized 'of' as 1st match",
"		echo( right last match ( set[], {the} ), \", \", right last match include( set[], {the} ) );",
"		echo( right( set[], {tea } ) ); // Returns full set because pattern not found",
"",
"		echo( new line, \"Demonstrate the follower feature: \");",
"",
"		set2[] = { A, fragrance, coming, from, 120, espressos, '!' };",
"		set3[] = { Der, Geschmack, kommt, von, 120, Tassen Kaffee, '!' };",
"",
"		echo( \"Extraction 1: \", right include ( set[], {the}, set2[], set3[] ) );",
"		echo( \"Extraction 2: \", set2[] );",
"		echo( \"Extraction 3: \", set3[] );	"
 ]
		,
	"Output": "automatic",
	"See also": [ "left [parameter set function]", "middle [parameter set function]", "outside [parameter set function]", "right [string function]" ]
}

,

"middle ... (string function)" :
{
	"Function Names":	[ "middle", "middle include", "middle until", "middle until include" ],
	"Keywords":			[ "middle [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a middle part of the string either with two character position numbers or matching patterns or a combination of both.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __middle [parameter set function]__ instead.<br>Values of types other than literal will be converted to literals first." ]
		},
		{ "Number": "2",
		  "Name": "starting character position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  String begins with specified character position (0 = 1st character, 1 = 2nd character, etc.) <br>",
"			Larger than character count: Blank string is returned.<br>",
"			Negative: Starting position counted from right to left, e.g. -1 = begin with last character<br>",
"			Smaller than minus number of characters in the string: Begins with 1st character<br>",
"			The function name ending '<b>... include</b>' will be ignored here."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "starting matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>middle ...</b>: Middle part of the string begins <u>after</u> the starting matching pattern.<br>",
"			Function <b>middle include ...</b>: Middle part of the string <u>includes</u> the starting matching pattern.<br>",
"			Empty matching pattern: Middle part of the string begins with the 1st character of the input string.",
"",
"			<br><br>",
"			Matching patterns are case-sensitive.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		},
		{ "Number": "3",
		  "Name": "character count or ending character position ",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			For function names <b>middle</b> and <b>middle include</b>, this parameter specifies the number of characters to include.<br>",
"			Zero:  No characters to include. Empty string is returned.<br>",
"			Negative numbers are treated as zero.<br>",
"			Large character counts going beyond the end of the input string will be reduced accordingly.<br><br>",
"			For function names <b>middle until</b> and <b>middle until include</b>, this parameter specifies the ending position in the input string.<br>",
"			Character positions before the starting position of found pattern will return empty strings or at least the string matched with the",
"			matching patter (applicable to <b>middle until include</b>).<br>",
"			Negative position numbers count from the last character position leftward.<br>"
 ]
		  
		},
		{ "Number": "Alt. 3",
		  "Name": "ending matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>middle ...</b>: Middle part of the string ends <u>before</u> the ending matching pattern.<br>",
"			Function <b>middle include ...</b>: Middle part of the string <u>includes</u> the ending matching pattern.<br>",
"			Empty strings will be interpreted as no futher matches and returns empty strings.",
"",
"			<br><br>",
"			<u>Attention:</u> The function names ending outside <b>until</b> combined with matching patterns provided will assert errors.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Extracted substring",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"		st[] = \"The taste of the coffee!\";",
"",
"		echo( middle( st[], 4, 8 ), \" / \",  middle until ( st[], 4, 8 ) );",
"		echo( middle( st[], -6, 3 ), \" / \", middle until( st[], -7, -2 ) ); // \"off\", \"coffee\"",
"		echo;",
"		echo( middle( st[],  99, 8 ), \" / \",  middle until ( st[],  99, 8 ) ); // empty strings",
"		echo( middle( st[], -99, 8 ), \" / \",  middle until ( st[], -99, 8 ) );",
"		echo;",
"		echo( middle( st[], 'taste ', 13 ), \" / \", middle include( st[], 'taste ', 13 ) ); // \"of the coffee\", \"tast of the coffee\"",
"		echo;",
"		echo( middle until( st[], 'taste ', -2 ), \" / \", middle until include( st[], 'taste ', -2 ) ); // \"of the coffee\", \"tast of the coffee\"",
"		echo( middle until include( st[], 'taste ', 3 ), \" / \", middle until include( st[], 'taste ', 6 ) ); // \"\", \"tas\"",
"		echo;",
"		echo( middle ( st[], 'taste ', ' coffee' ), \" / \", middle include( st[], 'taste ', ' coffee' ) ); // \"of the\", \"tast of the coffee\""
 ]
	,
	"Output": "automatic",
	"See also": [ "left [string function]", "right [string function]", "outside [string function]", "middle [parameter set function]" ]

}

,

"middle ... (parameter set function)" :
{
	"Function Names":	[ "middle ", "middle include ", "middle until ", "middle until include " ],
	"Keywords":			[ "middle [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a middle part of the parameter set either with two element position numbers or matching elements or a combination of both.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"Min 3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __middle [string function]__ instead." ]
		},
		{ "Number": "2",
		  "Name": "starting element position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  Begin with specified element (0 = 1st element, 1 = 2nd element, etc.) <br>",
"			Larger than number of elements: empty set<br>",
"			Negative: Starting position counted from right to left, e.g. -1 = last element<br>",
"			Smaller than minus number of parameter set elements in the parameter set: Begins with 1st element<br>",
"			The function name ending '<b>... include</b>' will be ignored."
 ]
		  
		},


		{ "Number": "Alt. 2",
		  "Name": "starting matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>middle ...</b>: Middle part of the parameter set begins <u>after</u> the matching element.<br>",
"			Function <b>middle include ...</b>: Middle part of the parameter set begins <u>including</u> the matching element.",
"			Empty parameter sets are interprested as <i>per se</i> found.",
"",
"			<br><br>",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching element in the parameter set and not the first one.",
""
 ]
		  
		},
		{ "Number": "3",
		  "Name": "element count or ending element position ",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			For function names <b>middle until</b>, this parameter contains the ending element position.",
"			Negative numbers count from right to left: -1 = last parameter set element included, -2 = 2nd last element included.<br>",
"			Element positions before the starting position of found matching element will return empty sets.<br>",
"			For function names not containing <b>until</b>, this parameter contains the element count.  0 and negative numbers return empty sets.<br><br>",
"			The function name ending '<b>... include</b>' will be ignored."
 ]
		  
		},
		{ "Number": "Alt. 3",
		  "Name": "ending matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>outside ...</b>: 2nd part of the parameter set begins <u>including</u> the ending matching elemetn.<br>",
"			Function <b>outside exclude ...</b>: 2nd part of the parameter set begins <u>after</u> the ending matching element.<br>",
"			Empty parameter sets means no further matches and the full original parameter set is returned.",
"",
"			<br><br>",
"			<u>Attention:</u> The function names ending outside <b>until</b> combined with matching elements provided will assert errors.",
"",
"			<br><br>",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching element in the parameter set and not the first one.",
"			Empty parameter sets are interprested as <i>per se</i> found.",
""
 ]
		  
		},
		{ "Number": "Opt. 4+",
		  "Name": "follower",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
"Description" : [
"		    Other parameter sets in addition to the one provided as the first function parameter can be extracted in the same same way.",
"			Add any number of additional parameter set variables.  They will be manipulated at the exact same positions as the returned value.",
""
 ]
		  
		}


	],
	"Return value":
	[
		{ "Name": "Extracted subset",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		set[] = { the, taste, of, the, 12, coffees, '!' };",
"",
"		echo( middle( set[], 4,  2 ), \" / \", middle until( set[], 1, 5 ) );",
"		echo( middle( set[], -3, 2 ), \" / \",  middle until( set[], -6, -2 ) );",
"		echo;",
"		echo( middle( set[],  99, 3 ), \" / \",  middle until ( set[],  99, 3 ) ); // empty sets",
"		echo( middle( set[], -99, 3 ), \" / \",  middle until ( set[], -99, 3 ) ); // the taste of / ... the",
"		echo;",
"		echo( middle( set[], {taste}, 4 ), \" / \", middle include( set[], {taste}, 4 ) ); // 4 elements in both cases",
"		echo( middle until( set[], {taste}, -2 ), \" / \", middle until include( set[], {taste}, -2 ) );",
"		echo( middle ( set[], {taste}, {coffees} ), \" / \", middle include( set[], {taste}, {coffees} ) );",
"",
"		echo( middle ( set[], {}, {coffees} ), \" / \", middle include( set[], {taste}, {} ) );",
"		echo( middle ( {}, {}, {coffees} ), \" / \", middle include( {}, {taste}, {} ) ); // empty sets",
"		echo;",
"		echo( \"Demonstrate the follower feature: \");",
"",
"		set2[] = { A, fragrance, coming, from, 120, espressos, '!' };",
"		set3[] = { Der, Geschmack, kommt, von, 120, Tassen Kaffee, '!' };",
"",
"		echo( \"Extraction 1: \", middle( set[], {of}, 3, set2[], set3[] ) );",
"		echo( \"Extraction 2: \", set2[] );",
"		echo( \"Extraction 3: \", set3[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "left [parameter set function]", "right [parameter set function]", "outside [parameter set function]", "middle [string function]" ]
}

,

"outside ... (string function)" :
{
	"Function Names":	[ "outside", "outside exclude", "outside until", "outside until exclude" ],
	"Keywords":			[ "outside [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a outside parts of the string either with two character position numbers or matching patterns or a combination of both.",
"	It is the opposite part of the <b>middle ...</b> function family where the middle part is removed the string and the left and right parts of the strings put together.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __outside [parameter set function]__ instead.<br>Values of types other than literal will be converted to literals first." ]
		},
		{ "Number": "2",
		  "Name": "starting character position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  First part of the string ends before the specified character position (0 = blank, 1 = ends after 1st character, etc.) <br>",
"			Larger than character count: Entire string is returned.<br>",
"			Negative: Starting position counted from right to left, e.g. -1 = First part of the string ends before the last character<br>",
"			Smaller than minus number of characters in the string: Begins with 1st character<br>",
"			The function name ending '<b>... include</b>' will be ignored here."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "starting matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>outside ...</b>: First part of the string ends <u>including</u> the starting matching pattern.<br>",
"			Function <b>outside exclude ...</b>: First part of the string ends <u>before</u> the starting matching pattern.<br>",
"			Empty matching pattern: First part of the string is blank.",
"",
"			<br><br>",
"			Matching patterns are case-sensitive.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		},
		{ "Number": "3",
		  "Name": "character count or ending character position ",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			For function names <b>outside</b> and <b>outside exclude</b>, this parameter specifies the number of characters to skip before incling the 2nd part of string.<br>",
"			Zero:  No characters to skip. Entire string is returned.<br>",
"			Negative numbers are treated as zero.<br>",
"			Large character counts going beyond the end of the input string results to no 2nd part of the string included<br><br>",
"",
"			For function names <b>outside until</b> and <b>outside until include</b>, this parameter specifies the ending position in the input string and is seen as starting point for the 2nd part of the string.<br>",
"			Character positions before the starting position of found pattern will return empty strings or at least the string matched with the",
"			matching patter (applicable to <b>middle until include</b>).<br>",
"			Negative position numbers count from the last character position leftward.<br>"
 ]
		  
		},
		{ "Number": "Alt. 3",
		  "Name": "ending matching pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			Function <b>outside ...</b>: outside part of the string <u>includes</u> the ending matching pattern.<br>",
"			Function <b>outside exclude ...</b>: outside part of the string <u>excludes</u> the ending matching pattern.",
"",
"			<br><br>",
"			<u>Attention:</u> The function names ending outside <b>until</b> combined with matching patterns provided will assert errors.<br>",
"			<u>Attention:</u> The matching pattern parameter distinguishes between __literals__ and __softquoted literals__.",
"			In softquoted literals, following wildcard symbols act as placeholders: '?' for any character, '#' for any digit and '^' for any letter.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Extracted substring",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
"Examples" : [
"		st[] = \"The taste of the coffee!\";",
"",
"		echo( outside( st[], 13, 4 ), \" / \",  outside until ( st[], 4, -8 ) );",
"		echo( outside( st[], 99, 1 ), \" / \",  outside until ( st[],  99, 8 ) ); // full strings",
"		echo( outside( st[], -99, 8 ), \" / \", outside until ( st[], -99, 8 ) ); // Begins at 0",
"",
"		echo;",
"		echo( outside( st[], ' taste', 7 ), \" / \", outside exclude( st[], 'taste ', 7 ) ); // \"of the coffee\", \"tast of the coffee\"",
"		echo( outside( st[], ' taste', 0 ), \" / \", outside exclude( st[], 'taste ', 0 ) ); // full string, and without taste",
"		echo;",
"		echo( outside ( st[], 'taste', ' the' ), \" / \", outside exclude( st[], 'taste ', 'the ' ) ); //"
 ]
	,
	"Output": "automatic",
	"See also": [ "left [string function]", "right [string function]", "middle [string function]", "outside [parameter set function]" ]
}

,


"outside ... (parameter set function)" :
{
	"Function Names":	[ "outside ", "outside exclude ", "outside until ", "outside until exclude " ],
	"Keywords":			[ "outside [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a outside part of the parameter set either with two element position numbers or matching elements or a combination of both.",
"	More precisely, is is the opposite of the __middle [parameter set function]__.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __outside [string function]__ instead." ]
		},
		{ "Number": "2",
		  "Name": "starting element position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			Positive:  First part of the subset ends before this position (0 = 1st element, 1 = 2nd element, etc.) <br>",
"			Larger than number of elements: complete parameter set returned<br>",
"			Negative: Starting position counted from right to left, e.g. -1 = last element<br>",
"			Smaller than minus number of elements in parameter set: Begins with 1st element<br>",
"			The function name ending '<b>... exclude</b>' will be ignored."
 ]
			
		},


		{ "Number": "Alt. 2",
		  "Name": "starting matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>outside ...</b>: First part of the parameter set ends <u>including</u> the starting matching element.<br>",
"			Function <b>outside exclude ...</b>: First part of the parameter set ends <u>before</u> the starting matching element.<br>",
"			Empty parameter sets are interprested as <i>per se</i> found.",
"",
"			<br><br>",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching elements in the parameter set and not the first one.",
""
 ]
		  
		},
		{ "Number": "3",
		  "Name": "element count or ending element position ",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			For function names <b>outside until</b>, this parameter contains the ending element position.",
"			Negative numbers count from right to left: -1 = 2nd part begins behind last element (= nothing), -2 = 2nd part begins behind 2nd last element (last element included).<br>",
"			Element positions before the starting position of found element will return the full parameter sets.<br>",
"			For function names not containing <b>until</b>, this parameter contains the element count.  0 and negative numbers complete parameter sets.<br><br>",
"			The function name ending '<b>... exclude</b>' will be ignored."
 ]
		  
		},
		{ "Number": "Alt. 3",
		  "Name": "ending matching elements",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"",
"			Function <b>outside ...</b>: 2nd part of the parameter set begins <u>including</u> the ending matching element.<br>",
"			Function <b>outside exclude ...</b>: 2nd part of the parameter set begins <u>after</u> the ending matching element.<br>",
"			Empty parameter sets means no further matches and the full original parameter set is returned.",
"",
"			<br><br>",
"			<u>Attention:</u> The function names ending outside <b>until</b> combined with matching elements provided will assert errors.",
"",
"			<br><br>",
"			If this function parameter contains 2 or more elements, then the set will be compared with all elements and the first match with any of these elements will apply.<br>",
"			Function name ending <b>... last match</b>: Looks for the last matching element in the parameter set and not the first one.",
"			Empty parameter sets are interprested as <i>per se</i> found.",
""
 ]
		  
		},
		{ "Number": "Opt. 4+",
		  "Name": "follower",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
"Description" : [
"			Other parameter sets in addition to the one provided as the first function parameter can be extracted in the same same way.",
"			Add any number of additional parameter set variables.  They will be manipulated at the exact same positions as the returned value.",
""
 ]
		  
		}


	],
	"Return value":
	[
		{ "Name": "Extracted subset",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		set[] = { the, taste, of, the, 12, coffees, '!' };",
"",
"		echo( outside( set[], 4,  2 ), \" / \", outside until( set[], 1, 5 ) );",
"		echo( outside( set[], -3, 2 ), \" / \",  outside until( set[], -6, -2 ) );",
"		echo;",
"		echo( outside( set[],  99, 3 ), \" / \",  outside until ( set[],  99, 3 ) ); // empty sets",
"		echo( outside( set[], -99, 3 ), \" / \",  outside until ( set[], -99, 3 ) ); // the taste of / ... the",
"		echo;",
"		echo( outside( set[], {taste}, 4 ), \" / \", outside exclude( set[], {taste}, 4 ) ); // 4 elements in both cases",
"		echo( outside until( set[], {taste}, -2 ), \" / \", outside until exclude( set[], {taste}, -2 ) );",
"		echo( outside ( set[], {taste}, {coffees} ), \" / \", outside exclude( set[], {taste}, {coffees} ) );",
"",
"		echo( outside ( set[], {}, {coffees} ), \" / \", outside exclude( set[], {taste}, {} ) );",
"		echo( outside ( {}, {}, {coffees} ), \" / \", outside exclude( {}, {taste}, {} ) ); // empty sets",
"		echo;",
"		echo( \"Demonstrate the follower feature: \");",
"",
"		set2[] = { A, fragrance, coming, from, 120, espressos, '!' };",
"		set3[] = { Der, Geschmack, kommt, von, 120, Tassen Kaffee, '!' };",
"",
"		echo( \"Extraction 1: \", outside( set[], {of}, 3, set2[], set3[] ) );",
"		echo( \"Extraction 2: \", set2[] );",
"		echo( \"Extraction 3: \", set3[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "left [parameter set function]", "right [parameter set function]", "middle [parameter set function]", "outside [string function]" ]
}

,

"find ... (string function)" :
{
	"Function Names":	[ "find", "find ignore case", "find ignore blanks", "find ignore both" ],
	"Keywords":			[ "find [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"	Searches the string for specified patterns and returns the character position number (0 = 1st character).",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __find [parameter set function]__ instead.  Values of types other than literal will be converted to literals first." ]
		},
		{ "Number": "2",
		  "Name": "matching pattern",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			String to search for.  If the parameter of type parameter set, see description in nexdt box below.  Values of other types (e.g. numerals) are converted to literals.<br>",
"			In case an unquoted or softquoted literal is supplied, the wildcard symbol for single character placeholders (?, #, ^) will apply, but no commas (,) and asterisks (*) are supported here."
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "matching patterns",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			List of multiple matching patterns.  Non-literal contents in the parameter set will be converted to literals.  With multiple matching patterns available, the first match will be identified and returned.",
"			Here, <u>no wildcards are supported</u>."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "starting position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			Specify starting position to search.  Eg. 1 excludes the 1st character in the string.<br>",
"			Negative numbers are supported: -1 = last character, -2 = character before last character."
 ]
		  
		},
		{ "Number": "Opt. 4",
		  "Name": "pattern number",
		  "Direction": "output",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			Returned pattern number (provided 2nd parameter is a parameter set and 1st paraemter is not a parameter set)"
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Character position number",
		  "Types": [ "numeral" ],
		  "Description": "Positive or zero: Found and position number returned.  -1: Not found."
		}
	],
"Examples" : [
"	st[] = \"We ate pizza, pasta and desert delights like gelati, and conclude with a caffè.\";",
"",
"	// 1st two finds point on 'pizza', the 3rd fine points to 'pasta'",
"	echo( \"Testing '\", st[], \"':\" );",
"",
"	// Examples include quoted (1st 2 examples) and softquoted strings (last 2 examples)",
"	echo( find( st[], \"pizza\" ), \" / \", find( st[], \"p???a\" ), \" / \", find( st[], 'p???a' ), \" / \", find( st[], 'p???a', 10 ) );",
"",
"	echo( \"Looking for Desert: \", find ignore case( st[], \"Desert\" ) );",
"	echo( \"Ignore spaces: \", find ignore both( st[], \"pizza,PASTA\" ) );",
"	echo( \"No match case: \", find ( st[], \"pizza,PASTA\" ) );",
"",
"	// Demonstrate use of non-string values:",
"	// In 1st case, it's a numeral with preserved literal, 2nd case it's a plain numeral after a calculation",
"	echo( \"Locating a digit: \", find ( 00001234.56, 34, 0 ), \" / \", find ( 0 + 00001234.56, 34, 0 ) );",
"",
"	foods[] = { Gelati, Pizza, Pasta, Caffè };",
"	index[] = -1;",
"",
"	for ( i[] = 1, i[] <= 4, i[] ++ )",
"	{",
"		index[] = find ignore case( st[], { gelati, pasta, desert }, index[]+1, choice[] );",
"		echo  ( i[], \". order is \", foods[]{choice[]} );",
"	}"
 ]
	,
	"Output": "automatic",
	"See also": [ "find [parameter set function]" ]
}

,

"find ... (parameter set function)" : // Space after function names are used to distinguish from string functions with same names
{
	"Function Names":	[ "find ", "find ignore case ", "find ignore blanks ", "find ignore both " ],
	"Keywords":			[ "find [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Searches the parameter set for specified patterns and returns the character position number (0 = 1st character).",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			The elements inside the parameter set provided will be compared during the search process.<br>",
"			<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __find [string function]__ instead."
 ]
			
		},
		{ "Number": "2",
		  "Name": "matching value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			The comparison looks into both value and type.  Providing a numeral 1 is not the same as a literal '1'.",
"			The parameter set will be compared with this value in order to count matches.",
"			The options 'ignore case', 'ignore blanks' and both combined will only apply if the values compared are literals.<br>",
"			If the value is an __unquoted literal__ or __softquoted literal__, then __wildcard symbols__ are supported."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "starting position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			Specify starting position to search.  Eg. 1 excludes the 1st parameter set selement.<br>",
"			Negative numbers are supported: -1 = last element, -2 = previous element, etc.."
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Position: Index to parameter set element",
		  "Types": [ "numeral" ],
		  "Description": "Positive or zero: Found and position returned.  -1: Not found."
		}
	],
"Examples" : [
"		echo( find( { a,b,c,A,B,C}, A ) );              // returns 3",
"		echo( find ignore case ( { a,b,c,A,B,C}, A ) ); // returns 0",
"		echo( find ignore case ( { a,b,c,A,B,C}, A, 1 ) ); // 3 (Skip first element in parameter set)",
"		echo( find( { {}, \" \", 1, '1', {1} }, {} ) );	// returns 0 (2 empty sets compared)",
"		echo( find( { {}, \" \", 1, '1', {1} }, \" \" ) );	// returns 1 (blanks compared)",
"		echo( find( { {}, \" \", 1, '1', {1} }, \"?\" ) );	// returns -1 (not found)",
"		echo( find( { {}, \" \", 1, '1', {1} }, 1) );	// returns 2 (Numeral 1 compared)",
"		echo( find( { {}, \" \", 1, '1', {1} }, '1') );	// returns 3 (Literal 1 compared)",
"		echo( find( { {}, \" \", 1, '1', {1} }, {1} ) );// returns 4 (1 in nested parameter set compared)"
 ]
	,
	"Output": "automatic",
	"See also": [ "find [string function]" ]
}

,

"length ... (string function)" :
{
	"Function Names":	[ "length" ],
	"Keywords":			[ "length [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Returns number of characters.  If the value provided is not a literal, then it will be converted to a literal first.<br>",
"	<u>Attention</u>: For numerals and dates with available literal context, the literal will be used.",
"",
"	<br><br>",
"",
"	A simpler approach is to use {} behind the literal, referred as __length of literals__.  This simplified appraoch runs faster, but assumes",
"	a literal value to be provided all times.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string or value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is a parameter set, please refer to __length [parameter set function]__ instead.  Values of types other than literal will be converted to literals first." ]
		}

	],
	"Return value":
	[
		{ "Name": "Length",
		  "Types": [ "numeral" ],
		  "Description": "Number of characters"
		}
	],
"Examples" : [
"		echo( length( 007.0 ) );	// 5 characters (literal context preserved)",
"		echo( length( 007.0 + 0 ) );	// 1 character (7) after a calculation",
"		echo( length( 1=1 ) );		// 4 characters (true)",
"		echo( length( Hello ) );	// 5 chracters",
"		echo( length( date(today)) );	// 10 characters: YYYY-MM-DD"
 ]
	,
	"Output": "automatic",
	"See also": [ "length [parameter set function]", "length of literals" ]
}

,

"length ... (parameter set function)" : // Note space after function name: Used to distinguish from string function
{
	"Function Names":	[ "length " ],
	"Keywords":			[ "length [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Returns number of characters.  If the value provided is not a literal, then it will be converted to a literal first.<br>",
"	<u>Attention</u>: For numerals and dates with available literal context, the literal will be used.",
"	",
"	<br><br>",
"",
"	A simpler approach is to use {} behind the parameter set value, referred as __length of parameter sets__.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __length [string function]__ instead." ]
		}

	],
	"Return value":
	[
		{ "Name": "Length",
		  "Types": [ "numeral" ],
		  "Description": "Number of elements (nested elements are not counted)"
		}
	],
"Examples" : [
"		echo( length( {a,b,1} ) );	// 3 elements",
"		echo( length( {a,{b,2,3}} ) );	// 2 elements (nested ones are not counted)",
"		echo( length( {} ) );		// 0 elements (empty set)",
"		echo( length( {{}} ) );		// 1 elements (contains 1 element which is a nested empty set)"
 ]
	,
	"Output": "automatic",
	"See also": [ "length [string function]", "length of parameter sets" ]
}

,

"trim ... (string function)" :
{
	"Function Names":	[ "trim", "trim all" ],
	"Keywords":			[ "trim [string function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Trims excess white spaces (including tabs, new line symbols and other invisible control characters) from the beginning and end of the string.",
"	<b>trim</b> trims excessive spaces from beginning and ends, but leave spaces inside the string untouched.<br>",
"	<b>trim all</b> also removes redundant white blanks inside the string and replaces them by single spaces. I.e. new line symbols are also replaced by spaces.<br>",
"	Non-break space symbols are not affected.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "String to be trimmed" ]
		}
	],
	"Return value":
	[
		{ "Name": "trimmed string",
		  "Types": [ "literal" ],
		  "Description": "Excess white spaces removed according to function chosen"
		}
	],
"Examples" : [
"		echo( '\"', trim    ( \"  This   is a green  cat \"), '\"' );",
"		echo( '\"', trim all( \"  This   is a green  cat \"), '\"' );"
 ]
	,
	"Output": "automatic",
	"See also": [ "trim [parameter set function]"  ]
}

,

"trim ... (parameter set function)" : // Note space after function name: Used to distinguish from string function
{
	"Function Names":	[ "trim " ],
	"Keywords":			[ "trim [parameter set function]" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function removes all duplicate elements (multiple element with same value or contents) so every element inside",
"	is unique.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description":
			[ "<u>Attention</u>: If 1st parameter is not a parameter set, please refer to __trim [string function]__ instead." ]
		}

	],
	"Return value":
	[
		{ "Name": "trimmed parameter set",
		  "Types": [ "parameter set" ],
		  "Description": "Parameter set contains unique elements"
		}
	],
"Examples" : [
"		echo( trim( { a, b, c, d, c, b, a } ) );",
"		echo( trim( { 'a', \"a\", A, \"A\" } ) );   // No difference made on quoted strings",
"",
"		echo( trim( { 1, {}, {a,b}, 1, {}, {b,a}, {a,b}, {a,b} } ) );   // No difference made on quoted strings",
"		// Note: {a,b} is considered different to {b,a} and will not be trimmed",
"",
"		echo( trim( { 1, '1', 2, '2' } ) );   // No trimming (numerals differ from literals)",
"		echo( trim( { } ), \" / \", trim( { {},{},{} } ) ); // No element and 1 element",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "trim [string function]" ]
}

,

"count elements ..." :
{
	"Function Names":	[ "count elements", "count elements ignore case", "count elements ignore blanks", "count elements ignore both" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Counts the number of elements which match with the supplied value.  The ordering of the elements in the parameter sets do not matter.",
"	<br><br>",
"	<u>Attention:</u> Comparing Boolean true and literal 'true' (lower case letters) will also count because comparison is based on",
"	the single '=' comparison operator which returns true if <i>true = \"true\"</i> and vice versa.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If provided as a parameter set: Will be used for counting elements<br>",
"			If provided as a quoted literal: The string will be converted to a parameter set containing one element.<br>",
"			If provided as a unquoted or softquoted literal: The comma-separated substrings will be converted to parameter set elements. '' is equivalent to {}.<br>"
 ]
			
		},
		{ "Number": "2",
		  "Name": "matching value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			The comparison looks into both value and type.  Providing a numeral 1 is not the same as a literal '1'.",
"			The parameter set will be compared with this value in order to count matches.",
"			The options 'ignore case', 'ignore blanks' and both combined will only apply if the values compared are literals.<br>",
"			If the value is an __unquoted literal__ or __softquoted literal__, then __wildcard symbols__ are supported."
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Number of elements identified",
		  "Types": [ "numeral" ],
		  "Description": "Number of elements (nested elements are not counted)"
		}
	],
"Examples" : [
"		print ( count elements( { Amy, Amsel, Bea, Beat, Charles, Charly }, 'Am*' ),\", \" ); // 2",
"		print( count elements( { Amy, Amsel, Bea, Beat, Charles, Charly }, \"Am*\" ), \", \" ); // 0",
"		echo ( count elements ignore case( { Amy, Amsel, Bea, Beat, Charles, Charly }, amsel ) ); // 1",
"		print ( count elements( { 1, true, false, true, 2 }, true ), \", \" ); // 2",
"		print ( count elements( { 1, true, false, true, 2 }, \"true\" ), \", \" ); // 2 (true = 'true') case",
"		echo( count elements( { 1, '1', 2, '2' }, 'true' ) ); // 0",
"",
"		// Subsets",
"		print( count elements( { a,b,c,{d,e} }, {d,e} ), \", \" ); // 1",
"		echo( count elements( { a,b,c,{d,e} }, {e,d} ) ); // 1",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "length [parameter set function]", "length of parameter sets" ]
}

,

"subset ..." :
{
	"Function Names":	[ "subset", "subset ignore case", "subset ignore blanks", "subset ignore both", "subset recursive", "subset recursive ignore case", "subset recursive ignore blanks", "subset recursive ignore both" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function checks whether the parameter set in the 2nd function parameter is a subset of the 1st parameter set.<br>",
"	The <b>recursive</b> will also include the nested parameter sets into subset checking, e.g. subset( {{a,b,c},c,d}, {{a,b},d} ) is true.  Otherwise, {a,b,c} and {a,b} ares treated as different elements.",
"",
"	Counts the number of elements which match with the supplied value.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If provided as a parameter set: Will be used for counting elements<br>",
"			If provided as a quoted literal: The string will be converted to a parameter set containing one element.<br>",
"			If provided as a unquoted or softquoted literal: The comma-separated substrings will be converted to parameter set elements. '' is equivalent to {}.<br>"
 ]
			
		},
		{ "Number": "2",
		  "Name": "subset to check",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			If provided as a parameter set: Will be used for counting elements<br>",
"			If provided as a quoted literal: The string will be converted to a parameter set containing one element.<br>",
"			If provided as a unquoted or softquoted literal: The comma-separated substrings will be converted to parameter set elements. '' is equivalent to {}.<br>",
"			<u>Attention:</u> In contrast to other parameter set functions, __wildcards__ are not supported here."
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "2nd parameter set is a subset of 1st parameter set",
		  "Types": [ "boolean" ],
		  "Description": "Number of elements (nested elements are not counted)"
		}
	],
"Examples" : [
"		a[] = { a, b, c, {d, e}, f, {} };",
"		echo ( subset( a[], {} ) ); // True (Empty set is always subset)",
"		print( subset ( a[], {A} ), \", \" ); // False (A is not in the set)",
"		echo ( subset ignore case( a[], {B,A} ) ); // True (cases ignored)",
"",
"		print( subset( a[], {c,{},f} ), \", \" ); // True (Empty set is always subset)",
"		print( subset( a[], {f,{d,e}} ), \", \" ); // True (Empty set is always subset)",
"		print( subset( a[], {f,{e,d}} ), \", \" ); // False. {e,d} not equal to {d,e}",
"		echo ( subset recursive( a[], {{d,e}} ) ); // True. {e,d} not equal to {d,e}"
 ]
	,
	"Output": "automatic"
}

,

"filter ..." :
{
	"Function Names":	[ "filter", "filter 1", "filter n", "filter start", "filter start include", "filter start n", "filter start n include", "filter stop", "filter stop include" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function extracts a middle part with those elements which fulfill the matching criteria specified in the 2nd parameter.",
"		<br><br>",
"		Unless specified otherwise, empty set is returned in case of no matches.  The filter function does not check parameter sets recursively.",
"",
"		=== 200, 800, noheader, noframe bold_column_1",
"		Function Name			| Behavior",
"		filter					| Returns all elements where matching criteria are met.",
"		filter 1				| Returns first match only.",
"		filter n				| Limit the number of matches as specified in the 3rd parameter.  0 and negative numbers return empty sets.",
"		filter start			| Returns all remaining elements <u>after and excluding</u> the first match.",
"		filter start include	| Returns all remaining elemetns <u>including and after</u> the first match.",
"		filter start n			| Return maximum specified number of elements <u>after and excluding</u> the first match.",
"		filter start n include	| Return maximum specified number of elements  <u>including and after</u> the first match.",
"		filter stop				| Return all elements until <u>before (excluding)</u> the first match.  Full set returned if  no match identified.",
"		filter stop include		| Return all elements until and <u>including</u> the first match.",
"		===",
"		",
"		This function may also be called as a procedure in case only the processed followers are needed.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input parameter set",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If provided as a parameter set: Will be used for counting elements<br>",
"			If provided as a quoted literal: The string will be converted to a parameter set containing one element.<br>",
"			If provided as a unquoted or softquoted literal: The comma-separated substrings will be converted to parameter set elements. '' is equivalent to {}.<br>"
 ]
			
		},
		{ "Number": "2",
		  "Name": "Right-hand Comparison expression",
		  "Direction": "code",
		  "Types": ["comparison expression", ":literal"],
"Description" : [
"		    This expression is used to compare every element of the parameter set from left to right.<br>",
"		    This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			This parameter applies to function names <b>filter n</b>, <b>filter start n</b> and <b>filter start n include</b>.",
"			If provided as a parameter set: Will be used for counting elements<br>",
"			If provided as a quoted literal: The string will be converted to a parameter set containing one element.<br>",
"			If provided as a unquoted or softquoted literal: The comma-separated substrings will be converted to parameter set elements. '' is equivalent to {}.<br>"
 ]
			
		},

		{ "Number": "Opt. 3+ / Opt. 4+",
		  "Name": "follower",
		  "Direction": "io",
		  "Types": [ "parameter set" ],
"Description" : [
"			Other parameter sets in addition to the one provided as the first function parameter can be extracted in the same same way.",
"			Add any number of additional parameter set variables.  They will be manipulated at the exact same positions as the returned value."
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Filtered parameter set",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"		a[] = {A,1,2,3,4,E,5,2,6 };",
"",
"		print( filter      ( a[], >= 3 ), \", \" );    // {3,4,5,6}",
"		echo ( filter      ( a[], (2,3) ) );         // {2,3,2}",
"",
"		print( filter 1    ( a[], >= 3 ), \", \" );    // {3}",
"		echo ( filter n    ( a[], >= 3, 3  ) );      // {3,4,5}",
"",
"		print( filter stop ( a[], >= 3 ), \", \" );    // { A,1,2}",
"		echo ( filter stop include ( a[], >= 3 ) );  // { A,1,2,3}",
"",
"		print( filter start    ( a[], 4 ), \", \" );   // {E,5,2,6}",
"		echo ( filter start n  ( a[], (4), 3 ) );    // {E,5,2}",
"",
"		// Why is (4) in parentheses?  This is a comparison and",
"		// should only be compared with 4, and not with both 4 and 3.",
"		// In the 2nd row, ( a[], (2,3) ) is same as ( a[], 2, 3 ) !",
"		// (4) is same as (=4). (2,3) is same as (=2,3).",
"",
"		print( filter start include   ( a[], 4 ), \", \" ); // {4,E,5,2,6}",
"		echo ( filter start n include ( a[], (4), 3 ) );  // {4,E,5}",
"",
"		// The follower feature:",
"",
"		b[] = {a,b,c,d,e,f,g,h,i};",
"		c[] = {A,B,C,D,E,F,G,H,I};",
"",
"		filter      ( a[], (=2), b[], c[] ); // Attn: (=2) in parentheses",
"		echo( b[], \" / \", c[] ); // Outputs {c,h}, {C,H}",
"",
"		b[] = {a,b,c,d,e,f,g,h,i};",
"		c[] = {A,B,C,D,E,F,G,H,I};",
"",
"		filter start n ( a[], (=2), 3, b[], c[] ); // Attn: (=2) in parentheses",
"		echo( b[], \" / \", c[] ); // Outputs {d,e,f}, {D,E,F}",
""
 ]
	,
	"Output": "automatic"
}

,

"replace, replace all" :
{
	"Function Names":	[ "replace", "replace all" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The function <b>replace</b> replaces the first occurrence of the specified old contents by new contents.<br>",
"	The function <b>replace all</b> replaces all occurrences of the specified old contents by new contents.",
"",
"	<br><br>",
"	Comparing wtih the __substitute(__) function, the 1st parameter is an input parameter and the return value contains the modified string.<br>",
"	<b>substitute( a[], \"Hello\", \"Hi\" ); </b> is the same as <b>a[] = replace( a[], \"Hello\", \"Hi\" );</b>",
"",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"3-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Input string with contents to replace" ]
		},
		{ "Number": "2",
		  "Name": "existing contents",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If provided as a literal: The string will be looked for this content.<br>",
"			If provided as a parameter set: The string will be looked for all contents provided in the parameter set.<br>",
"			<u>Attention</u>: No wildcard symbols are supported here."
 ]
		  
		},
		{ "Number": "3",
		  "Name": "new contents",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			These new contents will be inserted.<br>",
"			If provided as a literal: New contents to replacing the identified old contents.<br>",
"			If provided as a parameter set: Number of elements must either be equal to the number of elements in the 2nd function parameter, or just 1 element<br>"
 ]
		  
		},
		{ "Number": "Opt. 4",
		  "Name": "starting position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			String replacement begins at a specified characcter position. For example, 2 skips the first two chracters in the input string."
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "String wîth replaced contents",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "3rd parameter contains different number of elements than 2nd parameter, and is not 1" ],
"Examples" : [
"		st[] = \"the house, the mouse, and the spouse\";",
"",
"		echo( replace     ( st[], the, a ) );",
"		echo( replace all ( st[], the, a ) );",
"",
"		// First occurrence of each term",
"		echo( replace     ( st[], { the, spouse, mouse, house }, { THE, SPOUSE, MOUSE, HOUSE } ) );",
"",
"		// All occurrences.  See difference on 'the'",
"		echo( replace all ( st[], { the, spouse, mouse, house }, { THE, SPOUSE, MOUSE, HOUSE } ) );",
"",
"		echo( replace all ( st[], { spouse, mouse, house }, { one } ) ); // Replace all by 'home'",
"",
"		echo( replace    ( \"Café Café Café\", Café, Caffè, 1 ) ); // Skip first 'Café'",
"		echo( replace all( \"Café Café Café\", Café, Caffè, 1 ) ); // Skip first 'Café'"
 ]
		,
	"Output": "automatic",
	"See also": [ "substitute", "substitute all" ]
}

,

"substitute, substitute all" :
{
	"Function Names":	[ "substitute", "substitute all" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The function <b>substitute</b> substitutes the first occurrence of the specified old contents by new contents.<br>",
"	The function <b>substitute all</b> substitutes all occurrences of the specified old contents by new contents.",
"",
"	<br><br>",
"	Comparing wtih the __replace(__) function, the 1st parameter is an input-output parameter where the contents are modified:<br>",
"	<b>substitute( a[], \"Hello\", \"Hi\" ); </b> is the same as <b>a[] = replace( a[], \"Hello\", \"Hi\" );</b>",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"3-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "io",
		  "Types": [ "literal" ],
		  "Description": [ "Destination string with contents to substitute" ]
		},
		{ "Number": "2",
		  "Name": "existing contents",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If provided as a literal: The string will be looked for this content.<br>",
"			If provided as a parameter set: The string will be looked for all contents provided in the parameter set.<br>",
"			<u>Attention</u>: No wildcard symbols are supported here."
 ]
		  
		},
		{ "Number": "3",
		  "Name": "new contents",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			These new contents will be inserted.<br>",
"			If provided as a literal: New contents to replacing the identified old contents.<br>",
"			If provided as a parameter set: Number of elements must either be equal to the number of elements in the 2nd function parameter, or just 1 element<br>"
 ]
		  
		},
		{ "Number": "Opt. 4",
		  "Name": "starting position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			String substitution begins at a specified characcter position. For example, 2 skips the first two chracters in the input string."
 ]
		  
		}

	],
	"Exceptions": [ "3rd parameter contains different number of elements than 2nd parameter, and is not 1" ],
"Examples" : [
"		original[] = \"the house, the mouse, and the spouse\";",
"",
"		st1[] = original[];",
"		st2[] = original[];",
"		substitute     ( st1[], the, a );",
"		substitute all ( st2[], the, a );",
"		echo(st1[]);",
"		echo(st2[]);",
"",
"		st1[] = original[];",
"		st2[] = original[];",
"		substitute     ( st1[], { the, spouse, mouse, house }, { THE, SPOUSE, MOUSE, HOUSE } );",
"		substitute all ( st2[], { the, spouse, mouse, house }, { THE, SPOUSE, MOUSE, HOUSE } );",
"		echo(st1[]);",
"		echo(st2[]);"
 ]
		,
	"Output": "automatic",
	"See also": [ "replace", "replace all" ]
}

,

"get differences" :
{
	"Function Names":	[ "get differences" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function checks two literals for deviating contents and copies them in two substrings.",
"	In detail, the function scans the two literals character by character from left to right until a position with different characters have been identified.",
"	The same will be repeated with scanning from the end of both strings leftward until a first difference is encountered.",
"	The middle contents are deemed different, even if only the first and last character(s) are different, as in follwoing example:<br><br>",
"",
"	Example 1: Checking: \"The yak is blond\" and \"The jak is blind\".Deltas are: \"yak is blo\" and \"jak is bli\".<br>",
"	Example 2: Checking: \"The yak is blond\" and \"The jak is blond\".Deltas are: \"y\" and \"j\".<br>",
"	",
"	Options are available to include whole words or numbers in the comparison, so \"My name is Jan\". / \"My name was Dan.\" will preserve the name.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-5",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "1st string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "1st string to compare with 2nd string" ]
		},
		{ "Number": "2",
		  "Name": "2nd string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "2nd string to compare with 1st string" ]
		},
		{ "Number": "Opt. 3",
		  "Name": "Deviating part of 1st string",
		  "Direction": "output",
		  "Types": [ "literal" ],
		  "Description": [ "Identified part of the 1st string which differs from the part of the 2nd string" ]
		},
		{ "Number": "Opt. 4",
		  "Name": "Deviating part of 2nd string",
		  "Direction": "output",
		  "Types": [ "literal" ],
		  "Description": [ "Identified part of the 1st string which differs from the part of the 2nd string" ]
		},
		{ "Number": "Opt. 5",
		  "Name": "Options",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "characters",
"Description" : [
"		  Following options apply:",
"		  === 100, 400, noheader, noframe_1stcolbold",
"		  characters  	| Compare character by character.",
"		  words			| If difference in both strings are inside words, then the whole words will be returned.",
"		  numbers		| If difference in both strings are inside numbers, then whole numbers will be returned (minus signs are considered as part of number, but deciaml points are not)",
"		  spaces		| Similar to words, where any contents between spaces are part of the words, including numbers and punctuation symbols.",
"		  ===",
""
 ]
		  
		}
	],
	"Return value":
	[
	  { "Name": "Comparison result",
		"Types": [ "numeral" ],
"Description" : [
"		0 = The two strings are equal<br>",
"		1 = Differences identified.<br>",
"		2 = Differences identified where one string is empty",
"		If the option is words, numbers or spaces, then the following values may be returned, too:<br>",
"		3 = Differences identified, and the different string section has been extended to cover whoel words, numbers or non-blank text depending on option chosen."
 ]
		
	  }
	],
"Examples" : [
"",
"		r[] = get differences(Good taste of coffee counts, Good taste of coffee counts, c[], d[] );",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // '', '', 0 (equal)",
"",
"		r[] = get differences(Good taste of coffee counts, Good taste of caffè counts, c[], d[] );",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // offee, affè, 1",
"",
"		r[] = get differences(Good taste of coffee counts, Good taste of caffè counts, c[], d[], words );",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // coffee, caffè, 3",
"",
"		r[] = get differences(Good taste of coffee counts, Good taste counts, c[], d[], words );",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // coffee, '', 2",
"",
"		r[] = get differences(Good tasting of coffee counts, Good taste of caffè counts, c[], d[], words );",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // tasting of coffee, taste of caffè, 3",
"",
"		r[] = get differences(Year 2015 begins, Year 2016 begins, c[], d[], characters);",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // 5, 6, 1",
"",
"		r[] = get differences(Year 2015 begins, Year 2016 begins, c[], d[], words);",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // 5, 6, 1",
"",
"		r[] = get differences(Year 2015 begins, Year 2016 begins, c[], d[], numbers);",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // 2015, 2016, 3",
"",
"		r[] = get differences( \"20-Mar-2015\", \"21-Mar-2015\" , c[], d[], characters);",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // 0, 1, 1",
"",
"		r[]  = get differences( \"20-Mar-2015\", \"21-Mar-2015\" , c[], d[], spaces);",
"		echo(\"1st string: '\", c[], \"',    2nd string: '\", d[], \"'   Result: \", r[] ); // 20-Mar-2015, 20-Mar-2016, 1"
 ]
		,
	"Output": "automatic",
	"See also": [ "locate differences" ]
},


"locate differences" :
{
	"Function Names":	[ "locate differences" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function checks two literals for deviating contents and returns the starting positions and lengths of the different strings.",
"	In detail, the function scans the two literals character by character from left to right until a position with different characters have been identified.",
"	The same will be repeated with scanning from the end of both strings leftward until a first difference is encountered.",
"	The middle contents are deemed different, even if only the first and last character(s) are different, as in follwoing example:<br><br>",
"",
"	Example 1: Checking: \"The yak is blond\" and \"The jak is blind\".Deltas are: \"yak is blo\" and \"jak is bli\".<br>",
"	Example 2: Checking: \"The yak is blond\" and \"The jak is blond\".Deltas are: \"y\" and \"j\".<br>",
"",
"	Options are available to include whole words or numbers in the comparison, so \"My name is Jan\". / \"My name was Dan.\" will preserve the name.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "1st string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "1st string to compare with 2nd string" ]
		},
		{ "Number": "2",
		  "Name": "2nd string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "2nd string to compare with 1st string" ]
		},
		{ "Number": "Opt. 3",
		  "Name": "Starting Character Position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "First character position in both strings where the deviation is beginning." ]
		},
		{ "Number": "Opt. 4",
		  "Name": "Length of deviation in 1st string",
		  "Direction": "output",
		  "Types": [ "numeral" ],
		  "Description": [ "Number of deviating chracters in the different part of the 1st string" ]
		},
		{ "Number": "Opt. 5",
		  "Name": "Length of deviation in 2nd string",
		  "Direction": "output",
		  "Types": [ "numeral" ],
		  "Description": [ "Number of deviating chracters in the different part of the 2nd string" ]
		},
		{ "Number": "Opt. 6",
		  "Name": "Options",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "characters",
"Description" : [
"		  Following options apply:",
"		  === 100, 400, noheader, noframe_1stcolbold",
"		  characters  	| Compare character by character.",
"		  words			| If difference in both strings are inside words, then the whole words will be returned.",
"		  numbers		| If difference in both strings are inside numbers, then whole numbers will be returned (minus signs are considered as part of number, but deciaml points are not)",
"		  spaces		| Similar to words, where any contents between spaces are part of the words, including numbers and punctuation symbols.",
"		  ===",
""
 ]
		  
		}
	],
	"Return value":
	[
	  { "Name": "Comparison result",
		"Types": [ "numeral" ],
"Description" : [
"		0 = The two strings are equal<br>",
"		1 = Differences identified.<br>",
"		2 = Differences identified where one string is empty",
"		If the option is words, numbers or spaces, then the following values may be returned, too:<br>",
"		3 = Differences identified, and the different string section has been extended to cover whoel words, numbers or non-blank text depending on option chosen."
 ]
		
	  }
	],
"Examples" : [
"",
"		define procedure( printout )",
"		{",
"			echo(\"Deviation starting position: \", b[], \"  Deviation lengths - 1st string: '\",",
"			c[], \"',  2nd string: '\", d[], \"'   Result: \", r[] );",
"		}",
"",
"		r[] = locate differences(Good taste of coffee counts, Good taste of coffee counts, b[], c[], d[] ); // 0, 0,",
"		printout; // 0, 0, 0, 0",
"",
"		r[] = locate differences(Good taste of coffee counts, Good taste of caffè counts, b[], c[], d[] );",
"		printout; // 15, 5 (offee) , 4 (affè) , 1",
"",
"		r[] = locate differences(Good taste of coffee counts, Good taste of caffè counts, b[], c[], d[], words );",
"		printout; // 14, 6 (coffee), 5 (caffè), 3",
"",
"		r[] = locate differences(Good taste of coffee counts, Good taste counts, b[], c[], d[], words );",
"		printout; // 11, 10 ('of coffee '), 0, 2",
"",
"		r[] = locate differences(Good tasting of coffee counts, Good taste of caffè counts, b[], c[], d[], words );",
"		printout; // 5, 17 (tasting of coffee), 14 (taste of caffè) , 3",
"",
"		r[] = locate differences(Year 2015 begins, Year 2016 begins, b[], c[], d[], characters);",
"		printout; // 8, 1 ('5'), 1 ('6') , 3",
"",
"		r[] = locate differences(Year 2015 begins, Year 2016 begins, b[], c[], d[], words);",
"		printout; // 8, 1 ('5'), 1 ('6') , 3",
"",
"		r[] = locate differences(Year 2015 begins, Year 2016 begins, b[], c[], d[], numbers);",
"		printout; // 5, 4 ('2015'), 4 ('2016') , 3",
"",
"		r[] = locate differences( \"20-Mar-2015\", \"21-Mar-2015\" , b[], c[], d[], characters);",
"		printout; // 1, 1 ('0'), 1 ('1'), 1",
"",
"		r[]  = locate differences( \"20-Mar-2015\", \"21-Mar-2015\" ,b[],  c[], d[], spaces);",
"		printout; // 0, 11 (20-Mar-2015), 11 (21-Mar-2015), 3",
""
 ]
		,
	"Output": "automatic",
	"See also": [ "get differences" ]
}

,

"tokenize":
{
	"Function Names":	[ "tokenize" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function breaks a string into individual token (pieces), returning them as a parameter set of literals or other types, depending on the",
"		settings provided in the 2nd function parameter.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  { "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "This string will be tokenized" ]
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"Options",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
"Description" : [
"			Specify one or more options.  Formulation rules (applicable to 2nd-7th function parameters):",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* No values can be provided by using empty set {} or blank softquoted literal ''.",
"",
"			Following options are supported",
"			=== 200, 600, noheader, noframe_1stcolbold",
"			include blanks				| Blank contents (between separators) are also recognized as contents and will not be ignored / skipped.",
"			trim token					| Leading and trailing white spaces (UNICODE 0 - 32) such as spaces, new lines, tabs, etc. will be removed from the token contents.  Non-break blanks (UNICODE 160) are excluded from this rule.",
"			allow new line inside quotations | Normally, line breaks in texts inside specified quotation marks will generate exceptions with error messages.  This option will suppress exceptions and treat new lines like part of text.",
"			include quotations in text	| The text returned will also include the quotation symbol.  Quotations may consist of more than 1 character, e.g. &lt;&lt; ... &gt;&gt;.",
"			include quotations as tokens | The quotation symbols will be returned as dedicated tokens",
"			read numerals				| Tokenized contents looking like numbers will be included as tokens of numeral type",
"			scientific notation			| Tokenized contents looking like numbers with or without scientific notation will be included as tokens of numeral type",
"			read date					| Tokenized contents looking like dates will be read as dates",
"			read boolean				| Tokenized contents looking like booleans (true, false) will be read as boolean values",
"			thousand separator			| (Next element must contain the character)  Assumptions for numbers in the input string. Default: -",
"			decimal separator			| (Next element must contain the character)  Assumptions for numbers in the input string. Default: .",
"			==="
 ]
			
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"Token separator strings",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
		 "Default value": "{' ', new line } (blank and new line)",
"Description" : [
"			Specify at least 1 separator string (e.g. blank, comma, tab, slash, etc).  The string may contain multiple characters.  In this case, the sequence of these multiple",
"			characters combined represent the separation, e.g. { \"//\", \"...\" } specified.",
"			",
"			<br><br>Formulation rules: See 2nd function parameter."
 ]
			
	  },
	  {
		 "Number":		"Opt. 4",
		 "Name":		"Quotation marks",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
		 "Default value": "(quotation marks not assumed)",
"Description" : [
"			If one literal used: considered for opening and closing.  Example:  \"Hello World\"<br>",
"			If 2 literals used: Separate for opening and closing.  Example: &lt;&lt;Hello World&gt;&gt;<br>",
"			If number of quotation marks provided is odd, then the last quotation mark applies both as opening and closing quotation marks.",
"			Multi-character quotation marks, e.g. &lt;TEXT&gt;Hello World&lt;/TEXT&gt; are also allowed.",
"",
"			<br><br>Formulation rules: See 2nd function parameter."
 ]
			
	  },
	  {
		 "Number":		"Opt. 5",
		 "Name":		"Additional tokens",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
		 "Default value": "(none specified)",
"Description" : [
"			Collection of token symbols to be parsed separately and suitable for categorization.  ",
"			This is specifically important if these tokens follow without separators (e.g. white spaces) in-between.  ",
"			You can also assign multi-character tokens, e.g. \"&lt;=\", \"&lt;&gt;\", \"while\", \"for\", etc.",
"",
"			<br><br>Formulation rules: See 2nd function parameter."
 ]
			
	  },
	  {
		 "Number":		"Opt. 6",
		 "Name":		"Block comment symbols",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
		 "Default value": "(none specified)",
"Description" : [
"			Pairwise collection of opening and closing block comment symbols, e.g. { \"/&#42;\", \"&#42;/\", \"&lt;--\", \"--&gt;\" }.",
"			Contents commented out will not be tokenized.",
"",
"			<br><br>Formulation rules: See 2nd function parameter."
 ]
			
	  },
	  {
		 "Number":		"Opt. 7",
		 "Name":		"Line comment symbols",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
		 "Default value": "(none specified)",
"Description" : [
"			Specify all comment symbols which declare the rest of the line as comment, e.g. { \"//\", \"#!\" }.",
"			Contents commented out will not be tokenized.",
"",
"			<br><br>Formulation rules: See 2nd function parameter."
 ]
			
	  }
	],
	"Return value":
	[
		{ "Name": "Tokenized result",
		  "Types": [ "parameter set" ],
		  "Description": "Every token is represented as an element in the parameter set"
		}
	],
"Examples" : [
"	echo( new line, \"Basic use of tokenize. Separators are blank and new line\" );",
"	echo( tokenize( \"This   is a\" + new line + \" test\" ) );",
"",
"	echo( new line, \"Demonstrate 'include blanks' and 'trim token'\" );",
"	echo( tokenize( \",Ha, He ,,Hi,\", '', \",\" ) );",
"	echo( tokenize( \",Ha, He ,,Hi,\", include blanks, \",\" ) );",
"	echo( tokenize( \";Ha; He ,,Hi,\", trim token, {\",\",\";\"} ) );",
"	echo( tokenize( \",Ha, He ,,Hi,\", {include blanks, trim token}, \",\" ) );",
"",
"	echo( new line, \"New line inside quotations allowed\" );",
"	echo( tokenize( \"'Me, and\"+new line+\"You','and us'\" , allow new line inside quotations, \",\", \"'\" ) );",
"",
"	echo( new line, \"Demonstrate usage of quotations\" );",
"	echo( tokenize( \"<text>A gnu</text>,<text>A gnat</text>\" , '', \",\", { \"<text>\", \"</text>\" } ) );",
"	echo( tokenize( \"<text>A gnu</text>,<text>A gnat</text>\" , include quotations as tokens, \",\", { \"<text>\", \"</text>\" } ) );",
"",
"	echo( new line, \"Read numerals, dates, booleans\" );",
"	echo( tokenize( \"1 true 1E+3 FALSE text 2020-05-07 15:30:00\", { read numerals, scientific notation, read dates, read booleans } ) );",
"",
"	echo( new line, \"Thousand and Decimal separators\" );",
"	echo( tokenize( \"1,234 1.234\", { read numerals, thousand separator, \".\", decimal separator, \",\" } ) );",
"",
"	echo( new line, \"Additional tokens\" );",
"	echo( tokenize( \"for a=1to5 'do something'\", {}, \" \", \"'\", { \"=\", to, for } ) );",
"",
"	echo( new line, \"Ignore comments\" );",
"	echo( tokenize( \"for a=1to5 /: for a = 3 to 4 :/ 'do something'\", {}, \" \", \"'\", { \"=\", to, for }, { \"/:\", \":/\" } ) );",
"	echo(tokenize(\"for a=1to5 // 'do something'\", {}, \" \", \"'\", { \"=\", to, for }, { }, \"//\"));"
 ]
	,
	"Output": "automatic",
	"See also": [ "parameter set"  ]
}

,

"code":
{
	"Function Names":	[ "code" ],
	"Keywords":			[ "character decoding" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function returns the UNICODE character code of the character supplied.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Input string containing character to decode" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "character position",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Character position, if a character other than the 1st character needs to be decoded.  __Negative indexing__: Negative values count from right to left, e.g. -1 = last character." ]
		}
	],
	"Return value":
	[
		{ "Name": "character code",
		  "Types": [ "numeral" ],
"Description" : [
"			>0: UNICODE character code<br>",
"			0:  Empty string<br>",
"			-1: Attempted to decode character at positition outside the string"
 ]
			
		}
	],
"Examples" : [
"		echo( code( 'Café 4.0 €' ) ); // C",
"		echo( code( 'Café 4.0 €', 3 ) ); // é",
"		echo( code( 'Café 4.0 €', -1 ) ); // €",
"		echo( code( 'Café 4.0 €', 99 ) ); // -1 (out of bounds)",
"		echo( code( '&#119070;' ) ); // Violin clef",
"		echo( code( '' ) ); // 0 returned"
 ]
	,
	"Output": "automatic",
	"See also": [ "chr"  ]
}

,
"chr":
{
	"Function Names":	[ "chr" ],
	"Keywords":			[ "character encoding" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function returns the UNICODE character code of the character supplied.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "character code",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Character code: 0 ... 1114111 (full UNICODE range). 0 returns an empty string." ]
		}
	],
	"Return value":
	[
		{ "Name": "Decoded character",
		  "Types": [ "numeral" ],
"Description" : [
"			The string contains 1 character if a valid non-zero code is provided.  For code 0, an empty string is returned."
 ]
			
		}
	],
	"Exceptions": "Invalid character code (outside 0 - 1114111 range)",
"Examples" : [
"		echo( \"'\", chr( 0 ), \"'\" );      // Empty string",
"		echo( \"'\", chr( 65 ), \"'\" );     // A",
"		echo( \"'\", chr( 223 ), \"'\" );    // Sharp S",
"		echo( \"'\", chr( 8364 ), \"'\" ); 	 // EURO sign",
"		echo( \"'\", chr( 119070 ), \"'\" ); // Violin clef"
 ]
	,
	"Output": "automatic",
	"See also": [ "code"  ]
}

,
"decode entities":
{
	"Function Names":	[ "decode entities" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This functiond decodes entities (like &#8364; &#20ac; &euro;) into actual characters.  The common entity names used in",
"	HTML are supported.",
"	",
"	<br><br>",
"	<u>Note:</u> Entities inside softquoted literals specified in the program code will be converted automatically.  See examples below.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "This string contains entity-encoded special characters" ]
		}
	],
	"Return value":
	[
		{ "Name": "String with decoded characters",
		  "Types": [ "literal" ],
"Description" : [
"			Converted string with decoded characters"
 ]
			
		}
	],
	"Exceptions": "Invalid character code (outside 0 - 1114111 range)",
"Examples" : [
"		echo( decode entities( \"4.50 &euro; / 4.50 &#8364; / 4.50 &#x20ac; / 4.50 &#X20AC;\" ) );",
"		echo( \"4.50 &euro;\" ); // Quoted literal are not decoded.",
"		echo( '4.50 &euro;' ); // Softquoted literal is already decoded implicitly.",
"		echo( '4.50 &eur' + 'o;' ); // This one is not because full entity is not in one softquoted literal value"
 ]
	,
	"Output": "automatic",
	"See also": [ "chr", "encode entities"  ]
}

,
"encode entities":
{
	"Function Names":	[ "encode entities" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function encodes special characters into entities.",
"	Following characters are encoded:",
"	* &gt; - Greater Than -> &amp;gt;",
"	* &lt; - Less than -> &amp;lt;",
"	* &quot; - Double quotation marks -> &amp;quot;",
"	* &#39; - Single quotation marks -> &amp;#39;",
"	* &amp; - Ampersand symbol -> &amp;amp;",
"	* All control characters (e.g. new line, tab, backspace, escape) -> &#nnn;",
"	* Control character code 0 (NUL) will be ignored.",
"	* All non-ANSI characters (e.g. é) -> &#nnn;",
"	* 2nd and further consecutive spaces are converted to &amp;#32;",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "input string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Original string containing special characters" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "use new line in html format",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Default value": "false",
		  "Description": [ "If false:  Converts to &#10;<br>If true:  Converts to <br/>. " ]
		}
	],
	"Return value":
	[
		{ "Name": "String with encoded characters",
		  "Types": [ "literal" ],
"Description" : [
"			Converted string with encoded characters"
 ]
			
		}
	],
	"Exceptions": "Invalid character code (outside 0 - 1114111 range)",
"Examples" : [
"		echo( encode entities( '4.50 €  <TABLE> \"...\" </DIV>' ) );",
"		echo( encode entities( Line 1 + new line + Line 2, false ) ); // use &#10;",
"		echo( encode entities( Line 1 + new line + Line 2, true ) ); // use <BR/>"
 ]
	,
	"Output": "automatic",
	"See also": [ "chr", "decode entities"  ]
}

,
"random string, random letters":
{
	"Function Names":	[ "random string", "random letters" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function creates a string containing random upper-case characters from A..Z and digits 0..9. ",
"		The function <b>random letters</b> generates strings with upper-case characters from A..Z only.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "character count",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Specifies the number of random characters in the string." ]
		}
	],
	"Return value":
	[
		{ "Name": "Generated random string",
		  "Types": [ "literal" ],
		  "Description": ""
		}
	],
	"Exceptions": "Invalid character code (outside 0 - 1114111 range)",
"Examples" : [
"	for (i[] = 1, i[] <= 5, i[]++)",
"	{",
"		echo( random string( 10 ), \" \", random letters( 10 ) );",
"	}"
 ]
	,
	"Output": "automatic",
	"See also": [ "random"  ]
}

,

"literal, quoted literal, softquoted literal" :
{
	"Function Names":	[ "literal", "softquoted literal" ],
	"Keywords":			[ "literal conversion", "formatting template", "literal conversion functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions convert variables of any type to literals, including void values.",
"	If only one parameter containing the value to provide, then following default rules are applied:",
"",
"	=== 200, 600",
"	Original Type		| Approach",
"	__boolean__			| Converts to <b>true</b> or <b>false</b>, using lower case letters",
"	__date__			| Converts to dates in text format using universal format YYYY-MM-DD, e.g 2020-12-31",
"	__numeral__			| Converts to numbers in text format using decimal point \".\" and without thousand spearators.",
"	__parameter set__	| Converts to values arranged inside braces and separated with commas.  Lliterals and dates are put into single quotation marks.",
"	__literal__			| Contents stay unchanged",
"	__void__			| Converts to '# Invalid Value #', in case the void value does not come along with a different message inside '#' signs.",
"	===",
"",
"	With the additional 1-3 parameters, specific formatting templates (patterns), options and placeholder characters can be applied.",
"	2 approaches exist:",
"	* Direct Formatting using a formatting rule for a specific type, e.g. from date to literal",
"	* __Smart Formatting__, providing different formatting rules to be applied automatically for the different types and, in some cases, value ranges.",
"	",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value to convert",
		  "Direction": "input",
		  "Types": [ "all types" ],
		  "Description":
			[ "Value to check." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Formatting template",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Default rules as described above are applied",
"Description" : [
"				The formatting template is a literal which containing patterns to convert a value of a specific type to a literal.  Different rules",
"				and patterns apply for the different types to convert.  This means that you cannot use the same formatting template to convert a numeral to",
"				a literal as well as a date to a literal successfully because numeral formatting rules things like decimal points, number of digits behind",
"				decimal points, etc, where date formatting rules things like arranging date/month/year, using numbered or written months, time of day, etc.",
"",
"				<br><br>See next sections for details on formatting: ",
"				* __Literal to Literal Formatting Parameters__ (accepts up to 4 function parameters)",
"				* __Numeral to Literal Formatting Parameters__ (accepts up to 4 function parameters)",
"				* __Date to Literal Formatting Parameters__ (accepts up to 3 function parameters)",
"				* __Boolean to Literal Formatting Parameters__ (accepts up to 3 function parameters)",
"				* __Parameter Set to Literal Formatting Parameters__ (accepts up to 2 function parameters)",
"				* __Void to Literal Formatting Parameters__ (accepts up to 4 function parameters)",
""
 ]
		  
		},
		{ "Number": "Alt. 2",
		  "Name": "Smart formatting parameters",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Default value": "Default rules as described above are applied",
"Description" : [
"				In some cases, you wish to convert values of different types to __literal__ and need to apply different formatting templatess for them.",
"				In this case, put the following contents into a 2-level nested __parameter set__ and pass it as 2nd function parameter to this function.<br>",
"				{ Original data type, optionally a formatting template, optionally a formatting option or locale, and optionally a placeholder character },",
"				like the function parameters described above and below.  The function will first check the type of the data to convert, and then use the",
"				appropriate function call.",
"",
"				<br><br>",
"				Example:<br> <b>literal ( 123.4, { { numeral, \"#,###.00\", en_US }, { date, \"YYYY-MM-DD\" }, { literal, \"### ### ### *\", align right } } );</b>",
"",
"				<br><br>See next section on __Smart Formatting Parameters__ for details.",
""
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Formatting option or locale",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "For numbers, booleans and dates: 'none'",
"Description" : [
"				For converting numerals, booleans and dates, a __locale__ (related to countries and languages) information is expected.<br>",
"				For formatting literals, voids and booleans , different formatting options apply and are described in the next sections.",
"				For parameter sets, this 3rd and 4th function parameter are not supported.",
"",
"				<br><br>",
"				Locales can either be a combination of language and country (e.g. de_CH), or just a language or country name.  Alternatively, ",
"				specify 'local' for using the configured local country settings, or 'none' for using locale-independent formatting.",
"				All locale settings are not case sensitive, i.e. both 'germany' and 'GERMANY' are valid.  ",
"				Using locales (combined language and country) is highly recommended because common languages are spoken in many countries (e.g. 'english')",
"				and in several countries, multiple languages are supported (e.g. 'belgium', 'switzerland') in order to avoid ambiguities.",
"				Check the __list of locales__ for available languages, countries and codes.",
"				"
 ]
		  
		},
		{ "Number": "Opt. 4",
		  "Name": "Placeholder symbol",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "space symbol ' '",
"Description" : [
"				Applicable to formatting numerals, literals and voids (which are converted to literals).",
"				In order to use these symbols, the formatting template (2nd function parameter) must provide space for them, e.g. with sufficient number of characters provided in literal formatting, and use of question marks in number to literal",
"				conversion.",
""
 ]
		  
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "literal" ],
		  "Description": "Converted and formatted string"
		}
	],
"Examples" : [
"	echo( literal( Abc ), \", \", literal( 123.45 ), \", \", literal(true) );",
"	echo( literal(date('14.juillet.2020')), \", \", literal( date('1. Aug 20 22:30')), \", \", literal( time( '10:15' ) ) );",
"	echo( null() ); // void",
"	echo( {a,1,date(today),false} ); // void",
""
 ]
	,
	"Output": "automatic"
},



"Literal to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "literal to literal conversion and formatting" ],
	"Keywords":			[ "Literal to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	Some powerful formatting features are available for aligning and truncating __literals__, and embedding",
"	literals into given text patterns.  For this, a pattern string, called a <i>formatting template</i> needs",
"	to be provided and is described in the following table.",
"	<br><br>",
"",
"	Theis formatting template applies to following functions:",
"	* __literal(__), 2nd parameter",
""
 ]
	,
"Description 02:Formatting Templates" : [
"",
"	=== 200, 700, 100",
"	Formatting Template | Description | Condition",
"	#			| Fixed width place-holder for 1 character							| See <sup>1</sup>",
"	X			| Fixed width place-holder for 1 character, force upper case		| See <sup>1</sup>",
"	x			| Fixed width place-holder for 1 character, force lower case		| See <sup>1</sup>",
"	&#42;		| 1st occurrence of this character is placeholder for all remaining characters from the original literal which could not be fit into the available placeholders.  Further *-characters are treated as given text.  | See <sup>1</sup>",
"	' ... '		| Contents inside quotation marks are treated as given text, including spaces | See <sup>2</sup>",
"	\" ... \"		| See above | See <sup>3</sup>",
"	0, 1, ... 9 | Numbers (both positive single and multi-digit numbers) specify repetition count for next character including placeholder symbols like #, X and x.. Lone 0 indicates next character to be suppressed. | See <sup>1</sup>",
"	All other characters | Treated as given text | ",
"	===",
"	<sup>1</sup> Applicable outside quotation marks, otherwise symbols are treated as given text<br>",
"	<sup>2</sup> Applicable outside double quotation marks, otherwise symbols are treated as given text<br>",
"	<sup>3</sup> Applicable outside single quotation marks, otherwise symbols are treated as given text<br>",
""
 ]
	,
"Description 03:Formatting Options" : [
"",
"	=== 200, 800",
"	Formatting Option | Description",
"	align left			| Align contents to left if literal is shorter than number of fixed placeholders. <br>(Default if no alignment is specified. If multiple alignemnts are specified, then the last one counts)",
"	align middle		| Align contents to the middle",
"	align right			| Align contents to right",
"	truncate left		| Truncates characters at the left end if literal does not fit into given fixed placeholders and an asterisk is not specified to insert the remaining characters. <br>(If multiple alignemnts are specified, then the last one counts)",
"	truncate right		| Truncates characters at the right end for same reason above (Default if no truncation is specified)",
"	===",
"",
"	If not formatting option is specified (e.g. no parameter provided, or empty set or '' (blank in single quotation marks), then the 'align left' and 'truncate right' are assumed.",
""
 ]
	,
"Description 04:Program Examples" : [
""
 ]
	,
"Examples 04:" : [
"		echo ( \"(\", literal( \"Dog\",\"######\", align left  ), \")\");",
"		echo ( \"(\", literal( \"Dog\",\"######\", align middle ), \")\" );",
"		echo ( \"(\", literal( \"Dog\",\"######\", {align middle, align right} ), \")\" ); // Last align option applies",
"		echo ( literal( \"Hello World\",\"Result: [####-####]\" ) );",
"		echo ( literal( \"Hello World\",\"Result: [4#-4#]\" ) );",
"		echo ( literal( \"Hello World\",\"Result: [####-####]\", truncate left ) );",
"		echo ( literal( \"Hello World\",\"[###XXXxxx]\") );",
"		echo ( literal( \"News\", \"##########\", {}, \"+\" ) ); // '' also allowed, but not \"\"",
"		echo ( literal( \"News\", \"##########\", align right, \"+\" ) );",
"		echo ( literal( \"Daily Newspapers\", \"###### # # # #\" ) );",
"		echo ( literal( \"Daily Newspapers\", \"###### # # # # *\" ) );",
"		echo ( literal( \"Daily Newspapers\", \"###### # # # # ****\" ) );"
 ]
	,
	"Output 04:": "automatic"

},


"Void to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "void to literal conversion and formatting" ],
	"Keywords":			[ "Void to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	Voids will be converted to __literals__ only as they come with generic or specific messages such ase \"# Invalid Value #\".",
"	The same conversion method applies as for __literals__.  See __Literal to Literal Formatting Parameters__ for details.",
""
 ]
	,
"Examples 01:" : [
"		echo( literal( null(), \"20x\", align right, '!' ) );",
"		echo( literal( null(), \"X X X X X X X X X X X X X X X X X X X X\" ) );"
 ]
	,
	"Output 01:": "automatic"

},


"Parameter Set to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "Parameter Set to literal conversion and formatting" ],
	"Keywords":			[ "Parameter Set to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	No dedicated formatting template is foreseen for formatting parameter sets.  For advanced features to convert",
"	parameter sets to literals with opening, closing and separator strings, use the __join(__) function instead.",
""
 ]
	,
"Examples 01:" : [
"	echo( literal( { 1, true, 'true', {b1, b2, { b2a, b2b }, b3 } } ) );"
 ]
	,
	"Output 01:": "automatic"

},





"Numeral to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "numeral to literal conversion and formatting" ],
	"Keywords":				[ "Numeral to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	Some powerful formatting features are available for formatting __numerals__ by aligning them, specifying",
"	the separator symbols number of digits, negation, etc.  For this, a pattern string, called a <i>formatting template</i> needs",
"	to be provided and is described in the following table.",
"	<br><br>",
"",
"	The formatting template applies to following functions:",
"	* __literal(__), 2nd parameter",
"	* __table format numbers(__), 3rd parameter",
""
 ]
	,
"Description 02:Formatting Templates" : [
"",
"	=== 200, 800",
"	Formatting Template | Description",
"	&#42;	| Only if used alone as single character: Generic output of number",
"	#		| Placeholder for one digit.  Meaningless zeros (i.e. leading zerosbefore decimal points, final ones after decimal points) are not shown.",
"	0		| Placeholder for one digit.  Meaningless zeros are shown",
"	?		| Placeholder for one digit.  Meaningless zeros are shown with placeholder symbols (default: spaces)",
"	&#42;	| Asterisk is used as placeholder for entire number if:<br>1) no digit placeholders listed above are specified elsewhere, <br>2) it's the last asterisk in case more than one are encountered.  Otherwise the asterisk will be treated as a given text.",
"	,		| Thousand separator.  Always use comma for this purpose.  To use different symbols common in other countries, use the formatting option to specify the language, e.g. <i>german</i> for points.",
"	.		| Decimal separator. Always use point for this purpose.  To use different symbols common in other countries, use the formatting option to specify the language, e.g. <i>german</i> for commas.",
"	-		| Minus signs will be displayed if the number is negative.  The minus sign may be located anywhere, even after the number.",
"	( )		| Parentheses will be displayed if the number is negative.",
"	[ ]		| Bracket will be displayed if the number is negative.",
"	+		| Displays a + if the number is positive and – (minus) if negative",
"	_		| Underscore prefix: If added in front of -, (, ), [, and ], blank or provided placeholder symbol is given out if number is positive in order to keep the other characters to the right aligned.",
"	' ... '	| Contents inside quotation marks are treated as given text, including spaces | See <sup>2</sup>",
"	\" ... \"	| See above | See <sup>3</sup>",
"	%		| Number will be multipled by 100 before displaying together with percent symbol",
"	&permil;| Number will be multipled by 1,000 before displaying together with permille symbol",
"	&pertenk;| Number will be multipled by 10,000 before displaying together with the parts-per-10,000 symbol",
"	All other characters | Treated as given text, including digits  1..9 |",
"	===",
"	<sup>2</sup> Applicable outside double quotation marks, otherwise symbols are treated as given text<br>",
"	<sup>3</sup> Applicable outside single quotation marks, otherwise symbols are treated as given text<br>",
"",
"	<u>Attention</u>: If the formatting template contains neiter # nor *, then the resulting string contains no number.",
""
 ]
	,
"Description 03:Locales" : [
"",
"	Specify a supported locale name, a country name or a language name.  See __locales__ for an overview of supported locales.  Choices are not case sensitive.",
"	<br><br>",
"	Examples: <b>en_US, DE_at, France, German, local, none</b>",
""
 ]
	,
"Description 04:Program Examples" : [
"	A few loop show the combination of different values."
 ]
	,

"Examples 04:" : [
"		numbers [] = { -1234, -0.29, 123456.78, 0 };",
"		patterns[] = { '*', 'EUR_-*', '0', '+ 0.0', '0000.0000', '?', '?.?', '#.#', '####.####', '0.####', '_(0.00)' };",
"		3rd p[] = { \"\", india, german, en_us, french, de_ch };",
"		4th p[] = { \"\", \"\",     \"+\",    \"\",      \"\",     \"\"     };",
"",
"		for all parameters( numbers[], number[] )",
"		{",
"			for all parameters( patterns[], pattern[] )",
"			{",
"				for all parameters( 3rd p[], para 3[], index[] )",
"				{",
"					para 4[] = 4th p[]{index[]};",
"					if       (para 3[]	 = '')  l[] = literal( number[], pattern[] );",
"					else: if (para 4[] = '')  l[] = literal( number[], pattern[], para 3[] );",
"					else:                     l[] = literal( number[], pattern[], para 3[], para 4[] );",
"					print( \"'\" + l[] + \"', \" );",
"				}",
"				echo;",
"			}",
"			echo;",
"		}",
"		echo( \"Permille: \", literal( 0.1234, '0.0 &permil;') );",
"		echo( \"Directory assistance (USA): \", literal( 5551212, '\"Dial 1-\"000\"-\"0000') );"
 ]
	,
	"Output 04:": "automatic"


},



"Date to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "date to literal conversion and formatting" ],
	"Keywords":				[ "Date to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	Some powerful formatting features are available for formatting __dates__, possibly combined with time of day information",
"	in any combinations.",
"",
"",
"	The formatting template applies to following functions:",
"	* __literal(__), 2nd parameter",
"	* __table distribute(__) function family, 10th parameter on header date format",
""
 ]
	,
"Description 02:Formatting Templates" : [
"",
"	=== 150, 350, 400, 100, bold_column_1",
"	Formatting Template				| Description | Example  | Note",
"	D								| Day, 1 or 2 digits									|  1 .. 31								| See <sup>1</sup>",
"	DD								| Day, 2 digits											| 01 ... 31								| See <sup>1</sup>",
"	DDD / Ddd / ddd					| Day, 1 or 2 digits, followd by ordinal				| 1ST ... 31ST / 1St ... 31St / 1st ... 31st |  See <sup>2</sup>",
"	DDDD / Dddd / dddd				| Day, 2 digits, followd by ordinal						| 01ST ... 31ST / 01St ... 31St / 01st ... 31st |  See <sup>2,3</sup>",
"	M								| Month, 1 or 2 digits									|  1 .. 12								| See <sup>1</sup>",
"	MM								| Month, 2 digits										| 01 ... 12								| See <sup>1</sup>",
"	MMM / Mmm / mmm					| Month name, abbreviated								| JAN / Jan / jan						| See <sup>2,3</sup>",
"	MMM / Mmm / mmm					| Month name											| JANUARY / January / january			| See <sup>2,3</sup>",
"	Q								| Quarter, 1 digit										|  1 ... 4								| See <sup>1</sup>",
"	QQ / qq							| Quarter, 1 digit after Q								|  Q1 ... Q4 / q1 ... q4				| See <sup>4</sup>",
"	QQQ / qqq						| Quarter, 1 digit before Q								|  1Q ... 4Q / 1q ... 4q				| See <sup>4</sup>",
"	T								| Weekday number										|  1 (Monday) .. 7 (Sunday)				| See <sup>1</sup>",
"	TT / Tt / tt					| Weekday name, abbreviated (typ. 2 chars)				| MO ... SU / Mo ... Su / mo ... su		| See <sup>2,3</sup>",
"	TTT / Ttt / ttt					| Weekday name, abbreviated (typ. 3 chars)				| MON...SUN / Mon...Sun / mon...sun		| See <sup>2,3</sup>",
"	TTTT / Tttt / tttt				| Weekday name											| MONDAY / Monday / monday				| See <sup>2,3</sup>",
"	W								| ISO week number, 1 or 2 digits						|  1 .. 53								| See <sup>1,5</sup>",
"	WW								| ISO week number, 2 digits								| 01 .. 53								| See <sup>1,5</sup>",
"	WWW / www						| ISO week number, 1 letter + 1 or 2 digits				| W1 .. W53 / w1 .. w53					| See <sup>3,4,5</sup>",
"	WWWW / wwww						| ISO week number, 1 letter + 2 digits					| W01 .. W53 / w01 .. w53				| See <sup>3,4,5</sup>",
"	WWWWW / Wwwww / wwwww			| ISO week number, abbreviation + 1 or 2 digits			| WK 1 / Wk 1 / wk 1	 				| See <sup>2,3,5</sup>",
"	WWWWWW / Wwwwww / wwwwww		| ISO week number, abbreviation + 2 digits				| WK 01 / Wk 01 / wk 01	 				| See <sup>2,3,5</sup>",
"	WWWWWWW / Wwwwwww / wwwwwww		| ISO week number, week name + 1 or 2 digits			| WEEK 1 / Week 1 / week 1				| See <sup>2,3,5</sup>",
"	WWWWWWWW / Wwwwwwww / wwwwwwww	| ISO week number, week name + 2 digits					| WEEK 01 / Week 01 / week 01			| See <sup>2,3,5</sup>",
"	X								| Adjusted week number, 1 or 2 digits					|  0 .. 53								| See <sup>1,6</sup>",
"	XX								| Adjusted week number, 2 digits						| 00 .. 53								| See <sup>1,6</sup>",
"	XXX / xxx						| Adjusted week number, 1 letter + 1 or 2 digits		| W0 .. W53 / w1 .. w53					| See <sup>3,4,6</sup>",
"	XXXX / xxxx						| Adjusted week number, 1 letter + 2 digits				| W01 .. W53 / w01 .. w53				| See <sup>3,4,6</sup>",
"	XXXXX / Xxxxx / xxxxx			| Adjusted week number, abbreviation + 1 or 2 digits	| WK 00 / Wk 00 / wk 00	 				| See <sup>2,3,6</sup>",
"	XXXXXX / Xxxxxx / xxxxxx		| Adjusted week number, abbreviation + 2 digits			| WK 00 / Wk 00 / wk 00	 				| See <sup>2,3,6</sup>",
"	XXXXXXX / Xxxxxxx / xxxxxx		| Adjusted week number, week name + 1 or 2 digits		| WEEK 0 / Week 0 / week 0				| See <sup>2,3,6</sup>",
"	XXXXXXXX / Xxxxxxxx / xxxxxxx	| Adjusted week number, week name + 2 digits			| WEEK 00 / Week 00 / week 00			| See <sup>2,3,6</sup>",
"	Y and YY						| Year, 2 digits										| 20									| See <sup>1</sup>",
"	YYY and YYYY					| Year, 4 digits										| 2020									| See <sup>1</sup>",
"	Z and ZZ						| Adjusted Year, 2 digits, use with ISO week number		| E.g. literal( date(\"2019-12-31\"), \"YY-WW\" -> 20-01		| See <sup>1,7</sup>",
"	ZZZ and ZZZZ					| Adjusted Year, 4 digits, use with ISO week number		| E.g. literal( date(\"2019-12-31\"), \"YYYY-WW\" -> 2020-01	| See <sup>1,7</sup>",
"	H								| Hour, 1 or 2 digits, 0 - 23 range						| 0 ... 23								|",
"	h								| Hour, 1 or 2 digits, 1 - 12 range						| 1 ... 12								|",
"	HH								| Hour, 2 digits, 0 - 23 range							| 00 ... 23								|	",
"	hh								| Hour, 2 digits, 1 - 12 range							| 01 ... 12								| See <sup>8</sup>",
"	I								| Minute, 1 or 2 digits									| 0 ... 59								| See <sup>1</sup>",
"	II								| Minute, 2 digits										| 00 ... 59								| See <sup>1</sup>",
"	S								| Second, 1 or 2 digits									| 0 ... 59								| See <sup>1</sup>",
"	SS								| Second, 2 digits										| 00 ... 59								| See <sup>1</sup>",
"	A / a							| a.m. / p.m. info, 1 letter							| A, P / a, p							| ",
"	AA / Aa / aa					| a.m. / p.m. info, 2 letters							| AM, PM / Am, Pm / am, pm				|",
"	AAA / Aaa / aaa					| a.m. / p.m. info, 4 letters							| A.M., P.M. / A.m., P.m. / a.m., p.m.	| See <sup>2</sup>",
"	' ... '							| Contents inside quotation marks are treated as given text, including spaces | \"o'clock\"		| See <sup>9</sup>",
"	\" ... \"							| See above												| 'time: '								|	See <sup>10</sup>",
"	All other characters			| Treated as given text									|										|",
"	===",
"	<sup>1</sup> Template letter is case insensitive.  E.g. 'DD', 'Dd', 'dD' and 'dd' make no difference. <br>",
"	<sup>2</sup> Case of 1st letter determines 1st letter in the output, case of 2nd letter determines case of all remaining letters.  The cases of following letters (if 3 or more consecutive letters specified) are ignored.<br>",
"	<sup>3</sup> Uses the language as confgured by __locale__ parameter or setting.<br>",
"	<sup>4</sup> Case of 1st letter determines 1st letter in the output. The cases of following letters (if 2 or more consecutive letters specified) are ignored.<br>",
"	<sup>5</sup> ISO Week numbers: In some years, the first day lies in week 53 of the previous year. In some other years, the last day lies in week 1 of the following year.<br>",
"	<sup>6</sup> Adjusted week numbers: In some years, the first day lies in week 0. Last day in all years are either week 52 or 53, but not 0.<br>",
"	<sup>7</sup> Referring to <sup>5</sup>, thse are the matching year numbers adjusted to the ISO week numbers.<br>",
"	<sup>8</sup> Case of 1st letter determines the output format.  The cases in the following consecutive letters are ignored.<br>",
"	<sup>9</sup> Applicable outside double quotation marks, otherwise symbols are treated as given text<br>",
"	<sup>10</sup> Applicable outside single quotation marks, otherwise symbols are treated as given text<br>",
""
 ]
	,
"Description 03:Locales" : [
"",
"	Specify a supported locale name, a country name or a language name.  See __locales__ for an overview of supported locales.  Choices are not case sensitive.",
"	<br><br>",
"	Examples: <b>en_US, DE_at, France, German, local, none</b>",
""
 ]
	,
"Description 04:Program Examples without formatting templates" : [
"	Following examples show use of date to literal conversion without formatting template"
 ]
	,

"Examples 04:" : [
"		date 1[] = date(\"2020-07-04\"); // Some national holidays",
"		date 2[] = date(\"2020-10-03\");",
"		date 3[] = date(\"2020-07-14\");",
"		date 4[] = date(\"2020-08-01 22:30:00\");",
"		date 5[] = date(\"22:30:00\");",
"",
"		echo( literal ( date 1[], \"	*\", EN_us ));",
"		echo( literal ( date 2[], \"*\", EN_de ));",
"		echo( literal ( date 3[], \"*\", France ));",
"		echo( literal ( date 4[], \"*\", de_CH ));",
"		echo( literal ( date 3[], \"*\", none ));",
"		echo( literal ( date 2[], \"*\", local ));",
"		echo( literal ( date 1[] )); // assumes '*' and none",
"		echo( literal ( date 5[], \"*\", EN_us )); // Always 0-23h if not specified otherwise"
 ]
	,
	"Output 04:": "automatic",
	
"Description 05:Program Examples with formatting templates" : [
"	Following examples show use of date to literal conversion with formatting template"
 ]
	,
"Examples 05:" : [
"		date 1[] = date(\"2020-07-04\"); // Some national holidays",
"		date 2[] = date(\"2020-08-01 22:30:00\");",
"",
"		echo( literal ( date 1[], \"Tttt DD.Mmmm.YY\", EN_us ));",
"		echo( literal ( date 2[], \"Ttt DD.mm.YYYY ' Zeit: ' HH:ii:ss\", DE_de ));",
"		echo( literal ( date 2[], \"Ttt DD.mm.YYYY ' Zeit: ' HH:ii:ss\", DE_de ));",
"		echo( literal ( date 2[], \"Ttt MM/DD/YY ' Time: ' hh:ii:ss aaa\", en_US ));",
"		echo( literal ( date 1[], \"Tttt DD.Mmmm.YY\", Hindi ));",
"",
"		echo( new line, \"Show difference between ISO and adjusted week and year numbers: \");",
"		echo( literal( date( \"2019-12-31\"), \"'Week: 'ZZZZ-WW 'and' YYYY-XX\") ); // Different",
"		echo( literal( date( \"2020-06-30\"), \"'Week: 'ZZZZ-WW 'and' YYYY-XX\") ); // Same",
"		echo( literal( date( \"2021-01-01\"), \"'Week: 'ZZZZ-WW 'and' YYYY-XX\") ); // Different"
 ]
	,
	"Output 05:": "automatic"

},



"Boolean to Literal Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "boolean to literal conversion and formatting" ],
	"Keywords":				[ "Boolean to Literal Formatting Parameters" ],
"Description 01:Introduction" : [
"",
"	Some powerful formatting features are available for formatting __booleans__.",
"",
"	<br><br>",
"	The formatting template applies to following functions:",
"	* __literal(__), 2nd parameter",
""
 ]
	,
"Description 02:Formatting Templates" : [
"",
"	=== 150, 350, 400, 100, bold_column_1",
"	Formatting Template				| Description | Example  | Note",
"	T / t							| True/False: 1st letter only							| T, F / t, f									| <sup>1</sup>",
"	TT / Tt / tt					| True/False: Full word									| TRUE, FALSE / True, False / true / false		| <sup>1</sup>",
"	Y / y							| Yes/No: 1st letter only								| Y, N / y, n									| <sup>1</sup>",
"	YY / Yy / yy					| Yes/No: Full word										| YES, NO / Yes, No / yes, no					| <sup>1</sup>",
"	#								| Numeric value: 1 for true, 0 for false				| 1, 0											|",
"	' ... '							| Contents inside quotation marks are treated as given text, including spaces | \"o'clock\"				| See <sup>3</sup>",
"	\" ... \"							| See above												| 'time: '										| See <sup>3</sup>",
"	All other characters			| Treated as given text									|												|",
"	===",
"	<sup>1</sup> Uses the language as confgured by __locale__ parameter or setting.<br>",
"	<sup>2</sup> Applicable outside double quotation marks, otherwise symbols are treated as given text<br>",
"	<sup>3</sup> Applicable outside single quotation marks, otherwise symbols are treated as given text<br>",
""
 ]
	,
"Description 03:Locales" : [
"",
"	Specify a supported locale name, a country name or a language name.  See __locales__ for an overview of supported locales.  Choices are not case sensitive.",
"	<br><br>",
"	Examples: <b>en_US, DE_at, France, German, local, none</b>",
""
 ]
	,
"Description 04:Program Examples" : [
"	Following examples show use of date to literal conversion without formatting template"
 ]
	,

"Examples 04:" : [
"		for all parameters( { en_us, de_de, fr_fr }, locale[] )",
"		{",
"			print( literal(true, \"Tt Yy # \", locale[]),\"   \" );",
"			echo( literal(false, \"TT y # \", locale[]) );",
"		}"
 ]
	,
	"Output 04:": "automatic"



},


"Smart Formatting":
{
	"Documentation":		"General Description",
	"Feature Names":		[ "smart conversion and formatting" ],
	"Keywords":				[ "Smart Formatting Parameters", "smart formatting" ],
"Description 01:Introduction" : [
"",
"	In various cases, the type of the original value may not be the same all time, or you want to apply different formatting instructions",
"	depending on the values contained.  The approach is easy: In the 2nd function parameter, provide a 2-level nested parameter set which contains 1 or",
"	more formatting instructions for the different types and values.",
"",
"	<br><br>",
"	",
"	Example: <b> literal( 123.45, { { numeral, \"#,##0.00\", en_US }, { literal, \"XXXXXXXXX\", align right } } );</b><br><br>",
"",
"	The first set of parameters is used if the value provided is a numeral.  Otherwise, if it is a literal, then the 2nd set of parameers will be used.",
"	A simple formatting approach will used if a type is encountered but not described, e.g. a boolean type in the example shown above.",
""
 ]
	,
"Description 02:Smart Formatting Conditions" : [
"",
"	The formatting conditions depend on the type of data provided, and optionally on the value.",
"",
"	=== 200, 800, bold_column_1",
"	Formatting Condition			| Description",
"	literal							| Data type is a literal",
"	blank literal					| Data type is a literal and the contents are blank",
"	void							| Data type is a void. (Note: Format voids as literals)",
"	numeral							| Data type is a numeral",
"	positive						| Data type is a numeral, value is greater than 0",
"	negative						| Data type is a negative value is smaller than 0",
"	zero							| Data type is a numeral, value equals to 0",
"	near zero						| Data type is a numeral, value equals or is very close to 0 (ruled by __epsilon__ value)",
"	date							| Data type is a date",
"	blank date						| Data type is a date, containing a blank date",
"	date time						| Data type is a date, containing both date and time",
"	time							| Data type is a date, containing a time only",
"	boolean							| Data type is a boolean",
"	parameter set					| Data type is a parameter set+",
"	===",
"",
"	In case you have different formats for positive (or negative) numbers and the rest, then desribe the formatting for the positive (or negative)",
"	numbers first because the checking is done from left to right.",
""
 ]
	,
"Examples 02:" : [
"	for all parameters( { 5678.91, 0, true, \"Abc\" }, v[] )",
"	{",
"		echo( literal( v[], {",
"			{ positive, \"#,##0.0\", de_ch },",
"			{ literal,  \"x x x x\", '', '-' },",
"			{ numeral,  \"0 'zero or negative'\" },",
"			{ boolean,  \"'Boolean: ' TT\" } } ) );",
"	}"
 ]
	,
	"Output 02:": "automatic"

}
,

"date, pure date, date time" :
{
	"Function Names":	[ "date", "pure date", "date time" ],
	"Keywords":			[ "date conversion functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	<i>Sorry! This is not the function where you can find your date.</i><br><br>",
"",
"	This function converts date information contained in literals or numeric date information into B4P __plain date__ type.  The differences",
"	of the three function names are described below:",
"",
"	=== 200, 800, noheader, noframe, bold_column_1",
"	date			| If input variables contain date information only, then result contains the date only.<br>If time information is provided, then the result contains both date and time information.",
"	date time		| Result will always contain date and time.  If no time information is provided, then 00:00:00 (midnight) is assumed.",
"	pure date		| The result contains date only.  Any time info will be ignored.",
"	===",
"",
"	Blank or missig date information will convert to blank date values.",
"	Various appraoches are available to convert value to dates:",
"",
"	=== 200, 200, 600, bold_column_1",
"	Input Form				| # Parameters required	| Description",
"	Literal input			| 1 or 2				| Converts a literal to date.  Locale settings (referring to system variable 'local settings[date format short]' rule the year/month/day sequence if the date is ambiguous, e.g. \"10.11.12\".  Change that value prior to the call if dates are ambiguous and need to use a different format assumption. See __Date and Time Detection Rules__ for details.",
"	today					| 1						| Uses today's date (local time zone)",
"	now						| 1						| Uses today's date and time (local time zone)",
"	utc						| 1						| Uses today's date and time (UTC)",
"	numeric date			| 1						| Numeric date in YYYYMMDD format with range 19000101 ... 99993112.  Values behind decimal commas are ignored, i.e. not converted to time info",
"	serial date				| 1						| Microsoft serial date and time, as used in Excel.  E.g. 44000.75 translates to 2020-06-18 18:00:00. ",
"	numeric time			| 1						| Values between 0 and 1/(24+60+60), i.e. below 1, convert to time-only information.  The function <b>pure date</b>() returns blank date.",
"    date in numbers			| 2 or 3				| Provide year, month and optionally day (if not specified: 1st day) to convert to date",
"	date and time in numbers| 4 or 5 or 6			| Like above, but also include hours, minutes and seconds.",
"	variable in date format	| 1						| Input parameters of date types are passed through.  Text representations will be elimnated.",
"	parameter set			| 1						| Indirect parameter passing scheme: Put the 1-6 parameters into a parameter set, e.g. date( { 2020,12,31,23,59,59 } );",
"	===",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-6",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"				Convert a date (optionally with time) in a literal to a date.  Locale settings are used to resolve ambiguous date formats.<br>",
"				Specific treatment applies to keywords 'today' and 'now' in english and other supported languages.<br>See __Date and Time Detection Rules__ for ruling details."
 ]
		  
		},
		{ "Number": "Alt. 1",
		  "Name": "Year",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "See table above on 'numeric date', 'serial date' and 'numeric time' how numeric dates are converted" ]
		},
		{ "Number": "Alt. 1",
		  "Name": "Year",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Range: 1900 .. 9999. Only applicable if at least the next parameter (month) is also specified." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Month",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
		  "Description": [ "Range: 1 .. 12. Only valid if 1st paramter contains a year." ]
		},
		{ "Number": "Opt. 3",
		  "Name": "Day",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
		  "Description": [ "Range: 1 .. 31" ]
		},
		{ "Number": "Opt. 4",
		  "Name": "Hour",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "Resulting date will contain no time information",
		  "Description": [ "Range: 0 .. 23" ]
		},
		{ "Number": "Opt. 5",
		  "Name": "Minute",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Range: 0 .. 59" ]
		},
		{ "Number": "Opt. 6",
		  "Name": "Second",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Range: 0 .. 59" ]
		}

		],
	"Return value":
	[
		{ "Name": "Date and/or time",
		  "Types": [ "literal" ],
		  "Description": "Contains date, time, date and time combined or blank date.  No literal context of the date is preserved or included."
		}
	],
"Examples" : [
"		echo( date ( now ) );		// Date and time (local time zone)",
"		echo( date ( today ) );   	// Date only",
"		echo( date ( utc ) );   	// Date and time (UTC)",
"		echo( pure date ( now ) );   	// Date only (local time zone)",
"		a[] = { 2020, 07, 14 };",
"		echo( date ( a[] ));		// Quatorze Juillet",
"		a[] += { 22, 33, 44 };		// Add time",
"		echo( date ( a[] ));		// 2020-07-04 22:33:44",
"		echo( date(\"03. Oktober 1990 21 Uhr\") ); // 1990-10-03 21:00:00"
 ]
	,
	"Output": "automatic",
	"See also": [ "time", "pure time" ]
},


"Date and Time Detection Rules":
{
	"Documentation":	"General Description",
	"Feature Names":	[ "Detects dates correctly in literals" ],
	"Keywords":			[ "Date and Time Detection Rules" ],
"Description 01:Introduction" : [
"",
"	The date and time detecion rules in literals is applied in following functions",
"	* __date(__)",
"	* __pure date(__)",
"	* __date time(__)",
"	* __time(__)",
"	* __pure time(__)",
"	* Retriving values from tables with automatic date conversion enabled ( system variable <b>table conversion[date]</b> = true ).",
"",
"	<br><br>",
"	Please pay attention to ambiguous dates, e.g. '10/11/12' which can be interpreted differently with different locale settings (YY/MM/DD, MM/DD/YY, DD/MM/YY in this case).",
"	The universal YYYY-MM-DD format (e.g. 2020-12-31) is robust and shows same behavior regardless of locale settings applied.",
"",
"	<br><br>",
"	Input format legend for following table:",
"	* xx = 1 or 2 numeric digits",
"	* yyyy = 4 numeric digits (year)",
"	* MMM = min 3 letters to describe month. Multiple languages are supported.",
"	* h = Time related suffix, not case sensitive (h, time, o'clock, am, pm, a.m., p.m., a, p). Different languages are supported, e.g. \"Uhr\".<br>",
"	am/pm and related formulation influence the hour values.",
"	* Symbols between values, e.g. ., -, /, are not relevant unless indicated explicitly.",
"	* Values between colons (:) relate to time info",
"	* Spaces between letters and numbers are ignored, e.g. 23August is accepted.",
"",
"",
"	=== 250, 250, 250, 250",
"	Input Formats						| Examples							| Outputs															| Remarks",
"	Blank								| '' (e.g. in date(''))				| Blank date														| ",
"	Irrelvant information				| Hello (e.g. in date(Hello))		| Blank date														| Wrong contents ignored",
"	Reserved keywords: today, now, utc	| today, now, utc					| Today's date, full date and time, and full date and time in UTC	| Allowed to combine with time, e.g. 'today 13:30'.<br>Various languages supported.",
"	xx									| 1, 04, 2020						| Error																| Date is incomplete",
"	xx xx								| 10-11, 10.11, 10 11, 10/11		| Depends on local settings<br>MDY: 2020-10-11<br>else: 2020-11-10	| Assumes current year",
"	xx xx MMM							| 10-11 April						| Error																| Invalid date format",
"	xx xx yyyy							| 10 11 2012						| Depends on local settings<br>MDY: 2012-10-11<br>else: 2012-11-10	| Fully specified date. See <sup>1</sup>",
"	xx xx xx							| 10 11 12							| Depends on local settings<br>MDY: 2012-10-11<br>DMY: 2012-11-10<br>else:2010-11-12 | Fully specified date, see <sup>1</sup>",
"	xx xx xx yyyy						| 10 11 12 2013						| Error																| Invalid date format",
"	xx xx xx MMM						| 10 11 12 April					| Error																| Invalid date format",
"	xx xx yyyy yyyy						| 10 11 2012 2013					| Error																| Invalid date format",
"	xx xx yyyy MMM						| 10 11 2012 April					| Error																| Invalid date format",
"	xx xx xx h							| 10 11 12 am						| Time only: 10:11:12												| See <sup>4</sup>",
"	xx xx xx h xx, xx xx xx : xx, <br>xx xx xx : xx h		| 10.11 12 h 30	| Depends on local settings<br>MDY: 2020-10-11 13:30:00<br>else: 2020-11-10 12:30:00	| Assumes current year",
"	xx xx xx h YYYY						| 10 11 12 h 2013					| 2013-01-01, 10:11:12												| Assumes January 1, see <sup>2</sup>",
"	xx xx xx h MMM						| 10 11 12 h April					| 2020-04-01, 10:11:12												| Assumes 1st day of specified month in current year, see <sup>3</sup>",
"	xx xx xx :							| 10 11 12 :						| Error																| Invalid date format (ambiguity)",
"	xx yyyy								| 10 2011							| 2011-10-01														| Assumes 1st day of specified month, see <sup>1</sup>",
"	xx MMM								| 10 April							| 2020-04-10														| Assumes current year",
"	xx MMM xx							| 10 Nov 12							| Depends on local settings<br>YMD: 2010-11-12<br>else: 2012-11-10	| Fully specified date, see <sup>1</sup>",
"	xx MMM xx h							| 10 Nov 12 h						| 2020-11-10, 12:00:00												| Assumes current year, see <sup>4</sup>",
"	xx xx h								| 10 11 h, 10 11 am					| Time only: 10:11:00												|",
"	xx xx h xx							| 10 11 h 12						| Time only: 10:11:12												|",
"	xx xx h MMM							| 10 11 h April						| 2020-04-01 10:11:00												| Assumes 1st day of specified month in current year, see <sup>3</sup>",
"	xx xx h yyyy						| 10 11 h 2012						| 2012-01-01 10:11:00												| Assumes January 1, see <sup>2</sup>",
"	yyyy								| 2012								| 2012-01-01														| Assumes January 1",
"	yyyy xx								| 2012 11							| 2012-11-01														| Assumes 1st day of specified month",
"	yyyy xx xx							| 2012 11 10						| 2012-11-01														| Fully specified date, see <sup>1</sup>",
"	yyyy xx MMM							| 2012 11 April						| 2012-04-01														| Fully specified date, see <sup>1</sup>",
"	yyyy xx xx h, YYYY xx xx :			| 2013 12 11 h, 2013 12 11 :		| Error																| Invalid date format (ambiguity)",
"	yyyy xx xx h xx, yyyy xx xx : xx, <br>yyyy xx xx : xx h		| 2012 11 10 h 09	| 2012-11-01 10:09:00										| Assumes 1st day of specified month",
"	yyyy MMM							| 2012 Nov							| 2012-11-01														| Assumes 1st day of specified month",
"	yyyy MMM xx							| 2012 Nov 10						| 2012-11-10														| Fully specified date, see <sup>1</sup>",
"	yyyy MMM xx h						| 2012 Nov 10 am					| 2012-11-01 10:00:00												| Assumes 1st day of specified month, see <sup>4</sup>",
"	yyyy MMM xx :						| 2012 Nov 10 :						| Error																| Invalid date format (ambiguity)",
"	yyyy xx h							| 2012 11 h							| 2012-01-01 11:00:00												| Assumes January 1, see <sup>4</sup>",
"	yyyy xx :							| 2012 11 :							| Error																| Invalid date format (ambiguity)",
"	yyyy xx : MMM						| 2012 10 : November				| 2012-11-10														| Fully specified date, see <sup>1</sup>",
"	MMM									| April								| 2020-04-01														| Assumes 1st day of specified month in current year",
"	MMM xx								| Dec 11							| Depends on local settings<br>MDY: 2020-12-11<br>else: 2011-12-01	| MDY: Assumes current year.<br>else: Assumes 1st day of specified month",
"	MMM xx xx, MMM xx yyyy, <br>MMM xx : yyyy | Dec 11 13, Dec 11 2013, Dec 11 : 2013 | 2013-12-11												| Fully specified date, see <sup>1</sup>",
"	MMM xx xx h, MMM xx xx :			| Dec 11 h							| Error																| Invalid date format (ambiguity)",
"	MMM xx xx h xx, MMM xx xx h xx :<br>MMM xx xx : xx, MMM xx xx : xx | Oct 11 12 h 13, Oct 11 12 h 13:<br>Oct 11 12:13, Oct 11 12 h 13: | Depends on local settings<br>MDY: 2020-10-11 12:13:00<br>else: 2011-10-01 12:13:00	| MDY: Assumes current year.<br>else: Assumes 1st day of specified month, see <sup>5</sup>",
"	MMM yyyy							| Dec 11							| 2020-12-11														| Assumes current year, see <sup>1</sup>",
"	MMM xx h							| Dec 11 h							| 2020-12-01 11:00:00												| Assumes 1st day of specified month in current year, see <sup>4</sup>",
"	MMM xx :							| Dec 11 :							| Error																| Invalid date format (ambiguity)",
"	MMM xx : xx, MMM xx : xx h, <br>MMM xx : xx : | Dec 11 : 10				| 2020-12-01 11:10:00												| Assumes January 1, see <sup>5</sup>",
"	xx h, xx :							| 15 h, 15 :						| Time only: 15:00:00												| See <sup>4</sup>",
"	xx h xx, xx h xx :<br>xx : xx, xx : xx h, xx : xx : | 15h30, 15h30:<br>15:30h, 15:30: | Time only: 15:30:00									| See <sup>5</sup>",
"	xx h xx xx, xx : xx xx				| 15 h 20 30, 15 : 20 30			| Time only: 15:20:30												|",
"	xx h xx : xx, xx : xx : xx<br> xx : xx h xx, xx : xx xx h<br>xx : xx : xx h | 15h20:30, 15:20:30<br> 15:20h30<br>15h20 30h, 15:20:30h	| Time only: 15:30:30	| See <sup>6</sup>",
"	Above values with additional colon behind | e.g. 15 h 20 30 :			| Error																| Invalid time format",
"	xx h yyyy							| 15 h 2020							| 2020-01-01 15:00:00												| Assumes January 1, see <sup>2</sup>",
"	xx h MMM							| 15 h October						| 2020-10-01 15:00:00												| Assumes 1st day of specified month in current year, see <sup>3</sup>",
"	xx : xx yyyy, xx : xx h yyyy		| 15 : 20 2020, 15 : 20 h 2020		| 2020-01-01 15:20:00												| Assumes 1st day of specified month in current year, see <sup>2</sup>",
"	xx h xx yyyy						| 15 h 20 2020						| Error																| Invalid time format",
"	xx : xx : yyyy, xx : xx : MMM		| 15 : 30 : 2020					| Error																| Invalid time format",
"	xx : xx MMM, xx : xx h MMM			| 15 : 20 Oct, 15 : 20 h Oct		| 2020-01-01 15:20:00												| Assumes 1st day of specified month in current year, see <sup>2</sup>",
"	... MMM ... MMM ...<br>Multiple months identified		| 15 Jan Feb 2020		| Error														| Invalid time format",
"	... yyyy ... yyyy<br>Multiple years identified			| 13. Feb 2019 or 2020	| Error														| Invalid time format",
"	Year is not 00-99 and not 1900-9999	| 04. July 1776						| Error																| Invalid year value (before 1900)",
"	Month is not 01-12					| 2012-13-14						| Error																| Invalid month value",
"	Day is out of range<br> 1-28,29,30,31					| 2013-02-29	| Error (Leapyear: 2012-02-09 would be correct)						| Invalid day value",
"	Time values out of range<br>hours: 1-23, min,sec: 0-59	| 24:00:00, 15:60:00	| Error														| Invlaid time value",
"	More than 6 values recognized		| 2012 11 10 15:20:30 40			| Error																| Invalid date and time format",
"	Multiple time-related suffices		| 10:30 h p.m.						| Error (Either use 'h' or 'p.m.')									| Invalid time format",
"	===",
"",
"	<sup>1</sup> 1-3 additional numbers following afterwards are recognized as hours, minutes and seconds<br>",
"	<sup>2</sup> The date has been started with year.  Month and day may be specified afterwards to complete the date<br>",
"	<sup>3</sup> The date has been started with month.  Day and year may be specified afterwards to complete the date<br>",
"	<sup>4</sup> The date has been completed with hour.  Minute and second values may be specified afterwards to complete the time<br>",
"	<sup>5</sup> The date has been completed with hour and minute.  Second value may be specified afterwards to complete the time<br>",
"	<sup>6</sup> A complete time has been specified in a valid and unambiguous format.  A date may follow afterwards, e.g. '20:30:40 2020-02-02'<br>",
""
 ]
	,
"Examples 01:Some code examples" : [
"	set locale( en_us );",
"	echo( date(\"10-11-12 8:15p\") );",
"	set locale( de_ch );",
"	echo( date(\"10-11-12 8:15p\") );",
""
 ]
	,
	"Output 01:": "automatic"

}

,

"time, pure time" :
{
	"Function Names":	[ "time", "pure time" ],
	"Keywords":			[ "time conversion functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts time information contained in literals or numeric date information into B4P __plain date__ type.  The differences",
"	of the two function names are described below:",
"",
"	=== 200, 800, noheader, noframe, bold_column_1",
"	time			| Dates without time info convert to blank dates.  Dates with time info are converted as expected.",
"	pure time		| Result will always contain a time.  Blank dates and date-only information convert to 00:00:00 (midnight).",
"	===",
"	<br><br>",
"",
"	=== 200, 200, 600, bold_column_1",
"	Input Form				| # Parameters required	| Description",
"	Literal input			| 1 or 2				| Converts a literal to date.  Locale settings (referring to system variable 'local settings[date format short]' rule the year/month/day sequence if the date is ambiguous, e.g. \"10.11.12\".  Change that value prior to the call if dates are ambiguous and need to use a different format assumption. See __Date and Time Detection Rules__ for details.",
"	today					| 1						| Meaningless, because it contains no time info.",
"	now						| 1						| Uses today's time (local time, today's date is ignored)",
"	utc						| 1						| Uses today's date and time (UTC)",
"	numeric date			| 1						| Meaningless, because it contains no time info",
"	serial date				| 1						| Microsoft serial date and time, as used in Excel.  Only the fraction is used E.g. 44000.75 translates to 18:00:00.",
"	numeric time			| 1						| Values between 0 and 1/(24+60+60), i.e. below 1, convert to time-only information",
"	time in numbers			| 1 or 2 or 3			| Provide hour, minute and optonally second to convert to time",
"	date and time in numbers| 4 or 5 or 6			| Like above, but also include hours, minutes and seconds",
"	variable in date format	| 1						| Time info of the date will be passed through.  Text representations will be elimnated.",
"	parameter set			| 1						| Indirect parameter passing scheme: Put the 1-6 parameters into a parameter set, e.g. date( { 23,59,59 } );",
"	===",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-3",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Time",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"				Convert a time in a literal to a date variable containing time information only. The keyword 'now' returns the current time of day.<br>See __Date and Time Detection Rules__ for ruling details."
 ]
		  
		},
		{ "Number": "Alt. 1",
		  "Name": "Hour",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Range: 0 .. 23" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Minute",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Range: 0 .. 59" ]
		},
		{ "Number": "Opt. 3",
		  "Name": "Second",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Range: 0 .. 59" ]
		}

		],
	"Return value":
	[
		{ "Name": "Date and/or time",
		  "Types": [ "literal" ],
		  "Description": "Contains date, time, date and time combined or blank date.  No literal context of the date is preserved or included."
		}
	],
"Examples" : [
"		echo( time ( now ) );",
"		echo( pure time ( today ) );   // 00:00:00",
"		echo( time ( \"08:30 p.m.\" ));  // 20:30:00",
"		a[] = { 20, 15, 30 };",
"		echo( time ( a[] ));           // 20:15:30",
"		echo( time ( '2020-12-31' ) ); // Blank date value",
"		echo( time ( 19/24 ));         // 19:00:00"
 ]
	,
	"Output": "automatic",
	"See also": [ "date conversion functions", "date", "pure date", "date time" ]
}

,

"numeral" :
{
	"Function Names":	[ "numeral" ],
	"Keywords":			[ "numeral conversion function" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts a variable to a plain numeral.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			Literals containing numbers (no text before numbers) are converted properly. Scientific notation is supported.<br>",
"			Numerals are passed through.  If existing, the literal context of the number will be discarded<br>",
"			Booleans are converted to 0 and 1<br>",
"			Parameter sets are not accepted<br>",
"			Dates are converted to a number in YYYYMMDD.  Time will be added as fraction of 1, e.g. 0.5 for 12:00 noon."
 ]
		  
		}
		],
	"Return value":
	[
		{ "Name": "number",
		  "Types": [ "numeral" ],
		  "Description": "Contains resulting number.  No literal context of the number is preserved or included."
		}
	],
"Examples" : [
"		echo( numeral( '1.2E+03' ) );",
"		echo( numeral( true ) );",
"		echo( numeral( 0123 ) );",
"		echo( numeral( date ( \"05. Nov 2019 12:00\" ) ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "literal conversion functions", "date", "pure date", "date time", "clean numeral", "smart numeral" ]
}

,

"clean (if) numeral" :
{
	"Function Names":	[ "clean numeral", "clean if numeral" ],
	"Keywords":			[ "clean numerals" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts a literal into numeral, including eliminating redundant contents in commercial number representations such as currency symbols",
"	before or after themand other form of units.  Thousand separators will be removed and decimal commas will be converted to decimal points.",
"	Minus signs both before and after the numerals will be detected.  Numbers in parentheses, e.g. (100.00) = -100 are considered negative numbers.",
"	Scientific notation (e.g. 1.2E+03 ) is supported here.  Numerals passed as parameters into thes function will be passed through.",
"	",
"	If the 1st parameter contains no number (e.g. letters, blanks) , then <b>clean numeral</b> returns 0 and <b>clean if numeral</b> returns the original literal.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"			If literal and containing digits: Conversion to numeral.<br>",
"			If literal and containing no digits or literal is blank: Conversion to 0 (<b>clean numeral</b>) or literal returned (function <b>clean if numeral</b>)",
"			If numeral: Will be passed through."
 ]
		  
		},
		{ "Number": "2",
		  "Name": "Decimal symbol",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": ". (point)",
"Description" : [
"			Use single character symbol, e.g. '.' or ','. <br>",
"			Specify 'local' to use currently applicable locale settings.  Examples: It chooses '.' for countries like USA, United Kingdom and Switzerland, and ',' for Germany and Austria.",
""
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "number",
		  "Types": [ "numeral", "literal" ],
		  "Description": "Contains resulting number.  Literals may be returned by the function <b>clean if numeral</b> if the input value contains no digits."
		}
	],
"Examples" : [
"		echo( clean numeral ( \"EUR 1'234.50\" ), \" and \", clean if numeral ( \"EUR 1'234.50\" ) ); // Both 1234.5",
"		echo( clean numeral ( \"2,500 € \" ),     \" and \", clean numeral ( \"2,500 €\", \",\") ); //  2500 and 2.5",
"		echo( clean numeral ( \"2,500- € \" ) ); // -2500",
"		echo( clean numeral ( \"-   2,500\" ),    \", \",    clean numeral ( \"(2,500)\" ) ); //  Both -2500",
"		echo( clean numeral ( \"[2,500]\" ),      \" and \", clean numeral ( \"-[2,500]\" ) ); // 2500 (brackets alone do not negate)",
"		echo( clean numeral ( \"(EUR 1,000)\" ),  \" and \", clean numeral ( \"(EUR) 1,000\") ); // Negation if number INSIDE parentheses",
"		echo( clean numeral ( \"INR 30 40 500\" ) ); //  3040500",
"		echo( clean numeral ( \".123\" ),         \" and \", clean numeral ( \".123\", \",\" )); // returns 0.123 and 123.",
"		echo( clean numeral ( \"\" ),             \" and '\",clean if numeral( \"\" ), \"'\" ); // returns 0 and \"\";",
"		echo( clean numeral ( \"abc\" ),          \" and \", clean if numeral ( \"abc\" ) ); //  returns 0 and abc",
"",
"		echo( new line, \"Scientific Notations:\");",
"		echo( clean numeral ( 1.2E3 ), \" and  \", clean numeral ( '1.2E+03' ) ); //  return 1200",
"		echo( clean numeral ( \"1 2 E - 0 3\" ) ); // returns 0.012"
 ]
	,
	"Output": "automatic",
	"See also": [ "numeral conversion function", "smart numeral", "smart if numeral" ]
},

"smart (if) numeral" :
{
	"Function Names":	[ "smart numeral", "smart if numeral" ],
	"Keywords":			[ "smart numerals" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These two functions are an upgrade variant of __clean numeral(__) and __clean if numeral(__).",
"",
"	The functions smart numeral and smart if numeral provide automatic up- and downscaling feature if (e.g. metric) scaling units are specified.",
"	As long no user specific units and scaling factors are specified in the 3rd and 4th parameters, the following units will be recognized and rescale",
"	the numbers.   These stanard units are not case sensitive.<br><br>",
"",
"	<b>General Scaling Factors:</b>",
"	=== 150, 150, 700, bold_column_1",
"	Units						| Scaling Factor		| Explanation",
"	&cent;, pct, %				| 0.01					| Cent, percent",
"	&permil; (&amp;permil;)		| 0.001					| Per mille, part per thousand, see <sub>1</sub>",
"	&pertenk; (&amp;ertenk;), bp| 0.000 1				| Part per ten thousand, base point (in finance), see <sub>1</sub>",
"	pcm							| 0.000 01				| Percent mille, part per hundred thousand",
"	ppm							| 0.000 001				| Part per million",
"	ppb							| 0.000 000 001			| Part per billion",
"	k, t, tsd					| 1,000					| Kilo, thousand",
"	m, mn, mln, mio				| 1,000,000				| Mega, million",
"	g, b, bn, bln				| 1,000,000,000			| Giga, billion (<u>Note: B4P uses the</u> U.S. English interpretation of <i>billion</i>)",
"	mrd, md, mia				| 1,000,000,000			| Milliard (common in Great Britain and other languages)",
"	===",
"",
"	<b>Indian Scaling Factors:</b>",
"	=== 150, 150, 700, bold_column_1",
"	Units						| Scaling Factor		| Explanation",
"	lakh, lk, lac				| 100,000				| Indian hundred thousand",
"	crore, cr					| 10,000,000			| Indian ten milllion",
"	arab						| 1,000,000,000			| Indian 1 billion (British English: Indian 1 milliard)",
"	===",
"",
"	<b>Prefix letters before 3-letter currency codes</b>, not case sensitive;",
"	=== 150, 150, 700, bold_column_1",
"	Txxx, Kxxx					| 1,000					| TGBP, KUSD, KEUR, etc.",
"	Mxxx						| 1,000,000				| MUSD, MCHF",
"	Bxxx						| 1,000,000				| BUSD, BRUB",
"	===",
"",
"	The different prefixes can be combined, e.g. <b>smart numeral ( 1 kEUR % )</b> returns 10.",
"",
"	<br><br>",
"	The function <b>smart if numeral</b> behaves similarly like <b>clean if numeral</b>: Contents without numbers inside are passed through as literals.",
"",
"	<br><br>",
"	Application hint: After loading a table from a different source, apply this function on all applicable number columns in order to clean",
"	them up and do necessary scalings.",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1, 2, 4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral or literal" ],
"Description" : [
"			If literal and containing digits: Conversion to numeral.<br>",
"			If literal and containing no digits or literal is blank: Conversion to 0 (<b>clean numeral</b>) or literal returned (function <b>clean if numeral</b>)",
"			If numeral: Will be passed through."
 ]
		  
		},
		{ "Number": "2",
		  "Name": "Decimal symbol",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": ". (point)",
"Description" : [
"			Use single character symbol, e.g. '.' or ','. <br>",
"			Specify 'local' to use currently applicable locale settings.  Examples: It chooses '.' for countries like USA, United Kingdom and Switzerland, and ',' for Germany and Austria."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Custom units",
		  "Direction": "input",
		  "Types": [ "parameter set containing literals" ],
		  "Default value": "Standard units apply (not case-sensitive)",
"Description" : [
"			Specify at least 1 unit name.  The units provided will be used instead (and not in addition) of the standard units.",
"			<u>Attention:</u>Comparison of these units is <u>case-sensitive</u>. This allows to distinguish lower-case letters like \"m\" for milli and upper-case leeters like \"M\" for mega.",
"			<br>Attention: 4th parameter must also be specified."
 ]
		  
		},
		{ "Number": "Opt. 4",
		  "Name": "Custom scaling factors",
		  "Direction": "input",
		  "Types": [ "parameter set containing numerals" ],
"Description" : [
"			For each custom unit defined in the previous function parameter, the correponding scaling factor needs to be added.",
""
 ]
		  
		}	],
	"Return value":
	[
		{ "Name": "number",
		  "Types": [ "numeral", "literal" ],
		  "Description": "Contains resulting number.  Literals may be returned by the function <b>smart if numeral</b> if the input value contains no digits."
		}
	],
"Examples" : [
"		echo( smart numeral( \"5.0 MUSD\" )); // 5,000,000",
"		echo( smart numeral( \"EUR 1.2mn\" )); // 1,200,000",
"		echo( smart numeral( \"INR 0.5 lk\" )); // 50,000",
"		echo( smart numeral( '50%' )); // 0.5",
"		echo( smart numeral( 'Alc. 0.5 &permil;' )); // 0.0005",
"		echo( smart numeral( \"1.23cr\" ));  // 12,300,000",
"		echo( smart numeral( 1.23m, \".\", { m, M }, {0.000001, 1000000} ));"
 ]
		,
	"Output": "automatic",
	"See also": [ "numeral conversion function", "clean numeral", "clean if numeral" ]
}


,

"boolean" :
{
	"Function Names":	[ "boolean" ],
	"Keywords":			[ "boolean conversion function" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts a value to a voolean value.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			Literals returning <i>true</i>:true, yes, '1' (not case sensitive, and also in other supported languages)<br>",
"			Literals returning <i>false</i>:false, no, '0', '-', '' (blank) (not case sensitive, and also in other supported languages)<br>",
"			Numerals: 0 (including near 0 as ruled by <i>epsilon</i> as defined in the systeml variable <b>runtime settings[epsilon]</b><.br>",
"			Booleans are passed through.<br>",
"			Date: Blank dates return false, otherwise true.",
"			Parameter sets: If purely empty (no element inside, not even a nested empty set), then false, otherwise true.",
"",
"			Dates are converted to a number in YYYYMMDD.  Time will be added as fraction of 1, e.g. 0.5 for 12:00 noon."
 ]
		  
		}
		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "Identified boolean value"
		}
	],
"Examples" : [
"		echo( boolean (TRUE), \" \", boolean(Falsch) );	// true, false",
"		echo( boolean (\"Ja\"), \" \", boolean(\"No\") );		// true, false",
"		echo( boolean (\"1\"), \" \",  boolean(0) );		// true, false",
"		echo( boolean ({{}}), \" \", boolean ({}) );		// true, false",
"		echo( boolean ( date( '10:30:00' )), \" \", boolean( date(\"\") ) );	// true, fasle"
 ]
	,
	"Output": "automatic"
}

,

"parameter set" :
{
	"Function Names":	[ "parameter set" ],
	"Keywords":			[ "parameter set conversion function" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function converts a value provided to a parameter set.",
"	* Numerals, Booleans, Dates: Put as single element into a parameter set.",
"	* Parameter sets: Will be passed through.",
"	* Literals: See below",
"",
"	In case of converting literals: The input literal may be embedded in braces (\"{ … }\" ) or not.  The elements must be separated with commas.",
"	The number of opening and closing braces must be equal.  Braces inside quotation marks are considered as part of a text element to include.",
"	* If elements look like numerals and Booleans (e.g. 123, true) , then they will be converted accordingly",
"	* If elements look like unambiguous dates in the <u>strict and exact format as listed below</u>, then they will be converted to dates (optionally including time of day)",
"	** \"YYYY-MM-DD\":	Dates",
"	** \"hh:mm:ss\":		Times",
"	** \"YYYY-MM-DD hh:mm:ss\":	Dates with times",
"	** \"0000-00-00\"		Blank dates",
"",
"	<b>Any additional or missing characters (incl. spaces) will suppress automatic date conversion.</b>",
"	If you have other date formats (e.g. MM/DD/YY, hh:mm), convert them by dates afterwards with the date(…) function.",
"	* A blank value is assumed between 2 consecutive commas (e.g. {a,,b})",
"	* A blank value is also assumed if comma follows open brace or leads close brace symbols (e.g. {,a}, {a,})",
"	* 2 blank values are included in this sequence: {,}",
"	* One HTML entity will be decoded: &#39; ' single quotation mark / apostrophe",
"",
"	Reason: Literals in conversion from parameter sets to literal will be put into single quotation marks and internal single quotation marks needed to be encoded to avoid confusion with closing quotation marks",
"	* Nesting is supported, e.g. {a,{b,c}}",
"	* Symbols other than braces and commas are considered as literals, e.g. {+} -> '+' in 1st element.",
"	* No variable names (e.g. \"{a[]}\" , functions and expressions will be calculated.  It's just plain data.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			Value to be converted as described above."
 ]
		  
		}
		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "parameter set" ],
		  "Description": "Identified parameter set"
		}
	],
"Examples" : [
"		echo( parameter set ( \"{a,1,{true,TRUE,false}} \" ) ); 	// {{'a',1,{true,'TRUE',false}}}",
"		echo( parameter set ( \"a,1,{true,TRUE,false} \" ) );	// {'a',1,{true,'TRUE',false}}",
"		echo( parameter set ( \"2019-07-14,10:30:00\"  ) );	// 2 date values: { 2019-07-14,10:30:00 }",
"		echo( type( parameter set ( \"2019-07-14,10:30:00\" ){0} ) );	// Check type of date",
"		echo( parameter set ( \"2019/07/14,10:30\"  ) ); 		// 2 literals: { '2019/07/14','10:30' } (not qualified as dates)",
"		echo( parameter set ( \"{a,,b}\"  ) );			// 4 literals: { 'a','','','b' } (2 literals are blank)"
 ]
	,
	"Output": "automatic"
}

,

"best type" :
{
	"Function Names":	[ "best type" ],
	"Keywords":			[ "best type" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	In case the input parameter is a literal, then it will be converted to the best type, depending on the contents.  ",
"	All non-literal types (numerals, parameter sets, dates, booleans voids) will be passed through without modifications ",
"	Following rules apply for literals provided as parameters",
"	* If the contents look like number, e.g. \"123.45\", then a conversion to numerals takes plae.",
"	* If the contents equals <i>true</i> or <i>false</i>, then a converion to boolean takes place.",
"	* Followng rules apply if unabiguous dates and/or times are provided:",
"	** \"YYYY-MM-DD\":	Dates",
"	** \"hh:mm:ss\":		Times",
"	** \"YYYY-MM-DD hh:mm:ss\":	Dates with times",
"	** \"0000-00-00\"		Blank dates",
"	** Any other characters, including spaces before or after dates, will suppress date conversion.",
"** If the 2nd parameter is true, then strings will be converted to parameters sets if the contents look like parameter sets, e.g. contents inside braces <b>{ ... }</b>.  	  The elements must be separated with commas.",
"	* In all other cases, the string contents are passed through without changes.",
"",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "valid types" ],
"Description" : [
"			Contents to be converted to best type."
 ]
		  
		},
		{ "Number": "2",
		  "Name": "Do parameter sets",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Default value": "false", 
"Description" : [
"			If 'true', then string contents looking like parameter set descriptions will be converted to parameter sets"
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "parameter set" ],
		  "Description": "Value converted into best type"
		}
	],
"Examples" : [
"	values[] =",
"	   { 1.2, date(today), true, { 1,2,{3,a} }, \"Hello\",  // No conversions",
"		 \"true\", \"True\",         // Only 'true' will be converted",
"		 \"false\", \"False\",       // Only 'false' will be converted",
"		 \"2020-04-17\", \"2020-04-07 22:30:00\", \"2020-04-07 22:30\", // Time conversion if fully specified.  3rd exmaple si not converted",
"		 \"{1,2,{3,A} }\",         // Converts to parameter set",
"		 \"1.2\", \"1E+3\",          // Converts to numbers",
"		 \"0000-00-00\" };         // Converts to blank date",
"",
"	for all parameters( values[], v[] )",
"	{",
"		n[] = best type( v[], true ); // 2nd parameter set also asks to convert strings containing parameter sets to parameter sets.",
"		echo(\"Value: \", n[],  \"   Type: \", type(n[]) );",
"	}"
 ]
	,
	"Output": "automatic"
}

,

"type, type detailed" :
{
	"Function Names":	[ "type", "typd detailed" ],
	"Keywords":			[ "Identify variable types" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The function <b>type</b> returns one of the following values:",
"		* numeral",
"		* literal",
"		* boolean",
"		* date",
"		* parameter set",
"		* void",
"",
"		The function <b>type detailed</b> also distinguishes between following values:",
"		* numeral / plain numeral (plain numeral contains no literal representation along with the value)",
"		* date / plain date  (plain date contains no literal representation along with the value)",
"		* literal / 'literal' / \"literal\"  (stands for literal, softquoted literal, quoted literal)",
""
 ]
		,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "all types" ],
"Description" : [
"			Value to be converted as described above."
 ]
		  
		}
		],
	"Return value":
	[
		{ "Name": "Type of value",
		  "Types": [ "literal" ],
		  "Description": ["See main function desription" ]
		}
	],
"Examples" : [
"		a[num 1] = 1;",
"		a[num 2] = a[num 1] + 0;",
"		a[lit 1] = An unquoted literal;",
"		a[lit 2] = 'A softquoted literal';",
"		a[lit 3] = \"A quoted literal\";",
"		a[lit 4] = softquoted literal( a[lit 3] );",
"		a[date] = date(today);",
"		a[bool] = true;",
"		a[pset] = { 1,2,3 };",
"		a[void] = null;",
"",
"		for all variables( a[], value[], counter[], name[] )",
"		{",
"			echo( name[], \": \", value[], \" --> \", type( value[] ), \", \", type detailed( value[] ) );",
"		}"
 ]
	,
	"Output": "automatic"
}

,

"join ..." :
{
	"Function Names":	[ "join", "join ignore blanks", "join unique", "join unique ignore blanks" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"	This function converts the contents of a parameter set into a string where the opening string (e.g. an opening bracket),",
"	a separator (e.g. a \", \") and a closing string can be provided.  If the parameter set contents are not of literal type, then",
"	they will be converted accordingly.",
"",
"	<br><br>",
"	",
"	The <b>... unique ...</b> option in the function name prevents adding repeated contents.<br>",
"	The <b>... ignore blanks</b> ignores all values which are blank.",
"",
"	<br><br>",
"",
"	<u>Attention:</u> Nested parameters are converted according to the rules as the main parameter set.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Parameter set containing values",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Description": [ "The values contained in the parameter set will be converted" ]
		},
		{ "Number": "2",
		  "Name": "Opening or separator string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (empty string)",
"Description" : [
"			If this function is called with 2 parameters only, then this value is used as separator string.<br>",
"			If this function is called with 3 or more parameters, then this value is used as opening string."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Separator string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (empty string)",
		  "Description": "This value is used to separate the converted elements in the parameter set"
		},
		{ "Number": "4",
		  "Name": "Closing string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (empty string)",
		  "Description": "This value serves as the closing string"
		}
	],
	"Return value":
	[
	  { "Name": "Composed string",
		"Types": [ "literal" ],
"Description" : [
"		Contains all parameter set elements with the specified opening, separator and closing strings."
 ]
		
	  }
	],
"Examples" : [
"",
"		echo( join( {1,'',2,' 3 ',4} ) );                   // Returns: 12 3 4",
"		echo( join( {1,'',2,' 3 ',4}, ', ' ) );	            // Returns: 1, , 2,  3 , 4",
"		echo( join( {1,'',2,' 3 ',4}, '(',', ',')' ) );     // Returns: (1, , 2,  3 , 4)",
"		echo( join ignore blanks( {1,'',2,' 3 ',4}, '(',', ',')' ) ); // Returns: (1, 2,  3 , 4)",
"		echo( join ignore blanks( { '' }, '(',', ',')' ) );           // Returns blank literal",
"		echo( join ( { }, '(',', ',')' ) );                           // Returns blank literal",
"		echo( join( { a,b,c,a,b,c}, \",\" ) );                // a,b,c,a,b,c",
"		echo( join unique( { a,b,c,a,b,c}, \",\" ) );         // a,b,c",
"		echo( join( { a,b,{c,d},e }, '[', '; ', ']' ) );    // [a; b; [c; d]; e] (nested sets)"
 ]
	,
	"Output": "automatic",
	"See also": [ "literal conversion functions" ]
}


,

"hash signature" :
{
	"Function Names":	[ "hash signature" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function generates a hash value from the parameters supplied.  The intention is to minimize coincidences of two different values resulting to the",
"	same hash signature value. Purposes: Fast matching of old vs. new data by just checking the signature values.",
"	Great effort has been put in to avoid or minimize colliding signatures, e.g. if two values sharing the same signature.  As an example, 'ab' and 'ba' ",
"	will luckily generate two different signatures.",
"",
"	Any number of parameters of any type may be provided, e.g numbers, literals, dates, parameter sets, etc.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"Min 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Contributing values",
		  "Direction": "input",
		  "Types": [ "all types" ],
		  "Description": [ "These values contribute to calculating the hash signature." ]
		}
	],
	"Return value":
	[
	  { "Name": "Hash signature",
		"Types": [ "numeral" ],
		"Description": "Values between 0 and 999999999 (max. 9 digits)"
	  }
	],
"Examples" : [
"	echo( hash signature(0) );",
"	echo( hash signature('') );",
"	echo( hash signature(' ') );",
"	echo( hash signature(Hello World) );",
"	echo( hash signature(Hello world) );"
 ]
	,
	"Output": "automatic"
}


,

"excel column" :
{
	"Function Names":	[ "excel column" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function converts an Excel column designtor (combination of 1-3 letters) to a column number.  <br>",
"	<u>Note</u>: Excel column A translates to 0, B to 1, Z to 25, AA to 26, etc.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Excel column specifier",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"		      Valid value are: <b>A, B, ..., Z, AA, AB, ZZ, AAA, AAB, </b>etc.<br>",
"			  Do not put spaces between the letters.  Letters after spaces will be ignored. Numbers (e.g. row numbers) will also be ignored."
 ]
			  
		}
	],
	"Return value":
	[
	  { "Name": "Column number",
		"Types": [ "numeral" ],
"Description" : [
"			Valid column numbers begin with 0. -1 is returned for invalid column specifiers, e.g. missing letters.<br>"
 ]
			
	  }
	],
"Examples" : [
"	for all parameters( { A, B5, Z23, AA1, ZZ, AAA, AAB, XFD, C A, '123 D', '123', ' B', '...' }, c[] )",
"	{",
"		echo(c[],\": \", excel column ( c[] ) );",
"		// Note: -1 is returned if no appropriate letter is recognized.",
"	}"
 ]
	,
	"Output": "automatic"
}


,

"excel coordinates" :
{
	"Function Names":	[ "excel coordinates" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function converts row nand column numbers into Microsoft Excel coordinates.  Please note the following nuances:",
"	* B4P table column 0 is A, columns 25 - 27 are Z, AA and AB respectively.  And so forth. ",
"	* B4P table row 0 translates to Excel row 1",
"* If no parameters are applied, then the function looks for current row and column numbers in the context for __partial table specifications__.  	  Exception will be asserted if no context info for partial table specifciaton is available.",
"	* Exceptions will also be flagged if the row and column numbers are out of Excel range",
"",
"	<br>",
"	<u>Attention</u>: No negative indexing is allowed here."
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Column number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"				The column number will translate to 1 or more letters.  Valid range: 0..16383"
 ]
			  
		},
		{ "Number": "2",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "No row number will be specified in the output",
"Description" : [
"				The column number will be incremented by 1 and added after the column designation.  Valid range: 0..1048575"
 ]
			  
		}
	],
	"Return value":
	[
	  { "Name": "Excel coordinate",
		"Types": [ "literal" ],
"Description" : [
"			If 1 parameter is provided, then the column designation will be provided.  If 2 parameters are provided, then the",
"			Excel coordinates contain both column and row information."
 ]
			
	  }
	],
"Examples" : [
"	coord[A1] = { 0, 0 };",
"	coord[B]  = { 1 };",
"	coord[Z10]  = { 25, 9 };",
"	coord[AA4]  = { 26, 3 };",
"	coord[AZ4]  = { 51, 3 };",
"	coord[BA14]  = { 52, 13 };",
"	coord[ZZ]    = { 701 };",
"	coord[AAA]   = { 702 };",
"	coord[XFD1048576]   = { 16383, 1048575 };",
"",
"	for all variables( coord[], val[], i[], name[] )",
"	{",
"		coord[] = excel coordinates( val[] ); // Makes use of indirect parameter passing",
"		echo(\"Input {col,row}: \", val[], \"  Result: \", coord[], \" (Expected: \", name[], \")\" );",
"	}",
"",
"",
"	echo( new line, \"Apply the function with 0 parameters on a table:\" );",
"	table initialize ( blank table, {{ Name, Age }, { Zoe, 30 }, { Nic, 40 }} );",
"",
"	table process cells( blank table, echo( \"Row: \", row(), \"  Column: \", col(), \"  Value: \", [.], \"  Excel coordinates: \", excel coordinates() ) );"
 ]
	,
	"Output": "automatic"
}


,

"excel validate sheet name" :
{
	"Function Names":	[ "excel validate sheet name" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function checks if the sheet name proposed can be used in Microsoft Excel.  The sheet name must not contain ",
"		at least 1 character and not more than 31 characters, and the following characters must not be used: <b>* / ? [ ] : \\</b>",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Proposed sheet name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			  This sheet name will be checked"
 ]
			  
		}
	],
	"Return value":
	[
	  { "Name": "Check OK",
		"Types": [ "boolean" ],
"Description" : [
"			<b>true</b> is returned if the proposed sheet name is OK for Excel."
 ]
			
	  }
	],
"Examples" : [
"	good examples[] = { \"Table 1\", \"T.1\", \"It contains 31 Characters .....\", \"1\", \"Section §1 - About Cafés\" };",
"	bad  examples[] = { \"\", \"a/b\", \"Section 1:1\", \"It contains 32 Characters ......\", Two + new line + lines };",
"",
"	for all parameters( good examples[], st[] ) print( excel validate sheet name( st[] ), \"  \" );",
"	echo;",
"",
"	for all parameters( bad examples[], st[] )  print( excel validate sheet name( st[] ), \" \" );",
"	echo;"
 ]
	,
	"Output": "automatic"
}


,

"date inside, time inside" :
{
	"Function Names":	[ "date inside", "time inside" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Checks if the variable contains a date or time information",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date value to check",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to check." ]
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "Function <b>date inside</b> returns true if the variable contains a date.<br>Function <b>time inside</b> returns true if the variable contains a time."
		}
	],
"Examples" : [
"		dates[] = { \"2020-01-01\", today, \"2020-01-01 13:00:00\", now, \"13:00:00\", time(now), \"\", date(\"\") };",
"		for all parameters( dates[], date[] ) echo( date inside(date[]), \" / \", time inside(date[]) );"
 ]
	,
	"Output": "automatic"
}

,

"year, quarter, month, day" :
{
	"Function Names":	[ "year", "quarter", "month", "day" ],
	"Documentation":	"Function Description",
	"Keywords":			[ "Date info functions" ],
"Description" : [
"",
"	These functions extract specific numeric info of the dates. 0 is returned if the input value contains no recognizable date.",
"",
"	=== 200, 800, bold_column_1",
"	Function Name	| Result",
"	year			| 4-digit year",
"	quarter			| quarter 1-4",
"	month			| months 1-12",
"	day				| day in month 1-31",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to extract as described above" ]
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Returned value as described above"
		}
	],
"Examples" : [
"		a[] = \"14. July 2020, 15:30:40\";",
"		echo( year( a[] ), \", \", quarter( a[] ), \", \", month( a[] ), \", \", day( a[] ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Time info functions", "day of year", "serial date" ]
}


,

"day of year" :
{
	"Function Names":	[ "day of year" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function returns the day of year.  0 is returned if the input value contains no recognizable date.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to extract as described above" ]
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Returned value as described above"
		}
	],
"Examples" : [
"		echo( day of year( 31.12.2019 ), \", \", day of year( 31.12.2020 ), \", \", day of year( \"\" ) );"
 ]
	,
	"Output": "automatic",
	"See also": "Date info functions"
}

,


"serial date" :
{
	"Function Names":	[ "serial date" ],
	"Keywords":			[ "date info functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions converts a date to serial date as used in Microsoft Excel.  The serial date begins on 01.01.1990 with value 1. ",
"	0 is returned for values without recognizabale date.  The value is always an integer and does not include any time-of-day offset.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to extract as described above" ]
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Returned value as described above"
		}
	],
"Examples" : [
"		echo( serial date( 18.06.2020 ), \", \", serial date( \"18.06.2020 18:00\" ), \", \", serial date( 01.01.1990 ), \", \", serial date( \"\" ) );"
 ]
	,
	"Output": "automatic",
	"See also": "Date info functions"
}

,

"hour, minute, second" :
{
	"Function Names":	[ "hour", "minute", "second" ],
	"Keywords":			[ "Time Info Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions extract specific numeric info of the times. 0 is returned if the input value contains no recognizable time.",
"",
"	=== 200, 800, bold_column_1",
"	Function Name	| Result",
"	hour			| hour 0-23",
"	minute			| minute 0-59",
"	second			| second 0-59",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date with time info",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to extract as described above" ]
		}

		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "numeral" ],
		  "Description": "Returned value as described above"
		}
	],
"Examples" : [
"		a[] = \"14. July 2020, 15:30:40\";",
"		echo( hour( a[] ), \", \", minute( a[] ), \", \", second( a[] ) );"
 ]
	,
	"Output": "automatic",
	"See also": "Date info functions"
}

,

"weekday" :
{
	"Function Names":	[ "weekday" ],
	"Keywords":			[ "weekday from date" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Retrieves the weekday number from the date.  If you need the weekday name, the use following function instead:<br>",
"	<b>literal( date[], \"Tttt\" );</b>, possible with a 3rd parameter specifying the language.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to check." ]
		},
		{ "Number": "1",
		  "Name": "Weekday calculation variant",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "2",
"Description" : [
"			1:  1 = Sunday, 2 = Monday .. 7 = Saturday<br>",
"			2:  1 = Monday, 2 = Tuesday .. 7 = Sunday<br>",
"			3:  0 = Monday, 1 = Tuesday .. 6 = Sunday<br>",
"			All other values are treated as 2."
 ]
			
		}

		],
	"Return value":
	[
		{ "Name": "Weekday number",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no recognizable date is provided."
		}
	],
"Examples" : [
"		for all parameters( { date(today) .. date(today)+10, date(\"15:00:00\") }, date[] )",
"		{",
"			echo( literal( date[], \"Ttt, DD.Mmm.YYYY: \" ), weekday(date[], 1), \" \",",
"				  weekday(date[], 2), \" \", weekday(date[], 3) );",
"		}"
 ]
	,
	"Output": "automatic"

}

,

"week" :
{
	"Function Names":	[ "week" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function calculates the week number from the date. -1 is returned if the input parameter contains no recognizable date.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Value to check." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"		    0:  ISO week number, 1..52 or 53, all weeks are 7 days long.  In some years, week 1 begins in the last days in December.  In some other years, week 53 may run into early January.<br>",
"			1:  Modify week number.  Week 53 in early January changes to 0.  Week 1 in end of December changes to 53.<br>",
"			2:  2-digit year and week number (calculated according to option 1) as fraction of 100.<br>",
"			3:  4-digit year and week number (calculated according to option 1)as fraction of 100.<br>",
"			Other values: -1 is returned"
 ]
			
		}

		],
	"Return value":
	[
		{ "Name": "week number",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no recognizable date is provided or wrong option value is used."
		}
	],
"Examples" : [
"		d[1] = { 31.12.2020, 31.12.2021, 31.12.2022 }; // still a literal. week() converts to date",
"		d[2] = { 01.01.2020, 01.01.2021, 01.01.2022 };",
"		for (option[] = 0, option[] <= 4, option[]++)",
"		{",
"			print( week( d[1]{0}, option[] ), \" \", week( d[1]{1}, option[] ), \" \", week( d[1]{2}, option[] ), \"   \" );",
"			echo ( week( d[2]{0}, option[] ), \" \", week( d[2]{1}, option[] ), \" \", week( d[2]{2}, option[] ) );",
"		}"
 ]
	,
	"Output": "automatic"

}

,

"reschedule" :
{
	"Function Names":	[ "reschedule" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function reschedules the date provided to a different date.  At least 3 parameters are required: The date, and at least one pair",
"	of two rescheduling parameters.  Additional pairs of rescheduling parameters can be added which is useful to make a <i>big</i> rescheduling",
"	first, e.g. next year, followed by a <i>smaller</i> rescheduling, e.g. the 2nd week in that year.",
"",
"	<br><br>",
"	The parameters are not case-senstitive.",
"",
"	<br><br>",
"	Following rescheduling parameter pairs are supported to reschedule dates whereas time information, if inside the date, remains unchanged:",
"",
"	=== 200, 200, 600, bold_column_1 bold_column_2",
"	rescheduling parameter 1	| rescheduling parameter 2	| description",
"	next						| day (or days)				| Reschedules to next dadate (tomorrow)",
"	previous					| day (or days)				| reschedules to previous date (yesterday)",
"	1, 2, 3, ...				| day (or days)				| reschedules to next 1, 2, 3, ... days to the future",
"	-1, -2, -3, ...				| day (or days)				| reschedules to next 1, 2, 3, ... days to the past",
"	day							| number (1..31)			| rescheudles to nth day in the date (same year, same month)",
"	begin						| week (or weeks)			| reschedules to begin of week (Monday) if date is not on a Monday",
"	end							| week (or weeks)			| reschedules to end of week (Sudnay) if date is not on a Sunday",
"	next						| week (or weeks)			| advances by 7 days",
"	previous					| week (or weeks)			| moves 7 days backward",
"	1, 2, 3, ...				| week (or weeks)			| advances 7, 14, 21, ... days",
"	-1, -2, -3, ...				| week (or weeks)			| moves 7, 14, 21, ... days backward",
"	week						| number (1..53)			| reschedules to nth week in year. Resulting date will always be Mondays.",
"	begin						| month (or months)			| reschedules to begin (1st day) of month",
"	end							| month (or months)			| reschedules to end (last day) of month",
"	next						| month (or months)			| reschedules to next month, see <sup>1</sup>",
"	previous					| month (or months)			| reschedules to previous month, see <sup>1</sup>",
"	1, 2, 3, ...				| month (or months)			| reschedules to next 1, 2, 3, ... months, see <sup>1</sup>",
"	-1, -2, -3, ...				| month (or months)			| reschedules to previous 1, 2, 3, ... months, see <sup>1</sup>",
"	month						| number (1..12)			| reschedules to nth month, keeping the day unchanged where possible <sup>1</sup>",
"	begin						| quarter (or quarters)		| reschedules to begin of quarter (1. January, 1. April, 1. July, 1. October)",
"	end							| quarter (or quarters)		| reschedules to end of quarter (31. January, 30. June, 30. September, 31. December) ",
"	next						| quarter (or quarters)		| reschedules to next quarter, see <sup>1</sup>",
"	previous					| quarter (or quarters)		| reschedules to previous quarter, see <sup>1</sup>",
"	1, 2, 3, ...				| quarter (or quarters)		| reschedules to next 1, 2, 3, ... quarters, see <sup>1</sup>",
"	-1, -2, -3, ...				| quarter (or quarters)		| reschedules to previous 1, 2, 3, ... quarters, see <sup>1</sup>",
"	quarter						| number (1..4)				| reschedules to 1st month of corresponding quarter, see <sup>1</sup>",
"	begin						| year (or years)			| reschedules to begin of year (1. January)",
"	end							| year (or years)			| reschedules to end of year (31. December)",
"	next						| year (or years)			| reschedules to same date on next year. For leapyears, see <sup>1</sup>",
"	previous					| year (or years)			| reschedules to same date on previous year. For leapyears, see <sup>1</sup>",
"	1, 2, 3, ...				| year (or years)			| reschedules to next 1, 2, 3, ... years. For leapyears, see <sup>1</sup>",
"	-1, -2, -3, ...				| year (or years)			| reschedules to previous 1, 2, 3, ... years. For leapyears, see <sup>1</sup>",
"	year						| 4-digit year, e.g. 2020	| rescheudles to a specified year, see <sup>1</sup>",
"	===",
"	<sup>1</sup> If the day in the date is bigger then the number of months to be rescheudled to (e.g. 31. March to February), then the day will be adjusted to last day of the month accordingly.<br>",
"	",
"",
"	Following rescheduling parameter pairs are supported to reschedule date and time combinations (00:00:00 is assumed as initial time if no time is provided):",
"",
"	=== 200, 200, 600, bold_column_1 bold_column_2",
"	rescheduling parameter 1	| rescheduling parameter 2	| description",
"	begin						| day (or days)				| Same day, reschedules to 00:00:00",
"	end							| day (or days)				| Same day, reschedules to 23:59:59",
"	begin						| hour (or hours)			| Same day, reschedules to hh:00:00 (hh = current hour)",
"	end							| hour (or hours)			| Same day, reschedules to hh:59:59 (hh = current hour)",
"	next						| hour (or hours)			| Reschedules to next hour, see <sup>2</sup>",
"	previous					| hour (or hours)			| Reschedules to previous hour, see <sup>2</sup>",
"	1, 2, 3, ...				| hour (or hours)			| Reschedules to next  1, 2, 3, ... hours, see <sup>2</sup>",
"	-1, -2, -3, ...				| hour (or hours)			| Reschedules to previous 1, 2, 3, ... hours, see <sup>2</sup>",
"	hour						| number (0..23)			| Reschedules to a specified hour",
"	begin						| minute (or minutes)		| Same day, reschedules to hh:mm:00 (hh:mm = current hour and minute)",
"	end							| minute (or minutes)		| Same day, reschedules to hh:mm:59 (hh:mm = current hour and minute)",
"	next						| minute (or minutes)		| Reschedules to next minute, see <sup>2</sup>",
"	previous					| minute (or minutes)		| Reschedules to previous minute, see <sup>2</sup>",
"	1, 2, 3, ...				| minute (or minutes)		| Reschedules to next  1, 2, 3, ... minutes, see <sup>2</sup>",
"	-1, -2, -3, ...				| minute (or minutes)		| Reschedules to previous 1, 2, 3, ... minutes, see <sup>2</sup>",
"	minute						| number (0..59)			| Reschedules to a specified minute",
"	begin						| second (or seconds)		| No impact, value stays unchanged",
"	end							| second (or seconds)		| No impact, value stays unchanged",
"	next						| second (or seconds)		| Reschedules to next second, see <sup>2</sup>",
"	previous					| second (or seconds)		| Reschedules to previous second, see <sup>2</sup>",
"	1, 2, 3, ...				| second (or seconds)		| Reschedules to next  1, 2, 3, ... seconds, see <sup>2</sup>",
"	-1, -2, -3, ...				| second (or seconds)		| Reschedules to previous 1, 2, 3, ... seconds, see <sup>2</sup>",
"	second						| number (0..59)			| Reschedules to a specified second",
"	===",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"3, 5, 7, ...",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Date",
		  "Direction": "input",
		  "Types": [ "date or literal converted to date" ],
		  "Description":
			[ "Date to reschedule" ]
		},
		{ "Number": "2, Opt 4,...",
		  "Name": "Rescheduling parameter 1",
		  "Direction": "input",
		  "Types": [ "literal", "numeral" ],
		  "Description": [ "See table above" ]
		},
		{ "Number": "3, Opt 5,...",
		  "Name": "Rescheduling parameter 2",
		  "Direction": "input",
		  "Types": [ "literal", "numeral" ],
		  "Description": [ "See table above" ]
		}

		],
	"Return value":
	[
		{ "Name": "rescheduled date",
		  "Types": [ "date" ],
		  "Description": "Rescheduled date.  Plain dates remain as plain dates regardless how they are rescheduled."
		}
	],
"Examples" : [
"		echo( reschedule ( \"2011-12-24\", -1, days )); //  2011-12-23",
"		echo( reschedule ( \"2012-01-31\", 1, month )); //  2012-02-29",
"		echo( reschedule ( \"2011-12-06\", end, month )); // 2011-12-31",
"		echo( reschedule ( \"2011-03-04\", next, week)); //  2011-03-11",
"		echo( reschedule ( \"2011-03-04\", day, 5)); //  2011-03-05",
"		echo( reschedule ( \"2012-12-31\", next, week, end, week)); // 2013-01-13",
"		echo( reschedule ( \"2011-03-04\", week, 25)); //  2011-06-20",
"		echo( reschedule (\"\", 1, day)); //		Returns blank date",
"		echo( reschedule ( now, time, \"15:30\" )); //    Changes time to 15:30.	"
 ]
		,
	"Output": "automatic"

}

,

"Stopwatch Functions" :
{
	"Function Names":	[ "watch start", "watch stop", "watch continue", "watch reset","watch read" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		=== 200, 600, noheader, noframe bold_column_1",
"		watch start		| Returns previous time, resets and starts the watch",
"		watch stop		| Returns the time and stops the watch.",
"		watch continue	| Returns the time and lets the watch continue to run",
"		watch reset		| Returns the time and resets the watch.  If the watch was continuing before, then it will continue from zero.",
"		watch read		| Returns the time.  No push-button actions on the watch.",
"		===",
""
 ]
	,

	"OS differences":	"Windows uses wall clock time.  Pause applications to measure true performance.<br>LINUX and MACOS uses actual CPU processing time.",
	"Call as":			"procedure or function",
	"Parameter count":	"0",
	"Return value":
	[
		{ "Name": "Stopwatch time in milliseconds elapsed",
		  "Types": [ "numeral" ],
		  "Description": "The watch time will be returned before the indicated action will happen.  E.g. <b>watch reset</b> returns the time before the reset operation."
		}
	],
"Examples" : [
"		watch start;",
"		sleep (0.05); // 50 ms",
"		echo( \"Started: \", watch read(), \" ms\" );",
"		sleep (0.05);",
"		echo( \"Before resetting: \", watch reset() );",
"		sleep (0.05);",
"		echo( \"Before stopping: \", watch stop() );",
"		sleep (0.05);",
"		echo( \"Before continuing: \", watch continue() );",
"		sleep (0.05);",
"		echo( watch stop(),\", \", watch reset(), \" and now back at zero: \", watch reset() );	"
 ]
		,
	"Output": "automatic"
}

,

"sleep, sleep countdown" :
	{
	"Function Names":	[ "sleep", "sleep countdown" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The program will sleep for a specified number of seconds.  The granularity is 0.001, i.e. milliseconds.",
"	The <b>... countdown</b> suffix will output the remaining time to sleep once per second.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Time",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Time in seconds.  Granularity is in ms, e.g. sleep(0.03) sleeps for 30 milliseconds." ]
		},
		{ "Number": "2",
		  "Name": "Prompt",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Prompts a message that sleeping is in progress" ]
		}

	],
"Examples" : [
"		sleep countdown (3, \"Waiting \");"
 ]
		,
	"Output": "Software will display a down-counting number on the same row",
	"See also": [ "wait", "wait countdown", "sleep until", "sleep until countdown" ]
},


"wait, wait countdown" :
	{
	"Function Names":	[ "wait", "wait countdown" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The program will sleep for a specified number of seconds or until user interaction (any key pressed), whatever happens first.  The granularity is 0.001, i.e. milliseconds.",
"	The <b>... countdown</b> suffix will output the remaining time to sleep once per second.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Time",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Time in seconds.  Granularity is in ms, e.g. sleep(0.03) sleeps for 30 milliseconds." ]
		},
		{ "Number": "2",
		  "Name": "Prompt",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Prompts a message that sleeping is in progress" ]
		}
	],
	"Return value":
	[
		{ "Name": "Time in seconds",
		  "Types": [ "literal" ],
		  "Description": "Entered character, or blank literal if no key has been pressed to stop waiting."
		}
	],
"Examples" : [
"		sleep countdown (3);"
 ]
		,
	"Output": "Software will display a down-counting number on the same row",
	"See also": [ "sleep", "sleep countdown", "wait until", "wait until countdown", "input quick" ]
}


,

"sleep until, sleep until countdown" :
	{
	"Function Names":	[ "sleep until", "sleep until countdown" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The program will sleep until a specific target date (and time) has been reached. 00:00:00 is assumed if no time is specified.  This feature is useful",
"	to schedule tasks at fixed time intervals.  Example: Scheduling database downloads every morning at 07:30, and the data is avaiable when you are in the office.",
"",
"	* If the target date is a blank date, then pausing does not place place.	",
"	* If the target date lies in the past, then pausing does not take place, too.",
"	* If a time without date is specified, then pausing takes place until the target time has been reached.",
"	* If a time without date is specified and the time is earlier than the current time, then pausing takes place until the time is reached in the following day.",
"",
"	The <b>... countdown</b> suffix will output the remaining time in following manner:",
"	=== 200, 600",
"	Time to go			| Countdown output",
"	More than 1 day		| Waiting for xx days ...",
"	More than 1 hour	| Waiting for xx hours ...",
"	More than 1 minute	| Waiting for xx minutes ...",
"	Less than 1 minute	| Waiting for xx seconds, ... counting down to \"Waiting for 0 seconds\", \"Waiting done\".",
"	===",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Target date / time",
		  "Direction": "input",
		  "Types": [ "date" ],
		  "Description":
			[ "Sleeping takes place until specified date and time has been reached" ]
		},
		{ "Number": "2",
		  "Name": "Prompt",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Prompts a message that sleeping is in progress" ]
		}

	],
"Examples" : [
"		sleep countdown (3, \"Waiting \");"
 ]
		,
	"Output": "Software will display a down-counting number on the same row",
	"See also": [ "wait until", "wait until countdown", "sleep", "sleep until" ]
},


"wait until, wait until countdown" :
	{
	"Function Names":	[ "wait until", "wait until countdown" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The program will sleep until a specific target date (and time) has been reached. 00:00:00 is assumed if no time is specified.  This feature is useful",
"	to schedule tasks at fixed time intervals.  Example: Scheduling database downloads every morning at 07:30, and the data is avaiable when you are in the office.",
"	The difference to __sleep until(__) and __sleep until countdown(__) is that user interaction (any key pressed) stops waiting and execution continues",
"	immediately.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"1",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Target date / time",
		  "Direction": "input",
		  "Types": [ "date" ],
		  "Description":
			[ "Waiting takes place until specified date and time has been reached" ]
		},
		{ "Number": "2",
		  "Name": "Prompt",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Prompts a message that waiting is in progress" ]
		}
	],
	"Return value":
	[
		{ "Name": "Time in seconds",
		  "Types": [ "literal" ],
		  "Description": "Entered character, or blank literal if no key has been pressed to stop waiting."
		}
	],
"Examples" : [
"		wait until countdown (\"07:30\", \"Wait until 07:30. Press any key to coninue immediately\");"
 ]
		,
	"Output": "Software will display a down-counting number on the same row",
	"See also": [ "wait", "wait countdown", "sleep until", "sleep until countdown", "input quick" ]
}


,

"directory existing, file existing" :
{
	"Function Names":	[ "directory existing", "file existing" ],
	"Documentation":	"Function Description",
	"Description":		[ "These functions check if the specified directory (resp. file) is existing"],
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "path and directory / file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "If no path is specified, then the working directory is used." ]
		}
		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if specified name is existing as a directory (resp. file).<br>false if not existing or existing as a file (resp. directory)"
		}
	],
"Examples" : [
"		echo( directory existing( \"C:\\Program Files\" ) );",
"		echo( directory existing( \"C:\\Program Files\\B4P\\B4P.exe\" ) );",
"		echo( file existing( \"C:\\Program Files\" ) );",
"		echo( file existing( \"C:\\Program Files\\B4P\\B4P.exe\" ) );"
 ]
		,
	"Output": "automatic"
}


,

"read access ..., write access ..." :
{
	"Function Names":	[ "read access", "read access repeat if locked", "write access", "write access repeat if locked" ],
	"Documentation":	"Function Description",
"Description" : [
"		These functions checks the access rights for the specified path and directory or file name.",
"",
"		<br><br>",
"",
"		The functions ending with <b>repeat if locked</b> allows you to close the file open in a different application, then continue by pushing [Enter].",
"		Some applications use file access control to temporarily lock access from other applications."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "path and directory or file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "If no path is specified, then the working directory is used." ]
		}
		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if read / write access is given, otherwise false"
		}
	],
"Examples" : [
"		echo( read accessible  ( \"C:\\Program Files\" ) );",
"		echo( write accessible ( \"C:\\Program Files\\B4P\\B4P.exe\" ) );",
"		directory create( Test Dir );",
"		echo( read accessible  ( Test Dir ) );",
"		echo( write accessible ( Test Dir ) );",
"		directory delete( Test Dir );"
 ]
	  ,
	"Output": "automatic"
}


,

"working directory" :
{
	"Function Names":	[ "working directory" ],
	"Documentation":	"Function Description",
"Description" : [
"		If no parameter is provided: Retrieve the working directory path.<br>",
"		If a directory path is provided: Change to a different working directory<br>"
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"0 - 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "new path and directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			This is the path to change directory.",
"			* <b>Absolute paths:</b> e.g. \"C:\\Program Files\", \"/usr/local/bin\"",
"			* <b>Relative paths:</b> e.g. \"Temp\"",
"			* <b>One directory back:</b> e.g. \"..\"",
"			* <b>Stay in current working directory</b> e.g. \".\"",
"			* <b>Combinations of above</b> e.g. \"..\\lib\"",
"			"
 ]
			
		  }
		],
	"Return value":
	[
		{ "Name": "Working directory",
		  "Types": [ "literal" ],
		  "Description": "Full path name of working directory. It does not have a directory separator symbol at the end."
		}
	],
	"Exceptions": "Specified working directory does not exist or is not accessible",
"Examples" : [
"		echo( working directory() );",
"		working directory(\"..\");               // One directory out",
"		echo( working directory() );",
"		echo(\"Jump to \", system info[bin directory] );",
"		working directory(system info[bin directory]); // Absolute path",
"		echo( working directory() );"
 ]
	  ,
	"Output": "automatic"
}


,

"starting directory" :
{
	"Function Names":	[ "starting directory" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		When B4P is started, it will look for \"main.b4p\" in the starting directory.",
"		The starting directory is stored in the file \"B4P User Settings.json\"",
"		located in the directory for application data.",
"	",
"		<br><br>",
"		If no parameter is provided: Retrieve the staring directory path.<r>",
"		If directory path is provided: Change the starting directory.<br>",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"0 - 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "new path and directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			In order to avoid problems, use absolute directory paths."
 ]
			
		  }
		],
	"Return value":
	[
		{ "Name": "Starting directory",
		  "Types": [ "literal" ],
		  "Description": "Full path name of starting directory. It does not have a directory separator symbol at the end."
		}
	],
	"Exceptions": "Specified starting directory does not exist or is not accessible",
"Examples" : [
"		saved starting directory[] = starting directory();",
"		echo(\" Old starting directory: \", saved starting directory [] );",
"		starting directory( working directory () );",
"		echo(\" New starting directory: \", starting directory () );",
"		starting directory( saved starting directory[] );",
"		echo(\" Back to old starting directory: \", saved starting directory [] );"
 ]
	  ,
	"Output": "automatic"
}


,

"file size" :
{
	"Function Names":	[ "file size" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		Returns the size of the files matching the path name.  __Wildcards_ are allowed, where sum the size of all files found inside the specified directory",
"		are summed.  Subdirectories will not be touched.  Directory entries do not attribute to the total size, even if some operating systems report a non-zero",
"		size for subdirectories."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "path and file name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify file name (in working directory) or combination of path and file name."
 ]
			
		  }
		],
	"Return value":
	[
		{ "Name": "Total size",
		  "Types": [ "numeral" ],
		  "Description": "Size of all files identified, summed, unit is bytes.  -1 if not found"
		}
	],
	"Exceptions": "Specified file name is a directory",
"Examples" : [
"		// Function 'literal' adds thousand separators to make numbers readable",
"		echo( literal( file size( \"C:\\Program Files\\B4P\\*.*\" ), \"#,000\", local ) );",
"		echo( literal( file size( system info[bin directory] + \"\\B4P.exe\" ), \"#,000\", local ) );",
"		echo( file size( \"Non-existing File.txt\" ) ); // -1"
 ]
	  ,
	"Output": "automatic"
},

"directory size" :
{
	"Function Names":	[ "directory size" ],
	"Documentation":	"Function Description",
"Description" : [
"		Returns the total number of bytes used by all files specified in the directory, including all their subdirectories.  Hidden and inaccessible files will not be counted.",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "path and directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify the directory name (subdirectory in working directory) or path name.  Do not use wildcards."
 ]
			
		  }
		],
	"Return value":
	[
		{ "Name": "Total size",
		  "Types": [ "numeral" ],
		  "Description": "Size of all files identified, summed, unit is bytes."
		}
	],
	"Exceptions": "Specified directory not found or not existing",
"Examples" : [
"		// Function 'literal' adds thousand separators to make numbers readable",
"		echo( literal( directory size( system info[bin directory] ), \"#,000\", local ) );",
"		echo( literal( directory size( \"Images\" ), \"#,000\", local ) );"
 ]
	  ,
	"Output": "automatic"
}


,

"disk space ..." :
{
	"Function Names":	[ "disk space", "disk space free" ],
	"Documentation":	"Function Description",
"Description" : [
"	Returns the total resp. free space of the specified drive.  It also works for network drives.",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...)"
 ]
			
		  }
		],
	"Return value":
	[
		{ "Name": "Size information",
		  "Types": [ "numeral" ],
		  "Description": "Disk space / free disk space in bytes"
		}
	],
	"Exceptions": "Invalid path name or nonexisting drive",
"Examples" : [
"		path[] = select if( system info[operating system] == Windows, \"C:\\\", \"/home\" );",
"",
"		echo( literal( disk space( path[] ), \"#,000\", local ) );",
"		echo( literal( disk space free( path[] ), \"#,000\", local ) );"
 ]
	  ,
	"Output": "automatic"
}

,

"directory listing ..." :
{
	"Function Names":	[ "directory listing", "directory listing recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"		This function creates a table containing the directory listing of the specified path. The table contains following columns:",
"		The function <b>directory listing recursive</b> also lists all files in all subdirectories.  ",
"		Unless the listing option is \"all\", all files inside hidden and system directories are ignored, even if they are stored as regular visible files.",
"",
"		=== 100, 500, 400",
"		Header Name			| Contents																			| OS dependent deviations",
"		Path				| Full path name , ending directory separator symbols								| Directory separator: Windows: '\\', LINUX / MACOS: '/'",
"		Name				| File or directory name.  Directory names end with separator symbols				| See above",
"		Date Created		| Date file was created (YYYY-MM-DD),e.g. 2014-12-31								|",
"		Time Created		| Time file was created (00:00:00 – 23:59:59)										|",
"		Date Updated		| Date file was updated most recently (YYYY-MM-DD)									|",
"		Time Updated		| Time file was updated most recently (00:00:00 – 23:59:59)							|",
"		Directory			| 'Yes' if entry is a directory name, otherwise 'No'								|",
"		System				| 'Yes' if entry is a system file is a system file, otherwise 'No'					| LINUX / MACOS: Always 'No'",
"		Hidden				| 'Yes' if hidden, otherwise 'No'													| LINUX / MACOS: All files beginning with '.' are considered hidden",
"		Archive				| 'Yes' if archive file, otherwise 'No'												| LINUX / MAXCOS: Always \"No\"",
"		Read Only			| 'Yes' if read-only, otherwise 'No'												|",
"		Size				| File size in bytes																|",
"		===",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"1-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The directory listing will be put into this table, with header names as lsited above.",
"			If the table is not yet existing, then it will be created.  Existing tables will be initialized first."
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "pattern name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "search option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "files and directories",
"Description" : [
"		    One of the following:",
"			=== 150, 500, noheader, noframe_1stcolbold",
"		    files					| Files only",
"			directories				| Directories only",
"			files and directories	| Foth files and directoreies (default)",
"			all						| Also includes hidden and system files",
"			===",
""
 ]
			
		  }

		],
	"Return value":
	[
		{ "Name": "Entry count",
		  "Types": [ "numeral" ],
		  "Description": "Total number of files and/or directories found.  -1 = Error (e.g. invalid path). Table will be empty in this case."
		}
	],
"Examples" : [
"		define procedure ( listing, {{ description, literal }, {count, numeral}} )",
"		{",
"			echo( new line, description[], \"    (Containing \", count[], \" entries)\" );",
"			table process( list, echo( [Date Created],\" \",[Time Created],\" \", [Path], [Name] ) );",
"		}",
"",
"		// Both listings are equivalent.",
"",
"		path[] = system info[bin directory];",
"		echo(\"Using following main path: \", path[] );",
"",
"		rv[] = directory listing( list, path[] );",
"		listing( \"All files in specified subdirectory\", rv[]);",
"",
"		rv[] = directory listing( list, path[] + \"\\L*,B*\" );",
"		listing( \"All directories and files brginning with L or B\", rv[]);",
"		echo;",
"",
"		rv[] = directory listing( list, path[], \"*\", directories );",
"		listing( \"All subdirectores. Note: Use '*', not '*.*'.\", rv[]);",
"		echo;",
"",
"		rv[] = directory listing( list, path[]+\"\\lib\", \"*.txt\" );",
"		listing( \"All files with type in lib subdirectory'.txt'\", rv[]);",
"",
"		rv[] = directory listing recursive( list, path[], \"*.b4p,*.txt\" );",
"		listing( \"All .b4p and .txt files in current and subdirectories\", rv[]);",
"",
"		rv[] = directory listing recursive( list, \"C:\\dk3@ç%45*\\\" );",
"		listing( \"Empty table, -1 returned due to invalid path name\", rv[]);"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "advanced directory listing", "count files" ]
}

,

"search files ..." :
{
	"Function Names":	[ "search files", "search files recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		Searches the disk for a particular files and/or directories and returns the full paths.",
"		* <b>search files recursive</b> searches recursively.  Recursive strategy: If a subdirectory is encountered, the files inside the subdirectory will be searched immediately before continuing with the next entry.",
"		* <b>search files</b> searches in the specified directory.",
"		",
"		<u>Note:</u>Files searched are not guaranteed to be in any deterministic order, e.g. alphabetic order.  Ordering behaviors differ among operating systems.",
"",
"		<br><br>",
"		The resulting file names contain the path name as specified.  Example. If \".\\sudir\" is specified, then this (relative) path name will be added to all file and directory names returned.",
"		Files listed in the current directory contain no path names in front.",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"0-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "pattern name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Match count limitation",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "-1 (no limit)",
"Description" : [
"			<b><0</b> Search for all matches and return parameter set containing all names.  A parameter set is also used if only one item has been found.<br>",
"			<b>0</b> Search for first matching file / directory name and return as literal (and not in a parameter set)<br>",
"			<b>>0</b> First for specified number file / directory names, then stop.  All names are put into parameter sets."
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "search option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "files and directories",
"Description" : [
"			One of the following:",
"			=== 150, 500, noheader, noframe_1stcolbold",
"			files					| Files only",
"			directories				| Directories only",
"			files and directories	| Foth files and directoreies (default)",
"			all						| Also includes hidden and system files",
"			===",
""
 ]
			
		  }

		],
	"Return value":
	[
		{ "Name": "Identified names",
		  "Types": [ "literal", "parameter set" ],
		  "Description": "All file and directory names found as specified."
		}
	],
"Examples" : [
"		echo(\"All files in a directory        : \", search files( \"C:\\Program Files\\B4P\\\" ), new line );",
"",
"		echo(\"All files : \", search files( \".\\\", \"*.b4p\"      ) );",
"		echo(\"1st file only (as literal)      : \", search files( \".\\\", \"*.b4p\", 0   ) );",
"		echo(\"1st file only (in parameter set): \", search files( \".\\\", \"*.b4p\", 1   ) );",
"		echo(\"1st file only (as literal)      : \", search files( \"..\\\", \"*\", 0   ), new line ); // One directory up",
"		echo(\"All subdirectories              : \", search files( \"C:\\Program Files\\B4P\", \"*\", -1, directories   ) );",
"		echo(\"All .b4p/.txt recursively       : \",",
"			search files recursive( \"C:\\Program Files\\B4P\", \"*.txt,*.b4p\", -1, files  ) );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "count files", "directory listing" ]
},

"count files ..." :
{
	"Function Names":	[ "count files", "count files recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		Searches the disk for a particular files and/or directories and counts them",
"		* <b>couunt files recursive</b> searches recursively.  Recursive strategy: If a subdirectory is encountered, the files inside the subdirectory will be searched immediately before continuing with the next entry.",
"		* <b>count files</b> searches in the specified directory.",
"",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"0-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "drive or path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "pattern name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			Specify a disk drive (e.g. C:\\) or a path name (/usr/local, or \\\\server_name\\path_name\\...).",
"			If no additional parameters are provided, then the path name may also contain a file name (to list 1 file) or matching pattern to list specific files.<br>",
"			<u>Note</u>: Wildcard symbols are supported here for the file name, but not for the path name (OK: C:\\Subdir\\*.txt,  Not OK: C:\\Sub*\\*.txt)"
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Match count limitation",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "<0 (no limit)",
"Description" : [
"			<b><0</b> Search for all matches and return parameter set containing all names.  A parameter set is also used if only one item has been found.<br>",
"			<b>&ge;0</b> Count at least 1 (even if 0 is passed into this parameter) or specified number of files / directories.<br><br>",
"			<u>Suggestion:</u> Recommended to use -1 to count all files.  Limiting the count (e.g. you need to know if more or less than specified files or directories are avaiable) will avoid wasting time searching and counting the remaining files."
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "search option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "files and directories",
"Description" : [
"			One of the following:",
"			=== 150, 500, noheader, noframe_1stcolbold",
"			files					| Files only",
"			directories				| Directories only",
"			files and directories	| Foth files and directoreies (default)",
"			all						| Also includes hidden and system files",
"			===",
""
 ]
			
		  }

		],
	"Return value":
	[
		{ "Name": "Number of files and/or directories found",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"		echo(\"All files in a directory   : \", count files( \"C:\\Program Files\\B4P\\\" ), new line );",
"",
"		echo(\"All files                  : \", count files( \".\\\", \"*.b4p\"      ) );",
"		echo(\"1st file only              : \", count files( \".\\\", \"*.b4p\", 0   ) );",
"		echo(\"1st file only (same)       : \", count files( \".\\\", \"*.b4p\", 1   ) );",
"		echo(\"3 files only               : \", count files( \".\\\", \"*.b4p\", 3   ), new line );",
"		echo(\"All subdirectories         : \", count files( \"C:\\Program Files\\B4P\", \"*\", -1, directories   ) );",
"		echo(\"All .b4p/.txt recursively  : \",",
"			count files recursive( \"C:\\Program Files\\B4P\", \"*.txt,*.b4p\", -1, files  ) );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "search files", "directory listing" ]
}


,

"resolve path/directory/file name" :
{
	"Function Names":	[ "resolve path name", "resolve directory name", "resolve file name" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function resolves specified directory path and file names (containing __wildcard__ symbols in various directory and/or file names) to existing path and file names where<br>",
"		1. The full path name will be checked.",
"		* For <b>resolve file name</b>, the last name must be a file name.",
"		* For <b>resolve file name</b>, the last name must be a directory name.",
"		* For <b>resolve path name</b>, the last name may either be a file or directory name.",
"",
"		2. If path contains __wildcard__ symbols (<u>Attention: '*' and '?' only)</u>, then the matching name will be identified.  <br>",
"		If 2 or more matches are found, then an exception will be asserted because the path is ambiguous.<br>",
"		3. If the path begins with a lone tilde symbol ('~/...',  '~\\...'), then the tilde will be replaced by the user home directory.<br>",
"		4. Wildcards along the full directory path are allowed, e.g. \"C:\\Prgram Files\\*\\*\\Lib\\Support Library*\".  B4P will search through the different<br>",
"		   subdirectories accordingly.",
"",
"		<br><br>",
"",
"		<u>Note:</u>In interactive mode, B4P will automatically capture all 'cd' / 'chdir' / changing drive commands and take care of changing the",
"		directores in the B4P process, too.  Reason: Operating System commands executed happen in child processes and changing direcctories have no effect on their parent processes.",
"		",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "path name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "Current working directory",
"Description" : [
"			This path name may contain __wildcard__ symbols which will be resolved."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Fully resolveld path name",
		  "Types": [ "literal" ],
		  "Description": "All __wildcards__ have been resolved."
		}
	],
"Examples" : [
"		if ( system info[operating system] = Windows)",
"		{",
"		    echo( resolve path name( \"C:\\Program*\\*\\*4P.exe\" ) ); // Look for B4p Program",
"		}",
"		else",
"		{",
"			echo( resolve path name( \"/usr/*l/*n/*4p\" ) ); // Look for /usr/local/bin/b4p",
"		}",
"		echo( resolve path name( \"~/\" ) );	// Your home directory",
"		echo( resolve path name( \"~/..\" ) );	// Parent directory of home directory",
""
 ]
	  ,
	"Output": "automatic",
	"See also": [ "search files", "directory listing" ]
}


,

"directory create ..." :
{
	"Function Names":	[ "directory create", "directory create all", "directory create silently" ],
	"Keywords":			[ "directory create ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"",
"	These functions create specified directories (including their files) and come in following flavors:<br>",
"	<b>directory create</b> will assert an exception if the directory cannot be created (e.g. directory already existing, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>directory create silently</b> will create the directories until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>directory create all</b> tries to create all directories and skips the ones which cannot be created.  Here, the number of successfully created directories will be returned.<br>",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"Min 0",
	"Restrictions":		[ "Indirect parameter passing is enabled.", "__Wildcards__ are not supported here" ],
	"Parameters":
	[
		{ "Number": "1, etc.",
		  "Name": "direcory name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Specify the directory name(s).  If the directory shall be created in a location other than the working directory, then specify the full path.",
"			Intermediate sub-directories between existing directories and the location of the new directory will be created automatically, too, so you don't need",
"			to call this function for \"dir1\"; \"dir1/dir2\", \"dir1/dir2/dir3\" ... etc."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>directory create</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>directory create silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>directory create all</b>: Number of successful operations (directories created) is returned."
 ]
				
		}
	],
	"Exceptions": [ "Directory is already existing", "invalid path name" ],
"Examples" : [
"		directory create( { My Folder 1 .. My Folder 5 } ); // Create 5 directories",
"		system( 'dir /W \"My Folder*\"' ); // Show directory listing",
"		directory delete recursive( \"\", \"My Folder *\" ); // Delete \"My Folder 1\" and \"... 2\".",
""
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory create temp", "directory delete ... Functions" ]
}


,

"file create link ..." :
{
	"Function Names":	[ "file create link", "file create link all", "file create link silently" ],
	"Keywords":			[ "file create link ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		These functions create symbolic links to existing directories and come in following flavors:<br>",
"		<b>file create link</b> will assert an exception if the link cannot be created (e.g. attempting to create links on files, access restrictions, etc.)  Execution will stop immediately.<br>",
"		<b>file create link silently</b> will create the symbolic links until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"		will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"		<b>file create link all</b> tries to create all links and skips the ones which cannot be created.  Here, the number of successfully created links will be returned.<br>",
""
 ]
		,
"OS differences" : [
"",
"		<b>WINDOWS</b>: Following restrictions apply:<br>",
"		1. The link file must end with \".LNK\" or \".lnk\"<br>",
"		2. Target file: If a different drive is chosen, then the absolute path is required:  (OK: D:\\directory\\filename / Not OK: D:filename,  D:directory\\filename<br>",
"		3.  File names can only be comprised of WIN-1252 characters, i.e. no UNICODE characters allowed.<br>",
"		These restrictions are due to a workaround by creating a small Visual Basic Script (VBS) program which is then executed because this is the only approach to create",
"		symbolic links without administrator rights.",
"		<br><br>",
"		Linux / MacOS: Not mandatory to specify \".LNK\" at the end, but links can only be created on directories and not on files."
 ]
		,	
	"Call as":			"procedure or function",
	"Parameter count":	"2, 4, etc.",
	"Restrictions":		[ "Indirect parameter passing is disabled.", "__Wildcards__ are not supported here" ],
	"Parameters":
	[
		{ "Number": "1, 3, etc.",
		  "Name": "Symbolic link file name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2, 4, etc.",
		  "Name": "Target file or directory name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Description": [ "" ]
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>file create link</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>file create link silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>file create link all</b>: Number of successful operations (links created) is returned."
 ]
				
		}
	],
	"Exceptions": [ "File is already existing" ],
"Examples" : [
"		file create link( My Link.lnk, Images  );	// Link to existing directory",
"		file create link( My Link 2.lnk, Example_Program.b4p ); // Link to file",
"		system( 'dir /W \"My Link*\"' ); // Show directory listing",
"",
"		// Attention: LINUX / MacOS only supports links to directories.",
"",
"		file delete multiple ( \".\", \"My Link*.lnk\" );",
""
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory create ... Functions" ]
}


,

"file delete ..." :
{
	"Function Names":	[ "file delete", "file delete all", "file delete silently" ],
	"Keywords":			[ "file delete ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions delete specified files and come in following flavors:<br>",
"	<b>file delete</b> will assert an exception if file cannot be deleted (e.g. file not found, locked, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>file delete silently</b> will delete the files until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.<br>",
"	<b>file delete all</b> tries to delete al files and skips the ones which cannot be created.  Here, the number of successfully deleted files will be returned.<br>",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"Min 0",
	"Restrictions":		[ "Indirect parameter passing is enabled.", "__Wildcards__ are not supported here" ],
	"Parameters":
	[
		{ "Number": "1, etc.",
		  "Name": "file name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Specify file name.  Add path name in front if needed.  With indirect parameter passing enabled, the files to delete can also be provided in one",
"			parameter set.  Example: <b>file delete</b>( { file1.txt, file.txt, .. } );"
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>file delete</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>file delete silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>file delete all</b>: Number of successful operations (files deleted) is returned."
 ]
				
		}
	],
	"Exceptions": [ "File not found", "File locked by another application", "File not accessible", "Attempting to delete a directory" ],
"Examples" : [
"		file copy ( {3 : Example_Program.b4p}, { Test123.txt, Test456.txt, Test789.txt } );",
"		print( file delete all ( Test123.txt, TestXXX.txt, Test456.txt ), \" / \" ); // Returns 2",
"		print( file delete ( Test789.txt ), \" / \" ); // Returns OK",
"		echo( file delete silently ( Test789.txt )); // Returns \"File not found\"",
"",
"		files[] = { Test123.txt, Test456.txt, Test789.txt };",
"		file copy ( {3 : Example_Program.b4p}, files[] );",
"		echo( file delete all ( files[] ) ); // Returns 3"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory delete ... Functions", "file delete multiple/recursive ... Functions" ]
}


,

"file delete multiple/recursive ..." :
{
	"Function Names":	[ "file delete multiple", "file delete multiple all", "file delete recursive", "file delete recursive all" ],
	"Keywords":			[ "file delete multiple/recursive ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions delete multiple files in specified directories.  __Wildcards__ are supported to select files to delete.<br>",
"	<b>file delete multiple ...</b> Only the directory / directories specified in 1st parameter will be considered to search and delete files<br>",
"	<b>file delete recursive ...</b> All subdirectories are also included for searching and deleting these files<br>",
"	<b>file delete ... all</b> will try to delete all files, skipping those which cannot be deleted.  No exceptions asserted in this case.",
"",
"	<br><br>",
"	<u>Attention:</u> System files are not touched, but hidden files are.  No directories will be deleted.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"1-2",
	"Restrictions":		[ "Indirect parameter passing is disabled.", "__Wildcards__ are allowed on file names only" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "path name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Names of existing directory paths to delete.",
"			Nothing is deleted if the parameter is empty.  If the parameter contains a blank string, then current directory is assumed.",
"			If the 2nd parameter is not specified, then all files in the specified path are affected."
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "file name(s) or patterns",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "* (all files)",
"Description" : [
"			If number of names or patterns in this function parameter equals to number of path names, then a 1:1 relationship is assumed, i.e.",
"			1st path relates to 1st name, 2nd path to 2nd name, etc.  If this parameter contains fewer elemeents, then the last element",
"			will apply for the remaining path names.  If this parameter contains more elements, then the excess names or patterns will be ignored.<br>",
"			<u>Attention:</u> Nothing will be deleted if this parameter contains a blank string or empty parameter set."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of files deleted successfully",
		  "Types": [ "numeral" ],
		  "Description": [""]
		}
	],
	"Exceptions": [ "File not found", "File locked by another application", "File not accessible", "File is a directory" ],
"Examples" : [
"		directory create( My Folder );",
"",
"		file copy ( {3 : Example_Program.b4p}, { Test123.txt, Test456.txt, \"My Folder\\Test789.txt\" } );",
"		echo(file delete multiple all ( \".\", \"Test???.txt\" ) ); // Returns 2",
"",
"		file copy overwrite ( {3 : Example_Program.b4p}, { Test123.txt, Test456.txt, \"My Folder\\Test789.txt\" } );",
"		echo(file delete recursive all ( \".\", \"Test???.txt\" ) ); // Returns 3",
"",
"		directory delete( My Folder );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "file delete ... Functions", "directory delete multiple/recursive ... Functions"  ]
}


,

"directory delete multiple/recursive ..." :
{
	"Function Names":	[ "directory delete multiple", "directory delete multiple all", "directory delete recursive", "directory delete recursive all", "directory delete recursive if empty" ],
	"Keywords":			[ "directory delete multiple/recursive ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions delete multiple directories in specified directories.  __Wildcards__ are supported to select directories to delete.<br>",
"	<b>directory delete multiple ...</b> Only the directory / directories specified in 1st parameter will be considered to search and delete directories.  Directories containing files will not be deleted.<br>",
"	<b>directory delete recursive ...</b> All subdirectories are also included for searching and deleting these directories.  Files and subdirectories inside specified directories will be deleted.<br>",
"	<b>directory delete ... all</b> will try to delete all directories, skipping those which cannot be deleted.  No exceptions asserted in this case.",
"",
"	<br><br>",
"	The function <b>directory delete recursive if empty</b> will delete only those directories which are empty and ignore those containing files.",
"",
"	<br><br>",
"	<u>Attention:</u> System files are not touched, but hidden files are.  Directories containing such files will not be deleted.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"1-2",
	"Restrictions":		[ "Indirect parameter passing is disabled.", "__Wildcards__ are allowed on final directory names only" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "path name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Names of existing directory paths to delete.",
"			Nothing is deleted if the parameter is empty.  If the parameter contains a blank string, then current the directory is assumed.",
"			If the 2nd parameter is not specified, then all files in the specified path are affected."
 ]
			
		},
		{ "Number": "Opt. 2",
		  "Name": "directory name(s) or patterns",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "* (all directories)",
"Description" : [
"			If number of names or patterns in this function parameter equals to number of path names, then a 1:1 relationship is assumed, i.e.",
"			1st path relates to 1st name, 2nd path to 2nd name, etc.  If this parameter contains fewer elemeents, then the last element",
"			will apply for the remaining path names.  If this parameter contains more elements, then the excess names or patterns will be ignored.<br>",
"			<u>Attention:</u> Nothing will be deleted if this parameter contains a blank string or empty parameter set."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of directories deleted successfully",
		  "Types": [ "numeral" ],
		  "Description": ["Files inside directories will not be counted"]
		}
	],
	"Exceptions": [ "Directory not found", "Directory not empty", "Directory not accessible", "Directory is a file" ],
"Examples" : [
"		directory delete multiple( \"D:\\A\", \"*\");",
"		// Deletes all subdirectories in directory A if they are empty. The directory A will not be deleted.",
"		// Deleting will stop when encountering first issue, e.g. non-empty or blocked directory.",
"		",
"		directory delete multiple all ( \"D:\\A\", \"*\");",
"		// Same as above, but continues deleting the remaining directories in case of an issue",
"",
"		directory delete multiple( \"\", \"A\");",
"		// Deletes subdirectory A if empty",
"",
"		directory delete recursive( \"D:\\A\", \"*\");",
"		// Deletes all subdirectories including their files and nested sub-directories in directory A. The directory A will not be deleted.",
"		// Deleting will stop when encountering first issue, e.g. non-empty or blocked directory.",
"		",
"		directory delete recursive all ( \"D:\\A\", \"*\");",
"		// Same as above, but continues deleting the remaining directories in case of an issue",
"",
"		directory delete recursive( \"\", \"A\");   directory delete recursive (\"A\"), directory delete recursive (\"./\", \"A\" )",
"		// Deletes subdirectory A including their files and nested sub-directories in directory A",
"",
"		directory delete recursive if empty( \"D:\\A\", \"*\");",
"		// Deletes all subdirectories including their nested sub-directories in directory A if empty",
"		// The directory A will not be deleted.",
"		// This function implies '… all', meaning it tries to delete all existing subdirectories, even if an issue occurs.",
"",
"		directory delete recursive if empty ( \"\", \"A\");",
"		//  Deletes subdirectory A including their nested sub-directories in directory A if empty",
""
 ]
	,
	"See also": [ "directory delete ... Functions", "file delete multiple/recursive ... Functions"  ]
}


,

"directory delete ..." :
{
	"Function Names":	[ "directory delete", "directory delete all", "directory delete silently" ],
	"Keywords":			[ "directory delete ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"",
"	These functions delete specified directories (including their files) and come in following flavors:<br>",
"	<b>directory delete</b> will assert an exception if the directory cannot be deleted (e.g. directory not found, directory not empty, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>directory delete silently</b> will delete the directories until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>directory delete all</b> tries to delete all directories and skips the ones which cannot be created.  Here, the number of successfully deleted directories will be returned.<br>",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"Min 0",
	"Restrictions":		[ "Indirect parameter passing is enabled.", "__Wildcards__ are not supported here" ],
	"Parameters":
	[
		{ "Number": "1, etc.",
		  "Name": "directory name",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Specify directory name.  Add path name in front if needed.  With indirect parameter passing enabled, the directories to delete can also be provided in one",
"			parameter set.  Example: <b>directory delete</b>( { directory1, directory2, .. } );"
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>directory delete</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>directory delete silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>directory delete all</b>: Number of successful operations (directories deleted) is returned."
 ]
				
		}
	],
	"Exceptions": [ "Directory not found", "Directory not empty", "Directory not accessible", "Attempting to delete a file" ],
"Examples" : [
"		file copy ( {3 : Example_Program.b4p}, { Test123.txt, Test456.txt, Test789.txt } );",
"		print( file delete all ( Test123.txt, TestXXX.txt, Test456.txt ), \" / \" ); // Returns 2",
"		print( file delete ( Test789.txt ), \" / \" ); // Returns OK",
"		echo( file delete silently ( Test789.txt )); // Returns \"File not found\"",
"",
"		files[] = { Test123.txt, Test456.txt, Test789.txt };",
"		file copy ( {3 : Example_Program.b4p}, files[] );",
"		echo( file delete all ( files[] ) ); // Returns 3"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "file delete ... Functions", "directory delete multiple/recursive ... Functions" ]
}


,

"file rename ..." :
{
	"Function Names":	[ "file rename", "file rename all", "file rename silently" ],
	"Keywords":			[ "file rename ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions rename files or move files from one location to another and come in following flavors:<br>",
"	<b>file rename</b> will assert an exception if the file cannot be renamed or moved (e.g. file not found, file locked, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>file rename silently</b> will rename the files until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>file rename all</b> tries to rename or move all files and skips the ones which cannot be renamed or moved.  Here, the number of successfully renamed or moved files will be returned.<br>",
"",
"	<br><br>",
"	Moving files is only possible inside the same disk volume (i.e. same disk drive / desktop computer / server drive)",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled." ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "existing path and file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Every parameter must refer to an existing file.  Path name in front is needed if the file is not located in the working directory.			"
 ]
			
		},
		{ "Number": "2",
		  "Name": "new path and file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Destination paths and new file names.  The number of existing and new path and file names must match, otherwise an exception will be asserted."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>file rename</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>file rename silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>file rename all</b>: Number of successful operations (files renamed or moved) is returned."
 ]
				
		}
	],
	"Exceptions": [ "File not found", "File locked by another application", "File not accessible", "File is a directory" , "Number of existing and new path and file names are not equal"],
"Examples" : [
"		directory create( My Folder 1, My Folder 2 );",
"",
"		file copy( Example_Program.b4p, \"My Folder 1/Test123.txt\" );",
"		file rename( My Folder 1\\test123.txt, My Folder 2\\test456.txt ); // Move and rename",
"		system( 'dir /A-D /W \"My Folder 2\"' ); // Show directory listing",
"",
"		directory delete recursive( \"\", \"My Folder ?\" ); // Delete \"My Folder 1\" and \"... 2\"."
 ]
	  ,
	"Output": "automatic",
	"See also": [ "directory rename ... Functions", "file copy ... Functions" ]
}


,

"directory rename ..." :
{
	"Function Names":	[ "directory rename", "directory rename all", "directory rename silently" ],
	"Keywords":			[ "directory rename ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions rename or move directories and come in following flavors:<br>",
"	<b>directory rename</b> will assert an exception if the directory cannot be renamed or moved (e.g. directory not found, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>directory rename silently</b> will rename or move the directories until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>directory rename all</b> tries to rename or move all directories and skips the ones which cannot be renamed.  Here, the number of successfully renamed or moved directories will be returned.<br>",
"",
"	<br><br>",
"	Moving directories is only possible inside the same disk volume (i.e. same disk drive / desktop computer / server drive)",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled."  ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "existing path and directory names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Every parameter must refer to an existing directory.  Path name in front is needed if the directory is not located in the working directory."
 ]
			
		},
		{ "Number": "2",
		  "Name": "new path and directory names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Destination paths and new directory names.  The number of existing and new path and directory names must match, otherwise an exception will be asserted."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>directory rename</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>directory rename silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>directory rename all</b>: Number of successful operations (directories renamed or moved) is returned."
 ]
				
		}
	],
	"Exceptions": [ "Directory not found", "Directory not accessible", "Directory is a file" , "Number of existing and new path and directory names are not equal"],
"Examples" : [
"		directory create( My Folder 1, My Folder 2 );",
"		directory rename( My Folder 1, \"My folder 2\\My Folder 3\");",
"		system( 'dir /W \"My Folder 2\"' ); // Show directory listing",
"",
"		directory delete recursive( \"\", \"My Folder *\" );"
 ]
	  ,
	"Output": "automatic",
	"See also": [ "file rename ... Functions" ]
}


,

"file copy ..." :
{
	"Function Names":	[ "file copy", "file copy all", "file copy silently", "file copy overwrite", "file copy overwrite all", "file copy overwrite silently" ],
	"Keywords":			[ "file copy ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions make copies of files and come in following flavors:<br>",
"	<b>file copy</b> will assert an exception if the file cannot be renamed (e.g. file not found, file locked, access restrictions, etc.)  Execution will stop immediately.<br>",
"	<b>file copy silently</b> will copy the files until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>file copy all</b> tries to copy all files and skips the ones which cannot be renamed.  Here, the number of successfully copied files will be returned.<br>",
"	<b>... overwrite ...</b> in the function name will overwrite existing destination files.  Without this name ending, attempting to overwrite existing files assert exceptions.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled." ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "existing path and file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Every parameter must refer to an existing file.  Path name in front is needed if the file is not located in the working directory."
 ]
			
		},
		{ "Number": "2",
		  "Name": "new path and file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Destination paths and new file names.  The number of existing and new path and file names must match, otherwise an exception will be asserted."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>file copy / file copy overwrite</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>file copy ... silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>file copy ... all</b>: Number of successful operations (files copied) is returned."
 ]
				
		}
	],
	"Exceptions": [ "File not found", "File locked by another application", "File not accessible", "File is a directory" , "Number of existing and new path and file names are not equal"],
"Examples" : [
"		directory create( My Folder 1, My Folder 2 );",
"",
"		file copy( {2 : Example_Program.b4p } , { \"My Folder 1/Test123.txt\", \"My folder 2/Test 456.txt\"} );",
"		system( 'dir /A-D /W \"My Folder 1\"' ); // Show directory listing",
"		system( 'dir /A-D /W \"My Folder 2\"' ); // Show directory listing",
"",
"		directory delete recursive( \"\", \"My Folder ?\" ); // Delete \"My Folder 1\" and \"... 2\".	  "
 ]
		,
	"Output": "automatic",
	"See also": [ "file rename ... Functions" ]
}


,

"file copy mulitple/recursive ..." :
{
	"Function Names":	[ "file copy multiple",  "file copy multiple all",  "file copy multiple overwrite",  "file copy multiple overwrite all", 
						  "file copy recursive", "file copy recursive all", "file copy recursive overwrite", "file copy recursive overwrite all" ],
	"Keywords":			[ "file copy multiple/recursive ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions copy files as well as directories including their files.<br><br>",
"",
"	<b>file copy ... overwrite ...</b>: Existing files in destination directory are automatically overwritten.  Otherwise, existing files will not be overwritten.<br>",
"	<b>file copy recursive ...</b> will also copy subdirectories and their files.<br>",
"	<b>file copy ... all</b>: The copying process will not stop when encountering or locked or protected files in destination directories as well as existing files in destination directories if 'overwrite' is specified in the function name.  ",
"	                          Instead, these files will be skipped.<br>",
"",
"	<br><br>",
"	The three function parameters may be literals or parameter sets.  If the 1st or 2nd parameter is empty, nothing will be copied.  ",
"	If (illustration, case a.) the 1st and 2nd parameter contain one entry each, then contents from one specified directory are copied to one specified target directory.  ",
"	If one of the two parameters contain more elements (case b and c), then the copy procedure will be repeated as illustrated.  ",
"	Case d (multiple but identical number of entries) copies contents from the source directory to the corresponding destination directory.  Finally, case e depicts multiple but different number of entries.  The number of copy cycles corresponds to the higher number of entries.  In the parameter with fewer entries, the 1st element will be referenced again after the last one was referenced (similar to modulo functionality).",
"",
"	<br/><br/><img src=\"Images/Function_file_copy_multiple.jpg\" alt=\"B4P General Overview\"><br/>",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-3",
	"Restrictions":		[ "Indirect parameter passing is disabled." ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of existing path(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Every parameter must refer to an existing directory.  "
 ]
			
		},
		{ "Number": "2",
		  "Name": "name of target path(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If the destination path is not existing, then it will be created."
 ]
			
		},
		{ "Number": "Opt. ",
		  "Name": "Names of file or pattern to copy",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'*' (all files)",
"Description" : [
"			__Wildcard__ symbols are allowed here.  Providing a blank literal will copy nothing because there are no files with blank file names."
 ]
			
		}

	],
	"Return value":
	[
		{ "Name": "Number of files copied",
		  "Types": [ "numeral" ],
		  "Description": ["Counts the number of files copied.  Subdirectories created will also be counted."]
		}
	],
	"Exceptions": [ "Source directory not found", "File not found", "Target file already existing", "attempting to create sub-directories which exist as files", "subdirectories cannot be created" ],
"Examples" : [
"	",
"		file copy overwrite( {}, \"D:\\abc\" ); // Nothing copied.",
"		file copy overwrite ( \"D:\\abc\", {} ); // Nothing copied.",
"		file copy recursive( \"D:\\abc\", \"D:\\def\\\" ); // Copy everything from abc to def including sudirectories (case a)",
"		file copy multiple overwrite( \"D:\\abc\", \"D:\\def\\\",“*.txt,*jpg\",  );",
"		// Copies text files and photos from abc to def, and overwrites",
"		// existing files. Subdirectories are ignored. (case a)",
"		file copy recursive( \"D:\\abc\", {\"D:\\def\",\"D:\\ghi\"} ); // Copy files incl. subdirectories from abc to def as well as ghi (case b).",
"		file copy recursive all ( { \"D:\\abc\", \"D:\\def\" }, \"D:\\ghi\\\" );",
"		// Copies all files from directories abc as well as def into ghi. (case c). Don't stop if destination files exist or are locked.",
"		file copy multiple({\"D:\\abc\",\"D:\\def\"},{\"D:\\ghi\",\"D:\\jkl\"}); // (case d)",
"		file copy multiple('D:\\abc,D:\\def','D:\\ghi\",\"D:\\jkl\"'); // Same functionality (case d)",
"		// Copies all files from abc to ghi as well as from def to jkl.",
"		file copy multiple('D:\\a,D:\\b,D:\\c,D:\\d,D:\\e', 'D:\\m,D:\\n' );",
"		// Copies contents from a, c and e to m, and contents from b and d to n. (case e)",
"		file copy recursive('D:\\a,D:\\b,D:\\c', 'D:\\m,D:\\n,D:\\o,D:\\p,D:\\q' );",
"		// Copies contents incl. subidrectories from a to m and p, from b to n and q, and from c to o. (case f)"
 ]
		,
	"See also": [ "file copy ... Functions" ]
}


,

"file download ..." :
{
	"Function Names":	[ "file download", "file download all", "file download silently", "file download overwrite", "file download overwrite all", "file download overwrite silently" ],
	"Keywords":			[ "file download ... Functions" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions downloads files from the Internet (URL address) and come in following flavors:<br>",
"	<b>file download</b> will assert an exception if the file cannot be downloaded (e.g. web page not found, etc.)  Execution will stop immediately.<br>",
"	<b>file download silently</b> will download the files until a first failure is encountered.  In this case, the applicable one of the __short error messages on directories and files__",
"	will be returned.  If no errors have been encountered, \"OK\" will be returned.",
"	<b>file download all</b> tries to download all files and skips the ones which cannot be downloaded.  Here, the number of successfully downloaded files will be returned.<br>",
"	<b>... overwrite ...</b> in the function name will overwrite existing destination files.  Without this name ending, attempting to overwrite existing files assert exceptions.",
""
 ]
	,
"OS differences" : [
"",
"		<b>Windows</b>:	If no protocol like http://, https:// or ftp:// is specified, then http:// is added in front of the URL name.  No issue appears if the web page ends up",
"		to be a https:// page.  This is taken care automatically.<br><br>",
"",
"		<b>Linux, MacOS</b>: The web download is implemented with the <b>wget</b> command"
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		[ "Indirect parameter passing is disabled." ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing URL (web address)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Specify web address as seen on the address bar in your browser."
 ]
			
		},
		{ "Number": "2",
		  "Name": "new path and file names",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			Destination paths and new file names.  The number of URL's specified and of files specified in this function parameter must match.."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "numeral or literal" ],
"Description" : [
"				<b>file download / file download overwrite</b>: Always \"OK\", because all errors cause exceptions.<br>",
"				<b>file download ... silently</b>: \"OK\", or __short error messages on directories and files__.<br>",
"				<b>file download ... all</b>: Number of successful operations (files copied) is returned."
 ]
				
		}
	],
	"Exceptions": [ "URL not found", "File locked by another application", "Number of URLs and file names are not equal" ],
"Examples" : [
"		file download( \"https://en.wikipedia.org/wiki/Coffee\", Coffee.html\""
 ]
		,
	"See also": [ "file copy ... Functions" ]
}


,

"table create ..." :
{
	"Function Names":	[ "table create", "table create if not existing" ],
	"Documentation":	"Function Description",
"Description" : [
"		These function create new tables without any contents (0 rows, 0 columns).<br>",
"		<b>table create</b> creates new table if they do not yet exist, or initializes existing tables<br>",
"		<b>table create if not existing</b> will not touch the tables which are already existing."
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "Min. 1",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Both existing and non-existing table names are allowed." ]
		}
		],
	"Return value":
	[
		{ "Name": "Number of tables created or initialized",
		  "Types": [ "numeral" ],
		  "Description": "With the function <b>table create if not existing</b>, tables already existing will not be counted.  -1 is returned in case of memory allocation exceptions (very rare cases, if at all)."
		}
	],
"Examples" : [
"		r1[] = table create( table 1, table 2 );",
"		r2[] = table create if not existing( { table 2, table 4 } ); // Indirect parameter passing",
"",
"		echo(\"count 1: \", r1[], \"   count 2: \", r2[] );",
"",
"		for all parameters( {table 0 .. table 5}, t[] )",
"		{",
"			print( table existing( t[] ), \", \" );",
"		}",
"		echo; // new line"
 ]
		,
	"Output": "automatic",
	"See also": [ "table clear", "table initialize" ]
}


,

"table clear ..." :
{
	"Function Names":	[ "table clear" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function clears existing tables so they contain 0 rows and 0 coluns."
 ]
		,
	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "Min. 1",
		  "Name": "name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Both existing and non-existing table names are allowed." ]
		}
		],
"Examples" : [
"		include ( Support Library );",
" 		table initialize( t1, { { Name, Street, Nr }, { Alex, Main St., 231 }} );",
"		echo(\"Initialized table:\");",
"		table list( t1 );",
"		table clear( t1 );",
"		echo(\"Cleared table:\");",
"		table list ( t1 ); // Nothing to list"
 ]
		,
	"Output": "automatic",
	"See also": [ "table create", "table delete" ]
}


,

"table initialize/append ..." :
{
	"Function Names":	[ "table initialize", "table append", "table append on same row", "table append on same field" ],
	"Documentation":	"Function Description",
"Description" : [
"		<b>table initalize</b> creates resp. initializes tables and puts the contents provided in the further function parameters into the table.<br>",
"		<b>table append</b> assumes tables already existing.  Contents are addeded on the next row.<br>",
"		<b>table append on same row</b> assumes tables already existing.  Contents are addeded on the next column at the last row.<br>",
"		<b>table append on same field</b> assumes tables already existing and expects a literal in the 2nd function parameter.  This string will be appended to the last existing field at the right in the last table row.<br>"
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of new or existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Table must be existing when using <b>table append...</b> functions.  Otherwise, it does not matter." ]
		},
		{ "Number": "2",
		  "Name": "Initial contents",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			Applicable except for <b>table append on same field</b>:<br>",
"			If multiple values (of any valid type) are put into a simple parameter set, e.g. { A text, 123, true, Another text }, then every value will",
"			be added in separate rows, column 0. <br><br>",
"			If value are put into nested parameter sets, e.g. ({ Name, Score }, { Alex, 12 }, { Lina, 14 }}, then the items in the nested parameter sets will",
"			be written in different columns in the same row."
 ]
			
		},	
		{ "Number": "Alt. 2",
		  "Name": "Initial contents",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Applicable for <b>table append on same field</b> only:<br>",
"			One string which will be appended to the existing contents (without any separator characters between) in the last existing column at the right on the last row."
 ]
			
		}

		],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "boolean" ],
		  "Description": "true if successful. false is returned in case of memory allocation exceptions (very rare cases, if at all)."
		}
	],
"Examples" : [
"		include ( Support Library ); // for 'table list'. Will be included automatically when using B4P normally, i.e. not needed.",
"		table initialize( t1,",
"		{ { Name, Street, Nr }, { Alex,Main St., 231 },Tom,Jerry,{ Tillman,South St., 1 }, { Jane,East Coast St.,3200 East Entrance } } );",
"		// Notice: Tom and Jerry get their own rows for their cat and mouse play",
"",
"		table append             ( t1, { { Corinne, River Side Blvd., 987 } } );",
"		table append on same row ( t1, { { Runs a Café, \"Tel: +1 202 555 1212\" } } ); // Takes additional columns",
"",
"		table append               ( t1, { { Matteo, Springs Lane, 964 } } );",
"		table append on same field ( t1, \" Suite 3\" );",
"",
"		table list( t1 );"
 ]
		,
	"Output": "automatic",
	"See also": [ "table create", "table append blank rows", "table add row" ]
}


,

"table append blank rows" :
{
	"Function Names":	[ "table append blank rows" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function adds a specified number of blank rows to the end of the table"
 ]
		,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of new or existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Table must be existing when using <b>table append...</b> functions.  Otherwise, it does not matter." ]
		},
		{ "Number": "2",
		  "Name": "Number of rows to append",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"		    The rows added are entirely blank, i.e. 0 columns per row.."
 ]
			
		}

		],
"Examples" : [
"	include ( Support Library );",
"	table initialize( animals, { { Animal, size }, { ant, tiny }, { mouse, small } } );",
"",
"	table append blank rows( animals, 2 );",
"	table append( animals,",
"		{ { rat, not that small }, { horse, big } } );",
"",
"	table list ( animals );"
 ]
		,
	"Output": "automatic",
	"See also": "table append"
}


,

"table add / write row" :
{
	"Function Names":	[ "table add row", "table write row" ],
	"Documentation":	"Function Description",
"Description" : [
"		These simple functions write data into a table where the header names and correponding values are specified.  The function call",
"		may be extended with additional parameters in order to write the rows below, too.",
"		",
"		<br><br>",
"		<b>table write row</b> writes the data at the specified row number.<br>",
"		<b>table add row</b> adds the data below the last line of the table.<br>",
"		"
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "name of new or existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Table must be existing when using <b>table append...</b> functions.  Otherwise, it does not matter." ]
		},
		{ "Number": "2.",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Nonexisting header names will be added to the table"
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Starting row number",
		  "Direction": "input",
		  "Types": "numeral",
		  "Default value": "",
"Description" : [
"			This parameter applies to <b>table write row</b> only.  It refers to the starting row number where to write the data.<br>",
"			For the function, <b>table add row</b>, the next row below the table is assumed and therefore this parameter is skipped.",
"			Negative indexing is supported."
 ]
				
		},
		{ "Number": "3. / 4., etc.",
		  "Name": "Data to add or write",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			All data written to the table must be put into parameter set and passed in this function parameter, even if only one",
"			string value is provided.  The number of elements must not exceed the number of table columns specified but may be lower.",
"			If fewer data elements are specified, then the remaining fields will not be overwritten.",
"",
"			<br><br>",
"			Void values will not be written into the table.  You can actually use void values in order to prevent updating specific fields."
 ]
			
		}

		],
	"Return value":
	[
		{ "Name": "Number of rows written",
		  "Types": [ "numeral" ],
		  "Description": "Returns the number of rows written."
		}
	],
"Examples" : [
"	include ( Support Library );",
"",
"	table initialize ( t,",
"	{ { Animal, leg count, size,         intelligence },",
"	  { Worm,   0,         very small,   low},",
"	  { Fox,    4,         quite small,  medium } });",
"",
"	table write row( t, { size, Animal, leg count, skin }, 1, { tiny, null(), no legs }, { null(), Dog, four, haired } );",
"",
"	table add row  ( t, { Animal, size, intelligence }, { Ape, quite big, smart }, { Jellyfish, small } );",
"",
"	table list ( t );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table append" ]
}


,

"table (write or) add missing row" :
{
	"Function Names":	[ "table add missing row", "table write or add missing row" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"		As a first step, the table will be checked if there is a match in the columns specified in the 2nd function parameter with",
"		the data in the 3rd function parameter.  The comparison technique to find the corresponding table row is the same as",
"		in the function __table find(__), including wildcards supported.",
"",
"		<br><br>",
"",
"		If no matching row has been found, then a new row will be added with the columns and values provided in the 2nd and 3rd",
"		function parameters, and, if avaiable, with the 4th and 5th function parameters, too.  Header names specified in the ",
"		4th function parameter which are still missing in the table will be created in order to include the data in the table.",
"",
"		<br><br>",
"",
"		However, if a matching row has been found, no futher actions happen if the function <b>table add missing row</b> is called,",
"		or <b>table write or add missing row</b> with only 3 parameters is called (i.e. no further data to write).",
"		Otherwise, the further data entries will be written to the table in the identified row.",
"",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"3 or 5",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "name of new or existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Table must be existing when using <b>table append...</b> functions.  Otherwise, it does not matter." ]
		},
		{ "Number": "2",
		  "Name": "Header names and/or column numbers to compare",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified"
 ]
			
		},
		{ "Number": "3",
		  "Name": "Comparison values or patterns",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"				The nummber of elements must match with the number of headers (2nd function parameter).",
"				Specify the comparison patterns.<br>",
"				* Unquoted or quoted literals as elements in parameter set: True comparison of contents without wildcards, e.g. { Name, \"Street\" }<br>",
"				* Softquoted literals in parameter set: You can use __wildcard symbols__, e.g. { '* Name', 'City,Town' }<br>",
"				* One quoted literal specifies just one item to compare, e.g. \"Last Name\"<br>",
"				* One softquoted literal converts the contents into a parameter set and treats contents as unquoted resp. quoted literals."
 ]
				
		},
		{ "Number": "Opt. 4.",
		  "Name": "Further header names and/or column numbers to add",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Nonexisting header names will be added to the table"
 ]
			
		},
		{ "Number": "Opt. 5",
		  "Name": "Further data to add or write",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
"Description" : [
"			All data written to the table must be put into parameter set and passed in this function parameter, even if only one",
"			string value is provided.  The number of elements must not exceed the number of table columns specified but may be lower.",
"			If fewer data elements are specified, then the remaining fields will not be overwritten.",
"",
"			<br><br>",
"			Void values will not be written into the table.  You can actually use void values in order to prevent updating specific fields."
 ]
			
		}

	],
	"Return value":
	[
		{ "Name": "Row number accessed",
		  "Types": [ "numeral" ],
		  "Description": "Returns row number accessed.  If a row has been added, then it is the new row number at the end of the table."
		}
	],
"Examples" : [
"	include ( Support Library );",
"",
"	table initialize ( t,",
"	{ { Animal, leg count, size,             intelligence },",
"	  { Worm,       0,     very small,       low},",
"	  { Worm,       0,     very small too,   low},",
"	  { Fox,        4,     quite small,      medium } });",
"",
"",
"	row[] = table write or add missing row( t, { Animal, size }, { Worm, very small too }, intelligence, { negligible } );",
"	echo(\"Worm updated in row \", row[] );",
"",
"	row[] = table write or add missing row( t, { Animal, size }, { Whale, huge }, intelligence, { quite high } );",
"	echo(\"Whale added in row \", row[] );",
"",
"	row[] = table write or add missing row( t, Animal, { Fox } ); //",
"	echo(\"Fox is in row \", row[] );",
"",
"	row[] = table add missing row( t, { Animal, leg count}, { Fox, 4 } ); // Already existing",
"	echo(\"Fox with 4 legs already exists in in row \", row[] );",
"",
"	row[] = table add missing row( t, { Animal, leg count}, { Fly, 6 }, { size }, { little } ); // Already existing",
"	echo(\"Fly added in row \", row[] );",
"",
"	echo;",
"	table list ( t );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table append" ]
}


,

"table delete ..." :
{
	"Function Names":	[ "table delete", "table delete silently" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function deletes tables entirely.  The function <b>table delete silently</b> suppresses exceptions in case the table names",
"		are no longer existing."
 ]
		,
	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "Min. 1",
		  "Name": "name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Names of existing tables are expected." ]
		}
		],
"Examples" : [
"		echo(\"Create and delete tables\");",
"		table create( a );",
"		table delete silently ( a, b ); // 'b' does not exist, but done silently."
 ]
		,
	"Output": "automatic",
	"See also": [ "table clear" ]
}


,

"table configure" :
{
	"Function Names":	[ "table configure" ],	
	"Documentation":	"Function Description",
"Description" : [
"	",
"		This function applies configuration settings to all tables specified.  These configuration settings affect the following cases:",
"		* Behavior on <b>row not found</b>, e.g. when referencing tables  = [ table: Name, Mike, Phone Nr ] where \"Mike\" is not in the table",
"		* Behavior on <b>column not found</b>, e.g. when referencing header names",
"		* Behavior or reading values, i.e. enabling / disabling automatic conversion to numerals, booleans and dates.",
"",
"		<u>Attention</u>: The table configuration settings are retained even if the table is initialized or cleared, but not if new contents are loaded from a file or destination table for table transpose(…) and table copy table (…)..  In order restore default configuration, do them with this function call or delete and then re-initialize the table.",
"",
"",
"		Available: <b>configuration parameter names</b>:",
"		=== 150, 150, 700, bold_column_1",
"		Configuration Parameter Name	| Configuration Parameter Values	| Explanation",
"		row not found					|									| Behavior if a table row cannot be found if a table is accessed by a content where the first row with matching content will be used.  <br>Example case: <b>[table : Name, Mike, Phone Nr]</b> is referenced, but no row with \"Mike\" as name is found.",
"										| exception							| Default value.  Exception asserted. Or -1 if row number is retrieved, e.g. in <b>[table : Name, Mike ]</b>",
"										| header row						| Return the header row instead.  Exception asserted in case no header row is available.",
"										| first row							| Return the first row instead.  Exception asserted if this row is not existing.",
"										| last row							| Return the last row istead.   Exception asserted if this row is not existing.",
"										| new row							| Creates a new row.  See description further below.",
"		column not found				|									| ",
"										| exception							| Default value.  Exception asserted.  E.g. in <b>[table: Last Name, 1 ]</b> where \"Last Name\" does not exist as a header name.",
"										| first column						| Refer to first column (column 0) instead.",
"										| last column						| Refer to last column at the right instead.",
"										| new column						| Create a new column with the specified name, even when using this option for reading data.",
"		read numerals					| 'no' or 'yes'						| Table contents looking like numbers (incl. minus sign, decial point) will be read as numbers",
"		scientific notation				| 'no' or 'yes'						| Table contents looking like numbers in scientific notation format will be read as numbers	",
"		read booleans					| 'no' or 'yes'						| 'true' and 'false' will be converted to boolean values",
"		read dates						| 'no' or 'yes'						| Table contents looking like recognizable dates and times will be converted to dates",
"		blank to zero					| 'no' or 'yes'						| Blank fields will be read as 0 (zero).",
"		===",
"",
"		<b>Case on new rows created</b>",
"		A new row, with the contents inserted will be created.<br>",
"		<b>Example 1:</b> [ table : last name, Bonaparte, first name ] = Napoleon;<br>",
"		A new row will be created and two fields ('last name' and 'first name' will be written as specified.<br>",
"		<b>Example 2:</b> row number [] = [ table : last name, Bonaparte ];<br>",
"		The row number of the new row, where last name has already been filled in, will be returned.<br>",
"		first name [ ] = [ table, last name, Bonaparte, first name ] returns a blank because these contents in the new row are not yet written",
"",
""
 ]
		,
	"Call as":			"procedure",
	"Parameter count":	"3, 5, 7, ...",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Min. 1",
		  "Name": "Names of existing tables",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Description":
			[ "Use literal to specify a single table, or a parameter set or softquoted literal (single quotation marks) with names separated by comma to specify multiple tables." ]
		},
		{ "Number": "2, 4, ...",
		  "Name": "Configuration parameter names",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Valid names: See table above" ]
		},
		{ "Number": "3, 5, ...",
		  "Name": "Configuration parameter values",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Valid values: See table above.  Different set of values apply for different configuration parameter names." ]
		}

	],
"Examples" : [
"		table initialize( a,",
"		{ { Name, Answer, Date,         Time,       Blank, Number, Scientific },",
"		  { Nic,  TRUE,   '2020-01-03', '15:30:00', '', '123', '1.2E+3' } } );",
"",
"		for all table columns( a, 0, col[], x[] ) echo( [a:x[],1] , \"  (\", type( [a:x[],1] ), \")\" );",
"",
"		table configure( a, read dates, yes, read booleans, yes, blank to zero, yes, scientific notation, yes );",
"		echo;",
"		for all table columns( a, 0, col[], x[] ) echo( [a:x[],1] , \"  (\", type( [a:x[],1] ), \")\" );",
"",
"		table append ( a,  { Jim } );",
"",
"		echo( [a:Name,John] );	 // Returns -1 as row number.  When refering to other columsn; Exception",
"		table configure( a, row not found, header row );",
"		echo( [a:Name,John] ); // Header row",
"",
"		table configure( a, column not found, new column );",
"		[a:Color,1] = green; // Creates an additional header called \"Color\" instead of asserting an exception",
"		echo( \"Header names: \", [a:..,0]);",
"		echo( [a:Color,1] );"
 ]
	,
	"Output": "automatic"
}


,

"table length" :
{
	"Function Names":	[ "table length" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function returns the number of rows"
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		}
		],
	"Return value":
	[
		{ "Name": "Table length",
		  "Types": [ "numeral" ],
		  "Description": "Number of rows"
		}
	],
	"Exceptions": [ "Table not found" ],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	echo( table length( table 1 ) );",
"",
"	table create ( table 2 );",
"	[ table 2: 0, 10 ] = Hi; // Note: row counting begins with zero",
"",
"	echo( table length( table 2 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table row width" ]
}

,

"table min/max width" :
{
	"Function Names":	[ "table min width", "table max width" ],
	"Documentation":	"Function Description",
"Description" : [
"		<b>table min width</b> returns the number of columns in the narrowest row.<br>",
"		<b>table nax width</b> returns the number of columns in the widest row.<br>",
"		In both cases all rows will be considered, including the header row.",
"",
"		<u>Attention:</u> Contents are already considered blank if they contain white spaces.."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		}
		],
	"Return value":
	[
		{ "Name": "Width",
		  "Types": [ "numeral" ],
		  "Description": "Minimum resp. maximum number of columns"
		}
	],
	"Exceptions": [ "Table not found" ],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Animal, leg count, hair color }, { Worm,  0}, { Bird, 2, colorful }, { Dog, 4 }, { Fly }, { Tick, 8 } } );",
"",
"	echo( table min width ( table 1 ), \" and \", table max width ( table 1 ) );",
"",
"	table create ( table 2 );",
"	[ table 2: 5, 10 ] = Hi; // column position 5 also counts the ones on the left: 0..4",
"",
"	echo( table min width ( table 2 ), \" and \", table max width ( table 2 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table row width" ]
}

,

"table row width" :
{
	"Function Names":	[ "table row width" ],
	"Documentation":	"Function Description",
"Description" : [
"		This table returns the width of a specific table row.<br>",
"		__partial table specification__ is supported: If the context is available, then the current table and optionally current row number will be used."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"0-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "If partial table specification is given: current table name",
		  "Description":
			[ "If context for __partial table specifications__ is provided, then name of table can be skipped if to use the current table." ]
		},
		{ "Number": "1 / 2",
		  "Name": "row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "If partial table specification is given: current table row",
		  "Description":
			[ "Note that the first table row (header row) begins with row 0.  Negative row numbers count from the bottom up. Example: -1 = last row." ]
		}

	],
		"Return value":
	[
		{ "Name": "Width",
		  "Types": [ "numeral" ],
		  "Description": "Number of columns in the row"
		}
	],
	"Exceptions": [ "Table not found", "No context available for partial table specifications", "row number is outside table boundaries" ],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( table 1,",
"	{ { Animal, leg count, hair color }, { Worm,  0}, { Bird, 2, white, brown, yellow }, { Dog, 4 }, { Fly }, {}, { Tick, 8 } } );",
"",
"	echo(\"table 1:\");",
"	table list ( table 1 );",
"",
"	print( table row width( table 1, 1 ),\", \" );		// 2 (2nd row)",
"	print( table row width( table 1	 ),  \", \" );		// 3 (row 0)",
"	echo ( table row width( table 1, -2 ) ); 		// 0 (2nd last row)",
"	with table (table 1, 1)",
"	{",
"		print( table row width( 2 )); // 5 (Row 3)",
"		echo( \", \", table row width(  )); // 2 (Row 1)",
"	}",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table min width", "table max width" ]
}

,

"table existing" :
{
	"Function Names":	[ "table existing" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function checks if a table under this name is existing.  The table is also considered existing if it is empty."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		}
		],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if existing, false if not existing."
		}
	],
"Examples" : [
"		table create( my table );",
"		echo( table existing ( my table ) );",
"		echo( table existing ( my other table ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table clear" ]
}


,

"row" :
{
	"Function Names":	[ "row" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"	If context information for __partial table specifications__ are enabled, this function will return the current row number. <br>",
"	A depth can be specified to refer to nested tables (from the inner tables to outer tables).",
"	This function is very useful if you want to access additional table rows in relation to the current row, e.g. neighboring rows above and/or below",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"0-1",
	"Restrictions":		["Indirect parameter passing is disabled", "context for partial table specification is required" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Depth",
		  "Direction": "input",
		  "Default value": "0",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Specifies the depth in case nested partial table references is activated.  0 refers to the current table, 1 and bigger values to superior tables.  0 is assumed if no parameter is specified." ]
		}
		],
	"Return value":
	[
		{ "Name": "Row number",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table initialize ( table 2,	{ Color, Red, Blue, Green } );",
"",
"	table process( table 1, echo(\"Row number: \", row(), \" \", [Animal], \" has \", [leg count], \" legs.\" ) );",
"",
"	with table( table 1, 2 )",
"	{",
"		table process( table 2,",
"		echo (\"Row # in table 1: \", row(1), \" (\", [^Animal], \") and table 2: \", row(0), \" (\", [Color], \")\" ) );",
"		// Note the accent circumflex in [^Animal]: This symbol refers to next upper context, like row(1).",
"	}"
 ]
	,
	"Output": "automatic","See also": [ "col", "with table", "partial table specifications" ]
}
,

"col" :
{
	"Function Names":	[ "col" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	If context information for __partial table specifications__ are enabled and is also covering a current column number, then this function will return the current column number. <br>",
"	A depth can be specified to refer to nested tables (from the inner tables to outer tables).",
"	This function is very useful if you want to access additional table columns in relation to the current column, e.g. neighboring columns to the left or right.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"0-1",
	"Restrictions":		["Indirect parameter passing is disabled", "context for partial table specification is required" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Depth",
		  "Direction": "input",
		  "Default value": "0",
		  "Types": [ "numeral" ],
		  "Description":
			[ "Specifies the depth in case nested partial table references is activated.  0 refers to the current table, 1 and bigger values to superior tables.  0 is assumed if no parameter is specified." ]
		}
		],
	"Return value":
	[
		{ "Name": "Column number",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	table initialize( animals,",
"		{{ Name, Class, Number of Legs,Surface},",
"		 { Dog, Mammal, 4, Hair }, { Snake, Reptile, 0, Skin }, { Parrot, Bird, 2, Feathers }} );",
"",
"	// The simplified approach: [.] = current table, row and column. [.,0] = current table, column, and row 0",
"",
"	with table ( animals, 2 )",
"	{",
"		for all current table selected columns('*s*')",
"		{",
"			echo( col(), \": Column (\", [.,0], \") = \", [.] );",
"		}",
"	}"
 ]
	,
	"Output": "automatic","See also": [ "row", "with table", "partial table specifications" ]
}
,

"table read column selected rows" :
{
	"Function Names":	[ "table read column selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a column from the table and places the values in the parameter set from the selected rows where the calculated expression returns true.",
"	All blank or non-existing entries will be translated to blank literals.  Automatic type conversion (e.g. numbers to numerals) can be adjusted with the",
"	__table configure(__) function.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Existing column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
		    
		},
		{   "Number":		"3.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Retrieved data",
		  "Types": [ "parameter set" ],
		  "Description": "Data from the different rows in the same column."
		}
	],
"Examples" : [
"	table initialize ( table 1, { { Animal, leg count }, ",
"		{ Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	echo( table read column selected rows( table 1, Animal, [leg count]>4 ) );",
"	echo( table read column selected rows( table 1, leg count, [leg count]>4 ) );",
"",
"	// Numbers are read as numerals. Force reading them as literals:",
"",
"	table configure( table 1, read numerals, no );",
"",
"	// Pay attention to convert leg counts into nuemrals here.",
"	echo( table read column selected rows( table 1, leg count, numeral([leg count])>4 ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table write column selected rows" ]
}
,

"table write column selected rows" :
{
	"Function Names":	[ "table write column selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function  writes values in a parameter set vertically into a specified table column where the rows are chosen with a boolean expression.",
"	The write operation ends if either one of the two criteria are met:",
"	* The last element in the parameter set has been written",
"	* The end of the table has been reached.  The table will not be extended with additional rows in case the parameter set contains more elements than the number of matching rows.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Existing column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{   "Number":		"3.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ],
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{   "Number":		"4.",
			"Name" :		"Contents to write",
			"Direction" :	"input",
			"Types" :		[ "parameter set" ] ,
			"Description" : ["The elements in the parameter set will be written into the appicable rows."]
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "boolean" ],
		  "Description": "true if operation was successful, and false if not."
		}
	],
"Examples" : [
"	include( Support Library ); // for 'table list' function",
"	table initialize ( table 1, { { Animal, leg count },",
"		{ Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	[table 1:2,0] = size;",
"	table write column selected rows( table 1, size, ([Animal]=Dog,Bird), { Not small, Big, Tiny } );",
"	// Note: 'Tiny' will not be written.",
"",
"	table list( table 1 );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table read column selected rows" ]
}
,

"forget memorized table columns" :
{
	"Function Names":	[ "forget memorized table columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Table columns referenced with fixed column names, e.g. <b>[table:Last Name,1]</b>, or simply <b>[Last Name]</b> where context infor are available for __partial table references__,",
"	B4P will automatically memorize the matching column number for the name provided in order to accelerate performance significantly when additional references are made, e.g. in",
"	loops or procedures processing table rows such aslike <b>table process</b>.  The acceleration is achieved by checking the column position for the header name provided only once,",
"	memorize the column number and use it afterwards. ",
"",
"	=== 100, 900, noheader, bold_column_1 noframe",
"	Benefits:  | Very high performance",
"	Drawbacks: | If the same table access statement is executed with a different table where the row has changed, then the column will be referenced.",
"	===",
"",
"	See the code exmaple further below for wanted and unwanted effects.<br>",
"	Implicitly memorizing column numbers can be suppressed with following options:",
"",
"	* Apply a simple formula doing no modifications, e.g. putting the column header name into parentheses.  <br>Both examples are valid: <b>[table:(Last Name),1]</b>, or simply <b>[''+Last Name]</b>",
"	* Set the system variable <b>runtime settings[memorize table columns]</b> to <b>false</b> to suppress all memorizations",
"	* Or call the procedure <b>forget memorized table columns</b> which affects the currently running B4P file (but not other ones like calling or called files).",
""
 ]
		,
	"Call as":			"procedure",
	"Parameter count":	"0",
	"Restrictions":		["Indirect parameter passing is disabled", "context for partial table specification is required" ],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Bird, 2 }, { Dog, 4 }, { Fly, 6 } } );",
"",
"	table initialize ( table 2,",
"	{ { Animal, weapon, leg count }, { Snake, poison, 0 }, { Tiger, teeth, 4 }, { Lobster, claws, 8 } } );",
"",
"	define procedure ( legs, { { table name, literal } } )",
"	{",
"		table process( table name[], echo( [Animal],\": \", [leg count], \" and \", [(leg count)] ) );",
"		echo;                                                    // Note the parentheses around (leg count)",
"	}",
"",
"	legs( table 1 );",
"",
"	echo(\"Hmmmm - Something is strange here ...\");",
"	legs( table 2 ); // Note the mistake outputting the first 'leg count' value.",
"",
"	echo(\"Forget memorized table columns: \");",
"	forget memorized table columns;",
"	legs( table 2 ); // This one is OK",
"",
"	echo(\"If you set runtime settings[memorize table columns] to false, output will always be OK\");",
"	runtime settings[memorize table columns] = false;",
"",
"	legs( table 1 );",
"	legs( table 2 ); // All output will be right.  But looking up continuously may slow performance a bit."
 ]
	,
	"Output": "automatic",
	"See also": [ "memorized table columns" ]
}


,

"table load ..." :
{
	"Function Names":	[ "table load", "table load unchanged" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function loads a table from a file.  Following file formats are supported:",
"",
"	=== 100, 200, 700, bold_column_1, noheader",
"	CSV				| Comma separated files		| Files separated with a specified symbol, typically a comma, semicolon or tab",
"	TEXT			| Text file					| Loads text files into a table consisting of 1 column. Every column contains one line of text.",
"	HTML			| HTML file					| Loads a specifically selected table from the HTML file",
"	XML				| XML (extended markup) file| Loads a complete XML file into a sequential table",
"	JSON			| JavaScript Object Notation format | Loads a complete JSON file into a sequential table",
"	JSON TABLE		| JavaScript Object Notation format | Loads a specifically selected JSON table (which is a 2-dimensional array) into a table",
"	===",
"	",
"	For CSV file formats, the function <b>table load</b> will automatically convert numbers with decimal commas (e.g. 123,456) to numbers with decimal points (123.456)",
"	so they can be processed further and conveniently.  This feature is particularly useful with processing data originating from databases or Excel with settings",
"	specific to Germany and some other countries which use decimal commas. 	If this automatic conversion is not desired because the table data entries with numbers separated",
"	with a comma but seen as actual numbers but possibly a set of two digits, then use the function <b>table load unchanged</b> instead.   In this case, value like 123,456 remain unchanged.",
"	Various database systems, including SAP, Oracle, Salesforce which support exports as \"Excel\" files are in fact HTML or MHTML file formats.",
"",
"	<br><br>",
"	A different and dedicated function called __table load excel file(__) is available to load contemporary Excel files with the endings .xlsx, and .xlsm.  Prerequisite: File is not encrypted.",
"",
"	<br><br>",
"	<b>Recognizing character formats</b>: B4P tries to automatically identify whether the file is ANSI (ASCII), Win 1252, iso8859-1, and UNICOD: UTF-8, UTF-16 or UTF-16 Big Endian.  The identification",
"	is done by preambles in HTML, byte order marks, usage of non-ANSI characters and typical patterns in UTF-16 formats.",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled", "context for partial table specification is required" ],
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "If the table is existing, then it will be initialized first." ]
		},
		{ "Number": "2",
		  "Name": "File name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Specify the file name.  Add the path in front if the file is not located in the current working directory." ]
		},
		{ "Number": "Opt. 3",
		  "Name": "File format descriptor",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "CSV or ?",
"Description" : [
"",
"			=== 150, 600, bold_column_1",
"			Value		| Description",
"			,			| CSV with comma as separator. (Put it into quotation marks ',' when specifying it in the function parameter)",
"			;			| CSV with semicolon as separator. (Put it into quotation marks ';' when specifying it in the function parameter)",
"			?			| CSV with automatic detection of either comma, semicolon or tab.  The first occurence of these symbols will be used as separators. (Put it into quotation marks '?' when specifying it in the function parameter)",
"			tab			| TSV using tab as separator (Do not use quotation marks here because tab is a reserved B4P keyword representing a single tab character)",
"			CSV			| Same functionaliy as '?' with automatic dection of separator symbol",
"			1 character	| CSV with any other single character, e.g. \"/\" as separator",
"			TEXT		| Text file.  The resulting table contains only one column where the column in every row contains the whole line of text.",
"			HTML		| Loads HTML file.  See section on __loading HTML files__.",
"			MHTML		| Loads HTML file.  See section on __loading HTML files__. (Same functionality for time being)",
"			XML			| Loads XML file.  See section on __loading XML files__.",
"			JSON		| Loads entire JSON file.  See section on __loading JSON files__.",
"			JSON TABLE	| Loads a specific table (coded as an array) from the JSON file.  See section on __loading JSON files__.",
"			===",
""
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "XML attributes to keep",
		  "Direction": "input",
		  "Types": [ "parameter set" ],
		  "Default value": "(Keep all attributes)",
"Description" : [
"			Applicable to file format descriptor <b>XML</b> only:<br>",
"			Applicable for file format descriptor XML only: Specify the attributes in XML tags to keep.  The remaining ones will not be loaded.  ",
"			This feature is particularly useful for very large XML files."
 ]
			
		},
		{ "Number": "Alt. Opt. 4",
		  "Name": "Text pattern",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "(look for 1st table)",
"Description" : [
"			Applicable to file format descriptors <b>HTML, MJTML, JSON TABLE</b> only:<br>",
"",
"			Specify a text sequence, e.g. JSON elements, HTML elements, etc. which will be checked against the JSON and HTML text.",
"			This feature is insofar useful when the HTML and JSON files contain multiple tables and a table other than the 1st table should be loaded. ",
"			In this case, find a unique text, e.g. a section name or distinct contents which appears before the table to load, but after the previous tables in the same file.",
"",
"			<br><br>",
"			<u>Attention:</u> Wildcards are supported for JSON, but not for HTML and MHTML. Example: <b>' \"name\" : \"C*\" '</b>  looks for",
"			\"name\" followed by \":\" and followed by \"C...\" (beginning with \"C\"). ",
"",
"			<br><br>",
"			<u>Advice:</u> Put the whole string in single quotation marks beacuse JSON and HTML syntax rules require text contents to be specified in double quotation marks, e.g. <b>'id=\"NASDAQ_Table\"'</b>.",
"			",
"			<br><br>",
"			<u>Advice:</u> Some HTML links contain a pound symbol, e.g. \"en.wikipedia.org/wiki/List_of_Roman_emperors#The_Principate\".  To access the HTML table below this identifier \"The_Principate\"",
"			which is, typical to Wikipedia, the section header \"The Principate\", download the entier HTML file and specify <b>'id=\"The_Principate\"'</b> in this parameter to find next table located below."
 ]
			
		}
		],
	"Return value":
	[
		{ "Name": "Table has contents",
		  "Types": [ "boolean" ],
		  "Description": "true if contents have been loaded, false if nothing has been loaded. In this case, the table is empty."
		}
	],
	"Exceptions": [ "File not found", "File not accessible", "File locked", "Syntax errors in table formats, e.g in HTML, JSON, XML", "File locked. Close the file in the other application and retry" ],
"Examples" : [
"	runtime settings[verbose]= quiet; // Supress blabla",
"",
"	echo(\"Load the Cities file:\");",
"	table load( cities, \"Examples\\Cities.csv\" );",
"	echo(\"Cities: \", join( [cities:City,..], \", \" ) );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table save", "table load excel file", "loading XML files", "loading JSON files" ]
},


 "Loading HTML files" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Loading HTML files" ],
	"Keywords":			[ "loading HTML files" ],
"Description 01:Introduction" : [
"",
"		With the procedure __table load(__),",
"		B4P loads tables defined inside HTML files.  Only the actual contents and without any tags and formatting features will be loaded.",
"		The table must be in the syntax <br>",
"		<b>	&lt;table&gt;, &lt;tr&gt; </b> optionally <b>&lt;th&gt;</b> and <b>&lt;/th&gt;</b>, <b>&lt;/td&gt;</b> and <b>&lt;/td&gt;</b>, , <b>&lt;/tr&gt;</b>.",
"		Script files and nested tables inside tables will be ignored.  In order to load a specific table in the HTML file, use the 4th function parameter in the function __table load(__) to",
"		specify a text pattern.",
"		",
"",
"		=== 300, 700, noheader, bold_column_1 noframe",
"		XML Level		| Nesting level.  Begins with 1",
"		XML Tag			| Applied tag.  E.g. <b>&lt;Country&gt;</b>; puts \"Country\" into a new row at column \"XML Tag\".",
"		XML Usage		| <b>&lt;Country&gt;</b> specifies \"Start\", <br><b>&lt;/Country&gt;</b> specifies \"End\", and<br><b>&lt;Country/&gt;</b> specifies \"Empty\".",
"		XML Contents	| Payload contents following the tag.  E.g. <b>&lt;Country&gt;UK&lt;Country/&gt;</b> specifies \"UK\". Note: All ine breaks are included in the contents.",
"		XML Attributes	| Lists all attribute names (but not the values) referenced in the XML tag",
"		Additional columns: <br>Atribute names | The table gets additional columns with header names corresponding to the identified attribute names.  Whenever attributes are specified in the tags, then the attribute values are listed below these headers.",
"		===",
""
 ]
	,
"Examples 01:" : [
"	include( Support Library );",
"	echo(new line, \"Look up some Roman emperors:\" );",
"	file download overwrite( \"en.wikipedia.org/wiki/List_of_Roman_emperors\", Emperors.html );",
"	table load( emperors, Emperors.html, HTML, 'id=\"The_Principate\"' );",
"	table keep columns ( emperors, Name ); // Otherwise the table is too wide",
"	table list( emperors );",
"	file delete silently( Emperors.html );"
 ]
	,
	"Output 01:":		"automatic",
	"See also": [ "table load", "Loading XML files", "Loading JSON files", "table load excel file" ]
   },




 "Loading XML files" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Loading XML files" ],
	"Keywords":			[ "loading XML files" ],
"Description 01:Introduction" : [
"",
"		With the procedure __table load(__),",
"		B4P loads complete XML files.  The XML file will be put into a structured table.  The table will contain following header names:",
"",
"		=== 300, 700, noheader, bold_column_1 noframe",
"		XML Level		| Nesting level.  Begins with 1",
"		XML Tag			| Applied tag.  E.g. <b>&lt;Country&gt;</b>; puts \"Country\" into a new row at column \"XML Tag\".",
"		XML Usage		| <b>&lt;Country&gt;</b> specifies \"Start\", <br><b>&lt;/Country&gt;</b> specifies \"End\", and<br><b>&lt;Country/&gt;</b> specifies \"Empty\".",
"		XML Contents	| Payload contents following the tag.  E.g. <b>&lt;Country&gt;UK&lt;Country/&gt;</b> specifies \"UK\". Note: All ine breaks are included in the contents.",
"		XML Attributes	| Lists all attribute names (but not the values) referenced in the XML tag",
"		Additional columns: <br>Atribute names | The table gets additional columns with header names corresponding to the identified attribute names.  Whenever attributes are specified in the tags, then the attribute values are listed below these headers.",
"		===",
""
 ]
	,
"Examples 01:" : [
"	include ( Support Library );",
"	table load( t, \"Examples\\Example.xml\", TEXT );",
"",
"	echo(\"This is the XML file:\");",
"	table list( t );",
"",
"	table load( t, \"Examples\\Example.xml\", XML );",
"",
"	echo; echo;",
"	echo(\"This is the loaded table from the XML file:\");",
"	table list( t );",
""
 ]
	,
	"Output 01:":		"automatic",
	"See also": [ "table load", "Loading HTML files", "Loading XML files", "Loading JSON files" ]
   },


   
"Loading JSON files":
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Loading JSON files" ],
	"Keywords":			[ "loading JSON files" ],
"Description 01:Loading whole JSON files" : [
"",
"	Whole json files can be loaded into tables using a similar structural decomposition as applied with __loading XML files__.",
"",
"",
"		B4P loads complete XML files.  The XML file will be put into a structured table.  The table will contain following header names:",
"",
"		=== 300, 700, noheader, bold_column_1 noframe",
"		JSON Level		| Nesting level.  Begins with 0",
"		JSON Name		| For objects, the <b>object name</b> is listed.<br>For simple values, value name is listed.<br>For <b>arrays</b>, the index number is listed.",
"		JSON Type		| One of:<b>object</b>, <b>array</b>, or identified type such as <b>numeral, literal, date, boolean, parameter set</b> and <b>vodi</b>.  The <b>null</b> value translates to <b>void</b>.",
"		JSON Value		| Corresponding values.  Fields are blank for object and array declarations as values follow in the rows below",
"		===",
""
 ]
		,
"Examples 01:" : [
"	include ( Support Library );",
"	table load( t, \"Examples\\Example1.json\", TEXT );",
"",
"	echo(\"This is the JSON file:\");",
"	table list( t );",
"",
"	table load( t, \"Examples\\Example1.json\", JSON );",
"",
"	echo; echo;",
"	echo(\"This is the loaded table from the JSON file:\");",
"	table list( t );"
 ]
	,
	"Output 01:":		"automatic",
"Description 02:Loading tables in JSON Files" : [
"	",
"		With the procedure __table load(__),",
"		B4P is able to load arrays embedded in JSON files into tables.  Without specifying a text pattern, the first array will be used.",
"		If a text pattern is specified, then B4P will skip all contents until the text pattern is found and then parses forward until the",
"		next array is found.",
"		",
"		<br><br>",
"",
"		Since tables are only two-dimensional objects and not trees, some rules and restrictions apply:",
"	",
"		<br><br>",
"		",
"		<b>1. </b>The data to load must be inside an array where each array element represents one row: <b>[ ..., ..., ... ]</b><br>",
"		The elements inside the array may one of further<br>",
"		arrays <b>[ ..., ..., ... ]</b>, <br>",
"		objects <b>{ ... : ..., ... : ... ]</b>, and <br>",
"		simple values like \"literals\" (in double quotation marks), numerals (if needed: use decimal points, not commas), <i>true</i>, <i>false</i> and <i>null</i>.",
"",
"		<br><br>",
"		",
"		<b>2. </b>	In case of arrays, the elements correspond to the table columns added from left to right.<br>",
"		<u>Restriction: </u>No further nested arrays or objects are allowed.<br>",
"		<u>Note:</u>		If the first row is an array, then it is considered to contain header names.",
"",
"		<br><br>",
"",
"		<b>3. </b>In case of objects, the tuples consist of header names followed by colon (:) followed by value.  The column location in the table will be matched with",
"		the header name.  If the header name is missing, then it will be added to the header row.<br>",
"		<u>Restriction:</u> No further nested arrays or objects are allowed.<br>",
"		<u>Note:</u>		If the first row is a collection of objects, then the header names will written into the header row and the data in the 2nd row below.",
"",
"		<br><br>",
"		",
"		4.	In case of simple values, these values will be written into the first column.",
"",
""
 ]
	,
"Examples 02:" : [
"	include ( Support Library );",
"	echo(\"The same JSON file is loaded as shown in the 1st code example.\", new line);",
"	table load( t, \"Examples\\Example1.json\", JSON TABLE );",
"",
"	echo; echo;",
"	echo(\"First tabe loaded:\");",
"	table list( t );",
"",
"	table load( t, \"Examples\\Example1.json\", JSON TABLE, \"table_1\" );",
"",
"	echo; echo;",
"	echo(\"This is the loaded table below table_1:\");",
"	table list( t );"
 ]
	,
	"Output 02:":		"automatic",
	"See also": [ "table load", "Loading XML files", "Loading HTML files" ]   

}

,

"table save ..." :
{
	"Function Names":	[ "table save", "table save with local decimal separator", "table save with decimal comma", "table save multiple" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function saves 1 or more tables to a file.  Following file formats are supported and can be specified in the 2nd function parameter:",
"",
"	=== 100, 200, 700, bold_column_1, noheader",
"	CSV				| Comma separated files		| Uses list separation symbols according to locale settings.",
"	Text files		| Plain text				| Text files can be saved by using 'new line' as list separator.",
"	EXCEL			| MS Excel XML 2003 Format	| Excel compatible XML format which supports multiple tables in one file as well as __styles__.",
"	HTML			| HTML format				| Saves the table in a HTML file and supports __styles__. The HTML file can be opened with Excel and with web browsers.",
"	JSON			| JavaScript Object Notation format | Saves the table in a JSON file.  Various options exist.",
"	XML				| XML (extended markup) file| (Not yet supported)",
"	===",
"",
"	For CSV files, the following function names save the files differently:<br>",
"	<b>table save with local decimal separator</b> will use the decimal symbol for numbers as specified in the locale setting.  It's a comma for settings related to Germany.<br>",
"	<b>table save with decimal comma</b> will always use the comma as decimal separator symbol.<br>",
"	<b>table save</b> will always use the point as decimal separator symbol.<br>",
"	<u>Note: </u>No thousand separators will be used.<br>",
"",
"	<br><br>",
"",
"	<b>table save multiple</b> is supported with following formats: HTML, EXCEL, JSON arrays and JSON objects, but not with CSV and TEXT.",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-6",
	"Restrictions":		["Indirect parameter passing is disabled", "context for partial table specification is required" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name(s) of table(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Description":
			[ "Provide 1 table as literal unless the function <b>table save multiple</b> is used." ]
		},
		{ "Number": "- / 2.",
		  "Name": "Sheet name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"				Only applicable for <b>table save multiple</b>:  For each table provided in the 1st function parameter, a corresponding sheet name needs to be provided.",
"				When saving in Excel format, these sheet names will appar as tab names at the bottom of the displayed worksheets."
 ]
				
		},
		{ "Number": "2. / 3.",
		  "Name": "File name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Specify the file name.  Add the path in front if the file is not located in the current working directory." ]
		},
		{ "Number": "Opt. 3. / 4.",
		  "Name": "Format descriptor",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "LOCAL (CSV using decimal symbol according to locale settings)",
"Description" : [
"",
"		  === 150, 600, bold_column_1",
"			Value		| Description",
"			,			| CSV using comma as separator. (Put it into quotation marks ',' when specifying it in the function parameter)",
"			;			| CSV using semicolon as separator. (Put it into quotation marks ';' when specifying it in the function parameter)",
"			tab			| TSV using tab as separator (Do not use quotation marks here because tab is a reserved B4P keyword representing a single tab character)",
"			CSV			| CSV using comma as separator",
"			LOCAL		| CSV using decimal symbol according to locale settings, semicolon is several European countries, commas in N. America",
"			1 character	| CSV format using any other single character, e.g. \"/\" as separator symbol",
"			TEXT		| Text file.  Same as if 'new line' specified as separator.  Every table entry takes one line of text in the file.",
"			HTML		| Saves the file as HTML file. The file can be opened with web browsers and Excel.",
"			XML			| (Not yet supported)",
"			JSON arrays	| Save table(s) as 2-dimensional JSON arrays",
"			JSON objects| Save table(s) as 1-dimensional JSON arrays containing JSON object(s) where object names correspond to header names and object values to the data.",
"			JSON lean	| Similar to jSON objects, but blank table contents are skipped.",
"			==="
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Character set",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "utf-8 (UNICODE)",
"Description" : [
"			=== 150, 600, bold_column_1",
"			Value		| Character set",
"			ansi		| Text format in ANSI- Non-ASCII symbols are converted to question mark, including foreign symbols and the Euro symbol (€)",
"			iso8859-1	| 8-bit West European text format, but without symbols in 0x80 – 0x9F range which also excludes the Euro (€) symbol",
"			win1252		| Windows West European text format, incl. Euro (€) symbol",
"			utf-8		| UNICODE 8-bit format (supported by Excel)",
"			utf-16		| UNICODE 16-bit format (supported by Excel)",
"			utf-16 big endian | UNICODE 16-bit format (rarely used and not supported by Excel) Use only for data export to \"Big Endian\" based systems.",
"			===",
"			<u>Attention: </u> Put the values into quotation marks if they contain a hyphen, otherwise the hyphen is interpreted as a minus sign.",
"			<u>Advice: </u>If the file has an exotic character set, consider using \"win1252\" for full 8-bit character space, and interprete the character codes on your own."
 ]
			
		},
		{ "Number": "Opt. 5. / 6.",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "default",
"Description" : [
"		    At present, one option is defined in addition to the default option:",
"			=== 200, 550, bold_column_1",
"			default					| No specific option applies.",
"			end without new line	| Applicable to simple formats (CSV, tab, TEXT, ...): Last row contains no concluding new line symbol.",
"			==="
 ]
			
		}

		],
	"Return value":
	[
		{ "Name": "Success",
		  "Types": [ "boolean" ],
		  "Description": "If not successul, then an exception has happened"
		}
	],
	"Exceptions": [ "Path not found", "File not accessible", "File locked", "Syntax errors in table formats, e.g in HTML, JSON, XML", "File locked. Close the file in the other application and retry" ],
"Examples" : [
"	include( Support Library );",
"	table initialize( t, { { Object, Height in meters }, { dog, 0.5 }, { horse, 1.8 }, { elephant, 2.5 }} );",
"",
"	table list ( t ); echo;",
"	table save( t, animals.csv, CSV );",
"",
"	table load( t, animals.csv, \";\" );",
"	table list ( t ); echo;",
"",
"	table load( t, animals.csv, \",\" );",
"	echo(\"Table loaded with wrong separator symbol.  Outcome looks like this:\");",
"	table list ( t ); echo;",
"",
"	file delete silently( animals.csv );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table load" , "Saving JSON files" ]
},




"Saving JSON files" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Saving JSON files" ],
"Description 01:Introduction" : [
"",
"	Three approache",
"",
"	Whole json files can be loaded into tables using a similar structural decomposition as applied with __loading XML files__.",
"",
"",
"		B4P loads complete XML files.  The XML file will be put into a structured table.  The table will contain following header names:",
"",
"		=== 300, 700, noheader, bold_column_1 noframe",
"		JSON arrays		| The table is modeled as a nested (i.e. 2-dimensional) array where the 1st row contains the header names",
"		JSON objects	| The table is modeled as a simple (i.e. 1-dimensional) which contains objects.  Header names translate to object names and the data below to object values.",
"		JSON lean		| Similar to JSON objects, with only difference that blank data entries are not mentioned in the JSON file.",
"		===",
""
 ]
		,

"Description 02:Using 'JSON arrays' approach" : [
"",
"		In this appraoch, the JSON files uses two distinct names:",
"		* Object name called \"name\" to include the table name",
"		* Object name called \"table\" to include the contents",
"",
""
 ]
		,
"Examples 02:" : [
"	include ( Support Library );",
"	table initialize( table 1, {{ Last Name, 1st Name, Age},",
"		{ Miller, Michelle, 30 }, { Johnson, Jane, 40 }, { '', Nick, 50 }} );",
"",
"	table initialize( table 2, {{ Pet, Hair color},",
"		{ Dog, Beige }, { Cat, '' }, { Mouse, Gray }} );",
"",
"	echo(\"table 1:\");",
"	table list( table 1 );",
"",
"	echo(\"table 2:\");",
"	table list( table 2 );",
"",
"	echo(new line, \"Save both tables as JSON arrays\" );",
"	table save( { table 1, table 2} , \"Output.json\", JSON arrays );",
"	table load( text, \"Output.json\", TEXT );",
"",
"	echo(\"table 1 & 2 as JSON arrays:_\");",
"	table list( text );",
""
 ]
	,
	"Output 02:":		"automatic",

"Description 03:Using 'JSON objects' and 'JSON lean' approach" : [
"",
"		In this appraoch, the JSON files uses two distinct names:",
"		* Object name called \"name\" to include the table name",
"		* Object name called \"table\" to include the contents",
"",
"		<b>Attention</b>You need to ensure that the all header names in the table are unique.  Otherwise the JSON contains some confusing data with mulitple values",
"		assigned to same JSON names.",
""
 ]
		,
"Examples 03:" : [
"	include ( Support Library );",
"	table initialize( table 1, {{ Last Name, 1st Name, Age},",
"		{ Miller, Michelle, 30 }, { Johnson, Jane, 40 }, { '', Nick, 50 }} );",
"",
"	table initialize( table 2, {{ Pet, Hair color},",
"		{ Dog, Beige }, { Cat, '' }, { Mouse, Gray }} );",
"",
"	echo(\"table 1:\");",
"	table list( table 1 );",
"",
"	echo(\"table 2:\");",
"	table list( table 2 );",
"",
"	echo(new line, \"Save both tables as JSON objects\" );",
"	table save( { table 1, table 2} , \"Output.json\", JSON objects );",
"	table load( text, \"Output.json\", TEXT );",
"",
"	echo(\"table 1 & 2 as JSON objects\");",
"	table list( text );",
"",
"	echo(new line, \"Save both tables as JSON objects\" );",
"	table save( { table 1, table 2} , \"Output.json\", JSON lean );",
"	table load( text, \"Output.json\", TEXT );",
"",
"	echo(\"table 1 & 2 as JSON objects:\");",
"	table list( text );",
"",
"	file delete silently( Output.json );",
""
 ]
	,
	"Output 03:":		"automatic",
	"See also": [ "table save", "Loading JSON files" ]
}



,

"table check header" :
{
	"Function Names":	[ "table check header" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"	This function checks if a header with the specified header name is existing. ",
"	If the header is found, then the column number will be returned.  Otherwise, an exception will be asserted.",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Header name or column number",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		}

	],
	"Return value":
	[
		{ "Name": "Column number",
		  "Types": [ "numeral" ],
		  "Description": "Note: 1st column begins with 0"
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( table 1,",
"	{ { Last Name, First Name, Phone No, Age }, { Larsson, Lara, \"1-212-555-1212\", 28 } } );",
"",
"	echo( table check header ( table 1, Phone No ) );",
"//	echo( table check header ( table 1, Gender ) ); // Not executed now, would cause exception",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table column number", "table check headers" ]
},

"table column number" :
{
	"Function Names":	[ "table column number" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function checks if a header with the specified header name is existing.",
"	If the header is found, then the column number will be returned.  Otherwise, -1 is returned.",
""
 ]
		,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Header name or column number",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Column number",
		  "Types": [ "numeral" ],
		  "Description": "Note: 1st column begins with 0. -1 is returned if the column cannot be found."
		}
	],
	"Exceptions": [ "Table not found" ],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( table 1,",
"	{ { Last Name, First Name, Phone No, Age }, { Larsson, Lara, \"1-212-555-1212\", 28 } } );",
"",
"	echo( table column number ( table 1, Phone No ) );",
"	echo( table column number ( table 1, Gender ) ); // Returns -1",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table check header" ]
}


,

"table check headers ..." :
{
	"Function Names":	[ "table check headers", "table check headers silently" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		THis function checks the table for column headers in a smart way according to specific rules you can provide. ",
"		If no further options are specified, then just the existence of the headers will be checked.  ",
"		The function <b>table check headers silently</b> suppresses exceptions in case the header check fails and returns appropriate return values instead."
 ]
		,
	"Call as":			"function",
	"Parameter count":	"Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Check header option 1",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "must exist",
"Description" : [
"			This option affects the header checking rules.  See table below for available values.  The value <i>n</i> used in the table below stands for number of columns in row 0.",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			must not exist				|	Specified header names <i>must not exist</i> in the table.<br>Specified column numbers must like outside range 0..<i>n</i>-1.<br>All negative numbers are rejected.",
"			may exist					|	Specified headers names may exist, i.e. all header names are accepted.<br>All positive column numbers are accepted.<br>Negative numbers from -<i>n</i>..-1 are accepted.",
"			create if missing			|	Create additional headers if the headers do not yet exist.  The rows below those new headers will not be initialized!<br>Positive column numbers from 0 to <i>n</i> are accepted.  If <i>n</i> is specified, then an additional blank column will be created.  <br>Negative numbers: -1 refers to next blank column beyond the last existing one.  Smaller numbers refer to existing columns further to the left.  Values smaller than -(<i>n</i>+1) will be rejected.",
"			must exist or any number	|	The <must exist> rule desribed below applies if names are provided.<br>The <b>may exist</b> rule described above applies if positive or negative column numbers are provided.",
"			must exist					|	The specified header names must exist<br>Specifeid column numbers must be within 0..<i>n</i>-1 or -<i>n</i>..-1.",
"			unique						|	Like <b>must exist</b>, but also checks that the specified column headers are unique in the table, i.e. they exist only once.",
"			full match					|	Like <b>unique</b>, however the table must not contain more (or less) headers than those specified to check.  The ordering does not matter. It's like tolerating full number of white pins after a guess in the <i>Master Mind</i> game.",
"			sequence					|	Like <b>unique</b>, but listed parameters are in left-to-right sequence. The checked headers do not need to be adjacent.",
"			strict sequence				|	Like <b>sequence</b> but all headers must be adjacent, being next to each other from left to right",
"			identical					|	Combination of <b>full match</b> and <b>strict sequence</b>. The headers provided and table headers must be identical: Same header names in the same sequence.  This corresponds to full number of black pins in the <i>Master Mind</i> game.",
"			===",
""
 ]
			
		},

		{ "Number": "Opt. 4, 5, etc.",
		  "Name": "Additional option(s)",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Additional checking options:",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			no repetition				|	Column specifications must not repeat (i.e. no repeated header names, no repeated column numbers)",
"			no numbers					|	No column numbers allowed in the 2nd parameter. Only header names are allowed",
"			no blanks					|	No blank headers allowed.",
"			ignore blanks				|	Ignore blank headers (supersedes previous option 'no blanks' if specified)",
"			only 1						|	Exactly 1 column to be specified",
"			max 1						|	0 or 1 columns to be specified (not more)",
"			min 1						|	Min. 1 column to be specified (not 0).  <br><u>Note:</u> Specifying both 'min 1' and 'max 1' means 'only 1'",
"			===",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Feedback",
		  "Types": [ "literal" ],
"Description" : [
"			<b>ok</b> (lower case) is returned if no issues have been identified.<br>",
"			In all other cases, if <b>table check headers</b> is specified, exeptions will be asserted.  If the function <b>table check headers silently</b> is called instead,",
"			following additional values can be returned:",
"		  ",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			ok						|	All OK (Note: lower case letters)",
"			empty and ok			|   Applicable to option 'may exist': No matches found, but deemed OK.",
"			not found				|	Header name not found, or column number not inside valid range",
"			already existing		|	Header name is alrady existing resp. column number is inside the range of existing headers",
"			duplicate				|	A duplicated header name has been found in the table",
"			no full match			|	Header names in the table not matching.",
"			incorrect sequence		|	Specified headers / column numbers are not in a correct left-to-right sequence.",
"			repeated				|	Repeated reference to same table colummn",
"			forbidden number		|	Encountered forbidden column number in the 2nd function parameter. Only header names are allowed",
"			forbidden blank			|	Encountered forbidden blank header name in the 2nd function parameter.",
"			wrong count				|	Wrong number of columns specified",
"			range error				|	Specified column lies outside the range",
"			===",
""
 ]
			
		}
	],
	"Exceptions": [ "Table not found", "Various exceptions resulting from issues identified while checking headers" ],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Name, Street, Town, Country }, { Miller, \"...\" } } );",
"",
"	echo(\"1. Demonstrate 'must not exist':\");",
"	echo( table check headers silently( table 1, {\"State\", \"Province\"}, must not exist ) );	// OK",
"	echo( table check headers silently( table 1, {\"Town\", \"State\"} , must not exist ) );	// Not OK",
"	echo( table check headers silently( table 1, 10,      must not exist ) );	// OK",
"	echo( table check headers silently( table 1, -1,      must not exist ) );	// Not OK (last column exists)",
"	echo;",
"",
"	echo(\"2. Demonstrate 'may exist':\");",
"	echo( table check headers silently( table 1, {\"State\", \"Province\"}, may exist ) );	// Empty and OK",
"	echo( table check headers silently( table 1, {\"Town\", \"Province\"}, may exist ) );	// OK",
"	echo( table check headers silently( table 1, {\"Town\", \"State\"} , may exist ) );	// OK",
"	echo( table check headers silently( table 1, 10,      must not exist ) );	// OK",
"	echo( table check headers silently( table 1, -11,      must not exist ) );	// Not OK (range error)",
"	echo;",
"",
"	echo(\"3. Demonstrate 'create if missing':\");",
"	table copy table ( table 1, table 2 );",
"	echo( table check headers silently( table 2, {\"State\", \"City\"}, create if missing ) );	// OK",
"	echo( \"Header row: \", [table 2: .., 0 ] );",
"	echo;",
"",
"	echo(\"4. Demonstrate 'must exist':\");",
"	echo( table check headers silently( table 1, {\"Name\", \"Town\"}, must exist ) );	// OK",
"	echo( table check headers silently( table 1, {\"Name\", \"State\"} , must exist ) );	// Not OK",
"	echo( table check headers silently( table 1, 10,      must exist ) );	// Not OK",
"	echo( table check headers silently( table 1, -1,      must exist ) ); // OK (last column exists)",
"	echo( table check headers silently( table 1, {},      must exist ) ); // Empty and oK",
"	echo;",
"",
"	echo(\"5. Demonstrate 'unique':\");",
"	table initialize ( table 2,",
"	{ { Name, Street, Town, Country, Town }, { Miller, \"...\" } } );",
"	echo( table check headers silently( table 1, \"Town\", unique ) );	// OK",
"	echo( table check headers silently( table 2, \"Town\", unique ) );	// Not OK",
"	echo( table check headers silently( table 2, -1, unique ) );		// Not OK (Also \"Town\")",
"	echo;",
"",
"	echo(\"6. Demonstrate 'full match':\");",
"	echo( table check headers silently( table 1, { Country, Town, Street, Name }, full match ) );	// OK",
"	echo( table check headers silently( table 1, { 1,3,2,0  }, full match ) );	// OK",
"	echo( table check headers silently( table 1, { Country, Town, Street, Name, Name }, full match ) );	// Not OK",
"	echo;",
"",
"	echo(\"7. Demonstrate 'sequence':\");",
"	echo( table check headers silently( table 1, { Name, Country }, sequence ) );	// OK",
"	echo( table check headers silently( table 1, { Country, Name }, sequence ) );	// Not OK",
"	echo( table check headers silently( table 1, { 0,2,3  }, sequence ) );	// OK",
"	echo( table check headers silently( table 1, { 0,3,2  }, sequence ) );	// Not OK",
"	echo;",
"",
"	echo(\"8.Demonstrate 'strict sequence':\");",
"	echo( table check headers silently( table 1, { Name, Country }, strict sequence ) );	// Not OK",
"	echo( table check headers silently( table 1, { Town, Country }, strict sequence ) );	// OK",
"	echo( table check headers silently( table 1, { 0,1,2  }, strict sequence ) );	// OK",
"	echo( table check headers silently( table 1, { 0,3,3  }, strict sequence ) );	// Not OK",
"	echo;",
"",
"	echo(\"9. Demonstrate 'identical':\");",
"	echo( table check headers silently( table 1, { Name, Street, Town, Country }, identical ) );	// OK",
"	echo( table check headers silently( table 1, { Street, Name, Town, Country }, identical ) );	// Not OK",
"	echo( table check headers silently( table 1, { 0,1,2,3  }, identical) );	// OK",
"	echo( table check headers silently( table 1, { -4,-3,-2,-1  }, identical ) );	// Also OK",
"	echo;",
"",
"	echo(\"10. Demonstrate 'no repetition':\");",
"	echo( table check headers silently( table 1, { Name, Town, Town }, must exist ) );	// OK",
"	echo( table check headers silently( table 1, { Name, Town, Town }, must exist, no repetition ) );	// Not OK",
"	echo;",
"",
"	echo(\"11. Demonstrate 'no numbers':\");",
"	echo( table check headers silently( table 1, { Name, Town }, must exist, no numbers ) );	// OK",
"	echo( table check headers silently( table 1, { Name, 2 }, must exist, no numbers ) );	// Not OK",
"	echo;",
"",
"	echo(\"12. Demonstrate 'no blanks':\");",
"	echo( table check headers silently( table 1, { Name, Town, \"\" }, must exist, no blanks ) );	// Not OK",
"	echo;",
"",
"	echo(\"13. Demonstrate 'ignore blanks':\");",
"	echo( table check headers silently( table 1, { Name, Town, \"\" }, must exist, ignore blanks ) );	// OK",
"	echo;",
"",
"	echo(\"14. Demonstrate 'max 1':\");",
"	echo( table check headers silently( table 1, { Name, Town }, must exist, max 1 ) ); // Not OK",
"	echo( table check headers silently( table 1, { Name  }, must exist, max 1 ) );	//  OK",
"	echo( table check headers silently( table 1, {  }, must exist, max 1 ) );	//  OK",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table check header", "table insert missing columns" ]
}

,

"table rename ... headers" :
{
	"Function Names":	[ "table rename headers", "table rename column headers", "table rename existing headers" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function renames specified table headers.",
"	Whereas <b>table rename column headers</b> asserts exceptions if headers are not found, the <b>table rename existing headers</b> will simply ignore",
"	the headers not found.",
"",
"	<br><br>",
"",
"	<u>Note: </u>Every table header will be renamed only once.",
"",
"	<br><br>",
"	The function name <b>table rename column headers</b> is declared obsolete and will be replaced by the new name <b>table rename headers</b> in order to make",
"	the naming more consistent.",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing header name(s) or column number(s)",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3",
		  "Name": "New header name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			List the new header names corresponding to the existing ones specified in the previous function parameter.<br>",
"			Use literal to specify a single table, or a parameter set or softquoted literal (single quotation marks) with names separated by comma to specify multiple columns."
 ]
			
		}

	],
	"Return value":
	[
		{ "Name": "Number of renamings done",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "Header name not found","number of existing and new headers is inconsistent" ],
"Examples" : [
"	include( Support Library );",
"	table initialize ( table, { { First Name, Last Name, Phone No, Age }, { Archer, Jim, \"1-212-555-1212\", 28 } } );",
"",
"	count[] = table rename existing headers( table, ' Last Name, First Name, Family Name ', ' First Name, Last Name, Other Name ' );",
"	//        table rename existing headers( table, { Last Name, First Name, Family Name }, {First Name, Last Name, Other Name} );",
"	//        Both formulations are valid (see 2+3. parameter: Either softquoted literal with comma separated items or parameters)",
"",
"	table list ( table );",
"	echo;",
"	echo(\"Number of headers renamed: \", count[]);",
"",
"	echo( new line, \"This example demonstrates that each \"First Name\" column is touched only once.\", new line );",
"	table initialize ( table, 	{ { First Name, First Name, Phone No, Age }, { Tanner, Lisa, \"1-212-555-1212\", 28 } } );",
"	table rename headers( table,  { First Name, First Name }, { Last Name, Given Name } );",
"	table list ( table );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table correct headers", "table check headers" ]
}


,

"table correct headers ..." :
{
	"Function Names":	[ "table correct headers", "table correct headers ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function helps to correct or align column header names and is particularly useful for tables originating from different sources where ",
"		wordings or spellings of header names show slight differences and you want to harmonize them easily be correcting them.  The functions described",
"		here differ from __table rename headers(__) in the 2nd parameter: Instead of specifying specific columns, comparison patterns are used to check",
"		all headers from left to right until the first match is found.",
"		<br><br>",
"		The function name <b>table correct headers ignore case</b> ignore case sensitivity while comparing headers with comparison patterns provided.<br>",
"		No exceptions are asserted if a comparison of a matching pattern with the table headers results in no matches.",
"",
"		<br><br>",
"		<u>Note:</u> This function supports __wildcard symbols__ if the literals used for comparison patterns are softquoted, i.e. using single quotation marks.",
"",
""
 ]
		,
	"Call as":			"procedure or function",
	"Parameter count":	"3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing header name(s) or column number(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"				Specify the comparison patterns.<br>",
"				* Unquoted or quoted literals as elements in parameter set: True comparison of contents without wildcards, e.g. { Name, \"Street\" }<br>",
"				* Softquoted literals in parameter set: You can use __wildcard symbols__, e.g. { '* Name', 'City,Town' }<br>",
"				* One quoted literal specifies just one item to compare, e.g. \"Last Name\"<br>",
"				* One softquoted literal converts the contents into a parameter set and treats contents as unquoted resp. quoted literals."
 ]
				
		},
		{ "Number": "3",
		  "Name": "New header name(s)",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			List the new header names corresponding to the existing ones specified in the previous function parameter.<br>",
"			Use literal to specify a single table, or a parameter set or softquoted literal (single quotation marks) with names separated by comma to specify multiple columns."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of corrections accomplished",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "number of comparison pattersn and new headers is inconsistent" ],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( table, { { first  name, Lastname, Phone No, Age }, { Jim, Archer, \"1-212-555-1212\", 28 } } );",
"",
"	count[] = table correct headers ignore case( table, {'Last*name', 'First*name', 'Family*' },",
"		{ Last Name, First Name, Last Name } );",
"",
"	table list ( table );",
"	echo;",
"	echo(\"Number of headers corrected: \", count[]);"
 ]
	,
	"Output": "automatic",
	"See also": [ "table rename existing headers" ]
}

,

"table search ..." :
{
	"Function Names":	[ "table search", "table search vertically" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The table will be searched until the first (or next) pattern is matching the comparison expression. <br>",
"	<b>table search</b> searches the table horizontally line by line.  To include header row, specify 0 as starting row number, otherwise 1 (or a bigger number if needed).<br>",
"	<b>table search vertically</b> searches the table vertically through the columns and then proceeding to the right.",
"	In this case, searching at the next colum begins at row 1 downward and not with the header row.",
"",
"	<br><br>",
"	<u>Attention: </u>All values from the table being compared are literals, even if they contain numbers."
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"4-6",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Value compared with the table contents",
			"Direction" :	"code",
			"Types" :		[ "comparison expression", ":literal" ] ,
"Description" : [
"			This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__."
 ]
		  
		},
		{ "Number": "3.",
		  "Name": "Row number",
		  "Direction": "io",
		  "Types": [ "numeral" ],
		  "Description": [ "The row number is considered the starting row number for the search.  When a match has been found, then the corresponding row number will be returned." ]
		},
		{ "Number": "4.",
		  "Name": "Column number",
		  "Direction": "io",
		  "Types": [ "numeral" ],
		  "Description": [ "The column number is considered the starting column number for the search.  When a match has been found, then the corresponding row number will be returned." ]
		},
		{ "Number": "Opt. 5",
		  "Name": "Column representing left boundary for searching",
		  "Direction": "input",
		  "Default value": "0 (1st column)",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Specify exactly one header name or column number where to start searching and comparing from left to right",
""
 ]
			
		},
		{ "Number": "Opt. 6",
		  "Name": "Column representing right boundary for searching",
		  "Direction": "input",
		  "Default value": "0 (1st column)",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Specify exactly one header name or column number where to stop searching and comparing from left to right",
""
 ]
			

		}
	],
	"Return value":
	[
		{ "Name": "Match found",
		  "Types": [ "boolean" ],
		  "Description": "true if match has been found, otherwise false."
		}
	],


"Examples" : [
"	table initialize( table 1,",
"		{ { A,  B,  C,  D,  E,  A,  G },",
"		  { E,  C,  D,  B,  A,  H,  X },",
"		  { T,  E,  B,  C,  A,  E,  A  } } );",
"",
"	row[] = 0; col[] = 0;",
"	echo(\"Search entire table\");",
"	while ( table search( table 1, (A), row[], col[] ) = true)",
"	{",
"		echo(\"Row: \", row[], \"  Col: \", col[]++ );",
"	}",
"",
"	row[] = 0; col[] = 0;",
"	echo(\"Search entire table vertically (Attention: begins at row 1 at next column\");",
"	while ( table search vertically( table 1, (A), row[], col[] ) = true)",
"	{",
"		echo(\"Row: \", row[]++, \"  Col: \", col[] );",
"	}",
"",
"	row[] = 0; col[] = 0;",
"	echo(\"Limit search to column 1 - 4:\");",
"	while ( table search( table 1, (A), row[], col[], B, E ) = true)",
"	{",
"		echo(\"Row: \", row[], \"  Col: \", col[]++ );",
"	}"
 ]
	,
	"Output": "automatic",
	"See also": [ "table search header row" ]
}
,

"table find row" :
{
	"Function Names":	[ "table find row" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function compares a table by checking the the data in the columns provided with the values provided in the 3rd function",
"	parameter.  The comparison is carried in the same way as if the table cells are compared with the values using the __equal to__ sign <b>=</b>.",
"	Depending on the table configiuration (see __table configure(__), the values retrieved from the table may be converted automatically,",
"	which is in the case for reading numerals in the default case.",
"",
"	<br><br>",
"	Wildcards are supported in the matching patterns if the comparison values are provided as __softquoted literals__ and contain wildcard symbols",
"	and strings are compared.  Mismatching types return false, e.g numeric 1 compared with literal '1'.",
"	",
"	<br><br>",
"	If a row is found, then the row number will be returned.   Otherwise, this function returns -1.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Header names and/or column numbers to compare",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified"
 ]
			
		},
		{ "Number": "3",
		  "Name": "Comparison values or patterns",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"				The nummber of elements must match with the number of headers (2nd function parameter).  ",
"				Specify the comparison patterns.<br>",
"				* Unquoted or quoted literals as elements in parameter set: True comparison of contents without wildcards, e.g. { Name, \"Street\" }<br>",
"				* Softquoted literals in parameter set: You can use __wildcard symbols__, e.g. { '* Name', 'City,Town' }<br>",
"				* One quoted literal specifies just one item to compare, e.g. \"Last Name\"<br>",
"				* One softquoted literal converts the contents into a parameter set and treats contents as unquoted resp. quoted literals."
 ]
				
		},
		{ "Number": "Opt. 4",
		  "Name": "Starting row number",
		  "Direction": "input",
		  "Types": "numeral",
		  "Default value": "1 (1st data row)",
"Description" : [
"				The search begins at the specified row number.  Negative indexing is supported."
 ]
				
		}
	],
	"Return value":
	[
		{ "Name": "Row number with match found",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no match has been found."
		}
	],
"Examples" : [
"	table load( c, \"Examples\\Cities.csv\");",
"",
"	row[] = table find row( c, { City, Country }, { Los Angeles, USA } );",
"	echo(\"Los Angeles is found in row: \", row[] );",
"",
"	row[] = table find row( c, { City, Country }, { Los Angeles, CAN } );",
"	echo(\"Los Angeles is not found, returning : \", row[] );",
"",
"	row[] = table find row( c, { City, Country }, { Los Angeles, 'U*' } );",
"	echo(\"Los angeles is found in row: \", row[] );",
"",
"	row[] = table find row( c, { City, Country }, { Los Angeles, \"U*\" } );",
"	echo(\"Los Angeles is not found, returning : \", row[] );",
"",
"	row[] = table find row( c, { Inhabitants, Country }, { 404000, '*' } );",
"	echo(\"Zürich found in row: \", row[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table search row" ]
}

,

"table search row" :
{
	"Function Names":	[ "table search row" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function works through all table rows until the expression specfified returns true.  The row number is returned.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",	
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Starting row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Note: Negative row numbers count from last row upwards" ]
		}
	],
	"Return value":
	[
		{ "Name": "Row number with match found",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no match has been found."
		}
	],
"Examples" : [
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	r[1] = table search row( table 1, [Animal]='*i*' );",
"	r[2] = table search row( table 1, ([Animal]='*i*'), r[1]+1 );",
"	r[3] = table search row( table 1, ([Animal]='*i*'), r[2]+1 );",
"",
"	// Note that comparison is in parentheses, so the next function parameter is not regarded",
"	// as part of a comparison expression.",
"",
"	echo( \"1st match: \", r[1] );",
"	echo( \"2nd match: \", r[2] );",
"	echo( \"3rd match: \", r[3] ); // -1 because only 2 words containing 'i' exist."
 ]
	,
	"Output": "automatic",
	"See also": [ "table read column selected rows", "table find row", "table selected columns" ]
}
,

"table selected rows" :
{
	"Function Names":	[ "table selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function obtains the row numbers of the selected rows and returns them as a parameter set containing numerals.  Row 0 (header row) is not checked.",
"	This function is very useful for searching contents in known columns and retrieving all matches.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Applicable to function <b>table copy columns selected rows</b> only.",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Retrieved row numbers",
		  "Types": [ "parameter set" ],
		  "Description": "The parameter set contains numerals.  An empty parameter set is returned if there are no matches."
		}
	],
"Examples" : [
"	table initialize ( table 1, { { Animal, leg count },",
"		{ Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	echo( table selected rows( table 1, mod( [leg count], 4 ) = 0 ) );",
"	// Leg countsa are 0, 4, 8, row numbers are 1, 3, 5.",
"",
"	echo( table selected rows( table 1, ([Animal]='B*','D*') ) );",
"	// Returns rows 2 and 3."
 ]
	,
	"Output": "automatic",
	"See also": [ "table read column selected rows", "table search row", "table selected columns" ]
}
,

"table selected columns/headers ..." :
{
	"Function Names":	[ "table selected columns", "table selected column numbers", "table selected headers" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function searches the contents in one specified table row and returns the following:<br>",
"	With <b>table selected columns</b>: Actual values in the columns where the matches are successful<br>",
"	With <b>table selected column numbers</b>: The column numbers where where the matches are successful<br>",
"	With <b>table selected column numbers</b>: The corresponding header names of the columns where matches are successful",
"",
"	<br><br>",
"	<u>Attention: </u>All values from the table being compared are literals, even if they contain numbers."
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Value compared with the table contents",
			"Direction" :	"code",
			"Types" :		[ "comparison expression", ":literal" ] ,
"Description" : [
"			This parameter is a piece of code typically found on the right-hand side of a comparison with '=' or '<>'.  Single values,",
"			ranges (e.g. 3..5), multiple values separated by commas are supported.  For text comparison, __wildcards__ are supported if the",
"			literal is of type __softquoted literal__."
 ]
		  
		},
		{ "Number": "Opt. 3.",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
		  "Description": [ "Specifies the row number where to carry out the comparisons" ]
		},
		{ "Number": "Opt. 4",
		  "Name": "Existing column",
		  "Direction": "input",
		  "Default value": "0 (1st column)",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Specify one header name or column number to indicate where to start searching and comparing frmo left to right.",
""
 ]
			
		}

	],
	"Return value":
	[
		{ "Name": "Retrieved values",
		  "Types": [ "parameter set" ],
		  "Description": "Contains literals or numerals, depending on the function name used."
		}
	],


"Examples" : [
"	table initialize( table 1,",
"		{ { Last Name, 1st Name, Street, Town, Postal Code, \"Spouse's Name\", Zip Code },",
"		  { Miller,    Phil,     Main St., Denver, 80208, Ann, 80123 } } );",
"",
"	echo( table selected columns( table 1, '*Code' ) );",
"",
"	// If the comparison expression is not the last function parameter, then put it into",
"	// parentheses to avoidi including further parameters used in the comparison process.",
"",
"	echo( table selected columns( table 1, (=80208), 1 ) );",
"	echo( table selected headers( table 1, ( '80*' ), 1 ) );",
"	echo( table selected column numbers( table 1, ( '80*' ), 1, 5 ) ); // Column 4 skipped"
 ]
	,
	"Output": "automatic",
	"See also": [ "table selected rows" ]
}
,

"table search header row" :
{
	"Function Names":	[ "table search header row" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function is particularly useful for imported tables where the headers are not necessarily be located in the top row but somewhere else.",
"		To make things worse, the headers of the imported tables may be located in different rows.",
"		This function searches for the header row and returns the row number.  In contrast to __table lift header row(__), the table remains untouched.",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2, 3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns considered part of headers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Check header option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "must exist",
"Description" : [
"",
"			With this option, you can make the search more restrictive, so wrong arrangements located further up in the table will not be detected first.",
"			Checking option 1 affecting the table headers.  Only one option can be chosen.  See separate table on next page for more details.",
"",
"			<br><br>",
"			<u>Hint: </u>The following terms behave similarly as in the function __table check headers__ in order to qualify for matches.  For example, the",
"			option \"full match\" expects that the header row contains all specified headers and not more in oder to consider them found.  Otherwise, searching continues",
"			in the rows below until the criteria are met.",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			must exist					|	The specified header names must exist<br>Specifeid column numbers must be within 0..<i>n</i>-1 or -<i>n</i>..-1.",
"			unique						|	Like <b>must exist</b>, but also checks that the specified column headers are unique in the table, i.e. they exist only once.",
"			full match					|	Like <b>unique</b>, however the table must not contain more (or less) headers than those specified to check.  The ordering does not matter. It's like tolerating full number of white pins after a guess in the <i>Master Mind</i> game.",
"			sequence					|	Like <b>unique</b>, but listed parameters are in left-to-right sequence. The checked headers do not need to be adjacent.",
"			strict sequence				|	Like <b>sequence</b> but all headers must be adjacent, being next to each other from left to right",
"			identical					|	Combination of <b>full match</b> and <b>strict sequence</b>. The headers provided and table headers must be identical: Same header names in the same sequence.  This corresponds to full number of black pins in the <i>Master Mind</i> game.",
"			==="
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Row number where header row has been found",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no header row has been found"
		}
	],

"Examples" : [
"	include( Support Library );",
"	table initialize( 2 tables,",
"	{ {	Created by,  Nick, Miller, \"\", Last Update, \"31.12.2019\" },",
"	  {	Tennis, Players, \"\", \"\", Squash, Players },",
"	  {     Still a, \"\", \"\", \"\", Last Name, First Name, City },",
"	  {     Draft, \"\", \"\", \"\", Weber, Abel, 'Wilkes-Barre' },",
"	  {	First Name, Last Name, City, and, Tanner, Berta, San Monica },",
"	  {	Jane, Dominique, The Bronx, \"\", Miller, Dominique, Trenton },",
"	  {	Jasmine, Nelsson, Francfort, \"\", Quinn, Alex, Denver },",
"	  {	Dominique, Miller, Trenton, \"\", Jansen, Patricia, Albany } } );",
"",
"",
"	echo(\"Original table:\");",
"	table list( 2 tables );",
"",
"	a[] = table search header row( 2 tables, {First Name, Last Name, City} ); // 'must exist' is default",
"	// Finds header row in the right table (headers are on row 2)",
"	b[] = table search header row( 2 tables, {First Name, Last Name, City}, sequence ); // 'must exist' is default",
"	// Finds header row in the left table (headers are on row 4)",
"",
"	c[] = table search header row( 2 tables, {First Name, Last Name, Town} ); // Not found, returns -1",
"	// Header row will not be found.",
"",
"	echo(a[], \" / \", b[], \" / \", c[] );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lift header row" ]
}

,

"table lift ..." :
{
	"Function Names":	[ "table lift header row", "table lift headers", "table lift contents" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function is particularly useful for imported tables where the headers are not necessarily be located in the top row but somewhere else.",
"		To make things worse, the headers of the imported tables may be located in different rows.",
"		These functions described here will first search for existence of specified headers and then take following actions:",
"",
"		=== 300, 700, noframe_1stcolbold, noheader",
"		table search header row		|		Just return the row number where headers have been found.  No manipulations done on the table.",
"		table lift header row		|		Delete all rows above the detected headers so the entire header row and all contents below move up to the top of the table.",
"		table lift headers			|		Move the headers to the 1st row.  The original location of the headers become blank.  Old contents in the 1st row will be overwritten. All other contents remain unchanged.",
"		table lift contents			|		Moves the headers as well as the affected columns underneath up. All other columns in the table remain unaffected.",
"		===",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2, 3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Check header option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "must exist",
"Description" : [
"",
"			With this option, you can make the search more restrictive, so wrong arrangements located further up in the table will not be detected first.",
"			Checking option 1 affecting the table headers.  Only one option can be chosen.  See separate table on next page for more details.",
"			",
"			<br><br>",
"			<u>Hint: </u>The following terms behave similarly as in the function __table check headers__ in order to qualify for matches.  For example, the ",
"			option \"full match\" expects that the header row contains all specified headers and not more in oder to consider them found.  Otherwise, searching continues",
"			in the rows below until the criteria are met.",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			must exist					|	The specified header names must exist<br>Specifeid column numbers must be within 0..<i>n</i>-1 or -<i>n</i>..-1.",
"			unique						|	Like <b>must exist</b>, but also checks that the specified column headers are unique in the table, i.e. they exist only once.",
"			full match					|	Like <b>unique</b>, however the table must not contain more (or less) headers than those specified to check.  The ordering does not matter. It's like tolerating full number of white pins after a guess in the <i>Master Mind</i> game.",
"			sequence					|	Like <b>unique</b>, but listed parameters are in left-to-right sequence. The checked headers do not need to be adjacent.",
"			strict sequence				|	Like <b>sequence</b> but all headers must be adjacent, being next to each other from left to right",
"			identical					|	Combination of <b>full match</b> and <b>strict sequence</b>. The headers provided and table headers must be identical: Same header names in the same sequence.  This corresponds to full number of black pins in the <i>Master Mind</i> game.",
"			==="
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Row number where header row has been found",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no header row has been found"
		}
	],

"Examples" : [
"	include( Support Library );",
"	table initialize( 2 tables,",
"	{ {	Created by,  Nick, Miller, \"\", Last Update, \"31.12.2019\" },",
"	  {	Tennis, Players, \"\", \"\", Squash, Players },",
"	  {     Still a, \"\", \"\", \"\", Last Name, First Name, City },",
"	  {     Draft, \"\", \"\", \"\", Weber, Abel, 'Wilkes-Barre' },",
"	  {	First Name, Last Name, City, and, Tanner, Berta, San Monica },",
"	  {	Jane, Dominique, The Bronx, \"\", Miller, Dominique, Trenton },",
"	  {	Jasmine, Nelsson, Francfort, \"\", Quinn, Alex, Denver },",
"	  {	Dominique, Miller, Trenton, \"\", Jansen, Patricia, Albany } } );",
"",
"",
"	echo(\"Original table:\");",
"	table list( 2 tables );",
"",
"",
"	table copy table( 2 tables, table );",
"	echo(\"Show 'table lift headers(..., must exist)':\" );",
"	echo(\"Note: It will recognize the headers in the right table.\");",
"	echo(\"Note: Contents below headers are not moved up.\");",
"",
"	table lift headers( table, {First Name, Last Name, City} ); // 'must exist' is default",
"	table list( table );",
"",
"",
"	table copy table( 2 tables, table );",
"	echo(\"Show 'table lift header row(..., must exist)':\" );",
"	echo(\"Note: It will recognize the headers in the right table. Entire rows below move up.\");",
"",
"	table lift header row( table, {First Name, Last Name, City} ); // 'must exist' is default",
"	table list( table );",
"",
"	table copy table( 2 tables, table );",
"	echo(\"Show 'table lift header row(..., sequence)':\" );",
"	echo(\"Note: It will recognize the headers in the left table because they have same sequence.\");",
"",
"	table lift header row( table, {First Name, Last Name, City}, sequence );",
"	table list( table );",
"",
"	table copy table( 2 tables, table );",
"	echo(\"Following code puts both tables with headers to 1st row\" );",
"	table lift contents( table, {First Name, Last Name, City}, sequence );",
"	table lift contents( table, {Last Name, First Name, City}, sequence );",
"	table list( table );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table search header row" ]
}

,

"table insert (missing) columns" :
{
	"Function Names":	[ "table insert columns", "table insert missing columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function inserts one or more columns into the table with initial values.<br>",
"	<b>table insert missing columns</b> will only insert and initialize columns if they are missing.  If they exist, then they will not be touched or the contents being initialized.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2 -4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Header names columns to add",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names may be specified.  Column numbers are not allowed here.",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Initial Values",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
"Description" : [
"			If this set contains more values than in 2nd argument, then the excess values will be discarded.",
"			If this set contains less values, then the first value will be referred after the last one (modulo pattern).",
"			If the parameter is blank, or missing, then the columns will be initialized with blanks."
 ]
			
		},
		{ "Number": "opt. 4",
		  "Name": "Destination column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"		    See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Specify only one header name and column number",
"			",
"			The new column will be inserted to the left. To insert them to the right, using __shifted Table Column Specifications__ is a possible option, or",
"			use column numbers. Negative indexing is supported, where -1 adds the new column after (and not before) the last column."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of headers inserted",
		  "Types": [ "numeral" ],
		  "Description": "-1 is returned if no header row has been found"
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	include ( Support Library );",
"	table initialize( t,",
"		{ { First Name, Last Name, Given Name, Birth Year },",
"		  { Abel,       Adams,	   A.,         1990 },",
"		  { Betty,      Beavers,   B.,         1995 },",
"		  { Charlie,    Collins,   C.,         2000 },",
"		  { Daniela,    Douglas,   D.,         2005 } } );",
"",
"	table insert columns( t, Gender, \"M or F\", First Name );",
"	table insert columns( t, Phone, {\"1-202...\", \"1-212...\"}, '>First Name' );",
"	table insert columns( t, Birthplace, \"-\", -1 );",
"",
"	count[] = table insert missing columns( t, {Birthplace, Street} );",
"	echo(count[]); // Inserted 1 additional column.",
"",
"	table list ( t );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete columns", "table copy columns" ]
}

,

"table duplicate columns ..." :
{
	"Function Names":	[ "table duplicate columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function duplicates specified columns to a destination column and assigns new header names accordingly.",
"		No existing columns will be overwritten.  If the destination column is not at the end of the table, then the existing columns",
"		on the right will shift to the right in order provide space for the destination columns.  In contrast to __table copy columns__, ",
"		if a destination header name is already existing, existing columns remain untouched.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3, 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3",
		  "Name": "New header names",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Number of columns specified must be the same as in the previous parameter.",
"			* Only header names are allowed. Column numbers are not allowed.",
"			* Even if the header names are already existing, new columns (with same names) will be created anyhow.",
""
 ]
		  
		},
		{ "Number": "3",
		  "Name": "Destination column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only one header name or column number may be specified.",
"			* Existing columns further to the right will shift accordingly to clear space for new columns.",
""
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Number of columns duplicated",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],

"Examples" : [
"	include( Support Library );",
"	table initialize ( table,",
"		{ { First Name, Last Name, Given Name, Birth Year },",
"		  { Abel,       Adams,	   A.,         1990 },",
"		  { Betty,      Beavers,   B.,         1995 },",
"		  { Charlie,    Collins,   C.,         2000 },",
"		  { Daniela,    Douglas,   D.,         2005 } } );",
"",
"	table duplicate columns( table, { Birth Year, Given Name }, { BY, GN }, First Name );",
"",
"	table list( table );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table duplicate columns" ]
}

,

"table copy columns ..." :
{
	"Function Names":	[ "table copy columns", "table copy columns selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function copies contents from selected columns to another set of selected columns.  New columns will be created if the destination header",
"		names are not yet existing.  Otherwise, the existing columns will be overwritten.",
"		<br>table copy columns selected rows</br> copies the contents only in rows meeting the conditional expression in the 2nd function parameter.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3, 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to function <b>table copy columns selected rows</b> only.<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2 / 3",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3 / 4",
		  "Name": "New columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Number of columns specified must be the same as in the previous parameter.",
"			* If header names are missing in the table, then additional columns will be created on the right hand side of the table.",
"			* Column numbers outside the existing range results in creating columns with blank header names.<br>",
""
 ]
		  

		}
	],
	"Return value":
	[
		{ "Name": "Number of columns copied",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],
	
"Examples" : [
"	include( Support Library );",
"	table initialize ( table,",
"		{ { First Name, Last Name, Given Name, Birth Year },",
"		  { Abel,       Adams,	   A.,         1990 },",
"		  { Betty,      Beavers,   B.,         1995 },",
"		  { Charlie,    Collins,   C.,         2000 },",
"		  { Daniela,    Douglas,   D.,         2005 } } );",
"",
"	table copy columns selected rows( table, [Birth Year]<1998, {First Name, Last Name}, { Given Name, Family Name } );",
"	// The specified columns in the first two rows will be copied",
"",
"	table list( table );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table duplicate columns" ]
}

,

"table delete columns" :
{
	"Function Names":	[ "table delete columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function deletes specified columns.",
"		",
"		<br><br>",
"",
"		Deleting begins with the right-most column in the table, and not with the first (or last) column referenced.   With this approach, the positions of the remaining",
"		columns further to the left will not shift.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* No exceptions are asserted if header names are missing or column numbers are out of range.",
"			* Repeatedly specified header names and column numbers will be ignored",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Number of columns to delete",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			By default, the specified column will be deleted.<br>",
"			If 0 is specified, then nothing will be deleted.<br>",
"			If a value greater than 1 is specified, then additional columns to the right will be deleted, too.<br>",
"			-1 deletes all remaining columns to the end of the table (maximum table width)<br>",
"			-2 (-3, ...) deletes all remaining columns except the last (2nd last, ...) column.  Strongly recommended to use negative number only with one one header name or column number."
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Number of columns deleted",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],

"Examples" : [
"	include( Support Library );",
"	echo(\"Delete 3 column pairs\");",
"	table initialize ( table, { { 'Col A' .. 'Col K' }, { 'Val A' .. 'Val K' } } );",
"",
"	// Deletes 6 columns: H & I, C & D, and B & E. Remaining; A, F, G, J and K",
"	echo( \"# columns deleted: \", table delete columns ( table, {7, Col B, Col C}, 2 ) );",
"",
"	table delete columns ( table, Col A, 0 );  // Nothing happens here (0 columns deleted)",
"",
"	table list( table );",
"",
"	echo(\"Delete all columns between D and K\");",
"	table initialize ( table, { { 'Col A' .. 'Col K' }, { 'Val A' .. 'Val K' } } );",
"",
"	table delete columns ( table, Col F, -2 );",
"",
"	table list( table );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete remaining columns" ]
}


,

"table delete remaining columns" :
{
	"Function Names":	[ "table delete remaining columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function deletes all remaining columns to the right, including the specified column.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing column",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only one header name or column numbers may be specified",
"			<u>Hint</u>: Use __shifted table column specifications__ like '>Last Name' to delete remaining columns without the one specified."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of columns deleted",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],

"Examples" : [
"	include( Support Library );",
"	echo(\"Delete 3 column pairs\");",
"	table initialize ( table, { { 'Col A' .. 'Col K' }, { 'Val A' .. 'Val K' } } );",
"",
"	echo(\"Delete column H till end\");",
"	count[] = table delete remaining columns(  table, Col H  );",
"	echo(\"Number of columns deleted: \", count[] );",
"	table list( table );",
"",
"	echo(\"Delete column E till end\");",
"	count[] = table delete remaining columns(  table, '>Col D'  );",
"",
"	echo(\"Number of columns deleted: \", count[] );",
"	table list( table );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete columns" ]
}


,

"table delete blank/empty/unnamed columns" :
{
	"Function Names":	[ "table delete blank columns", "table delete all blank columns", "table delete empty columns", 
						  "table delete all empty columns", "table delete unnamed columns", "table delete all unnamed columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		<b>table delete ... blank columns</b> deletes all columns where the selected columns are blank in all rows, <u>including</u> the header row.<br>",
"		<b>table delete ... empty columns</b> deletes all columns where the selected columns are blank in all rows, <u>excluding</u> the header row.<br>",
"		<b>table delete ... unnamed columns</b> deletes all columns with blank contents in the header row (no headers specified).<br>",
"		The function names not containing <b>... all ...</b> will only consider the columns below the existing header row.<br>",
"		The function names contaiing <b>... all ...</b> will cover the full table widht, i.e. also consider columns located beyond the header row.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		["Indirect parameter passing is enabled" ],
	"Parameters":
	[
		{ "Number": "1., ...",
		  "Name": "Names of existing tables",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	include ( Support Library );",
"	table initialize ( table, { { First Name, \"\",    Last Name, \"\",            Phone No, \"   \", Age                  },",
"					{ Jane,       \"E.\",  Archer,    \"1. Main St.\", \"\",       \"   \", 28, \"             \", Plays softball } } );",
"",
"	echo(\"Original table: \", table max width(table), \" columns. __________________ \");",
"	table list( table );",
"",
"	table copy table (table, t1 );",
"	table delete blank columns(t1);",
"	echo(\"Blank columns deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table delete all blank columns(t1);",
"	echo(\"All blank columns deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table delete empty columns(t1);",
"	echo(\"Empty columns deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table delete all empty columns(t1);",
"	echo(\"All empty columns deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table delete unnamed columns(t1);",
"	echo(\"Unnamed deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table delete all unnamed columns(t1);",
"	echo(\"All unnamed deleted: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete columns" ]
}


,

"table keep ... columns" :
{
	"Function Names":	[ "table keep columns", "table keep existing columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function keeps and rearranges the columns specified according to the order provided in the 2nd function parameter.",
"		All remaining columns will be deleted.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Appliable to <b>table keep existing columns</b>: No exceptions are asserted if header names are missing or column numbers are out of range.",
"			* Repeating the same columns (e.g. with intention to duplicate them) is not allowed.",
""
 ]
			
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],

"Examples" : [
"	include ( Support Library );",
"	table initialize ( table, { { First Name, \"Middle Init.\",    Last Name, \"Street\",      \"Town\" },",
"					{ Jane,       \"E.\",              Archer,    \"1. Main St.\", \"Miami\", \"Comments\" } } );",
"",
"	echo(\"Original table: \", table max width(table), \" columns. __________________ \");",
"	table list( table );",
"",
"	table copy table (table, t1 );",
"	table keep columns(t1, { 2, First Name, -1 }); // Last Name, First Name, Town",
"	echo(\"Names only: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table keep existing columns(t1, { Phone, 2, First Name, -1 }); // Same outcome: \"Phone\" is ignored.",
"	echo(\"Names only: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table rearrange columns" ]
},

"table rearrange ... columns" :
{
	"Function Names":	[ "table rearrange columns", "table rearrange existing columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function rearranges and rearranges the columns specified according to the order provided in the 2nd function parameter.",
"		All remaining columns will be deleted.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Existing columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Appliable to <b>table rearrange existing columns</b>: No exceptions are asserted if header names are missing or column numbers are out of range.",
"			* Repeating the same columns (e.g. with intention to duplicate them) is not allowed.",
""
 ]
			
		}
	],
	"Exceptions": [ "Table not found", "Header name not found" ],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( table, { { First Name, \"Middle Init.\",    Last Name, \"Street\",      \"Town\" },",
"					{ Jane,       \"E.\",              Archer,    \"1. Main St.\", \"Miami\", \"Comments\" } } );",
"",
"	echo(\"Original table: \", table max width(table), \" columns. __________________ \");",
"	table list( table );",
"",
"	table copy table (table, t1 );",
"	table rearrange columns(t1, { 2, First Name, -1 }); // Last Name, First Name, Town",
"	echo(\"Names only: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );",
"",
"	table copy table (table, t1 );",
"	table rearrange existing columns(t1, { 5, 2, First Name, Phone }); // Comments column, last name, first name, No phone Nr.",
"	echo(\"Names only: \", table max width(t1), \" columns. __________________ \");",
"	table list( t1 );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table keep columns", "table sort columns" ]
}



,

"table sort columns" :
{
	"Function Names":	[ "table sort columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This functions sorts the columns in the table.  If not specified otherwise, the header row will serve as sorting base.",
"		All table rows are included in the sorting process.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1-5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Column to mark begin of sorting range",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value" : "All columns will be sorted",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* One header name or column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3",
		  "Name": "Column to mark end of sorting range",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value" : "All remainign columns will be sorted",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* One header name or column numbers may be specified",
"			No sorting takes place if the ending column lies before or over the starting column."
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "Sorting Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "alphabetic",
		  "Description": [ "See __sorting options__ for available values." ]
		},
		{ "Number": "Opt. 5",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0 (header row)",
		  "Description": [ "Specify a different row number if the data in a specific row shall server as a base for sorting." ]
		}

	],
	"Exceptions": [ "Table not found", "Header name not found" ],

"Examples" : [
"	include ( Support Library );",
"	table initialize ( t,",
"	{ {  Name, Town, Street, Phone, Gender, Country, Province, Favorite Pet },",
"	  {  Dan,  La Spezia,  Main St., None, M, Italy, Liguria, Toad },",
"	  {  Jane, Miami, Hill St., None, F, USA,  Florida, Alligator } } );",
"",
"",
"	echo(\"Original table:\");",
"	table list( t );",
"",
"",
"	table copy table (t, t1 );",
"",
"	echo(\"Sort all columns by header name except 1st and last one:\");",
"	table sort columns( t, Town, -2 );",
"	table list ( t );",
"",
"	echo(\"Sort all columns Z-A by Row 2:\");",
"	table sort columns( t, Name, -1, alphabetic down, 2 );",
"	table list ( t );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table rearrange columns", "table sort rows" ]
}



,

"table insert rows" :
{
	"Function Names":	[ "table insert rows" ],
	"Documentation":	"Function Description",
"Description" : [
"	",
"	This function inserts a specified number of blank rows in a specified location.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2 - 3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			 Table rows begin with row 0 (header row).  __Negative indexing__ is supported, i.e. -1 = last table row."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Number of rows to isert",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			Number of blank rows to insert.<br>",
"			Negative numbers are also supported: -1 counts the number aremaining rows (including the current one) and uses this value as number of rows to insert.",
"			For example if 3 rows are remaining, then 3 rows wil be inserted.  -2 inserts 1 row less;  -3 inserts 2 rows less, etc."
 ]
			
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table insert rows( table 1, 1, 2 );  // Insert 2 rws above row 1 (below header row)",
"	table insert rows( table 1, -1, 1 ); // Insert 1 row before last row",
"",
"	table list( table 1 );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table insert selected rows" ]
},


"table delete rows" :
{
	"Function Names":	[ "table delete rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function deletes a specified number of rows in a specified location.",
"	"
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2 - 3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			 Table rows begin with row 0 (header row).  __Negative indexing__ is supported, i.e. -1 = last table row."
 ]
			
		},
		{ "Number": "3",
		  "Name": "Number of rows to delete",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			Number of rows to delete.<br>",
"			Negative numbers are also supported: -1 deletes all remaining rows. -2 deletes all remaining rows except the last row, -3 keeps the last two rows, etc."
 ]
			
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table delete rows( table 1, 1, 2 );  // Deltess Worm and Bird",
"	table delete rows( table 1, -1, 1 ); // Deletes Tick",
"",
"	table list( table 1 ); // Only Dog and Fly are left"
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete remaining rows", "table delete selected rows" ]
},


"table delete remaining rows" :
{
	"Function Names":	[ "table delete remaining rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function deletes all remaining rows from the specified row till the end of the table.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"			 Table rows begin with row 0 (header row).  __Negative indexing__ is supported, i.e. -1 = last table row."
 ]
			
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table delete remaining rows( table 1, 3 );",
"",
"	table list( table 1 ); // Only Worm and Bird are left."
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete rows" ]
}



,

"table insert ... selected rows" :
{
	"Function Names":	[ "table insert selected rows", "table insert above selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	<b>table insert selected rows</b> inserts rows below the selected rows.<br>",
"	<b>table insert above selected rows</b> inserts rows above the selected rows.<br>",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2 - 5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number":		"Opt. 2.",
		  "Name" :		"Expression to select rows",
		  "Direction" :	"code",
		  "Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
		  
		},
		{ "Number":		"Opt. 3.",
		  "Name" :		"Expression to specify number of rows",
		  "Direction" :	"code",
		  "Types" :		[ "expression", ":literal" ] ,
		  "Default value" : "1" ,
"Description" : [
"				Specify a fixed value or an expression returning a number.  This expression will be calculated for all selected rows according ",
"				to the 2nd function parameter.  __Partial table specification__ is supported for this expression.",
"				"
 ]
		  
		},
		{ "Number": "Opt. 4.",
		  "Name": "Existing columns to copy",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "(None)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* The columns listed must be unique, i.e. not repeated.",
""
 ]
			
		},
		{ "Number": "Opt. 5.",
		  "Name": "Index column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Max 1 header names or column number may be specified",
"			* If the column is not existing, then it will created and added after the right-most existing column",
"",
"			What will be written into the index column if <i>n</i> rows are inserted below or above:<br>",
"			With  <b>table insert selected rows<b>, 0 is assigned to the original row.  1...<i>n</i> are assigned to the new rows inserted.<br>",
"			With  <b>table insert above selected rows<b>, <i>n</i> is assigned to the original row.  0...<i>n</i>-1 are assigned to the rows above."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows identified",
		  "Types": [ "numeral" ],
		  "Description": "Only the number of identified rows (and not the number of inserted rows) is returned. -1 is returned if table is empty."
		}
	],
"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table insert selected rows( table 1, ([Animal]=Bird,Dog), [leg count], Animal, Index );",
"",
"	table list( table 1 ); // Only Dog and Fly are left",
"",
"	echo(\" and above: \");",
"	table initialize ( table 1,",
"	 { { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table insert above selected rows( table 1, ([Animal]=Bird,Dog), [leg count], Animal, Index );",
"",
"	table list( table 1 ); // Only Dog and Fly are left"
 ]
	,
	"Output": "automatic",
	"See also": [ "table insert rows" ]
}
,

"table delete selected rows" :
{
	"Function Names":	[ "table delete selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function deletes all rows where the expression to select rows applies.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2 - 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number":		"2.",
		  "Name" :		"Expression to select rows",
		  "Direction" :	"code",
		  "Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
		  
		},
		{ "Number": "Opt. 3.",
		  "Name": "Number of rows to delete",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			If &le;0: No rows will be deleted<br>",
"			If 1: Affected row will be deleted<br>",
"			If &ge;2: Neighboing rows are deleted once. Example: Rows 5 and 6 apply, so rows 5, 6, and 7 will be deleted."
 ]
			
		},
		{ "Number": "Opt. 4.",
		  "Name": "Row offset value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"",
"			If 0: Deletes selected rows (and further down if number of rows to delete is >1).<br>",
"			If 1: Deletes next row below selected rows (and further down)<br>",
"			If &ge;2: First row to delete is n rows below selected row.<br>",
"			If -1:  Deletes selected rows (and further up if number of rows to delete is >1)<br>",
"			If -2: Deletes next row above selected row (and further up)<br>",
"			If &le;-3; First row to delete is abs(n)-1 above selected row<br>",
"			If offset is negative and reach into the header row, the header rows are protected from getting deleted."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows deleted",
		  "Types": [ "numeral" ],
		  "Description": "Number of rows deleted.  -1 is returned if table is empty."
		}
	],
"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table copy table( table 1, t1 );",
"	echo(\"Delete 2 rows: Bird and Tick.\");",
"	table delete selected rows( t1, ([Animal]='*i*') ); // Bird, Tick",
"	table list( t1 ); // Only Dog and Fly are left",
"",
"	echo(\"Dog will also be deleted:\");",
"	table copy table( table 1, t1 );",
"	table delete selected rows( t1, ([Animal]='*i*'), 2 ); // Bird, Tick, Dog deleted",
"	table list( t1 ); // Only Dog and Fly are left",
"",
"	echo(\"Delete animal above Dog and Worm:\");",
"	table copy table( table 1, t1 );",
"	table delete selected rows( t1, ([Animal]='*o*'), 1, -2 ); // Rows above Worm, Dog",
"	table list( t1 ); // Only Dog and Fly are left",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete rows", "table keep selected rows" ]
},

"table keep selected rows" :
{
	"Function Names":	[ "table keep selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function keeps all rows where the expression to select rows applies.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2 - 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number":		"2.",
		  "Name" :		"Expression to select rows",
		  "Direction" :	"code",
		  "Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
		  
		},
		{ "Number": "Opt. 3.",
		  "Name": "Number of rows to keep",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			If &le;0: No rows will be kept<br>",
"			If 1: Affected row will be kept<br>",
"			If &ge;2: Neighboing rows are kept once. Example: Rows 5 and 6 apply, so rows 5, 6, and 7 will be kept."
 ]
			
		},
		{ "Number": "Opt. 4.",
		  "Name": "Row offset value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"",
"			If 0: Deletes selected rows (and further down if number of rows to delete is >1).<br>",
"			If 1: Deletes next row below selected rows (and further down)<br>",
"			If &ge;2: First row to delete is n rows below selected row.<br>",
"			If -1:  Deletes selected rows (and further up if number of rows to delete is >1)<br>",
"			If -2: Deletes next row above selected row (and further up)<br>",
"			If &le;-3; First row to delete is abs(n)-1 above selected row<br>",
"			If offset is negative and reach into the header row, the header rows are protected from getting kept."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows kept",
		  "Types": [ "numeral" ],
		  "Description": "Number of rows kept.  -1 is returned if table is empty."
		}
	],
"Examples" : [
"	include(Support Library);",
"	table initialize ( table 1,",
"	{ { Animal, leg count }, { Worm,  0}, { Bird, 2 }, { Dog, 4 }, { Fly, 6 }, { Tick, 8 } } );",
"",
"	table copy table( table 1, t1 );",
"	echo(\"Keep 2 rows: Bird and Tick:\");",
"	table keep selected rows( t1, ([Animal]='*i*') ); // Bird, Tick kept",
"	table list( t1 ); // Only Dog and Fly are left",
"",
"	echo(\"Dog will also be kept:\");",
"	table copy table( table 1, t1 );",
"	table keep selected rows( t1, ([Animal]='*i*'), 2 ); // Bird, Tick, Dog kept",
"	table list( t1 ); // Only Dog and Fly are left",
"",
"	echo(\"Keep animal above Dog and Worm:\");",
"	table copy table( table 1, t1 );",
"	table keep selected rows( t1, ([Animal]='*o*'), 1, -2 ); // Rows above Worm, Dog. Worm is header. Ignore.",
"	table list( t1 ); // Only Dog and Fly are left"
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete selected rows" ]
}

,


"table move selected rows" :
{
	"Function Names":	[ "table move selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function moves selected rows (using an expression) from one table to another table.  With high performance in focus, this function moves",
"	the rows as they are, i.e. the individual data stay in their column locations where they are and they will not be realigned in order",
"	to match with the header names.",
"",
"	<br><br>",
"",
"	Please consider useing __table merge(__) or __transactions__ if you want to move data with alignments to their headers.",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing source table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of existing destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "3",
		  "Name": "Destination row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "-1 (below the last table row)",
"Description" : [
"			The contents from the source table will be moved to the destination table, beginning with this specified row number in the",
"			destination table.  All other rows in the destination table will move down.  __Negative indexing__ is supported here, whereas",
"			-1 is exceptionally referencing to the next row below the lasat row.",
"			* 0 = Insert contents above the header row",
"			* 1 = Insert contents below the header row / above the 1st data row",
"			* -1 (or table length value) = Insert contents <u>below</u> the last row.   -2, -3, etc. count upwards.",
"			If the 3rd parameter is not specified, then the rows will be added to the end of the table.  Since the remaining parameters are",
"			not specified too, B4P assumes to move the entire table (except header row) to the end of the destination table."
 ]
			
		},
		{   "Number":		"4.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Specify the conditions or rules to select the rows in the source table.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>"
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows moved",
		  "Types": [ "numeral" ],
		  "Description": "Number of rows moved.  -1 is returned if table is empty."
		}
	],
	"Exceptions": [ "Table not found" ],

"Examples" : [
"	table initialize( t1,  { Name, Amy, Bea, Colin, Daniela, Emily, Fabian } );",
"	table initialize( t2,  { Names, Richard, Sam, Tim, Udo, Victor, Xavier, Yoel, Zoe } );",
"",
"	echo(  new line, \"Original tables\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );",
"",
"	table move selected rows ( t1, t2, -1, [Name]{}=5 ); // Move Colin and Emily (5 letters)",
"",
"	echo(  new line, \"Move all names from t1 to end of t2\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table move rows", "table merge" ]
}


,

"table delete blank rows" :
{
	"Function Names":	[ "table delete blank rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function deletes all blank rows from all listed tables, or reduces the number of consecutive blank rows to a specified number.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"1 - 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "Opt. 2.",
		  "Name": "Number of consecutive rows to keep",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			If 1 (or 2, 3, ...) is specifed, then number of consecutive blank rows will be reduced to  (or 2, 3, ...)."
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Blank criterion",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "blank fields",
"Description" : [
"",
"			One of following:",
"			=== 200, 600, noheader, noframe_1stcolbold",
"			entirely empty row			| Delete if row contain 0 columns",
"			empty row					| Delete if row contains 0 or 1 empty column",
"			empty fields				| Delete if row contains any number of empty fields (nothing inside, not even a white space)",
"			blank fields				| Delete if row contains any number of fields which are either empty or containing white spaces (no visible characters)",
"			not blank begin				| Delete if not blank, but row above meets blank fields criteria",
"			not blank middle			| Delete if not blank, rows above and below are not blank, too",
"			not blank end				| Delete if not blank, but row below meets blank fields criteria",
"			not blank lone				| Delete if row is not blank, but row above and below meet blank fields criteria.",
"			not blank					| Delete if row is not blank (contains visible characters), regardless if at top, middle or end of block of non-blank rows",
"			===",
""
 ]
			
		},
		{ "Number": "Opt 4",
		  "Name": "Columns to check",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "all columns",
"Description" : [
"			Specify the columns which shall be checked if they are blank and ignore the contents in the remaining columns.<br><br>",
"		    See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows deleted",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t,",
"		{ {  Last Name,    First Name,    Favorite Sports },",
"		  {  Adams,        Andy,          American Football },",
"		  {  \"  \",         \"\",            Baseball },",
"		  { },",
"		  {  \"\" },",
"		  {  \" \" },",
"		  {  Mayer,        Mick,          Tennis },",
"		  {  Tanner,       Tina,          Wrestling } } );",
"",
"echo (\"Original table:\");",
"table list(t);",
"",
"echo (\"Demonstrate deleting all rows:\");",
"table copy table        ( t, u );",
"table delete blank rows ( u );",
"table list              ( u );",
"",
"echo (new line, \"Demonstrate deleting all rows without names\");",
"table copy table        ( t, u );",
"table delete blank rows ( u, 0, blank fields, {First Name, Last Name} );",
"table list              ( u );",
"",
"echo (new line, \"Demonstrate deleting empty rows (0 columns) -> only 1 row removed\");",
"table copy table        ( t, u );",
"table delete blank rows ( u, 0, entirely empty row );",
"table list              ( u );",
"",
"echo (new line, \"Reduce # blank rows to 1:\");",
"table copy table        ( t, u );",
"table delete blank rows ( u, 1 );",
"table list              ( u );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete selected rows", "table check row" ]
}


,

"table check row" :
{
	"Function Names":	[ "table check row" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function checks if this row is blank.  Some value-added critieria can be applied in the parameters.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2 - 4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Row number",
		  "Direction": "input",	
		  "Types": [ "numeral" ],
		  "Description": [ "The specified row will be checked." ]
		},
		{ "Number": "Opt. 3.",
		  "Name": "Blank criterion",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "blank fields",
"Description" : [
"			One of following:",
"			=== 200, 600, noheader, noframe_1stcolbold",
"			entirely empty row			| True if row contain 0 columns",
"			empty row					| True if row contains 0 or 1 empty column",
"			empty fields				| True if row contains any number of empty fields (nothing inside, not even a white space)",
"			blank fields				| True if row contains any number of fields which are either empty or containing white spaces (no visible characters)",
"			not blank begin				| True if not blank, but row above meets blank fields criteria, but not the rows below",
"			not blank middle			| True if not blank, rows above and below are also not blank, too",
"			not blank end				| True if not blank, but row below meets blank fields criteria, but not the rows above",
"			not blank lone				| True if row is not blank, but row above and below meet blank fields criteria.",
"			not blank					| True if row is not blank (contains visible characters), regardless if at top, middle or end of block of non-blank rows",
"			===",
"			Note: The 'not blank...' criteria listed at the bottom use the 'blank fields' criteria to distinguish whether the other rows are deemed blank or not.",
""
 ]
			
		},
		{ "Number": "Opt 4",
		  "Name": "Columns to check",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "all columns",
"Description" : [
"			Specify the columns which shall be checked if they are blank and ignore the contents in the remaining columns.<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows deleted",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t,",
"		{ {  Last Name,    First Name,    Favorite Sports },",
"		  {  Adams,        Andy,          American Football },",
"		  {  \"  \",         \"\",            Baseball },",
"		  { },",
"		  {  \"\" },",
"		  {  \"\",           \"\" },",
"		  {  Mayer,        Mick,          Tennis },",
"		  {  \" \" },",
"		  {  Gerber,       Greg,          Canooing },",
"		  {  Unger,        Uta,           Rafting },",
"		  {  Tanner,       Tina,          Wrestling } } );",
"",
"",
"	table initialize( result, {Criteria, entirely empty row, empty row, empty fields, blank fields,",
"	                           not blank begin, not blank middle, not blank end, not blank lone, not blank } );",
"",
"	echo (\"Original table:\");",
"	table list(t);",
"",
"	table process ( result,",
"		table process( t, [result:row(),0     ] = row();",
"							  [result:row(),row(1)] = table check row( t, row(), [^Criteria] ) ) );",
"",
"	echo(\"The columns in the table below relate to the row numbers of the table checked.\");",
"	table list ( result );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete blank rows" ]
}


,

"table rearrange selected rows" :
{
	"Function Names":	[ "table rearrange selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function rearranges selected rows in the table in order to put them together into one block so they are no longer scattered across the table.",
"	The ordering of the selected rows will not change, but you can change it (before or) afterwards with __table sort selected rows(__).",
"",
"	This function extracts a column from the table and places the values in the parameter set from the selected rows where the calculated expression returns true.",
"	All blank or non-existing entries will be translated to blank literals.  Automatic type conversion (e.g. numbers to numerals) can be adjusted with the",
"	__table configure(__) function.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Relocation destination",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Use one of the following values:",
"			=== 200, 600, noheader, noframe_1stcolbold",
"			top					| All selected rows will be relocated to the top of the table, with 1st row just below the header row.",
"			bottom				| All selected rows will be relocated to the top of the table",
"			first match			| All selected rows will be relocated to the 1st row where the selection applies",
"			last match			| All selected rows will be relocated to the last row where the selection applies",
"			==="
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Animal, Leg Count, Comment },",
"		  { ant, 6 }, { rat, 4 }, { octopus, 8 }, { centipede, 100 }, { parakeet, 2 },",
"		  { tick, 8 }, { orang utan, 2 or 4 }, { human, 2 }, { lobster, 8 }, { snake, 0 }, { dog, 4 },",
"		  { cat, 4 }, { kangaroo, 2 or 4 }, { fly, 6 }, { alien, 3 }, { worm, 0 }, { emu, 2 } }  );",
"",
"	table initialize( lookup, {",
"		  { Condition,                  Todo },",
"		  { \"[Leg Count] = '*or*'\",     \"[Comment] = 'Leg count probably unclear'\" },",
"		  { \"[Leg Count] > 6\",          \"[Comment] = 'Many legs'\" },",
"		  { \"[Animal] = rat\",           \"[Animal] = 'mouse'; [Comment] += 'not a rat'\" },",
"		  { \"true\",                     \"[Animal] = ![Animal]\" } } ); // Upper case O ALL",
"",
"	table manipulate( animals, lookup, Condition, Todo );",
"	table list( animals );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table sort rows", "table sort selected rows" ]
}
,

"table sort (selected) rows" :
{
	"Function Names":	[ "table sort rows", "table sort selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function sorts the row according to sorting criteria defined, i.e. columns and applicable sorting options.",
"	The function <b>table sort selected rows</b> will only sort the applicable rows, but leave all remaining rows untouched, i.e.",
"	in their original locations.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table sort selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2 / 3.",
		  "Name": "Columns considered for sorting order",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			If more than 1 column is specified, then the first column has the highest sorting priority, with additional columns considered",
"			if the prior comparison resulted in equal contents, e.g. sorting by last name followed by first name.<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3 / 4",
		  "Name": "Sorting option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "alphabetic",
		  "Description": [ "See __sorting options__ for available values." ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Animal, Leg Count },",
"		  { ant, 6 }, { mouse, 4 }, { spider, 4 }, { octopus, 8 }, { bird, 2 },",
"		  { tick, 8 }, { orang utan, 2 or 4 }, { human, 2 }, { lobster, 8 }, { snake, 0 },",
"		  { cat, 4 }, { kangaroo, 2 or 4 }, { spider, 6 }, { fly, 6 }, { worm, 0 } }  );",
"",
"	echo(\"Sort animals.  Spiders are sorted by leg count.\");",
"	table copy table ( animals, a );",
"	table sort rows( a, { Animal, Leg Count }, { alphabetic, numeric down } );",
"	table list( a );",
"",
"	echo(\"Sort animals with 4 legs\");",
"	table rearrange selected rows( animals, ([Leg Count]='*4*'), top );",
"	table sort selected rows( animals, ([Leg Count]='*4*'), Animal );",
"	table list ( animals );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table rank rows", "table rank selected rows", "table sort columns" ]
}
,

"table rank (selected) rows" :
{
	"Function Names":	[ "table rank rows", "table rank selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function ranks the rows according to ransorting criteria defined, i.e. columns and applicable sorting options.",
"	Ranking is a meaningful alternative to identify the ordering of the data without phyically rearranging the rows.",
"	Specific rules are provided for ranking multiple entries which are equal.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table rank selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2 / 3.",
		  "Name": "Destination column for rank numbers",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only one header name or column numbers may be specified",
"			* If the specified header does not exist, then an additional column with that header will be created.",
""
 ]
			
		},
		{ "Number": "Opt. 3 / 4.",
		  "Name": "Columns considered for ranking order",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "alphabetic",
"Description" : [
"			If more than 1 column is specified, then the first column has the highest ranking  priority, with additional columns considered",
"			if the prior comparison resulted in equal contents, e.g. ranking by last name followed by first name.<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 4 / 5",
		  "Name": "Ranking option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "alphabetic",
		  "Description": [ "See __sorting options__ for available values." ]
		},
		{ "Number": "Opt. 5 / 6",
		  "Name": "Ranking scheme for equal values",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "123",
"Description" : [
"		  One of following:",
"			=== 50, 750, noheader, noframe_1stcolbold",
"			123		| Unique ranking.  Same values are ranked by their row number location in the table (rows above are ranked higher)",
"			213		| Unique ranking.  Same values are ranked by their row number location in the table (rows below are ranked higher)",
"			112		| Same values get the same higher ranking (2 gold medals for same score followed by silver)",
"			113		| Same values get the same higher ranking (2 gold medals for same score followed by bronze)",
"			113		| Same values get the same higher ranking (2 sliver medals for same score followed by bronze)",
"			===",
""
 ]
		  
		},
		{ "Number": "Opt. 6 / 7",
		  "Name": "Rank starting number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			Normally, ranking begins with 1.  In some cases, it is useful to apply cascaded rankings on different rows on the same table, and",
"			you want to continue with the next lower ranking number in the 2nd or further ranking rounds.  See code example below."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Next further rank number",
		  "Types": [ "numeral" ],
		  "Description": "Useful for casecaded ranking (provide as last parameter in the next call)"
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Animal, Leg Count },",
"		  { ant, 6  }, { mouse, 4 }, { spider, 8 }, { octopus, 8 }, { bird, 2  },",
"		  { tick, 8 }, { human, 2 }, { ape, 4    }, { lobster, 8 }, { snake, 0 },",
"		  { cat, 4  }, { ape, 2   }, { spider, 6 }, { fly, 6 } }  );",
"",
"	echo(\"Ranked all animals with more than 4 legs from Z-A, then those with 2 legs from A-Z (cascaded ranking)\");",
"	a[] = table rank selected rows( animals, [Leg Count]>4 , Rank, Animal, alphabetic down, 112 );",
"		  table rank selected rows( animals, [Leg Count]<=2, Rank, Animal, alphabetic, 112, a[] );",
"	table list ( animals );",
"",
"",
"	table initialize( names, { Name, Benita, Allen, Dominique, Andy, Benita, BENITA, Dominique, Michele } );",
"",
"	echo(\"Different ranking schemes on names using alphabetic ordering, ignoring case, start with rank 0:\");",
"	table process ( names, for all parameters( { 123, 213, 112, 113, 223 }, scheme[] )",
"		{",
"			table rank rows( names, literal(scheme[]), Name, alphabetic ignore case, scheme[], 0 );",
"		} );",
"	table list ( names );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table sort rows", "table sort selected rows" ]
}
,

"table process (selected rows)" :
{
	"Function Names":	[ "table process", "table process rows", "table process selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These are one of the most powerful functions in the B4P language: The ability to process the contents in tables row-by-row",
"	without formulating loops or complex algorithms.  The statements for processing the data in every row are provided",
"	as function parameters and will be executed for every single row selected.  Combined with __partial table references__,",
"	you can do powerful algorithms with minimum amount of simple code text.  See code examples further below.",
"",
"	<br><br>",
"	For consistency with related function names, <b>table process rows</b> has been added and is identical to <b>table process</b>",
"",
"	<br><br>",
"	The closest relative of this function is __for all table rows(__) which describes a loop using	loop index",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table process selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
	  {
		 "Number":		"2. / 3.",
		 "Name":		"Statements (applicable where rows are selected)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process / table process rows</b>: The statements provided will be executed for every row.<br>",
"				<b>table process selected rows</b>: The statements provided will be executed for every row where the condition calculated before returned <b>true</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Full Name] = [First Name] + ' ' + [Family Name];<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  },
	  {
		 "Number":		"4.",
		 "Name":		"Statements (otherwise)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process / table process rows</b>: Not applicable. This function accepts 3 parameters only.",
"				<b>table process selected rows</b>: The statements provided will be executed for every row where the condition calculated before returned <b>false</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Full Name] = [First Name] + ' ' + [Family Name];<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  }
	],
	"Return value":
	[
		{ "Name": "Number of rows processed",
		  "Types": [ "numeral" ],
		  "Description": "With <b>table process selected rows</b>, the number of selected rows (and processed with statements from 3rd function parameter) are counted.  With the function <b>table process selected rows</b>, only the processing for 'true' matches are counted."
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( animals, { {Animal, Group, Characteristics},",
"		 { parakeet, bird },  { moose, mammal },  { ape, mammal },  { sparrow, bird } , { trout, fish }, { bass, fish },",
"		 { canary, bird }, { penguin, bird }, { beluga, mammal} } );",
"",
"	table process			( animals, [Animal] = ![Animal] ); // Capitalize",
"	table process selected rows	( animals, ([Group] = bird), [Characteristics] = \"Can fly\", [Characteristics] = \"Can't fly\" );",
"	table process selected rows	( animals, ([Group] = fish) | ([Animal]=Penguin,Beluga), [Characteristics] = \"Can swim\" );",
"",
"	table list ( animals );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table process selected rows fast", "table process cells", "table process cells selected rows", "table process columns", "table process columns selected rows", "table manipulate" ]
}
,

"table process selected rows fast" :
{
	"Function Names":	[ "table process selected rows fast" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	In contrast to __table process selected rows(__), you can achieve significant performance improvment if the targeted table is sorted and",
"	and the Boolean expression tests at least on the sorting value.",
"	It becomes useful when calling this function from a loop processing the same or different table, including calling out from code inside ",
"	__table process(__) / __table process selected rows(__).",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Starting row number",
		  "Direction": "io",
		  "Types": [ "numeral" ],
"Description" : [
"			Specify the starting row number to checking and processing.  The range is between 1 and total number of rows minus 1.  0 will be corrected to 1.<br>",
"		    It must be variable which will be updated with the row number to use next.  After function call is completed, the row number may have changed",
"			to a bigger value.",
"",
"			<u>Attenetion</u>: This function does not support negative indexing (e.g. -1 = last row).  Processing will be done from top to bottom."
 ]
		  
		},
		{ "Number": "4.",
		  "Name": "Processing option",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			Use one of the following values:",
"			<b>continue</b>",
"			* Begin checking at the row as specified in the 3rd function parameter.",
"			* If expression does not yet match, then continue checking the following rows (until end of table has been reached).",
"			* If expression matches, then execute statements and increment row number (to be returned).  Then continue checking the expression in the next row.",
"			* If expression no longer matches, then stop checking.",
"			* 3rd function parameter will either return next row after last row processed, or, if there was no match, the row number of last row + 1 (= table length value).",
"			<b>stop</b>",
"			* Begin checking at the row as specified in the 3rd function parameter.",
"			* If expression does not yet match, then stop immediately and leave the row number provided in the 3rd function parameter unchanged.",
"			* If expression matches, then execute statements and increment row number (to be returned).  Then continue checking the expression in the next row.",
"			* If expression no longer matches, then stop checking.",
"			* 3rd function parameter will either return next row after last row processed.",
"			<b>repeat</b>",
"			works similarly as <b>continue</b>, but following differences apply:",
"			* If a match has been found, then the 1st matching row number is returned in the 3rd function parameter.",
"			* If no match has been found, then the supplied row number will stay unchanged.",
"			<b>repeat remaining</b>",
"			works similarly as <b>repeat</b>, but following differences apply:",
"			* It will check all matches till the end of the table.",
"			<b>repeat revolving</b>",
"			works similarly as <b>repeat</b>, but following differences apply:",
"			* If no matches are found from specified row number till end of table, then it will start at row 1 to check the rows located above.",
"			<u>Hint</u>: See also illustration in the next section, __Additional info on fast processing of rows__."
 ]
		  
		},
	  {
		 "Number":		"5.",
		 "Name":		"Statements (applicable where rows are selected)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process</b>: The statements provided will be executed for every row.<br>",
"				<b>table process selected rows</b>: The statements provided will be executed for every row where the condition calculated before returned <b>true</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Full Name] = [First Name] + ' ' + [Family Name];<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  }
	],
	"Return value":
	[
		{ "Name": "Number of rows processed",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( t, { { Name, Game Score, Done},",
"	  { Andy, 21 }, { Andy, 12 }, { Andy, 20 }, { Max,  50 }, { Max,  31 },",
"	  { Tina, 32 }, { Andy, 44 }, { Andy, 16 }, { Max,  25 }, { Tina, 19 } } );",
"",
"",
"	// table sort rows ( t, Name );",
"	echo(\"Original table, sorted by name: \");",
"	table list( t );",
"",
"	echo(\"Example 1: Demonstrate processing option 'continue':\");",
"	table copy table ( t, t1 );",
"	row[] = 1; counter[] = 1;",
"	do",
"	{",
"		c[] = table process selected rows fast( t1, [Name]==Andy, row[], continue, [Done] = counter[]++  );",
"		echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	}",
"	while (c[] > 0);",
"	table list( t1 );",
"",
"	echo(\"Example 2: Demonstrate processing option 'stop':\");",
"	table copy table ( t, t1 );",
"	row[] = 1; counter[] = 1;",
"	do",
"	{",
"		c[] = table process selected rows fast( t1, [Name]==Andy, row[], stop, [Done] = counter[]++  );",
"		echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	}",
"	while (c[] > 0);",
"	table list( t1 );",
"",
"	echo(\"Example 3: Demonstrate processing option 'repeat':\");",
"	table copy table ( t, t1 );",
"	row[] = 1; counter[] = 1;",
"	c[] = table process selected rows fast( t1, [Name]==Max, row[], repeat, [Done] = counter[]++  ); // Stops",
"	echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	row[] = 6;",
"	c[] = table process selected rows fast( t1, [Name]==Max, row[], repeat, [Done] = counter[]++  ); // Processing",
"	echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	row[]++; // Next row",
"	c[] = table process selected rows fast( t1, [Name]==Max, row[], repeat, [Done] = counter[]++  ); // Processing",
"	echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	table list( t1 );",
"",
"	echo(\"Example 4: Demonstrate processing option 'repeat remaining':\");",
"	table copy table ( t, t1 );",
"	row[] = 3; counter[] = 1;",
"	c[] = table process selected rows fast( t1, [Name]==Andy, row[], repeat remaining, [Done] = counter[]++  ); // Stops",
"	echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	table list( t1 );",
"",
"	echo(\"Example 5: Demonstrate processing option 'repeat revolving':\");",
"	table copy table ( t, t1 );",
"	row[] = 10; counter[] = 1;  // Will find nothing below row 10, so continue from beginning",
"	c[] = table process selected rows fast( t1, [Name]==Andy, row[], repeat revolving, [Done] = counter[]++  ); // Stops",
"	echo(\"Row number returned: \", row[], \",  Items processed: \", c[] );",
"	table list( t1 );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table process selected rows" ]
},

 "Addt'l Info on fast rows processing":
 {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Additional info on fast processing of rows" ],
"Description 01:Introduction" : [
"	    The following illustration summarizes the different processing options.",
"",
"			<br/><img src=\"Images/Function_table_process_rows_fast.jpg\" alt=\"Fast processing with different options\"><br/>",
"",
"		If this function is properly applied, then the processing performance can be increased significantly because checking unnecessary rows ",
"		will no longer take place. Assuming you have two tables which are properly sorted by the full persons' names in alphabetic order.  ",
"		(If they are not, then sort the tables with the function __table sort rows(__). Table A contains 5,000 names of customers with usual ",
"		details such as delivery and billing addresses and phone numbers.  Table B contains all the purchases these people have made and contains roughly 20,000 rows.",
"		Your goal: You want to identify the maximum purchase volume every person has done and add these values into a new column in table A (Field: Total Purchase Value)."
 ]
		,

"Description 02:Conventional Appraoch but Slow" : [
"		If you use the function table process selected rows (…) for table A to work off every name, and in a nested way on table B to gather all the purchases, ",
"		the a total of 20,000 x 5,000 = one hundred million rows will be checked and this processor intensive process can take several minutes to complete."
 ]
		,

"Examples 02:" : [
"		table insert columns( A, Total Purchase Value );",
"		table process( A,",
"		{",
"			name[] = [Name];",
"			sum[] = 0;",
"			table process selected rows( B, [Name]==name[], sum[]+=[Purchase Value] );",
"			[Total Purchase Value] = sum[];",
"		}"
 ]
		,

"Description 03:Much Faster" : [
"",
"		Let's assume that table A contains the details of all names which are also mentioned in table B, but some customers in table A may not have done ",
"		purchases recently, so they are not listed in table B.  The function __table process selected rows fast(__) uses variable row[ ] as starting point ",
"		and will be updated after every call."
 ]
		,

"Examples 03:" : [
"		table sort rows( A, Name ); // Sort the table if not yet in alphabetic order",
"		table sort rows( B, Name ); // \"",
"		table insert columns( A, Total Purchase Value );",
"		row[] = 1;",
"		table process( A,",
"		{",
"			name[] = [Name];",
"			sum[] = 0;",
"			table process selected rows fast( B, [Name]==name[], row[], stop, sum[]+=[Purchase Value] );",
"			[Total Purchase Value] = sum[];",
"		} );",
""
 ]
		,
"Description 04:Choosing the right Processing option" : [
"		The 'conventional' appraoch ",
"",
"		=== 400, 100, 100, 100, 100, 100, 100",
"		Precondition for proper table processing										| stop		| continue	| repeat		| repeat remaining	| repeat revolving	| Convent. Approach",
"		Table A must be sorted															| Yes		| Yes		| Yes			| 1st occurrence	| Don't care		| Don't care",
"		Table B must be sorted															| Yes		| Yes		| Yes			| Yes				| Don't care		| Don't care",
"		In Table B, all items with the same name must be in one block of adjacent rows.	| Yes		| Yes		| Yes			| Don't care		| Yes				| Don't care",
"		All names in Table A must be unique												| Yes		| Yes		| Don't care	| Don't care		| Don't are			| Don't care",
"		All names in Table B must also exist in Table A									| Yes		| Don't care| Don't care	| Don't care		| Don't are			| Don't care",
"		All names in Table A must also exist in Table B									| Don't care| Don't care| Don't care	| Don't care		| Don't are			| Don't care",
"	    Processing performance															| Very fast	| Fast		| Fast			| Moderate			| Slow				| Very slow",
"		==="
 ]
		
} // 

,

"table process cells (selected rows)" :
{
	"Function Names":	[ "table process cells", "table process all cells", "table process cells selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Slightly different from the the functions __table process(__) and __table process selected rows(__), the specified ",
"	statements are applied on every existing table cell (from left to right) and not only once per row.  The statements for processing the data ",
"	in every cell are provided as function parameters.  For this function, the enabled __partial table references__ also",
"	includes referencing the current column number by simply specifying a '.' (point) and you can use the function __col(__) to retrieve",
"	the current column number.",
"",
"	<br><br>",
"	<b>table process all cells</b> will also process all elements in row 0 (header row), too, whereas the other funnctions skip the header row.",
"",
"	<br><br>",
"	This feature allows simple formulation of instructions wihtout writinng a 2-dimensional loop.",
"	The closest relative of this function is the combination of __for all table rows(__)  and __for all table columns(__) which describe two nested loops",
"",
"	<br><br>",
"	<u>Hint</u>: If the table contains rows with different widths and you want to apply this function to the full table row width as provided in the header",
"	row or longest row, then use the function __table fit(__) first in order to prepare the table to your needs.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table process selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.  It will be calculated only once per row (and not for every cell).<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
	  {
		 "Number":		"2. / 3.",
		 "Name":		"Statements (applicable where rows are selected)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process cells</b>: The statements provided will be executed for every row.<br>",
"				<b>table process cells selected rows</b>: The statements provided will be executed for every row where the condition calculated before returned <b>true</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[.] = [.] + '.txt';</b> to append '.txt' into every existing table cell.<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  },
	  {
		 "Number":		"4.",
		 "Name":		"Statements (otherwise)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process cells</b>: Not applicable. This function accepts 3 parameters only.",
"				<b>table process cells selected rows</b>: The statements provided will be executed for every cell in every row where the condition calculated for that row returned <b>false</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Full Name] = [First Name] + ' ' + [Family Name];<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  }
	],
	"Return value":
	[
		{ "Name": "Number of cells processed",
		  "Types": [ "numeral" ],
		  "Description": "With <b>table process selected rows</b>, the number of selected rows (and processed with statements from 3rd function parameter) are counted."
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( animals, { {Animal, Group, Special abilities},",
"	    { parakeet, bird, can fly },  { moose, mammal },  { ape, mammal, quite samrt },  { sparrow, bird } , { trout, fish }, { bass, fish },",
"	    { canary, bird }, { penguin, bird }, { beluga, mammal, submarine sonar} } );",
"",
"	table process cells               ( animals, [.] += '!' );                      // Add an exclamation to text in every existing cell",
"	table process cells selected rows ( animals, [Group]=='mammal!', [.] = +[.] );  // Convert all contents (except header row) to upper case.",
"",
"	table list ( animals );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table process", "table process selected rows", "table process columns", "table process selected columns", "table process cells in columns", "table process cells in columns selected rows", "table manipulate" ]
},


//	table process cells in columns , table process cells selected rows in columns
//  ________________________________________________________________________________________________________________________



"table process cells in columns (selected rows)" :
{
	"Function Names":	[ "table process cells in columns", "table process cells in columns selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions are derivatives of __table process cells(__) and __table process cells selected rows(__) with the only difference that",
"	an additiona function parameter specifies the columns to be processed.  All other columns remain untouched.  As an example, this",
"	function is suitable for processing a table containing many columns with dates and you want to use one single statement to reschedule or",
"	reformat all dates.  ",
"	",
"	<br><br>",
"	",
"	For this function, the enabled __partial table references__ also includes referencing the current column number by simply specifying a '.' (point) ",
"	and you can use the function __col(__) to retrieve the current column number.",
"",
"	<br><br>",
"	This feature allows simple formulation of instructions wihtout writinng a 2-dimensional loop.",
"	The closest relative of this function is the combination of __for all table rows(__)  and __for all table selected columns(__) which describe two nested loops.",
"",
"	<br><br>",
"	<u>Note</u>: The statements will be applied on all rows underneath the specified columns, even if some table rows are shorter than the column positions",
"	used.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3-5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			This parameter specifies the columns which shall be processed with the statements provided in the following parameter(s).  All other columns remain unaffected.",
"			Nothing will be executed if no columns are specified.",
"",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of existing header names and column numbers may be specified",
""
 ]
			
	  },
		{   "Number":		"Opt. 3.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table process selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.  It will be calculated only once per row (and not for every cell).<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
	  {
		 "Number":		"3. / 4.",
		 "Name":		"Statements (applicable where rows are selected)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process cells</b>: The statements provided will be executed for every row.<br>",
"				<b>table process cells selected rows</b>: The statements provided will be executed for every row where the condition calculated before returned <b>true</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[.] = [.] + '.txt';</b> to append '.txt' into every existing table cell.<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  },
	  {
		 "Number":		"5.",
		 "Name":		"Statements (otherwise)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process cells</b>: Not applicable. This function accepts 3 parameters only.",
"				<b>table process cells selected rows</b>: The statements provided will be executed for every cell in every row where the condition calculated for that row returned <b>false</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Full Name] = [First Name] + ' ' + [Family Name];<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  }
	],
	"Return value":
	[
		{ "Name": "Number of cells processed",
		  "Types": [ "numeral" ],
		  "Description": "With <b>table process selected rows</b>, the number of selected rows (and processed with statements from 3rd function parameter) are counted."
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( animals, { {Animal, Group, Special abilities},",
"	    { parakeet, bird, can fly },  { moose, mammal },  { ape, mammal, quite samrt },  { sparrow, bird } , { trout, fish }, { bass, fish },",
"	    { canary, bird }, { penguin, bird }, { beluga, mammal, submarine sonar} } );",
"",
"	table process cells in columns               ( animals, { Group, Special abilities},   [.] += '!' );    // 2 named columns affected",
"	table process cells in columns selected rows ( animals, { 0, -1 }, [Group]=='mammal!', [.] = +[.] );    // 1st and last column affected, mammals only",
"",
"	table list ( animals );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table process cells", "table process cells selected rows" ]
}
,


"table process (selected) columns" :
{
	"Function Names":	[ "table process columns", "table process selected columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	The function <b>table process columns</b> iterates through all columns from left to right, similarly to for all table columns(__).<br>",
"	The function <b>table process selected columns</b> iterates through all columns from left to right and processes them, if the condition expression is true.",
"	This feature works very similarly as __table process selected rows(__), but in the horizontal direction from left to right.",
"",
"	<br><br>",
"	The width of the header row does primarily determine the loop from left to right to process the columns.  The loop may be extended if",
"	column numbers beyond the last header are specified.",
"",
"	<br><br>",
"",
"	For this function, the enabled __partial table references__ also includes referencing the current column number by simply specifying a '.' (point)",
"	and you can use the function __col(__) to retrieve the current column number.",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3-5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"				The specified row number will be used as current row when executing expressions and statements below using __partial table specificatiions__."
 ]
		  
		},
		{   "Number":		"Opt. 3.",
			"Name" :		"Expression to select columns",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table process selected columnss</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select columns__.<br>",
"				You have the choice between boolean expressions (calculated for every column), a single column number or header name, or a parameter set containing",
"				column header names and/or numbers.  Note that processing will always happen from left to right with all columns affected.  It makes no differnce whether",
"				a column is referenced once or more.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily using the point '.' to describe the current column.  Example: <b>[.]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
	  {
		 "Number":		"3. / 4.",
		 "Name":		"Statements (applicable where columns are selected)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process columns</b>: The statements provided will be executed once for every column.<br>",
"				<b>table process selected columns</b>: The statements provided will be executed once for every column where the condition calculated before returned <b>true</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[.] = [.] + '.txt';</b> to append '.txt' into every existing table cell.<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  },
	  {
		 "Number":		"5.",
		 "Name":		"Statements (otherwise)",
		 "Direction":	"code",
		 "Types":		["statements", ":literal"],
"Description" : [
"				<b>table process columns</b>: Not applicable. This function accepts 3 parameters only.",
"				<b>table process selected columns</b>: The statements provided will be executed once for every cell in every row where the condition calculated for that row returned <b>false</b>.<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.<br>",
"				<br><br>",
"				<u>Hint</u>: If you encounter an error message at the very end of the program after you worked on a statement, you may proabably have forgotton to add the closing parentheses to close the function call."
 ]
				
	  }
	],
	"Return value":
	[
		{ "Name": "Number of cells processed",
		  "Types": [ "numeral" ],
		  "Description": "With <b>table process selected rows</b>, the number of selected rows (and processed with statements from 3rd function parameter) are counted."
		}
	],
"Examples" : [
"	include ( Support Library );",
"",
"	table load( cities, \"Examples\\Cities.csv\" );",
"",
"	table process columns          ( cities, 4, if (!is numeric([.])) [.] += '!' ); // ! after text items",
"",
"	table process selected columns ( cities, 4, [.,0]==\"City\", [.] = +[.] ); // City upper case",
"	table process selected columns ( cities, 5, {0..2},        [.] = +[.] ); // Row 5, coluns 0..2 upper ase",
"",
"	// Copies 'Little Mermaid' (next row below) from Copenhagen to Montréal",
"	table process selected columns ( cities, 6, 4,             [.] = [.,row()+1] );",
"",
"	table list ( cities );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table process rows", "table process selected rows", "table process cells", "table process cells selected rows" ]
}
,

"table manipulate" :
{
	"Function Names":	[ "table manipulate" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Referring to __table process selected rows(__), the condition expressions and following statements to be executed on applicable rows",
"	need to be coded directly in the B4P program.  Alternatively, one or more sets of expressions and statements can be provided in a table, and",
"	that table will be applied to process a different table.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing target table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of existing lookup table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "This table must contain two columns: One for the expressions and one for the statements." ]
		},
		{ "Number": "3.",
		  "Name": "One column in lookup table containing expressions",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified."
 ]
			
		},
		{ "Number": "4.",
		  "Name": "One column in lookup table containing statements to execute",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified."
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( animals,",
"		{ { Animal, Leg Count, Comment },",
"		  { ant, 6 }, { rat, 4 }, { octopus, 8 }, { centipede, 100 }, { parakeet, 2 },",
"		  { tick, 8 }, { orang utan, 2 or 4 }, { human, 2 }, { lobster, 8 }, { snake, 0 }, { dog, 4 },",
"		  { cat, 4 }, { kangaroo, 2 or 4 }, { fly, 6 }, { alien, 3 }, { worm, 0 }, { emu, 2 } }  );",
"",
"	table copy table (animals, a2 );",
"",
"",
"	table initialize( lookup, {",
"		  { Condition,                  Todo },",
"		  { \"[Leg Count] = '*or*'\",     \"[Comment] = 'Leg count probably unclear'\" },",
"		  { \"[Leg Count] > 6\",          \"[Comment] = 'Many legs'\" },",
"		  { \"[Animal] = rat\",           \"[Animal] = 'mouse'; [Comment] += 'not a rat'\" },",
"		  { \"true\",                     \"[Animal] = ![Animal]\" } } ); // Upper case O ALL",
"",
"	table manipulate( animals, lookup, Condition, Todo );",
"	table list( animals );",
"",
"	echo(\"Equivalent alternative appraoch intead of using 'table manipulate',but a bit more cryptic:\" );",
"",
"	table process( lookup, table process selected rows( a2, :[Condition], :[Todo] ) );",
"	table list( a2 );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table process selected rows" ]
}
,

"table fill vertically ..." :
{
	"Function Names":	[ "table fill vertically", "table fill vertically selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	In various tables, contents are mentioned in only one row and the rows below are kept blank even though the same contents are assumed.",
"	This function will repeat the contents in accordingly.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2-5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table fill vertically selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2. / 3.",
		  "Name": "Columns to repeat",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			In these columns, blank rows will be overwritten by the exsiting contents above (or below if specified in the last function parameter.<br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3. / 4.",
		  "Name": "Strings representing repetition",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'' (blank)",
"Description" : [
"",
"			If one literal is provided, then it will be used to compare with all columns.  If more literals are provided in a parameter set, then they will",
"			correspond with the columns specified.  If the parameter set contains fewer elements than the number of columns provided, then the last element",
"			will apply for the remaining columns.  Otherwise, if this parameter set is longer, then the excess values will be ignored.",
"			Soft quoted literals allow use of __wildcard symbols__ in order to compare for different strings, e.g. 'see above*,' covers <i>begins with 'see above'</i>",
"			and <i>equals to blanks</i> (note the comma at the end).",
"			<br>",
"			Good examples: '\"', '', \"(see above)\", \"ditto\", 'see above,look above',\"*...*\",'see*'<br>",
"			<u>Note</u>: If the 1st (or last) item is already deemed as blank (e.g. 'same'), then it will not be overwritten because no non-blank value is available yet."
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Direction",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "down",
		  "Description":
			[ "Following values are supported: <b>up</b> and <b>down</b> for repeating contents in upward resp. downward direction." ]
		}

	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( t, { {Name, Date, Tennis Scores},",
"		 { Jim,   \"2020-06-20\", \"6:5 6:2 6:3\" },",
"		 { \"\",    \"same day\"  , \"7:6 6:4 5:6\" },",
"		 { \"\",    \"2020-06-21\", \"6:2 5:6 4:6\" },",
"		 { Jane,  \"same day\",   \"5:4 6:5 7:6\" },",
"		 { \"\",    \"\",           \"3:6 7:6 6:5\" } } );",
"",
"	table copy table ( t, u );",
"",
"	echo(\"Repeat blank entries\");",
"	table fill vertically( t, { Name, Date }, { \"\", 'same day,' } );",
"	table list ( t );",
"",
"	echo(\"Here: Ignore entries with blankn names. Jane played at the same date as Jim did.\");",
"	table fill vertically selected rows ( u, [Name]!=\"\", { Name, Date }, { \"\", 'same day,' } );",
"	table list ( u );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table fill horizontally", "table substitute vertically" ]
}
,

"table substitute vertically ..." :
{
	"Function Names":	[ "table substitute vertically", "table substitute vertically selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions are the counterparts to __table fill horizontally(__) and __table fill horizontally selected rows(__).",
"	Here, repetitions in rows will be replaced by blanks or substitute symbols of choice (e.g. \", see above, ditto, etc.)",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2-5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table substitute vertically selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2. / 3.",
		  "Name": "Columns to substitute",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			In these columns, rows with repeating contents will be substituted.<br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3. / 4.",
		  "Name": "Substitution strings",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'' (blank)",
"Description" : [
"",
"			If one literal is provided, then it will be used to substitute fields in all specified columns.  If more literals are provided in a parameter set, then they will",
"			correspond with the columns specified.  If the parameter set contains fewer elements than the number of columns provided, then the last element",
"			will apply for the remaining columns.  Otherwise, if this parameter set is longer, then the excess values will be ignored.<br>",
"			Good examples: '' (blank), '...', 'see above', etc.<br>"
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Direction",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "down",
		  "Description":
			[ "Following values are supported: <b>up</b> and <b>down</b> for repeating contents in upward resp. downward direction." ]
		}

	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( t, { {Name, Date, Tennis Scores},",
"		 { Jim,   \"2020-06-20\", \"6:5 6:2 6:3\" },",
"		 { Jim,   \"2020-06-20\", \"7:6 6:4 5:6\" },",
"		 { Jim,   \"2020-06-21\", \"6:2 5:6 4:6\" },",
"		 { Jane,  \"2020-06-21\", \"5:4 6:5 7:6\" },",
"		 { Jane,  \"2020-06-21\", \"3:6 7:6 6:5\" } } );",
"",
"	table copy table ( t, u );",
"",
"	echo(\"Original table: \");",
"	table list( t );",
"",
"	echo(\"Substitution downward:\");",
"	table substitute vertically( t, {Name, Date}, { '\"', '...' } );",
"	table list( t );",
"",
"	echo(\"Substitution upward, Jim only:\");",
"	table substitute vertically selected rows ( u, [Name]==Jim, {Name, Date}, { '\"', '...' }, up );",
"	table list( u );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table fill vertically", "table substitute horizontally" ]
}
,

"table fill horizontally ..." :
{
	"Function Names":	[ "table fill horizontally", "table fill horizontally selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	In various tables, contents are mentioned in only one column and the columns to the right (or left) are kept blank even though the same contents are assumed.",
"	This function will repeat the contents accordingly.",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1-6",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table fill horizontally selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt 2. / 3.",
		  "Name": "Starting column to repeat",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "0 (first column)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt 3. / 4.",
		  "Name": "Ending column to repeat",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "(last column)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Strings representing repetition",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (blank)",
"Description" : [
"",
"			Provide one literal with matching pattern.  This one will apply to all rows and columns.",
"			Soft quoted literals allow use of __wildcard symbols__ in order to compare for different strings, e.g. 'see above*,' covers <i>begins with 'see above'</i>",
"			and <i>equals to blanks</i> (note the comma at the end).",
"			<br>",
"			Good examples: '\"', '', \"(see above)\", \"ditto\", 'see above,look above',\"*...*\",'see*'<br>",
"			<u>Note</u>: If the 1st (or last) item is already deemed as blank (e.g. 'same'), then it will not be overwritten because no non-blank value is available yet.",
"			"
 ]
			
		},
		{ "Number": "Opt. 5. / 6.",
		  "Name": "Direction",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "right",
		  "Description":
			[ "Following values are supported: <b>left</b> and <b>right</b> for repeating contents in left resp. right direction." ]
		}

	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( a,",
"			{ { Last Name,    Jan,    Feb,    Mar,    Apr,    May,    June },",
"			  { Miller,       5,      '',     15,     '',     '',     25   },",
"			  { Muller,       '',     '',      6,     '',     14,     ''   },",
"			  { Tanner,       7,      same,    17,    same,   same,   ''   },",
"			  { Gerber,       '',     same,    0,     10,     11,     12   } } );",
"",
"	echo(\"Original table:\");",
"	table list(a);",
"	table copy table ( a, b );",
"",
"	echo(\"Fill from left to right\");",
"	table fill horizontally ( b, Jan, -1, 'same,'  );",
"	table list(b);",
"",
"	echo(\"Fill from right to left \");",
"	table fill horizontally ( a, Jan, -1, 'same,', left  );",
"	table list(a);",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table fill vertically", "table substitute horizontally" ]
}, 


//	table substitute horizontally, table substitute horizontally selected rows
//  ________________________________________________________________________________________________________________________


"table substitute horizontally ..." :
{
	"Function Names":	[ "table substitute horizontally", "table substitute horizontally selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions are the counterparts to __table fill horizontally(__) and __table fill horizontally selected rows(__).",
"	Here, repetitions in rows will be replaced by blanks or substitute symbols of choice (e.g. \", see above, ditto, etc.)",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1-6",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table substitute horizontally selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt 2. / 3.",
		  "Name": "Starting column to repeat",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "0 (first column)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt 3. / 4.",
		  "Name": "Ending column to repeat",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "(last column)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Substitution string",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (blank)",
"Description" : [
"",
"			The substitution string specified here will be used to replace repeated contents.  Good examples: '', '...', 'same'."
 ]
			
		},
		{ "Number": "Opt. 5. / 6.",
		  "Name": "Direction",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "right",
		  "Description":
			[ "Following values are supported: <b>left</b> and <b>right</b> for repeating contents in left resp. right direction." ]
		}

	],
"Examples" : [
"	include( Support Library );",
"	table initialize( a,",
"			{ { Last Name,    Jan,    Feb,    Mar,    Apr,    May,    June },",
"			  { Miller,       5,      6,      15,     15,     15,     25   },",
"			  { Muller,       '',     6,      6,      6,      14,     14   },",
"			  { Tanner,       7,      7,      17,     17,     17,     17   },",
"			  { Gerber,       '',     9,      10,     11,     12,     12   } } );",
"",
"	echo(\"Original table:\");",
"	table list(a);",
"	table copy table ( a, b );",
"",
"	echo(\"Substitte from left to right\");",
"	table substitute horizontally ( b, Jan, -1, '...'  );",
"	table list(b);",
"",
"	echo(\"Substitute from right to left \");",
"	table substitute horizontally ( a, Jan, -1, '...', left  );",
"	table list(a);",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table fill horizontally", "table substitute vertically" ]
}

,

"table delete cells selected rows" :
{
	"Function Names":	[ "table delete cells selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a column from the table and places the values in the parameter set from the selected rows where the calculated expression returns true.",
"	All blank or non-existing entries will be translated to blank literals.  Automatic type conversion (e.g. numbers to numerals) can be adjusted with the",
"	__table configure(__) function.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Existing column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 4.",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "1",
"Description" : [
"		  Number of cells to delete (with contents to the right shifting to the left accordingly)<br>",
"		  __Negative indexing__ is supported, i.e. -1 removes all cells till end of row, -2 removes all cells except last column (which will left-shift accordingly), etc.",
"		  The position of the last column relates to the last column of the widest row in the table, and not the header row or current row alone."
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows processed",
		  "Types": [ "numeral" ],
		  "Description": "Counts all rows selected where cells have been deleted."
		}
	],
"Examples" : [
"	include( Support Library );",
"	table initialize ( t,",
"	  { { Nr,  A,  B,  C,  D,  E  },",
"			{  1,  A1, B1, C1, D1, E1, F1, G1 },",
"			{  2,  A2, B2, C2, D2, E2, F2, G2 },",
"			{  3,  A3, B3, C3, D3, E3 },",
"			{  4,  A4, B4, C4, D4, E4, F4, G4 },",
"			{  5,  A5, B5, C5, D5, E5, F5, G5 } } );",
"",
"	table copy table( t, u );",
"",
"	echo(\"2 cells removed in rows 2-4\");",
"	a[] = table delete cells selected rows( t, ([Nr]=2..4), C, 2 );",
"	table list ( t );",
"	echo(\"Number of rows affected: \", a[]);",
"",
"	echo(\"All remaining cells removed\");",
"	a[] = table delete cells selected rows( u, ([Nr]=2..4), C, -2 );",
"	table list ( u );",
"	echo(\"Number of rows affected: \", a[]);",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete cells selected columns" ]
}
,

"table delete cells selected columns" :
{
	"Function Names":	[ "table delete cells selected columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		In a specified row, cells of specified columns will be deleted where the contents below will shift up."
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"		    Only the cells in the specified columns will be deleted</b>.",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description": [ "Starting row number where cells in specified columns (and below) will be deleted" ]
		},
		{ "Number": "Opt. 4.",
		  "Name": "Count",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "1",
"Description" : [
"		  Number of cells to delete (with contents below shifting up accordingly)<br>",
"		  __Negative indexing__ is supported, i.e. -1 removes all cells below, -2 removes all cells except the cell in the last row (which will move up accordingly), etc."
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Number of columns processed",
		  "Types": [ "numeral" ],
		  "Description": "Counts all columns selected where cells have been deleted."
		}
	],
"Examples" : [
"	include( Support Library );",
"	table initialize ( t,",
"	  { { Nr,  A,  B,  C,  D,  E  },",
"			{  1,  A1, B1, C1, D1, E1, F1, G1 },",
"			{  2,  A2, B2, C2, D2, E2, F2, G2 },",
"			{  3,  A3, B3, C3, D3, E3 },",
"			{  4,  A4, B4, C4, D4, E4, F4, G4 },",
"			{  5,  A5, B5, C5, D5, E5, F5, G5 } } );",
"",
"",
"	echo(\"Original table:\");",
"	table list ( t );",
"",
"	echo(\"2 cells removed in rows 2-4\");",
"	a[] = table delete cells selected columns( t, {A..C,E,7}, 2, 2 );",
"	table list ( t );",
"	echo(\"Number of columns affected: \", a[]);"
 ]
	,
	"Output": "automatic",
	"See also": [ "table delete cells selected rows" ]
}
,

"table format numbers" :
{
	"Function Names":	[ "table format numbers" ],
	"Documentation":	"Function Description",
"Description" : [
"		All numbers in specified columns of the specified table will be identified and formatted according to specifications provided.",
"		The mechanism is the same as in the function  __literal(__) where numbers are provided.  Non-numeric data, e.g. text, dates and blank fields, ",
"		remain unchanged."
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"		    The specified table columns will be considered for formatting.<br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Formatting template",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Refer to section on __numeral to literal conversion and formatting__" ]
		},
		{ "Number": "Opt 4.",
		  "Name": "Locale (formatting option)",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Refer to section on __numeral to literal conversion and formatting__, to specify a valid __locale__," ]
		},
		{ "Number": "Opt 5.",
		  "Name": "Placeholder symbol",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "Refer to section on __numeral to literal conversion and formatting__, to specify a placeholder symbol." ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize ( t, { { Product, Price per 100kg, Discount },",
"		{ Apples,  45.5, 0.05 },",
"		{ Oranges, 90.5, 0.10 },",
"		{ Durian,  1240, none } } );",
"",
"	table format numbers( t, Price per 100kg, \"'EUR '?,??0.00\", de_DE, '*'  );",
"	table format numbers( t, Discount, \"?0.00 %\" );",
"",
"	table list ( t );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Literal conversion" ]
}
,

"table fit" :
{
	"Function Names":	[ "table fit" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	Various options are available to check the shape of the table (different row width across the table rows) and, ",
"	if specified to do fitting work by padding too short rows or truncating too long rows.",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"2-3",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"		    Option, one of the following:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			min table width				| See illustration below",
"			min header width			| \"",
"			max table width				| \"",
"			equal header width			| \"",
"			trim						| Trims the table by removing blank contents (or equaling to padding contents if specified)",
"			check						| Check if table is rectangular (all rows have same width)",
"			===",
"",
"			Effect of the options on the table:",
"			<br/><img src=\"Images/Function_table_fit.jpg\" alt=\"Different options for 'table fit'\"><br/>",
""
 ]
			
		},
		{ "Number": "Opt. 3.",
		  "Name": "Padding contents",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (blank)",
"Description" : [
"",
"			The contents will be used to pad up the short rows in order to align them as specified.",
"			With the option <b>trim</b>, contents in every row are checked from right to left if they equal to the specified padding contents ",
"			(or blank if not specified).  The extraneous cells will be deleted and the rows made shorter.",
""
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Table is rectangular",
		  "Types": [ "boolean" ],
		  "Description": "true if the entire table is rectangular, i.e. number of columns per row is the same everywhere."
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t,",
"		{ { A,  B,  C,  D,  E,  F  },",
"		  { A1, B1, C1, D1, E1, F1 },",
"		  { A2, B2, C2, D2, E2, F2, G2, H2  },",
"		  { A3, B3, C3, D3, '', '', '', ''  },",
"		  { A4, B4, C4, D4, '', '', '', ''  },",
"		  { A5, B5, C5, D5, '', '' },",
"		  { A6, B6, C6, D6 },",
"		  {  '', '' },",
"		  { A9, B9 } } );",
"",
"	table insert columns( t, Width, \"\", 0 );",
"	table process ( t, [Width] = table row width( t, row() )-1 );",
"",
"	echo(\"Original table:\" );",
"	table list( t );",
"",
"	define procedure ( demonstrate table fit, {{ option, literal }} )",
"	{",
"		table copy table ( t, u );",
"		padding[] = select if ( option[]!=trim, \"-\", \"\" );",
"		rect[] = table fit ( u, option[],  padding[] );",
"		echo( \"Fit table to '\", option[],\"' (rectangular = \", rect[],\"):\" );",
"		table process ( u, [Width] = table row width( u, row() )-1 );",
"		table list (u);",
"	}",
"",
"	demonstrate table fit (check );",
"	demonstrate table fit (min table width );",
"	demonstrate table fit (min header width );",
"	demonstrate table fit (max table width );",
"	demonstrate table fit (equal header width );",
"	demonstrate table fit (trim );"
 ]
	,
	"Output": "automatic",
	"See also": [ "Literal conversion" ]
}
,

"table move rows" :
{
	"Function Names":	[ "table move rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function moves a specified number of rows from one table to another table.  With high performance in focus, this function moves",
"	the rows as they are, i.e. the individual data stay in their column locations where they are and they will not be realigned in order",
"	to match with the header names.",
"",
"	<br><br>",
"",
"	Please consider useing __table merge(__) or __transactions__ if you want to move data with alignments to their headers.",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2 - 5",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing source table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of existing destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "Opt. 3.",
		  "Name": "Destination row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "-1 (below the last table row)",
"Description" : [
"			The contents from the source table will be moved to the destination table, beginning with this specified row number in the ",
"			destination table.  All other rows in the destination table will move down.  __Negative indexing__ is supported here, whereas",
"			-1 is exceptionally referencing to the next row below the lasat row.",
"			* 0 = Insert contents above the header row",
"			* 1 = Insert contents below the header row / above the 1st data row",
"			* -1 (or table length value) = Insert contents <u>below</u> the last row.   -2, -3, etc. count upwards.",
"			If the 3rd parameter is not specified, then the rows will be added to the end of the table.  Since the remaining parameters are ",
"			not specified too, B4P assumes to move the entire table (except header row) to the end of the destination table."
 ]
			
		},
		{ "Number": "Opt. 4",
		  "Name": "Source starting row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1 (1st data row without header)",
"Description" : [
"			Row movement begins at the specified row number.  __Negative indexing__ is supported here.",
"			* 0 includes the header row (row 0)",
"			* 1 begins with first data row",
"			* -1 moves the last row only",
"			* -2 moves the lasat two rows"
 ]
			
		},
		{ "Number": "Opt. 5",
		  "Name": "Source ending row number",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "-1 (till end of table, including last row)",
"Description" : [
"			Row movement ends at specified row number, including that row.  No rows will be transferred if it is smaller than the starting row number.",
"			__Negative indexing__ is supported here where -1 refers to the last existing row."
 ]
			
		 }
	],
	"Exceptions": [ "Table not found" ],
"Examples" : [
"	table initialize( t1,  { Name, Amy, Bea, Colin, Daniela, Emily, Fabian } );",
"	table initialize( t2,  { Names, Richard, Sam, Tim, Udo, Victor, Xavier, Yoel, Zoe } );",
"",
"	echo(  new line, \"Original tables\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );",
"",
"	table move rows ( t1, t2 );",
"",
"	echo(  new line, \"Move all names from t1 to end of t2\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );",
"",
"	table move rows( t2, t1, -1, 9 );",
"",
"	echo(  new line, \"Move the same names back to t1\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );",
"",
"	table move rows( t2, t1, 4, 3, 5 );",
"",
"	echo(  new line, \"Move 3 names (Tim, Udo, Victor) in t2 to t1 before Daniela\");",
"	echo(  \"t1: \", [t1:Name,..] );",
"	echo(  \"t2: \", [t2:Names,..] );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table move selected rows", "table merge" ]
}


,

"table rename" :
{
	"Function Names":	[ "table rename" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function renames the table.  The contents remain untouched."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "New table name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t, {{ Name, Street }, { Miller, '3. Hill St.' }} );",
"	table rename( t, u );",
"",
"	echo(\"Original table renamed:\");",
"	table list( u );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table copy table", "table delete" ]
},




"table copy table" :
{
	"Function Names":	[ "table copy table" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function makes a copy of the table with all contents.",
"		If the new table is already existing, then it will be initialized."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t, {{ Name, Age }, { Ann, 45 }, { Dan, 35 }} );",
"	table copy table ( t, u );",
"	table list ( u );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table copy table selected rows", "table copy table columns" ]
},


"table copy/split table selected rows" :
{
	"Function Names":	[ "table copy table selected rows", "table split table selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function makes a copy of the table with selected rows only.",
"		The function <b>table split table selected rows</b> removes the transferred rows from the original table.",
"		If the new table is already existing, then it will be initialized."
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"3.",
			"Name" :		"Expression to select rows to split",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table split table selected rows</b> only:",
"				The selected rows will be <u>moved</u> into the new table.  If the same row is also mentioned in the 4th parameter, then the row will be copied and not moved.<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{   "Number":		"Opt. 3. / 4.",
			"Name" :		"Expression to select rows to copy",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				The selected rows will be <u>copied</u> into the new table.  Rows specified for both splitting and copying will be considered for copying.<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t, {{ Name, Age }, { Ann, 45 }, { Dan, 35 }, { Eva, 40 }, { Nic, 10 } } );",
"",
"	echo(\"Original table:\");",
"	table list( t );",
"",
"	table copy table selected rows ( t, u, [Age]>=40 );",
"	echo(\"Copied table:\");",
"	table list ( u );",
"",
"	table split table selected rows( t, v, [Age]>=40, [Name]=Eva );",
"	echo(\"Source table after splitting: \");",
"	table list (t );",
"	echo(\"Destnation table after splitting: \");",
"	table list (v );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table copy table", "table copy table columns", "table split table columns" ]
},


"table copy table columns ..." :
{
	"Function Names":	[ "table copy table columns", "table copy table columns selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function makes a copy of the table with all selected columns.<br>",
"		The function <b>table copy table columns selected rows</b> copies only the selected rows instead of all rows.",
"		If the new table is already existing, then it will be initialized."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "3.",
		  "Name": "Header names and/or column numbers",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified"
 ]
			
		},
		{   "Number":		"Opt. 4.",
			"Name" :		"Expression to select rows to copy",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable for <b>table copy table columns selected rows</b> only: The selected rows will be <u>copied</u> into the new table.<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		}

	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t, {{ Name, Age, Hobby },",
"		{ Ann, 45, Skiing }, { Dan, 35, Skating }, { Eva, 40, Bee keeping }, { Nic, 10, Reading } } );",
"",
"	echo(\"Original table:\");",
"	table list( t );",
"",
"	echo(\"Copy Hobby and Name:\");",
"	table copy table columns ( t, u, {Hobby, Name} );",
"	table list( u );",
"",
"	echo(\"Copy Name and Age of young people:\");",
"	table copy table columns selected rows ( t, v, {Name, Age}, [Age]<40 );",
"	table list( v );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table copy table selected rows", "table copy table" ]
},


"table split table columns ..." :
{
	"Function Names":	[ "table split table columns" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function moves selected columns from the existing to a new table..<br>",
"		The function <b>table copy table columns selected rows</b> copies only the selected rows instead of all rows.",
"		If the new table is already existing, then it will be initialized."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"3-4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "3.",
		  "Name": "Columns to spit",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Every column specified must be unique, i.e. no multiple references to the same column"
 ]
			
		},
		{ "Number": "Opt 4.",
		  "Name": "Columns to copy",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Columns also mentioned in the 3rd function parameter will be considered to be split, i.e. splitting overrules copying."
 ]
			
		}

	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t, {{ Name, Age, Hobby, Favorite Color },",
"		{ Ann, 45, Skiing, Blue }, { Dan, 35, Skating, Orange },",
"		{ Eva, 40, Bee keeping, Yellow }, { Nic, 10, Reading, Green } } );",
"",
"	echo(\"Original table:\");",
"	table list( t );",
"",
"	echo(\"Split out Hobby, copy Name and Favorite Color:\");",
"	table split table columns ( t, u, {Hobby, Favorite Color}, {Name, Favorite Color} );",
"	table list( u );",
"",
"	echo(\"Original table contains Name and Age.\");",
"	table list( t );"
 ]
	,
	"Output": "automatic",
	"See also": [ "table split table selected rows", "table copy table" ]
}



,

"table menu ..." :
{
	"Function Names":	[ "table menu", "table menu quick" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function provides a menu on the console allowing user to select a choice.",
"		<b>table menu</b> supports input choices containing 1 or more characters which need to be typed in and confirmed with pressing [Enter].  Input is <u>case sensitive</u>. In case a wrong selection is entered,",
"		you will be asked to repeat the choice.  You can stop running the program by just entering a blank line by pressing [Enter] only.",
"		<br><br>",
"		<b>table menu quick</b> supports input choices containing exactly 1 character which will be accepted without need to press [Enter].  The input is <u>not case sensitive</u>. Execution continus immediately if a ",
"		right choice is entered.  In addition, The user can stop the program with Escape or Control-C.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"4",
	"Restrictions":		["Indirect parameter passing is disabled" ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2",
		  "Name": "Input choices",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			Specify the input the user needs to enter to choose the item.  For <b>table menu quick</b>, limit to 1 character.",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Exactly 1 header names or column numbers may be specified",
""
 ]
			
		},
		{ "Number": "3",
		  "Name": "Description column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			The description items in the table will be shown when the menu is displayed.",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Exactly 1 header names or column numbers may be specified",
""
 ]
			
		},
		{ "Number": "4",
		  "Name": "Selection column",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			The corresponding selecction value will be returned after the user has entered the choice.",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Exactly 1 header names or column numbers may be specified",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Returned selecction",
		  "Types": [ "literal" ],
		  "Description": "The selection is the corresponding entry from the selection column in the table."
		}
	],
"Examples" : [
"	table initialize ( menu,",
"		{ { Choice, Description, Selection, Wine },",
"		  { A,      Smoked salmon with cherry tomatoes,  Fish,  Chablais },",
"		  { B,      300g sirloin with baked potatoes, Beef, Cabernet Sauvignon },",
"		  { C,      Chicken brest with red curry, Riesling },",
"		  { D,      Tirami sù, Dessert, Vin Santo } });",
"",
"	chosen[] = table menu quick( menu, Choice, Description, Selection );",
"",
"	echo(\"You have chosen \", chosen[] );",
"	echo(\"We recommend the following wine: \", [menu:Selection,chosen[],Wine] );",
""
 ]
	,
"Output" : [
"	savecode",
"    A :  Smoked salmon with cherry tomatoes",
"    B :  300g sirloin with baked potatoes",
"    C :  Chicken brest with red curry",
"    D :  Tirami sù",
"Please select: B",
"You have chosen Beef",
"We recommend the following wine: Cabernet Sauvignon"
 ]
	,
	"See also": [ "input", "input quick" ]
}
,

"table compare ..." :
{
	"Function Names":	[ "table compare", "table compare ignore case", "table compare ignore blanks", "table compare ignore both" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function compares two tables intelligently and generates a comparison report with a level of detail you can define.",
"		The comparison can either take place using one or more columns for orientation (e.g. last name and first name) and compare",
"		the other values accordingly, or do a fully automatic comparison without orientation.  Comparison includes checking all",
"		changes made, rows added and/or removed.",
"",
"		<br><br>",
"		The function endings <b>...ignore case/blanks/both</b> make comparisons tolerant to upper/lower case and/or spaces between words.",
"",
"		<br><br>",
"		This function is able to deal with tables where the columns and data rows of the two tables are different.",
"",
"		<br><br>",
"		The report contains the the comparison results. See __Table Comparison Reports__ for details.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"4 - 7",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing newer table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "The table referred here is assumed to be the more recent table." ]
		},
		{ "Number": "2.",
		  "Name": "Name of existing older table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "The table referred here is assumed to be the baseline table." ]
		},
		{ "Number": "3.",
		  "Name": "Name of report table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "A new table will created.  If the table already exists, then it will be initialized." ]
		},
		{ "Number": "Opt. 4.",
		  "Name": "Orientation identifier columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (none)",
"Description" : [
"		    If the table contains unique identifiers or other columns suitable for identifying the entry and providing orientation, for example a combination of last and first name,",
"			a social security number, a product serial number, company name, etc., then specify them in this function parameter.   It does not matter if",
"			some non-unique orientation values (e.g. 2 persons sharing the same first and last names, or only first names are known) do exist.  ",
"			Overall, use of orientation columns will accelerate the comparison process significantly.  A change of a value in an orientation column is interpreted as a new row added (and a different",
"			row possibly deleted).  ",
"			<br><br>",
"			The same orientation headers or column numbers must exist in both tables.  Otherwise, exceptions will be asserted.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 5",
		  "Name": "Reporting option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "differences",
"Description" : [
"			Choose one of the following values:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			entire table		| The report has full table size: It contains all rows and all columns found in both tables, including the equal ones, and the differences are noted in their respective locations. ",
"			entire rows			| The report contains all columns found in both tables, but lists only the rows where the contents differ.",
"			differences			| Shows changes, otherwise blank fields",
"			different columns	| Like above, but deletes all columns where no different data have been found in the rows below below.",
"			different rows		| Like \"differences\", but deletes all rows where no	differences have been encountered.",
"			condensed			| Combination of 'different columns' and 'different rows': Only the rows as well as columns where differences are identified will be shown.",
"			journal				| Sequential change report: 1 difference documented per row with their locations in the old and new table as well as the old and new contents.",
"			==="
 ]
			
		},
		{ "Number": "Opt. 6.",
		  "Name": "Change indication call-back function name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Default value": "'' (blank / no function provided)",
"Description" : [
"",
"		    If needed, specify the name of a __user-defined function__ which shall be called every time a difference has been identified.",
"			In the function, you can generate and return a custom-formulated way how to describe the difference.",
"			This function is supported in conjunction with all reporting options except <b>journal</b>.",
"",
"			<br><br>",
"			<u>Attention:</u> This function is not called for contents vanished by removal of columns.  Details are described below.",
"			<br><br>",
"			If no function is provided, following rule applies: Show new contents if available (if reporting options is entire table or entire rows), or different. ",
"			Show old contents in brackets [ ] if removed."
 ]
			
		},
		{ "Number": "Opt. 7.",
		  "Name": "Call function only if different",
		  "Direction": "input",
		  "Types": [ "boolean" ],
		  "Default value": "false",
"Description" : [
"			If true: Call change indication function only if the contents are different.<br>",
"			If false: Call change indication function for every cell"
 ]
			

		}
	],
	"Return value":
	[
		{ "Name": "Number of tables created or initialized",
		  "Types": [ "numeral" ],
"Description" : [
"			Returns one of the following values:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			identical			| Both tables are perfectly identical, including same order of rows and columns.",
"			equal				| Both tables contain same contents, however the rows and/or columns may be in a different order (e.g. sorted and unsorted table compared)",
"			less				| The newer table contains fewer rows and/or columns, but the remaining data is equal",
"			more				| The newer table contains additional rows and/or columns, but the existing data is equal",
"			different			| The newer table is different (contents have changed or both rows have been added and removed)",
"			failed				| An error has occurred. No comparison made.",
"			===",
""
 ]
		  
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table load( t1, \"Examples/Cities.csv\" );",
"	table keep columns ( t1, {City, Country, Inhabitants, Famous attraction, Moving along } );",
"	table keep selected rows ( t1, [Inhabitants]>=1000000 );",
"",
"	echo(\"Original table:\");",
"	table list ( t1 );",
"",
"	echo(\"Create a modified table:\");",
"	table copy table ( t1, t2 );",
"	table sort rows ( t2, City );",
"	table delete selected rows( t2, [City]==Los Angeles);",
"	table delete columns( t2, Country );",
"	table insert columns( t2, Time Zone, \"\", 3 );",
"	table append( t2, {{ Shanghai, 23000000, \"Jing'an Temple\", \"UTC+8\", Bicycle, Bla }} );",
"		// Last entry 'Bla' lies outside the colums with headers and is considered an orphan.",
"	[t2:City,Paris,Famous attraction] = Moulin Rouge;",
"	[t2:City,Paris,Time Zone] = \"UTC+1\";",
"	[t2:City,New York City,Inhabitants] = 8323340;",
"	table list ( t2 );",
"",
"	echo(\"Lets compare these tables:\");",
"	rv[] = table compare( t2, t1, report, City, different rows );",
"	echo(\"Return value from comparing: \", rv[] );",
"",
"	// Split statistics out in order to fit output onto the page.",
"	table split table columns( report, statistics, {Statistics Parameters, Statistics Values} );",
"	table delete blank rows( report );",
"",
"	echo(\"Comparison Report:\");",
"	table list ( report );",
"	echo(\"Statistics:\");",
"	table list( statistics );",
""
 ]
	,
	"Output": "automatic"

},


 "Table Comparison Strategy" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Table comparison strategy" ],
"Description 01:Introduction" : [
"",
"		The table comparison strategy consist of the following steps:",
"	",
"",
"		<br><br><b>Step 1 - Check column headers</b><br>",
"		The column headers of both old and new tables are checked for matches (commonalities).  ",
"		New column headers seen in the newer table are considered as 'columns added'.",
"		Column headers seen in the older table only are considered as 'columns removed'.",
"		In addition, the columns are checked if they have been shifted or been rearranged.",
"	",
"		<br><br><b>Step 2 - Check orientation identifier columns</b><br>",
"		Orientation columns can be supplied to declare specific columns as orientation or identifiers (such as names, serial numbers, etc.).  ",
"		See __table compare(__), 4th function parameter for details.  Here, the algorithm checks that the orientation columns are existing",
"		in both tables to be compared.",
"",
"		<br><br><b>Step 3 - Match rows with unique orientation identifier headers</b> (Appicable if orientation headers are provided)<br>",
"		The function will match all rows in the new table with their corresponding rows in the old table which have the same contents under the orientation headers.",
"		In case multiple rows are identified (non-unique orientation identifier contents), then the best fitting corresponding line in the old table will be identified.",
"",
"		<br><br><b>Step 4 - Match the remaining rows</b><br>",
"		In case no orientation headers are supplied, or non-unique rows with same orientation identifier values are still existing, then ",
"		these rows will be matched by comparing the remaining columns (or all columns if no orientation identifier has been provided).<br>",
"		<b>1st round</b>: Zero tolerance is applied.  All identical rows are matched.  If matches exist, mate them and consider them as done.<br>",
"		<b>2nd round</b>: Check for rows where all entries <u>except one</u> are equal.  If matches exist, mate them.<br>",
"		<b>3rd round</b>: Check for rows where all entries <u>except two</u> are equal.  If matches exist, mate them.<br>",
"		<b>4th round</b>: Continue like above, opening up the comparison tolerance.<br>",
"		<b>Finally</b>: If all contents in a row are different, then the row in the old table is considered 'removed' and the new row considered 'added'.",
"",
"		<br><br><b>Step 5 - Generate the report</b> according to the chosen reporting option",
"",
"		<br><br><b>Step 6 - Add statistical summary</b><br>",
"		The statistical summary will be added to the right hand side of the report.  In this case, two additionals columns called <b>Statistics Parameters</b>",
"		and <b>Statistics Values</b> are introduced.<br>",
"		",
"		=== 500, 300",
"		Statistics Parameters							| Statistics Values",
"		Columns added									| 0 or higher",
"		Columns removed									| 0 or higher",
"		Columns rearranged								| 0 or higher",
"		Rows equal										| 0 or higher",
"		Rows added										| 0 or higher",
"		Rows removed									| 0 or higher",
"		Rows rearranged									| 0 or higher",
"		Values equal									| 0 or higher",
"		Values added									| 0 or higher",
"		Values removed									| 0 or higher",
"		Values modified									| 0 or higher",
"		Old table found orphan columns					| No or Yes (Yes if data below blank headers exist)",
"		New table found orphan columns					| No or Yes (Yes if data below blank headers exist)",
"		Old table non-unique orientation identifiers	| No or Yes",
"		New table non-unique orientation identifiers	| No or Yes",
"		==="
 ]
		,
	"See also": "Table Comparison Reports"
   },

 "Table Comparison Reports" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Table comparison reports" ],
"Description 01:Introduction" : [
"	",
"		Two report types are suported: tabular (generated with all reporting options except 'journal') and journal.",
"		All reports also contain a statistics section with the headers 'Statistics Parameters' and 'Statistics Values'.",
"",
"		<br/><img src=\"Images/Function_table_compare.jpg\" alt=\"Function 'table compare'\"><br/>",
""
 ]
		,
"Description 02:Tabular Reports" : [
"",
"		The report contains the columns (with header names) of the newer table plus one additional column called",
"		'Change Remarks'. This column indicates the changes identfied, typically \"Data modified\", \"Row added\", and \"Row deleted\".<br>",
"",
"		<br<br>",
"",
"		Depending on the reporting option chosen, the report may contain fewer rows and/or columns, aiming not to",
"		show unchanged contents considered not interesting.  Deleted contents are shown in brackets.",
""
 ]
		,
"Description 03:Journals" : [
"		",
"		Journals contain a sequential summary of all changes found.  One row is devoted for every change.  It contains the following columns:",
"",
"		=== 500, 500",
"		Header Name										| Contents",
"		Old Table Row Number							| 1 or higher",
"		New Table Row Number							| 1 or higher",
"		Old Table Column Number							| 0 or higher",
"		New Table Columb Number							| 0 or higher",
"		Orientation Identifier header names				| Corresponding data contents",
"		Header Name										| Header name related to change reported",
"		Old Value										| Old contents",
"		New Value										| New contents",
"		Change Remarks									| Row added, Row deleted, Column deleted, Column added, or blank if just contents have changed.",
"		==="
 ]
		,
"Examples 03:" : [
"	include ( Support Library );",
"	table load( t1, \"Examples/Cities.csv\" );",
"	table keep columns ( t1, {City, Country, Inhabitants, Famous attraction, Moving along } );",
"	table keep selected rows ( t1, [Inhabitants]>=1000000 );",
"",
"	echo(\"Original table:\");",
"	table list ( t1 );",
"",
"	echo(\"Create a modified table:\");",
"	table copy table ( t1, t2 );",
"	table sort rows ( t2, City );",
"	table delete selected rows( t2, [City]==Los Angeles);",
"	table delete columns( t2, Country );",
"	table insert columns( t2, Time Zone, \"\", 3 );",
"	table append( t2, {{ Shanghai, 23000000, \"Jing'an Temple\", \"UTC+8\", Bicycle, Bla }} );",
"		// Last entry 'Bla' lies outside the colums with headers and is considered an orphan.",
"	[t2:City,Paris,Famous attraction] = Moulin Rouge;",
"	[t2:City,Paris,Time Zone] = \"UTC+1\";",
"	[t2:City,New York City,Inhabitants] = 8323340;",
"	table list ( t2 );",
"",
"	echo(\"Compare and create journal as output:\");",
"	table compare( t2, t1, report, City, journal );",
"	table delete columns( report, {Statistics Parameters, Statistics Values} ); // Ignore them for now",
"	table delete blank rows( report );",
"	echo(\"Comparison Report:\");",
"",
"	table rename headers( report, { Old Table Row Number, Old Table Column Number, New Table Row Number,",
"		New Table Column Number }, { OR, OC, NR, NC } ); // Abreviate headers to fit on page",
"",
"	table list ( report );"
 ]
	,
	"Output 03:": "automatic"

   },


"Change Indication Function" :
{
	"Function Names":	[ "(This is a user-defined function you need to create)" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		You may define a change indication function which will be called whenever a ",
"		difference during the comparison run has been found.  Parameters supplied include old and new value as well as location in the new table ",
"		(column name and row number).  The return value will placed into the report table.  ",
"		The function allows further flexibility, e.g. reporting changes differently under different columns differently ",
"		(e.g. column \"delivery date\" could be reported as \"same\", \"earlier\", \"later\").",
"",
"		<br><br>",
"		Depending on the last parameter in __table compare(__), this function can either be called for every value pair compared, or",
"		just for value pairs which are different.",
"",
"		<br><br>",
"		You need to create a __user-defined function__ complying with the parameter structure described below and must return a value of any type.",
"		The returned value will be converted to strings automatically after the function calls.",
"",
"	\"Synopsis\": \"define function( my function, {{ old value, literal }, {new value, literal}, {header name, literal}, {row number, numeral}} ) { [statements} }\"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Old value",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Value from the older table" ]
		},
		{ "Number": "2.",
		  "Name": "New value",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Value from the newer table" ]
		},
		{ "Number": "3.",
		  "Name": "Header name",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Name of header referring to the table column of the values" ]
		},
		{ "Number": "4.",
		  "Name": "Row number",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "Name of header referring to the table column of the values" ]
		}
	],
	"Return value":
	[
		{ "Name": "Change remark",
		  "Types": [ "valid types" ],
"Description" : [
"			Return the value or text you want to see in the comparison report if the values are different (or equal)."
 ]
		  
		}
	],
"Examples" : [
"	include ( Support Library );",
"	define function( foo, {{ old value, literal }, {new value, literal}, {header name, literal}, {row number, numeral}} )",
"	{",
"		if (numeral(new value[])<>0)",
"		{",
"			 return( select if ( new value[] > old value[], \"Older\", \"Younger\" ) );",
"		}",
"		return( old value[] + \" --> \" + new value[] );",
"	}",
"",
"	table initialize( t1,",
"	      { { Name, Age, Town },",
"	        { Ann,  35,  Boston },      { Bea,  45,  Cambridge },",
"	        { Beat, 46,  Chicago },     { Chuck,55,  New Heaven },",
"			{ Emil, 21,  Albany }} );",
"",
"	table initialize( t2,",
"	      { { Name, Age, Town },",
"	        { Ann,  34,  Boston },      { Bea,  46,  Cambridge },",
"	        { Beat, 46,  Chicago },     { Chuck,55,  New Haven },",
"	        { Dale, 65,  Newport }} );",
"",
"	table compare ( t2, t1, report, Name, differences, foo, true );",
"",
"	table delete columns( report, {Statistics Parameters, Statistics Values} ); // Ignore for now",
"	table delete blank rows( report );",
"	echo(\"Comparison Report:\");",
"	table list ( report );",
""
 ]
	,
	"Output": "automatic"
}

,

"table validate" :
{
	"Function Names":	[ "table validate" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function checks and validates the target table against a rules table which contains values, rules (__comparison expressions__) and optionally more advanced verification",
"		expressions. This function can check for the following:",
"		* Contents in selected columns comply with rules specified (e.g. is equal to, contains , etc. )",
"		* Optionally, the number of rows in the target table is checked (for minimum required, maximum allowed, etc.)",
"",
"		This function requires at least 3 parameters: ",
"		* The names of both tables (target and reference etables), and",
"		* The columns to be checked (target data in target table, checking comparison expressions in the reference table).",
"",
"		In the target table, the following four columns will be added with header names as listed below if they are not yet existing.",
"		If they exist, contents will overwritten, and \"Explanations\" appended.",
"",
"		=== 300, 700, noframe bold_column_1, noheader",
"		Row Result			| Comparison result statement related to particular row.  See __validating tables row results__.",
"		Group Result		| Result related to entire group  See __validating tables group results__.",
"		Explanations		| Details about mismatch. In case multiple mismatches, 	exist, only the first mismatch will be explained",
"		Ref Row				| Identified row number in the reference table where the comparison has been made.",
"		===",
"",
"		The reference table contains rows which are being used to validate the contents in the target table.  ",
"		For entries in the target table, 1 or more corresponding rows may be specified in the reference table.  ",
"		As long all conditions in the columns are met in at least one of the rows, then the validation result is OK.",
"		",
"		<br><br>",
"",
"		<u>Note</u>: The sequential order of the rows in the target table as well as in the reference table do not matter.  ",
"		Grouped rows do not need to lie in blocks of adjacent rows and may be scattered throughout the entire table.",
"",
"		",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"4 - 7",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of target table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "This table will be checked and validated" ]
		},
		{ "Number": "2.",
		  "Name": "Name of reference table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "The table contains the rules to apply for the validation procedure" ]
		},
		{ "Number": "3.",
		  "Name": "Columns with data to be validated (both target and reference tables)",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			The columns in the target table containing values to be checked will be checked against the corresponding columns in the ",
"			reference table containing comparison expressions. The columns do not need to be in the same location or order if they ",
"			are referenced by their header names.",
"			<br><br>",
"			In the target table, the columns where the data needs to be checked must be selected.  In the reference table, the checking rules ",
"			(contains __comparison expressions__) are located in the corresponding columns.",
""
 ]
			
		},
		{ "Number": "Opt. 4.",
		  "Name": "Columns with Row Match Identifiers (both target and reference tables)",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns specified)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
"			In the reference table, only the rows with the same row match header will be compared instead of the entire table."
 ]
			
		},
		{ "Number": "Opt. 5.",
		  "Name": "Columns with Group Identifiers (in the target table)",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns specified)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
""
 ]
			
		},
		{ "Number": "Opt. 6.",
		  "Name": "Columns with Group Match Identifiers (target and reference table)",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns specified)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
"			All rows with the same Group Identifiers are allocated to one group.",
"			This parameter actually selects the rows in the reference table to be used for comparison.",
""
 ]
			
		},
		{ "Number": "Opt. 7.",
		  "Name": "Columns with Group Match Identifiers (in the reference table)",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no columns specified)",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
"			The contents below this header contains B4P __expressions __ which must reurn boolean results.",
"			These expressions allow more advanced validation schemes and may reference to all columns in the target table using",
"			__partial table references__.",
""
 ]
			
		},
		{ "Number": "Opt. 8.",
		  "Name": "Column with Comparison Directions (reference table) for validation of within a group",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no columns specified) - Value 'min 0' applies for all rows",
"Description" : [
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number may be specified",
"			* The header names and column numbers are applicable to both target and reference table.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
"",
"			In the reference table, the data below this header may contain the following values:",
"",
"			=== 100, 700, noframe_1stcolbold, noheader",
"			min 0		| This row may be checked 0, 1 or multiple times. This option imposes no restrictions on how many time the comparison is made.  It is the default setting if this parameter is not supplied to this function.",
"			equal 0		| This row must not be checked at all.  Error asserted if this row has been matched.  Useful to check for table entries which are not supposed to exist.",
"			min 1		| This row must be checked at least once or more",
"			equal 1		| This row must be checked precisely once",
"			max 1		| This row may be checked 0 or 1 times",
"			==="
 ]
			
		},
		{   "Number":		"Opt. 9.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side, then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Table is OK",
		  "Types": [ "boolean" ],
		  "Description": "true if no mismatches identified.  Otherwise false."
		}
	],
"Examples" : [
"		include ( Support Library );",
"		table initialize( target, {{ Name, Gender}, { Philippe, male }, { Pascale, female }, { Michele, female }} );",
"		echo(\"Target table:\"); table list ( target );",
"",
"		table initialize( reference, { Gender, male, female }  );",
"		echo(\"Reference table:\"); table list ( reference );",
"",
"		res[] = table validate( target, reference, Gender );",
"",
"		echo(\"Target table after validation (result = \", res[], \"):\");",
"		table list ( target );",
"",
"		echo(\"Add a mistake.\");",
"		[target:Name,Philippe,Gender] = \"Male\"; // Upper case deviates",
"",
"		res[] = table validate( target, reference, Gender );",
"",
"		echo(\"Target table after validation (result = \", res[], \"):\");",
"		table list ( target );",
"",
"		// See following sub-sections for more sophisticated examples."
 ]
	,
	"Output": "automatic"

},

 "table validate - Row and Group Results" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "table validate - row results", "table validate - group results" ],
"Description 01:Row Result" : [
"		The following values may be written into the column named 'Row Result':",
"		=== 200, 800, bold_column_1",
"		Contents written	| Explanations",
"		OK					| Was able to find (at least) one corresponding row in the reference table. All conditions in that row have been met.",
"		Mismatch			| Was able to find (at least) one corresponding row in the reference table. However, no full match in the(se) row(s).",
"		Not in ref list		| Was not able to find a corresponding row in the reference table.",
"		Too many			| Excessive row: The row has been checked by the same row in the reference table where comparison directions imposed an upper limit: equal 0, max 1, equal 1.",
"		==="
 ]
		,
"Description 02:Group Result" : [
"		The following values may be written into the column named 'Group Result':",
"		=== 200, 800, bold_column_1",
"		Contents written	| Explanations",
"		OK					| All rows in the group are OK",
"		No group found		| No corresponding group has been found in the reference table.  Comparisons have not been possible.",
"		Incomplete			| The group in the target table is incomplete, i.e. rows missing as expected in the reference table.  This error message occurs only with comparisons directions imposing lower limits: e.g. min 1, equal 1.",
"		Not OK				| At least one row inside the group contains a mismatch or is an excessive row",
"		NO OK and incomplete| Conditions for both \"Incomplete\" and \"Not OK\" are met.",
"		==="
 ]
		,
	"See also": "table validate"
   },


 "table validate - Examples" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "table validate - examples" ],
"Description 01:table validate (...) with 3 Parameters" : [
"",
"		<br/><img src=\"Images/Function_table_validate_1.jpg\" alt=\"'table validate' with 3 function parameters\"><br/>",
"",
"		",
"		In the example below, the fuction call provides 3 parameters: Target and reference table, and checking for",
"		the columns 'Hcp' and 'NTRP' (Golf handcap and tennis rating).  The table entries are OK in following cases:",
"		* A valid tennis rating is provided, and golf handicap does not matter.",
"		* A valid handicap value is provided, but the player shall nto have any tennis rating (blank)",
"		",
""
 ]
	,
"Examples 01:" : [
"	include ( Support Library );",
"	table load( target, \"Examples/Tennis and Golf Players.csv\" );",
"	table list( target );",
"",
"	table keep columns( target, {Name, Sport, Hcp, NTRP} ); // Look how skilled they are",
"	table initialize( ref,",
"	{",
"		// Hcp = Golf Handicap, NTRP = National Tennis Rating Program",
"		{ Sport,    Hcp,     NTRP 	 	        },",
"		{ Tennis,   '*',	 'Lvl ?.0,Lvl ?.5'	},",
"		{ Golf,     '0..54', ''                 }",
"	} );",
"",
"	table validate( target, ref, {Hcp, NTRP} );",
"	table list( target );",
""
 ]
	,
	"Output 01:": "automatic",
"Description 02:table validate (...) with 4 Parameters" : [
"",
"		In the previous table, the same checks have been applied to both tennis and golf players, and indicate if the target table contains",
"		sports not listed in the reference table.  This is done by specifying common row match identifiers for both tables.  ",
"		In the discussed example it's the column \"Sport\".",
"",
"		<br/><img src=\"Images/Function_table_validate_2.jpg\" alt=\"'table validate' with 4 function parameters\"><br/>",
"",
"		In the example below, the fuction call provides 4 parameters: Target and reference table, and checking for",
"		the columns 'Hcp' and 'NTRP' (Golf handcap and tennis rating).  The table entries are OK in following cases:",
"		* If the person favors Golf (column 'Sport' conains 'Golf'), then the handicap will be checked.",
"		* If the person favors Tennis, then the NTRP rating will be checked.",
"		* A valid handicap value is provided, but the player shall nto have any tennis rating (blank)",
"",
"		" ],
"Examples 02:" : [
"	include ( Support Library );",
"	table load( target, \"Examples/Tennis and Golf Players.csv\" );",
"	// table list( target ); // See previous section. It's the same table.",
"",
"	table keep columns( target, {Name, Sport, Hcp, NTRP} ); // Look how skilled they are",
"	table initialize( ref,",
"	{",
"		// Hcp = Golf Handicap, NTRP = National Tennis Rating Program",
"		{ Sport,    Hcp,     NTRP 	 	        },",
"		{ Tennis,   '*',	 'Lvl ?.0,Lvl ?.5'	},",
"		{ Golf,     '0..54', ''                 }",
"	} );",
"",
"	table validate( target, ref, {Hcp, NTRP}, Sport );",
"	table list( target );"
 ]
	,
	"Output 02:": "automatic",

"Description 03:table validate (...) with 6 Parameters" : [
"",
"		Advanced table validation is possible where different groups can be defined in order to apply different validation rules which can even be independent from each other.",
"",
"		<br/><img src=\"Images/Function_table_validate_3.jpg\" alt=\"'table validate' with 6 function parameters\"><br/>",
"",
"	Let's check some sophisticated tables: A list of electrical equipment for different locomotives which need to be checked against different contents.",
"	* Locomotives:	AC locomotive, Hybrid locomotive (runs on AC power and Diesel), and DE Loco (Diesel)",
"	* 2 Groups: Different rules applicable to DE-Locos and the remaining locos",
"	*  Every locomotive contains equipment like traction converter, motor, gear, etc.",
"	*  Every equipment has different parameters (e.g.: Qty (numbers of units per locomotive), power, speed, weight).",
"",
"	Because the output file contains more columns than they fit in this screen, click on the following hyperlink to open the output as HTML file<br>",
"	<a href=\"Images/Table Validate Reference Output 03.html\" target=\"_blank\">Open output as HTML file in a separate tab</a>",
""
 ]
	,
"Examples 03:" : [
"		include ( Support Library );",
"		table load( products, \"Examples/Table Validate Target In.csv\" );",
"		table load( ref,      \"Examples/Table Validate Reference In.csv\" );",
"",
"		echo(\"Target table: Locomotives with technical data\");",
"		table list( products );",
"",
"		table validate ( products, ref, {Power,Speed,Qty}, Equipment, Vehicle Name, Vehicle Type );",
"		",
"		echo(\"Reference table\");",
"		table list( ref );",
"",
"		table save( products, \"Images/Table Validate Reference Output 03.html\", HTML );"
 ]
	,
	"Output 03:": "automatic",

"Description 04:table validate (...) with 7 Parameters" : [
"",
"	The	function expects an additional column in the reference table which may contain expressions which return Boolean values.  ",
"	The row is considered OK if true is returned, otherwise it's Mismatch.  Blank rows will be ignored.  ",
"	Exceptions will be asserted if the returned value is not Boolean.  ",
"	Partial table specifications refer directly to the columns in the target table and not the reference table.",
"",
"		<br/><img src=\"Images/Function_table_validate_4.jpg\" alt=\"'table validate' with 7 function parameters\"><br/>",
"",
"	In the reference table, the column [Comments] is checked if it contains 'Safe', provided this is in relation to",
"	Vehicle Type being \"E-Locos\" and \"Equipment\" being \"Control\".  The resulting table now contains 1 additional message:",
"	The \"Control\" for hybrid locomotives contains no remark such as \"Safe Electronics\" in the column \"Comments\".",
"",
"	Because the output file contains more columns than they fit in this screen, click on the following hyperlink to open the output as HTML file<br>",
"	<a href=\"Images/Table Validate Reference Output 04.html\" target=\"_blank\">Open output as HTML file in a separate tab</a>",
""
 ]
	,
"Examples 04:" : [
"		include ( Support Library );",
"		table load( products, \"Examples/Table Validate Target In.csv\" );		// Same tables as in previous example.  ",
"		table load( ref,      \"Examples/Table Validate Reference In.csv\" );	// They will not be listed here again",
"",
"		table validate ( products, ref, {Power,Speed,Qty}, Equipment, Vehicle Name, Vehicle Type, Additional Check );",
"",
"		echo(\"Reference table\");",
"		table list( ref );",
"",
"		table save( products, \"Images/Table Validate Reference Output 04.html\", HTML );"
 ]
	,
	"Output 04:": "automatic",


"Description 05:table validate (...) with 8 Parameters" : [
"",
"	This last example also considers comparison directions as additional rules.  Before that, \"min 1\" has been the standard rule.",
"",
"		<br/><img src=\"Images/Function_table_validate_5.jpg\" alt=\"'table validate' with 8 function parameters\"><br/>",
"",
"	Because the output file contains more columns than they fit in this screen, click on the following hyperlink to open the output as HTML file<br>",
"	<a href=\"Images/Table Validate Reference Output 05.html\" target=\"_blank\">Open output as HTML file in a separate tab</a>",
""
 ]
	,
"Examples 05:" : [
"		include ( Support Library );",
"		table load( products, \"Examples/Table Validate Target In.csv\" );		// Same tables as in previous example.",
"		table load( ref,      \"Examples/Table Validate Reference In.csv\" );	// They will not be listed here again",
"",
"		table validate ( products, ref, {Power,Speed,Qty}, Equipment, Vehicle Name, Vehicle Type, Additional Check, Quantity Check);",
"",
"		echo(\"Reference table\");",
"		table list( ref );",
"",
"		table save( products, \"Images/Table Validate Reference Output 05.html\", HTML );"
 ]
	,
	"Output 05:": "automatic"


}

,

"table check duplicates ..." :
{
	"Function Names":	[ "table check duplicates", "table check duplicates ignore case", "table check duplicates ignore blanks", "table check duplicates ingore both",
						  "table check duplicates selected rows", "table check duplicates ignore case selected rows", "table check duplicates ignore blanks selected rows", "table check duplicates ingore both selected rows"],
	"Documentation":	"Function Description",
"Description" : [
"",
"		These functions checks the table for duplicate entries in the orientation identifier headers. ",
"		Contents other than orientation headers will not be checked. Duplication info will be written into dedicated columns specified in the 3rd and 4th parameters.",
"",
"		The different function names distinguish between:",
"		* <b>... ignore case</b>, e.g. \"Data\" and \"data\" are equivalent",
"		* <b>... ignore blanks</b>, e.g. \"Last name\" and \"Lastname\" are equivalent",
"		* <b>... ignore both</b>, e.g. \"Zip Code\" and \"zipcode\" are equivalent",
"		* The function enging <b>selected rows</b> applies duplication check only on the rows where the row selection expression applies.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3-5 (4-6 with ...selected rows)",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Applicable to <b>table check duplicates ... selected rows</b> only:<br>",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side, then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "2. / 3.",
		  "Name": "Orientation identifier columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			All rows with common contents in the specified columns will be checked for duplicates. Typical use: Unique identifier in a table to check for duplicates.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* 1 or more column number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt. 3. / 4.",
		  "Name": "Duplicate identifer column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (none)",
"Description" : [
"			Name of header to identify the matching duplicates. The first set of duplicates is given 0, further sets with 1, 2, etc.",
"			The duplicate identifier count corresponds with the ascending alphabetic order of the orientation columns and longer the sequential top-down order of the table.",
"			<br><br>",
"",
"		    See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number may be specified",
"			* The header will be created if it does ot yet exist.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
""
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Duplicate index column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (none)",
"Description" : [
"			Number of header to note counting index of duplicates.  The first row among the duplicates get index = 0, the following ones 1, 2, etc.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number may be specified",
"			* The header will be created if it does ot yet exist.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
""
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Duplicate count column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (none)",
"Description" : [
"			Name of header to note number of duplicates identified. If for example 3 duplicates have been identified, then the field in the corresponding rows will all be set to 3.",
"",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number may be specified",
"			* The header will be created if it does ot yet exist.",
"			* Specify '' (softquoted blank) or {} (empty set) to skip this parameter.",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of duplications identified",
		  "Types": [ "numeral" ],
"Description" : [
"			0 = All rows are unique according to the specifications provided in the function parameters<br>",
"			>0 = Number of duplications identified<br>",
"			-1 = Error identified."
 ]
		  
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( names,  // Gender neutral first names",
"		{ { First Name, Last Name, Gender },",
"		  { Pascale,   Baker,       Male   },",
"		  { Philippe,  Tanner,      Female },",
"		  { Philippe,  Tanner,      Male   },",
"		  { Dominique, Miller,      Male   },",
"		  { Gabriel,   Baker,       Female },",
"		  { Nicola,    Nilsson,     Female },",
"		  { Philippe,  Tanner,      Male   },",
"		  { Gabriel,   Baker,       Male   },",
"		  { Nicola,    Nilsson,     Male   } } );",
"",
"",
"	table check duplicates ignore case( names, {Last Name, First Name}, Identifier, Index, Count );",
"	table list ( names );",
""
 ]
	,
	"Output": "automatic"
}

,

"table lookup ..." :
{
	"Function Names":	[ "table lookup", "table lookup ignore case", "table lookup top down", "table lookup top down ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function uses data in specified <b>input columns</b> (2nd function paramameter) in the target table (1st param) ",
"	to search for matching data in the <b>seach columns</b> (5th paam) in the lookup table (4th param).  Once a match has been encountered, then the",
"	corresponding <b>output columns</b> (6th param) in the lookup table will be transferred to the <b>target columns</b> (3rd param) in ",
"	the target table.  The function variant <b>table lookup ignore case</b> is self-explanatory.  In case the lookup table contains multiple",
"	matching entries, the first match will always apply..",
"",
"	<br/><br/><img src=\"Images/Function_table_lookup.jpg\" alt=\"Function 'table lookup'\"><br/><br/>",
"",
"	The lookup function contains powerful comparison algorithms which will index the lookup table and accelerate the lookup performance significantly",
"	if it exceeds a size where the time overhead of creating an internal indexation does pay.  This scheme accelerates the lookup procedure",
"	to a search time ratio versus table size (<i>n</i>)being <b><i>O</i></b> ( log(<i>n</i>)) ).",
"	Looking up a table containing ca 16,000 entries requires 14 comparisons only.  For small tables, indexing will be skipped in order to avoid the",
"	initial overhead to do an indexation and the lookup takes place in a top-down approach starting from row 1.",
"",
"	<br><br>",
"	If a large lookup table is considered, but you know that most items looked up lie in to rows (say: roughly first 30 rows), then you may",
"	experience a performance improvement using the function name <b>table lookup top down ...</b> instead.  The output is the same in both cases.",
"",
"",
"	<br>",
"",
"	This functions described here provide the option to select rows (7th function parameter) and counting the lookup matches in the lookup table ",
"	(8th function parameter).",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"6 - 8",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of target table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "The table referred here is assumed to be the more recent table." ]
		},
		{ "Number": "2.",
		  "Name": "Input columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			Specify 1 or more columns in the input table which contains the information to compare with the search columns in the lookup table.<br>",
"			Example: { Family Name, First Name } when looking up a phone directory table.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At least one header name or column number must be specified",
"			* The number of input columns in the target table must equal to the number of search columns in the lookup table",
""
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Destination columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			Specify columns in the input table where to copy the information retrieved from output columns in the lookup table.",
"			The column header names do not need to be the same the corresponding headers in the lookup table.",
"			Example: { Phone Number, Fax Number } when looking up a phone directory table.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names or column numbers may be specified (0 columns means pick up nothing, in case you need to count the lookups only)",
"			* The number of destination columns in the target table must equal to the numer of output columns in the lookup table",
"			* Missing columns will be created.",
""
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Name of lookup table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "The table referred here is assumed to be the more recent table." ]
		},

		{ "Number": "5.",
		  "Name": "Search columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"",
"			Specify 1 or more columns in the lookup table which contains the information to compare with the corresponding inputs columns in the target table.<br>",
"			Example: { Last Name, Given Name } when looking up a phone directory table.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At least one header name or column number must be specified",
"			* The number of search columns in the loookup table must equal to the number of input columns in the target table",
""
 ]
			
		},
		{ "Number": "6.",
		  "Name": "Output columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			Specify columns in the lookup table for the information to be retrieved and copied to the destination columns in the target table.",
"			The column header names do not need to be the same the corresponding headers in the lookup table.",
"			Example: { Phone Number, Fax Number } when looking up a phone directory table.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names or column numbers may be specified (0 columns means pick up nothing, in case you need to count the lookups only)",
"			* The number of output columns in the lookup table must equal to the numer of destination columns in the target table",
"			* Exception: Specify '#row' to retrieve the row number from the lookup table. <br><u>Note</u>: \"#row\" in double quotation marks (quoted literal)is excluded from this exception and treated as a header name.",
""
 ]
			
		},
		{   "Number":		"Opt. 7.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
		    "Default value": "true (all rows selected)",
"Description" : [
"				This function parameter allows you to select the rows in the target table in order to limit the lookups to those rows only.",
"				<br><br>",
"				Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Age]>=21</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt. 8.",
		  "Name": "Counter column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no column selected)",
"Description" : [
"			Specify 1 column in the lookup table which shall be used to count the successful lookup made.  This function is useful in order to",
"			get an idea of the data in the lookup table searched frequently, rarely or not at all.  If the column already contains numbers, then",
"			the existing numbers will be incremented, i.e. no reset to zero.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number must be specified",
"			* If the column is missing in the lookup table, then it will be created.",
"			",
"			<u>Hint:</u> If you need this function parameter, but not the 7th function parameter, then write <b>true</b> into the 7th parameter."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of lookups made",
		  "Types": [ "numeral" ],
"Description" : [
"				Every successful lookup (input columns match with search columns are matching) will count 1."
 ]
				
		}
	],
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 1.csv\" );",
"	table initialize( target, { Town, Florence, Venice, Florence, Edinburgh, New York, Hamburg, Florence, Munich, New York } );",
"",
"	count[] = table lookup( target, Town, { Food or Beverage, Recommended, Row Number },",
"							lookup, City, { Meal or Drink, Recommendation, '#row' }, true, Counter );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lookup once", "table lookup fast", "table lookup smart", "table lookup smart once", "table integrate", "table expand" ]
},


"table lookup once ..." :
{
	"Function Names":	[ "table lookup once", "table lookup once ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function works very similarly like __table lookup(__), with the only difference that every item in the lookup table can be be retrieved",
"	only once.  If the same lookup values are applied, then it will look for a 2nd match (and so forth).  Once all matching values are checked",
"	off, then no lookup is made.  The search time ratio versus table size is (<i>n</i>)being <b><i>O</i></b> ( log(<i>n</i>)) ).",
"",
"	<br/><br/><img src=\"Images/Function_table_lookup_once.jpg\" alt=\"Function 'table lookup once'\"><br/><br/>",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"6 - 8 (For parameter description and return values: see __table lookup(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 1.csv\" );",
"	table initialize( target, { Town, Florence, Venice, Florence, Edinburgh, New York, Hamburg, Florence, Munich, New York } );",
"",
"	count[] = table lookup once( target, Town, { Food or Beverage, Recommended },",
"								 lookup, City, { Meal or Drink, Recommendation }, true, Counter );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	// Note: Florence is looked up 3 times, but only 2 entries exist.  the 3rd lookup stays blank.",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lookup", "table lookup top down", "table lookup fast", "table lookup smart", "table lookup smart once", "table integrate", "table expand" ]
},

"table lookup fast ..." :
{
	"Function Names":	[ "table lookup fast", "table lookup fast ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function works very similarly like __table lookup top down(__), with the only difference that the row number, where the match has been found,",
"	will be memorized.  Further lookups with the same lookup parameters will find the same matching row.  However, if there is no match, then",
"	the lookup continues with the next row below.  Once it has reached the end of the table, it make a 2nd round to look at the rows above",
"	the memorized row number.  You will see some deviating behavior as illustrated below:",
"	",
"	<br/><br/><img src=\"Images/Function_table_lookup_fast.jpg\" alt=\"Function 'table lookup fast'\"><br/><br/>",
"",
"	This feature provides signficant performance improvements if your target table and your lookup table are already sorted in alphabetic",
"	order.  Example: You have one sorted list (e.g. last name, first name) containing empoloyees of a business.  The 2nd list contains a list",
"	of employees deserving a promotion or pay rise.  Both lists are already sorted by names.  You want to look up for details like mailing addresses",
"	from the 1st list.  In this case, the 1st list is the lookup table and the 2nd list is the target table.  with alphabetic ordering in place,",
"	the lookup procedure will run very swiftly, practially with one single pass in the target table and one single pass in the lookup table.",
"	"
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"6 - 8 (For parameter description and return values: see __table lookup(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 1.csv\" );",
"	table initialize( target, { Town, New York, New York, Florence, New York, New York, Munich, New York } );",
"",
"	count[] = table lookup fast( target, Town, { Food or Beverage, Recommended },",
"								 lookup, City, { Meal or Drink, Recommendation }, true, Counter );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	// Note: Querying New York after Florence looks for next match afer Florence and is a beer.",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lookup", "table lookup top down", "table lookup once", "table lookup smart", "table lookup smart once", "table integrate", "table expand" ]
},

"table lookup smart ..." :
{
	"Function Names":	[ "table lookup smart", "table lookup smart ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function works very similarly like __table lookup top down(__), with the only difference that lookup table contains",
"	B4P __comparison expressions__ instead of hard values in the search pattern columns.  This feature provides a lot of flexibility because",
"	you can make a much more flexible description of the look-up table using some rules (e.g. __comparison operators__, __value ranges__,",
"	__value selections__).  A match is given for a particular row if the comparisons made in all search pattern patterns returned 'true'.<br>",
"",
"	Examples (Syntax is same as B4P comparison expressions):",
"	=== 300, 700, noheader, noframe, column_1_bold",
"	Building		| Equals to \"Building\"",
"	=Building		| Equals to \"Building\"",
"	<>Building		| Must not equal to \"Building\"",
"	B*				| Example of __wildcard symbols__: Begins with B",
"	1..10,20		| True if between 1 and 10, or equal to 20.",
"	'3..5'			| Equals to \"3..5\"",
"	&gt;10			| Greater than 10",
"	Dog,*at,Fly		| Commas allow for flexible seletion OK for Dog, Cat, Rat, Bat, Fly, Gnat, ...",
"	===",
"",
"	Examples: You have a product portfolio and provide some technical data in the reference table.  The table can be used to identify a suitable",
"	product based on your specification.  Other example:  Describe a bunch of restaurants with table locations, recommended offerings, party",
"	size (number of seats per table), price range for main course, etc., and you can search for a restaurant by preferences.",
"",
"	<br><br>",
"	The search time ratio versus table size is (<i>n</i>)being <b><i>O</i></b> ( <i>n</i>) ) beacause every search is a top-down search.",
"",
"	<br><br>",
"	<u>Hint</u>: If you create the lookup table, start with the most specific selections.  Further down, open up more (using wildcard symbols).",
"	Consider default information (in casse of no matches in the rows above) in the last row: Put '*' in all search pattern columns and write \"All others\" or \"Not found\" in the output column.  ",
"	with this approach, you will capture all searches.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"6 - 8 (For parameter description and return values: see __table lookup(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 2.csv\" );",
"",
"	table initialize( target,",
"		 { { Preference,  Seats Needed, Location },",
"		   { vegi pizza,   6, inside },",
"		   { pizza tonno,  5, outside },",
"		   { hamburger,    2, inside },",
"		   { beer,         1, bar },",
"		   { fries,        2, \"self-service\" },",
"		   { pasta napoli, 8, inside },",
"		   { steak,       10, inside },",
"		   { steak,        3, outside } } );",
"",
"	count[] = table lookup smart ignore case",
"			  ( target,   {Seats Needed, Preference,Location}, { Place to go, Phone, Row },",
"				lookup,   {Table size,   Offering,  Ambience}, { Restaurant Name, Phone Number, '#row' }, true, Counter );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	// Note: Querying New York after Florence looks for next match afer Florence and is a beer.",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lookup smart once", "table lookup", "table lookup top down", "table lookup once", "table lookup fast", "table integrate", "table expand" ]
},

"table lookup smart once ..." :
{
	"Function Names":	[ "table lookup smart once", "table lookup smart once ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the benefits of __table lookup smart(__) and __table lookup once(__).  Every entry in the look-up table is",
"	referenced only once, with one following exception: <u>The last row is exempted from that look-up-once rule</u>, so you can specify ",
"	a default row to capture all searches which have not been successful in the rows above.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"6 - 8 (For parameter description and return values: see __table lookup(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 2.csv\" );",
"",
"	table initialize( target,",
"		 { { Preference,  Seats Needed, Location },",
"		   { vegi pizza,   6, inside },",
"		   { pizza tonno,  5, outside },",
"		   { hamburger,    2, inside },",
"		   { beer,         1, bar },",
"		   { fries,        2, \"self-service\" },",
"		   { pasta napoli, 8, inside },",
"		   { steak,       10, inside },",
"		   { steak,        3, outside } } );",
"",
"	count[] = table lookup smart once ignore case",
"			  ( target,   {Seats Needed, Preference,Location}, { Place to go, Phone, Row },",
"				lookup,   {Table size,   Offering,  Ambience}, { Restaurant Name, Phone Number, '#row' }, true, Counter );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	// Note: Querying New York after Florence looks for next match afer Florence and is a beer.",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table lookup smart once", "table lookup", "table lookup top down", "table lookup once", "table lookup fast", "table integrate", "table expand" ]
}


,

"table integrate ..." :
{
	"Function Names":	[ "table integrate", "table integrate ignore case", "table integrate top down", "table integratetop down ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions work very similarly like __table lookup(__), with the exception that the data retrieved from the lookup table will not",
"	be copied back to the target table, but an operation is performed with the data already existing in the target table with the retrieved data",
"	and then written back.  Example: You look up data for some numbers and want to add them to the already existing values in the target table.",
"",
"	<br/><br/><img src=\"Images/Function_table_integrate.jpg\" alt=\"Function 'table integrate'\"><br/><br/>",
"",
"	This functions described here provide the option to select rows (8th function parameter) and counting the lookup matches in the lookup table",
"	(9th function parameter).  Using only the first 6th parameters in this function call will behave in the same way as __table lookup(__).",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For description of 1st-6th parameters and return values: see __table lookup(__)",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "Opt. 7.",
		  "Name": "Operation Identifier",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "{overwrite, ...} (overwrite applies to all parameters)",
"Description" : [
"				Specify one of the __table integration operation identifiers__<br>",
"				The number of operation identifiers is less than the number of columns specified in the 3rd (output columns) and 6th parameter (destination columns), ",
"				then the default value 'overwrite' is assumed for the remaining columns.  If this parameter contains more elements than columns retrieved, then the exess ones will be ignored.",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* No values can be provided by using empty set {} or blank softquoted literal ''."
 ]
				
		},
		{   "Number":		"Opt. 8.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
			"Default value": "true (all rows selected)",
"Description" : [
"			Same as 7th function parameter in __table lookup(__).<br>",
"			This function parameter allows you to select the rows in the target table in order to limit the lookups to those rows only.",
"			<br><br>",
"			Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"			__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Age]>=21</b>.<br>",
"			<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt. 9.",
		  "Name": "Counter column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "{} (no column selected)",
"Description" : [
"			Same as 8th function parameter in __table lookup(__).<br>",
"			Specify 1 column in the lookup table which shall be used to count the successful lookup made.  This function is useful in order to",
"			get an idea of the data in the lookup table searched frequently, rarely or not at all.  If the column already contains numbers, then",
"			the existing numbers will be incremented, i.e. no reset to zero.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At most one header name or column number must be specified",
"			* If the column is missing in the lookup table, then it will be created.",
"",
"			<u>Hint:</u> If you need this function parameter, but not the 8th function parameter, then write <b>true</b> into the 8th parameter."
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Number of lookups made",
		  "Types": [ "numeral" ],
"Description" : [
"				Every successful lookup (input columns match with search columns are matching) will count 1."
 ]
				
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( lookup,",
"	{  {  Names, Sports,      Scores },",
"	   {  Abel,  tennis,      10 },          {  Bea,   squash, 14 },",
"	   {  Chuck, racquetball, 13 },          {  Dan,   tennis, 8 },",
"	   {  Eva,   squash,       9 },          {  Finn,  tennis, 12 },",
"	   {  Gini,  racquetball, 12 },          {  Hugo,  squash, 11 } } );",
"",
"	table initialize( target, {{ Sport, Name, Score 1, Score 2, Score 3, Score 4 },",
"		{ racquetball, \"\", 5, 100, 12  },",
"		{ squash,      \"\", 5, 100, 12  },",
"		{ racquetball, \"\", 5, 300, 10  },",
"		{ tennis,      \"\", 5, 100, 12  } } );",
"",
"	// Picks the 1st match and integrates the results",
"	table integrate( target, Sport,  { Name,  Score 1 .. Score 4 },",
"					 lookup, Sports, { Names, 4:Scores }, { overwrite, add, sub, max, average } );",
"",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table integrate once", "table integrate fast", "table integrate smart", "table integrate smart once", "table lookup", "table expand" ]
},


"table integrate once ..." :
{
	"Function Names":	[ "table integrate once", "table integrate once ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup once(__) with the data integration features of __table integrate(__).",
"",
"	<br/><br/><img src=\"Images/Function_table_integrate_once.jpg\" alt=\"Function 'table integrate once'\"><br/><br/>",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include ( Support Library );",
"	table initialize( lookup,",
"	{  {  Names, Sports,      Scores },",
"	   {  Abel,  tennis,      10 },          {  Bea,   squash, 14 },",
"	   {  Chuck, racquetball, 13 },          {  Dan,   tennis, 8 },",
"	   {  Eva,   squash,       9 },          {  Finn,  tennis, 12 },",
"	   {  Gini,  racquetball, 12 },          {  Hugo,  squash, 11 } } );",
"",
"	table initialize( target, {{ Sport, Name, Score 1, Score 2, Score 3, Score 4 },",
"		{ racquetball, \"\", 5, 100, 12  },",
"		{ squash,      \"\", 5, 100, 12  },",
"		{ racquetball, \"\", 5, 300, 10  },  // Looks up Gini's score",
"		{ racquetball, \"\", 5, 300, 10  },  // Nothing more to look up, orig values unchanged",
"		{ tennis,      \"\", 5, 100, 12  } } );",
"",
"	// Picks the 1st match and integrates the results",
"	table integrate once( target, Sport,  { Name,  Score 1 .. Score 4 },",
"						  lookup, Sports, { Names, 4:Scores }, { overwrite, add, sub, max, average } );",
"",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table integrate", "table integrate top down", "table integrate fast", "table integrate smart", "table integrate smart once", "table lookup", "table expand" ]
},


"table integrate fast ..." :
{
	"Function Names":	[ "table integrate fast", "table integrate fast ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup fast(__) with the data integration features of __table integrate(__).",
"",
"	<br/><br/><img src=\"Images/Function_table_integrate_fast.jpg\" alt=\"Function 'table integrate fast'\"><br/><br/>",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include ( Support Library );",
"	table initialize( lookup,",
"	{  {  Names, Sports,      Scores },",
"	   {  Abel,  tennis,      10 },          {  Bea,   squash, 14 },",
"	   {  Chuck, racquetball, 13 },          {  Dan,   tennis, 8 },",
"	   {  Eva,   squash,       9 },          {  Finn,  tennis, 12 },",
"	   {  Gini,  racquetball, 12 },          {  Hugo,  squash, 11 } } );",
"",
"	table initialize( target, {{ Sport, Name, Score 1, Score 2, Score 3, Score 4 },",
"		{ racquetball, \"\", 5, 100, 12  },",
"		{ squash,      \"\", 5, 100, 12  },  // Lookup table: Squash entry is below racquetball",
"		{ racquetball, \"\", 5, 300, 10  },  // Looks up Gini's score",
"		{ racquetball, \"\", 5, 300, 10  },  // And again.",
"		{ tennis,      \"\", 5, 100, 12  } } );",
"",
"	// Picks the 1st match and integrates the results",
"	table integrate fast( target, Sport,  { Name,  Score 1 .. Score 4 },",
"						  lookup, Sports, { Names, 4:Scores }, { overwrite, add, sub, max, average } );",
"",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table integrate", "table integrate top down", "table integrate once", "table integrate smart", "table integrate smart once", "table lookup", "table expand" ]
},


"table integrate smart ..." :
{
	"Function Names":	[ "table integrate smart", "table lookup integrate ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup smart(__) with the data integration features of __table integrate(__).",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include ( Support Library );",
"	table initialize( lookup,",
"	{  {  Names, Sports,      Scores },",
"	   {  Abel,  't*',        10 },          {  Bea,   's*', 14 },",
"	   {  Chuck, 'r*', 	      13 },          {  Dan,   't*', 8 },",
"	   {  Eva,   '*sh',        9 },          {  Finn,  't*', 12 },",
"	   {  Gini,  '*ball', 	  12 },          {  Hugo,  's*', 11 }, { All others, '*', 0 } } );",
"",
"	table initialize( target, {{ Sport, Name, Score 1, Score 2, Score 3, Score 4 },",
"		{ racquetball, \"\", 5, 100, 12  },",
"		{ squash,      \"\", 5, 100, 12  },  // Lookup table: Squash entry is below racquetball",
"		{ racquetball, \"\", 5, 300, 10  },",
"		{ tennis,      \"\", 5, 100, 12  } } );",
"",
"	// Picks the 1st match and integrates the results",
"	table integrate smart ( target, Sport,  { Name,  Score 1 .. Score 4 },",
"							lookup, Sports, { Names, 4:Scores }, { overwrite, add, sub, max, average } );",
"",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table integrate smart once", "table integrate", "table integrate top down", "table integrate once", "table integrate fast", "table lookup", "table expand" ]
},


"table integrate smart once ..." :
{
	"Function Names":	[ "table integrate smart once", "table integrate smart once ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup smart once(__) with the data integration features of __table integrate(__).",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include ( Support Library );",
"	table initialize( lookup,",
"	{  {  Names, Sports,      Scores },",
"	   {  Abel,  't*',        10 },          {  Bea,   's*', 14 },",
"	   {  Chuck, 'r*', 	      13 },          {  Dan,   't*', 8 },",
"	   {  Eva,   '*sh',        9 },          {  Finn,  't*', 12 },",
"	   {  Gini,  '*ball', 	  12 },          {  Hugo,  's*', 11 }, { All others, '*', 0 } } );",
"",
"	table initialize( target, {{ Sport, Name, Score 1, Score 2, Score 3, Score 4 },",
"		{ racquetball, \"\", 5, 100, 12  },",
"		{ squash,      \"\", 5, 100, 12  },  // Lookup table: Squash entry is below racquetball",
"		{ racquetball, \"\", 5, 300, 10  },  // Looks up Gini's score",
"		{ racquetball, \"\", 5, 300, 10  },  // Reads bottom row (default)",
"		{ racquetball, \"\", 5, 300, 10  },  // And again.",
"		{ tennis,      \"\", 5, 100, 12  } } );",
"",
"	// Picks the 1st match and integrates the results",
"	table integrate smart once( target, Sport,  { Name,  Score 1 .. Score 4 },",
"								lookup, Sports, { Names, 4:Scores }, { overwrite, add, sub, max, average } );",
"",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table integrate smart", "table integrate", "table integrate top down", "table integrate once", "table integrate fast", "table lookup", "table expand" ]
}


,

"table expand ..." :
{
	"Function Names":	[ "table expand", "table expand ignore case"],
	"Documentation":	"Function Description",
"Description" : [
"",
"	These functions work very similarly like __table integrate(__). Instead of stopping at the first match in the lookup table, this function",
"	family <u>looks up all entries in the lookup table</u>.  The search procedure through the lookup table will always be top-down.",
"	In case 2 or more matching enties are found in the lookup table, then the following happens:",
"	* The row in the target table will be duplicated in the next row below, where the remaining rows below shift down by 1 row.<br>",
"	* The looked-up information from the output columns will be integrated into the corresponding destination columns using the operation defined by the __table integration operation identifiers__.",
"	* Some operation identifiers make use of special rules for dealing with blank contents in the lookup table.",
"	* In case of no matches, the row stays unchanged, i.e. the row in the target table will not be deleted.",
"",
"	<img src=\"Images/Function_table_expand.jpg\" alt=\"Function 'table expand'\"><br/><br/>",
"",
"	This functions described here provide the option to select rows (8th function parameter) and counting the lookup matches in the lookup table",
"	(9th function parameter). ",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"",
"	include ( Support Library );",
"	table initialize( nute facts, // Nutritional facts, source: ndb.nal.usda.gov",
"	{  {  Food, Ingredient, Portion  },",
"	   {  potato chips,  fat,            0.34  },",
"	   {  potato chips,  carbohydrates,  0.50  },",
"	   {  potato chips,  sodium,         0.08  },",
"	   {  potato chips,  proteins,       0.07  },",
"	   {  potato chips,  others,           ''  }, // Remaining weight subtracted from above (--> operation identifer 'mul')",
"	   {  broccoli,      water,          0.90  },",
"	   {  broccoli,      proteins,       0.03  },",
"	   {  broccoli,      carbohydrates,  0.06  },",
"	   {  broccoli,      others,           ''  }, // Remaining weight subtracted from above (--> operation identifer 'mul')",
"	   {  spring water,  water,          1.00  } } );",
"",
"	table initialize( target, { { Name, Favorite Food, Weight }, ",
"	   { Rafael, Broccoli,    200 }, { Steve, Parmesan cheese, 100 }, ",
"	   { George, Potato chips, 50 }, { Fred,  Spring water,   1000 } } );",
"",
"",
"	echo(\"Target table before looking up with expanding contents:\");",
"	table list ( target );",
"",
"	table expand ignore case( target, Favorite Food, { Ingredient, Weight }, nute facts, Food, ",
"	              { Ingredient, Portion }, { overwrite, mul} );",
"",
"	// Note that food portions are multiplied with the weight of the food.",
"",
"	echo(\"After expanding (listing ingredients and calculating their weights):\");",
"	table list ( target );",
"	",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table expand fast", "table expand smart", "table expand fast smart", "table integrate", "table lookup" ]
},



"table expand fast ..." :
{
	"Function Names":	[ "table expand fast", "table expand fast ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function works similarly to __table expand(__), with the only exception that the additional roes resulting from multiple lookups",
"	are appended at the bottom of the table rather than inserting them below the original row.  For very large target tables, this approach",
"	saves significant becuase no rows will be shifted repeatedly.  Consider sorting the table, e.g. using __table sort rows(__) afterwards, if needed.",
"",
"	<br/><br/><img src=\"Images/Function_table_expand_fast.jpg\" alt=\"Function 'table expand fast'\"><br/><br/>",
"",
"	<u>Attention</u>: Do not confuse with the functions __table lookup fast(__) and __table integrate fast(__) where the 'fast' in the",
"	function name refers to an optimized searching scheme suitable for pre-sorted tables.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table integrate(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include ( Support Library );",
"	table initialize( nute facts, // Nutritional facts, source: ndb.nal.usda.gov",
"	{  {  Food, Ingredient, Portion  },",
"	   {  potato chips,  fat,            0.34  },",
"	   {  potato chips,  carbohydrates,  0.50  },",
"	   {  potato chips,  sodium,         0.08  },",
"	   {  potato chips,  proteins,       0.07  },",
"	   {  potato chips,  others,           ''  }, // Remaining weight subtracted from above (--> operation identifer 'mul')",
"	   {  broccoli,      water,          0.90  },",
"	   {  broccoli,      proteins,       0.03  },",
"	   {  broccoli,      carbohydrates,  0.06  },",
"	   {  broccoli,      others,           ''  }, // Remaining weight subtracted from above (--> operation identifer 'mul')",
"	   {  spring water,  water,          1.00  } } );",
"",
"	table initialize( target, { { Name, Favorite Food, Weight },",
"	   { Rafael, Broccoli,    200 }, { Steve, Parmesan cheese, 100 },",
"	   { George, Potato chips, 50 }, { Fred,  Spring water,   1000 } } );",
"",
"",
"	echo(\"Target table before looking up with expanding contents:\");",
"	table list ( target );",
"",
"	table expand fast ignore case( target, Favorite Food, { Ingredient, Weight }, nute facts, Food, { Ingredient, Portion }, { overwrite, mul} );",
"",
"	// Note that food portions are multiplied with the weight of the food.",
"	// Additional rows are put to the end of the table.",
"",
"	echo(\"After expanding (listing ingredients and calculating their weights):\");",
"	table list ( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table expand", "table expand smart", "table expand fast smart", "table integrate", "table lookup" ]
},


"table expand smart ..." :
{
	"Function Names":	[ "table expand smart", "table expand smart ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup smart(__) with the data integration features of __table expand(__).",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table expand(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 2.csv\" );",
"	table delete remaining rows ( lookup, -2 ); // Remove last 2 rows (the mom's place and 'not found' row)",
"",
"	table initialize( target, { Seating, inside, balcony, outside, bar } );",
"",
"	count[] = table expand smart ignore case",
"			 ( target,   Seating, {Place to go, Table size}, lookup, Ambience, {Restaurant Name, Table size} );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
"",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table expand", "table expand fast", "table expand fast smart", "table integrate", "table lookup" ]
},




"table expand fast smart ..." :
{
	"Function Names":	[ "table expand fast smart", "table expand fast smart ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function combines the lookup strategy from __table lookup smart(__) with the data integration features of __table expand(__).",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"7 - 9 (For parameter description and return values: see __table expand(__) )",
	"Restrictions":		"Indirect parameter passing is disabled",
"Examples" : [
"	include (Support Library);",
"	table load( lookup, \"Examples/Table Lookup Example 2.csv\" );",
"	table delete remaining rows ( lookup, -2 ); // Remove last 2 rows (the mom's place and 'not found' row)",
"",
"	table initialize( target, { Seating, inside, balcony, outside, bar } );",
"",
"	count[] = table expand fast smart ignore case",
"			 ( target,   Seating, {Place to go, Table size}, lookup, Ambience, {Restaurant Name, Table size} );",
"",
"	echo(\"Lookup table:\");",
"	table list( lookup );",
"",
"	// Additional rows have been added to the end of the table.",
"",
"	echo(\"Target table after lookup (\", count[], \" items found):\");",
"	table list( target );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table expand", "table expand fast", "table expand fast smart", "table integrate", "table lookup" ]
},


 "Table Integration Operation Identifiers" :
  {
	"Documentation":		"General Description", // Required value
	"Feature Names":		[ "Table integration operation identifiers" ],
"Description 01:Introduction" : [
"",
"		The following table lists all valid operation identifiers which can be used in the 7th function parameter of the",
"		__table integrate(__) and __table expand(__)  function families.",
"",
"		<br><br>",
"",
"		The operation identifier rules how the value or data retrieved from the output column in the lookup table shall be combined",
"		with the existing data in the destination column in the target table.",
"",
"		=== 300, 700, bold_column_1",
"		Operation identifier		| Description",
"		overwrite					| Output data overwrites destination data (same behavior like in the __table lookup(__) function family)",
"		none						| Output data does not overwrite destination data (it may be meaningless, but useful if the operation identifiers provided in variables)",
"		overwrite if blank			| Output data overwrites destination data if existing destination data is blank",
"		overwrite except blank		| Output data overwrites destination data if output data is not blank",
"		append						| Output data is appended to the destination data",
"		append with space			| Output data is appended to the destination data with one space character ' ' inbetween",
"		min abc						| Chooses the first one by alphabetic sorting order.  Note: blank literal has highest order.",
"		min abc ignore blanks		| Chooses the first one by alphabetic sorting order.  Blank values are not preferenced.",
"		max abc						| Chooses the last one by alphabetic sorting order.",
"		min							| Chooses the smaller (numeric) value. Blanks and non-numeric data are treated as 0",
"		min ignore blanks			| Chooses the smaller (numeric) value. Non-numeric data are treated as 0. Blanks are not chosen.",
"		min ignore zero				| Chooses the smaller (numeric) value. Both non-numeric data and 0 are not chosen.",
"		max							| Chooses the bigger (numeric) value.  Blanks and non-numerals are treated as 0",
"		max ignore blanks			| Chooses the bigger (numeric) value.  Non-numeric data are treated as 0. Blanks are not chosen.",
"		max ignore zero				| Chooses the bigger (numeric) value. Both non-numeric data and 0 are not chosen.",
"		add							| Output value is added to destination value.  Blanks and non-numerals are treated as 0",
"		sub							| Output value is subtracted from destination value.  Blanks and non-numerals are treated as 0",
"		mul							| Destination value is multiplicated with the output value. Non-numeral entries are treated as 0.<br><u>Attention</u>: See <sup>1</sup>.",
"		mul ignore blanks			| Destination value is multiplicated with the output value if not blank.  Non-numeric ata are treated as 0.",
"		mul ignore zero				| Destination value is multiplicated with the output value as long the output data is neither blank nor 0.",
"		div							| Destination value is divided by the output value. Result will be 0 if entry is 0 or a non-numeral.<br><u>Attention</u>: See <sup>1</sup>.",
"		inc							| Destination value is incremented by specified value in lookup table.<br>In the next entry, this next higher entry is used for further increase.  Negative values decrease accordingly. <br><u>Attention</u>: See <sup>2</sup>.",
"		dec							| Destination value is decremented by specified value in lookup table.<br>In the next entry, this next higher entry is used for further increase.  Negative values increase accordingly.   <br><u>Attention</u>: See <sup>2</sup>.",
"		average						| Calculates the average of both destination and lookup table value.  Blanks and non-numerals are treated as 0, resulting in dividing the other value by 2.",
"		index						| Inserts the index into destination value, i.e. the current count of inserted rows.  The index starts with 0.  For example, if 3 matches are found in the lookup table, then the index for the 3 rows (2 of them are new) will be 0, 1 and 2.  The related value from the lookup table is ignored here, but you must specify one in order to match the column count.",
"		===",
"",
"		<sup>1</sup> Applicable to  __table expand(__) function family: The identifiers <b>mul</b> and <b>div</b> apply a special algorithm:",
"		The residual value, which is the value in the destination table before the call, is subtracted by the the calculated (i.e. multiplied resp. divided) values",
"		in the previous matches.  Very useful if the lookup table contains a few items with percentages (values 0..1) related to ingredients and the target table",
"		contains the total weight of the food.",
"",
"		<sup>2</sup> Applicable to  __table expand(__) function family: The identifiers <b>inc</b> and <b>dec</b> apply a special algorithm:",
"		Blank entries in look-up table retrieves the residual value (original value in target table added (for <b>inc</b>) or subtracted (for <b>dec</b>) by all previous calculations belonging together).",
"",
""
 ]
		,
	"See also": ["table integrate", "table expand" ]
   }

,

"table transpose" :
{
	"Function Names":	[ "table transpose" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This functions rarranges table contents from horizontal orientation to vertical orientatio.  All prior row headers will move to the 1st column. ",
"		On the other hand, all data in the 1st column become headers.",
"		<u>Attention:</u> Configuration settings applied wtih __table configure(__) prior to this call will be discarded because the transposed table",
"		is actually a new table.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing  table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description":
			[ "If only the 1st function parameter is provided, then this table will be transposed.  If another table is named in the 2nd function parameter, then this table remains unchanged." ]
		},
		{ "Number": "Opt. 2.",
		  "Name": "Name of new table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t,",
"		 { { Food,     color,          taste,     best with },",
"		   { Fries,    golden yellow,  salty,     hamburger },",
"		   { Pizza,    colorful,       tasteful },",
"		   { Chianti,  rubin red,      bitter,    pasta, worth enjoying },",
"		   { Tirami sù,crème and brown,sweet } } );",
"",
"	table transpose ( t );",
"	table list ( t );"
 ]
	,
	"Output": "automatic"
}

,

"table serialize ..." :
{
	"Function Names":	[ "table serialize", "table serialize all", "table serialize ignore zero" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This is a pivot function which moves horizontally spread data (typically looking like schedules across timelines, or other tables with horizontally spread categories)",
"		to a sequential listing with one affected data item per row.",
"		<br><br>",
"",
"		<b>table serialize all</b> will do a full serialization of the table, including all blank fields",
"		<b>table serialize</b> only serialize non-blank fields in order to avoid generating unnecessary rows.",
"		<b>serialize ignore zero</b> will also skip serializing fiels representing zero.  Values such as 0, -0, ., 0.0, .00 are also considered 0, but '0 EUR' is not (text inside).",
"",
"		<br/><img src=\"Images/Function_table_serialize.jpg\" alt=\"Function 'table serialize'\"><br/>",
"",
"		<u>Hint</u>:The opposite action of <b>table serialize</b> is to use __table spread(__) to spread the data horizontally",
"		and then apply __table consolidate(__) to reduce the nubmer of rows to the minimum necessary.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"5-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing  table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Identifier columns to repeat",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"",
"			Specifies all columns which data shall be replicated downwards for all corresponding data being serialized.",
"			This is useful for identifiers and descriptions related to the serialized values so meanings are given to every row.",
"			It is not recommended to include columns containing numbers which need to be added up (or used in a similar way) at a later time because the serialization would affect the final result.  ",
"			Even if you want an easily readable table (e.g. describe once, keep following rows blank), then do not include this header.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified"
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Column for sequence names",
		  "Direction": "input",
		  "Types": [ "table column" ],
"Description" : [
"			Assign a meaningful sequence name.  Naming examples:",
"			* <b>Months</b> for horizontal headers containing Jan, Feb, Mar, ... Dec",
"			* <b>Years</b> for horizontal headers containing year numbers",
"			* <b>Countries</b> for a set of countries listed horizontally",
""
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Sequence names",
		  "Direction": "input",
		  "Types": [ "parameter set containing literals" ],
"Description" : [
"			These values will be applied as data entries under the column which header name is specified in the 2nd parameter. Examples:",
"			* { Jan, Feb, March, April } for 'Months'",
"			* { '2018', '2019', '2020', '2021' } for 'Years' (Quotation marks required because literals are expected)",
"			* { AT, BE, CH, DE, ES, FR, GB, HU, IT, JP } for 'Countries'",
""
 ]
			
		},
		{ "Number": "5.",
		  "Name": "Category names",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			Categories related to the data in the original table",
"			Examples",
"			* Orders",
"			* Revenues",
"			* Gross Margin",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* At leaset one header name may be specified",
"			* Column numbers are not allowed",
"			* If the columns are not yet existing, then they will be created"
 ]
			
		},
		{ "Number": "Opt 6.",
		  "Name": "Original header template",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"",
"			This literal depicts the first example how the original header looks like where it must contain the word \"[Sequence]\" and (optionally if only 1 category",
"			name provided, otherwise mandatory), the word \"[Category]\".  \"Sequence\" and \"Category\" are case sensitive.",
"",
"			<br>The following table shows a few template examples and examples of the corresponding headers expected in the table",
"			=== 100, 300, 400",
"			Sequence Name		| Original header template	| Example of a valid header in the original table",
"			Years				| \"[Category]/[Sequence]\"	| \"Orders/2018\"",
"			Quarters			| \"[Sequence] [Category]\"	| \"Q1 Orders\"",
"			Countries			| \"[Category] in [Sequence]\"| \"Orders in AT\"",
"			(1 category name)	| \"Year [Sequence]			| \"Year 2018\"",
"			===",
"",
"			The function will actually look for these headers and expects that each of them sequence names and Category names will be mentioned at least once.",
"			Sufficient example for quarters / 3 Category names:",
"			* Q1 Orders, Q2 Revenues, Q3 Earnings, Q4 Orders",
"			Not sufficient example:",
"			* Q1 Orders, Q2 Revenues, Q3 Revenues, Q4 Orders	(\"Earnings\" missing)",
"			* Q1 Orders, Q2 Revenues, Q3 Revenues, Q1 Earnings	(\"Q4\" missing)",
"",
"			The 6th parameter is not required if only 1 category name is specified.  In this case, the function looks for column names equaling to the sequence names, ",
"			e.g. \"2018\", \"2019\", \"Q1\", \"Q2\", \"AT\", \"BE\" related to the various examples above.",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Column count",
		  "Types": [ "numeral" ],
"Description" : [
"			Number of columns found with header names comprised of values in 4th, 5th and 6th parameters."
 ]
		  
		}
	],
	"Exceptions": [ "0 Sequence and/ or 0 category names provided", "No columns with data to spread have been found." ],
"Examples" : [
"	include ( Support Library );",
"	// An easy one",
"",
"	table initialize( bils, // Swedisch for 'cars', aka 'automo-bils'",
"		{ { Product, \"2020-Q1\"..\"2020-Q4\" },",
"		  { Sedans,   24, 34, 44, 14 },",
"		  { Pickpus,  11, 21, 31, 21 },",
"		  { Cabrios,  '',  5, 10, '' },",
"		  { SUVs,     35, 25, 45, 55 } } );",
"",
"	echo(\"Car sales in sequential order (including blanks here):\");",
"	table serialize all( bils, Product, Quarter, { \"2020-Q1\"..\"2020-Q4\" }, Cars sold );",
"	table list ( bils );",
"",
"	// Serializing order intake (OI) and revenues (Rev) over quarters",
"",
"	table initialize( kpi, // Key Performance Indicators",
"		{ { Region,   \"OI 2018\", \"Rev 2018\", \"OI 2019\", \"Rev 2019\", \"OI 2020\", \"Rev 2020\"  },",
"		  { Americas, 1000,      950,        1100,      1050,       1200,      1150        },",
"		  { Europe,    800,      700,         900,       950,       1100,      1050        },",
"		  { Antarctica, '',       '',           0,         0,         20,        15        } } );",
"",
"	echo;",
"",
"	echo(\"Key performance indicator values (excluding blanks and zero:\");",
"	table serialize ignore zero( kpi, Region, Year, { \"2018\"..\"2020\" },",
"								 { OI, Rev }, \"[Category] [Sequence]\" );",
"	table list ( kpi );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table spread", "table spread given headers" ]

}

,

"table spread ..." :
{
	"Function Names":	[ "table spread", "table spread accumulating" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This is a pivot function which spreads vertically listed data horizontally across multiple columns using a key derived from",
"		information in other columns, (e.g. sequence info like dates, quarters, years, states, countries and/or category info like revenues,earnings, etc.).",
"		The columns created in horizontal order will be arranged in case sensitive alphabetic order.  Values to be spreaded must not necessarily be numeric,",
"		unless you use <b>table spread accumulating</b>.",
"",
"		<br/><img src=\"Images/Function_table_spread.jpg\" alt=\"Function 'table spread'\"><br/>",
"",
"		This function creates new headers only if they are not yet existing.  If headers are existing, then data below will be preserved unless overwritten by values being spread.",
"		The function <b>table spread accumulating</b> will add the new values to the existing value instead of overwriting it. You can do multiple calls of this function on the same table.",
"",
"		<u>Hint</u>:To finalize a pivot from vertical horizontal, call __table consolidate(__) as the net function to reduce the number of rows",
"		to the minimum necessary.",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"3-7",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing  table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Column with values to spread",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			   Specify the column which contains the values or any other conetns you want to spread horizontally.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Exactly 1 header name and column numbers may be specified"
 ]
			
		},
		{   "Number":		"3.",
			"Name" :		"Spreading key expression",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				In order to spread the data horizontally across columns to be created, you need to specify how the new column headers names shall be",
"				formulated for the horizontal data.  This parameter is an expression which is calculated for every table row and should preferably",
"				generate an output value of literal type (string).  Other types, such as numerals (e.g. years) will be converted to strings automatically.",
"				During the horizontal spreading, the applicable value (column specified in 2nd parameter) will be copied to the new columns with these",
"				header names.",
"",
"				<br><br>",
"				__Partial table specification__ is supported here to reference table columns easily.",
"				<br><br>",
"",
"				Simple example if spreading by one column, e.g. year: Specify <b>[year]</b>.<br>",
"				Multiple columns, e.g. quarter and year in separate columns: Specify <b>Q+[Quarter]+' '+literal([year])</b> for values like 'Q1 2022'.<br>",
"				To spread values by 1st letter, consider , which picks the 1st leter and capitalizes it (+ operator on strings).",
"",
"				* For a simple distribution across years, quarters, countries, states, and the actual data is available one column, then specify the corresponding column name in brackets, e.g. <b>[Year]</b>.",
"				* For a distribution of values across years where the full data is available, something like <b>year([Delivery Dates])</b> is proposed.",
"				* For an alphabetical distribution, use something like <br>+[Name]{0}</br> which picks the 1st letter and capitalizes it (unary '+' operator at the beginning).",
"				* For a combination of multiple columns, e.g. category and sequence info, combine two columns, e.g. <b>[KPI]+'/'+literal([Year])</b> or <b>[Quarter]+\"-\"+literal([Yeaer])</b>.",
"",
"				<u>Attention</u>: New columns will only be created if they are not yet existing.  This scheme allows running multiple calls of <b>table spread</b> and <b>table spread accumulating</b>",
"				with different data.  This function does not delete any existing values.  Values already existing will only be overwritten or added up.",
""
 ]
			
		},
		{   "Number":		"Opt. 4.",
			"Name" :		"Pivot limitation expression",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
			"Default value" :	"true",
"Description" : [
"				This is an expression which will be calculated for every table rowo and shall return a boolean value.",
"				If the value is true, then the value will be spread into a dedicated column.  This feature lets you limit the creation of too many columns.",
"				All values excluded will appear in the column for all other values, if defined using the 6th function parameter.",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Year]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands.",
"",
"				<br><br>",
"",
"				Examples: Your data contains a column containing years, but want to limit the spreading to 5 years, then specify something like",
"				<b>([Year]=2020..2024)</b>.  Note the required parentheses as explained above so the expression does not hijack following function parameters.",
""
 ]
			
		},
		{   "Number":		"Opt. 5.",
			"Name" :		"Maximum number of columns to add",
			"Direction" :	"code",
			"Types" :		[ "numeral" ] ,
			"Default value" : "(not limited)" ,
"Description" : [
"				You can limit the number of columns to be created in order to prevent overruns.  In this case, only the first n columns (in alphabetic order) will be shown."
 ]
			
		},
		{ "Number": "Opt. 6.",
		  "Name": "Column for all other values",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "(not applicable)",
"Description" : [
"		    This column will be used to allocate all values which cannot be allocate into the specified columns due to limitations",
"			defined by the 4th and/or 5th function parameters.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Max. 1 header name may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 7.",
		  "Name": "Destination column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "to the end of the table",
"Description" : [
"			Specify a header name or column number where to insert the new columns added. The specified column and further ones to the right will shift to the",
"			right accordingly.<br>",
"			Negative number are supported for indexing from right to left, however -1 refers to the end of the table, -2 to left of last column, etc.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Column count",
		  "Types": [ "numeral" ],
"Description" : [
"			Number of new columns added.  The 'column for other values' specified in the 6th function parameter is not included in the counting."
 ]
		  
		}
	],
"Examples" : [
"	include ( Support Library );",
"	// Remember the motor vehicles serialized ...",
"	table initialize( bils, // Swedisch for 'cars', aka 'automo-bils'",
"		{ { Product, \"2020-Q1\"..\"2020-Q4\" },",
"		  { Sedans,   24, 34, 44, 14 },  { Pickpus,  11, 21, 31, 21 },",
"		  { Cabrios,  '',  5, 10, '' },  { SUVs,     35, 25, 45, 55 } } );",
"",
"	echo(\"Car sales in sequential order (including blanks here):\");",
"	table serialize all( bils, Product, Quarter, { \"2020-Q1\"..\"2020-Q4\" }, Cars sold );",
"	table list ( bils );",
"",
"	echo(\"Let's shift to reverse gear: Spread the data\");",
"",
"	count[] = table spread( bils, Cars sold, [Quarter] );",
"	table list ( bils );",
"",
"	echo(\"Number of new columns created. \", count[]);",
"	echo(\"And do a final consolidation and you get the original list.\");",
"	table consolidate( bils, Product, { Quarter, Cars sold, \"2020-Q1\"..\"2020-Q4\" }, { 2:delete, overwrite if blank }  );",
"	table list ( bils );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table spread given headers", "table consolidate", "table serialize" ]

}

,

"table spread given headers ..." :
{
	"Function Names":	[ "table spread given headers", "table spread given headers accumulating" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		These two functions are very similar to __table spread(__) and __table spread accumulating(__) with the only difference that",
"		you specify the column header names directly which shall be included, and not more.  This approach provides full control of the new",
"		columns created, regardless of the data being spread horizontally.",
"",
"		<br/><img src=\"Images/Function_table_spread.jpg\" alt=\"Function 'table spread'\"><br/>",
"",
"		If the destination colums are already existing, then the will be used.  Otherwise, the new columns will be created.",
"		The function <b>table spread accumulating</b> will add the new values to the existing value instead of overwriting it. ",
"		You can do multiple calls of this function on the same table.",
"",
"		<u>Hint</u>:To finalize a pivot from vertical horizontal, call __table consolidate(__) as the net function to reduce the number of rows",
"		to the minimum necessary.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"4-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing  table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Column with values to spread",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			   Specify the column which contains the values or any other conetns you want to spread horizontally.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Exactly 1 header name and column numbers may be specified"
 ]
			
		},
		{   "Number":		"3.",
			"Name" :		"Spreading key expression",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"				Details: See __table spread(__), 3rd function parameter for details.<br>",
"				During the spreading process, the calculated keys will be compared with the columns specified in the 4th parameter.",
"				Only if the columns exist, then the horiontal spreading takes place.",
""
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Destination Columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			   Specify all column header names for the data being spread.  If it is years, then specify something like  { '2020' .. '2025' },",
"			   noting that all values must be literal.  No additional columns will be created automatically if certain values do not fit into the",
"			   given header names.  However, they can be spread into the 'column for all other values' specified in the 5th function parameter.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names may be specified",
"			* Column numbers are not allowed",
"			* Header names need to be unique"
 ]
			
		},
		{ "Number": "Opt. 5.",
		  "Name": "Column for all other values",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "(not applicable)",
"Description" : [
"			This column will be used to allocate all values which cannot be allocate into the specified columns listed in the 4th function parameter.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Max. 1 header name may be specified.",
""
 ]
			
		},
		{ "Number": "Opt. 6.",
		  "Name": "Destination column",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "to the end of the table",
"Description" : [
"			Specify a header name or column number where to insert the new columns added. The specified column and further ones to the right will shift to the",
"			right accordingly.<br>",
"			Negative number are supported for indexing from right to left, however -1 refers to the end of the table, -2 to left of last column, etc.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		}
	],
	"Return value":
	[
		{ "Name": "Column count",
		  "Types": [ "numeral" ],
"Description" : [
"			Number of new columns added.  The 'column for other values' specified in the 6th function parameter is not included in the counting."
 ]
		  
		}
	],
"Examples" : [
"	include ( Support Library );",
"	// Remember the motor vehicles serialized ...",
"	table initialize( bils, // Swedisch for 'cars', aka 'automo-bils'",
"		{ { Product, \"2020-Q1\"..\"2020-Q4\" },",
"		  { Sedans,   24, 34, 44, 14 },  { Pickpus,  11, 21, 31, 21 },",
"		  { Cabrios,  '',  5, 10, '' },  { SUVs,     35, 25, 45, 55 } } );",
"",
"	echo(\"Car sales in sequential order (including blanks here):\");",
"	table serialize all( bils, Product, Quarter, { \"2020-Q1\"..\"2020-Q4\" }, Cars sold );",
"	table list ( bils );",
"",
"	echo(\"Let's add more values: One reservation, to demonstrate ...accumulating\");",
"	table insert columns( bils, Cars reserved );",
"	[bils:Product,Sedans,Cars reserved] = 20;",
"",
"	// Specify 2 columns, and the 'Others' column to put all remaining data.",
"	cols[] = {\"2020-Q1\", \"2020-Q2\"};",
"	table spread given headers ( bils, Cars sold, [Quarter], cols[], Others );",
"	table spread given headers accumulating( bils, Cars reserved, [Quarter], cols[], Others );",
"",
"	echo(\"Note the 44 sedans in 2020-Q1 (24 sold, 20 reserved)\");",
"	table list ( bils );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table spread", "table consolidate", "table serialize" ]
}

,

"table consolidate ..." :
{
	"Function Names":	[ "table consolidate", "table consolidate selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function condenses the the table by reducing the rows and performing operations in order to aggregate the data so they continue to be",
"		plausible for further use.  More precisely, one or more identifier columns need to be defined. The aim is to reduce the number of rows with",
"		the same data in the identifier columns to 1.  The 2nd and further rows with the same identifier data will be merged into the first applciable",
"		row.  Specific consolidation actions will be applied on selected columns (e.g. overwriting, adding up, etc.).",
"",
"		<br/><img src=\"Images/Function_table_consolidate.jpg\" alt=\"Function 'table consolidate'\"><br/>",
"",
"		<u>Hint</u>:A vertical-to-horizontal pivot operation can be finalized by using this funciton after calling __table spread(__) or __table spread given headers(__).",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing  table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"2.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
"Description" : [
"",
"				Applicable to function <b>table consolidate selected rows</b> only.",
"",
"				Specify the conditions or rules to select the rows.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side , then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt. 2. / 3.",
		  "Name": "Identifier Columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns selected)",
"Description" : [
"			   The identifier columns guide the consolidation process.  All rows containing the same data in the identifier columns will be reduced to 1 row accordingly.",
"			   If the 1st function parameter refers to no columns, then all rows in the entire table will be consolidated to 1 row.  If <b>table consolidate</b> is called",
"			   with onyly 1 function parameter, then the consolidation process takes place without consolidating the remaining columns (i.e. consolidation action 'none' is assumed).",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Specifying no headers (i.e. softquoted empty string '' or empty set {}) will consolidate all table rows to 1 single row.",
"			* Do not repeat the same column",
""
 ]
			
		},
		{ "Number": "Opt. 3. / 4.",
		  "Name": "Columns to consolidate",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns consolidated)",
"Description" : [
"				Specify the columns where the data shall be consolidated automatically.  The remaining columns in the table will not be consolidated, i.e. the consolidation",
"				action is assumed 'none'.  In this case, the contents in the first row will be preserved.<br>",
"				<u>Note</u>: If all columns (except the identifier columns) need to be consolidated, then specify an asterisk in a softquoted literal using single quotation marks, e.g. '*'. (\"*\" looks for header name = \"*\").",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
"			* Specifying no headers (i.e. softquoted empty string '' or empty set {}) will exclude all columns from active consolidation.  Contents in top row will apply.",
"			* Do not specify any columns already referenced in the previous function parameter (identifier columns)",
"			* Do not repeat the same column",
"			* Softquoted literal '*' in single quotation marks: Consolidate all columns in the table except the identifier columns",
""
 ]
			
		},
		{ "Number": "Opt. 4. / 5.",
		  "Name": "Consolidation actions",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'overwrite' if previous parameter is specified, otherwise 'none'",
"Description" : [
"",
"				Specify one of the various __consolidation actions__.<br>",
"				The operation is applied with the data from the next lower applicable row and the destination data in the first applicable row (= target row).",
"				For example, <b>add</b> adds the value from the lower row to the target row.",
"",
"				The number of operation identifiers is less than the number of columns specified in the 3rd (output columns) and 6th parameter (destination columns),",
"				then the default value 'overwrite' is assumed for the remaining columns.  If this parameter contains more elements than columns retrieved, then the exess ones will be ignored.",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* No values can be provided by using empty set {} or blank softquoted literal ''.  'none' is assumed for all consolidating columns here.",
"				* Ideally, the number of consolidation actions shall equal to the number of columns to consolidate (previous function parameter).",
"				* If fewer consolidation actions are listed than number of columns to consolidate, then the last action will apply to all remaining columns.",
"				* If more consolidation actions are listed, then the excessive numbr of actions will be ignored."
 ]
				
		},
		{ "Number": "Opt. 5. / 6.",
		  "Name": "Separator string",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'' (empty string)",
"Description" : [
"				For some __consolidation actions__ (e.g. <b>append, append once</b>), a separator string can be specified to separate the consolidated strings",
"				in a more visible way, for example using a comma or new line."
 ]
				
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows removed",
		  "Types": [ "numeral" ],
"Description" : [
"			>=0 = Number of rows removed<br>",
"			-1 = Error identified."
 ]
		  
		}
	],
"Examples" : [
"	include( Support Library );",
"	table initialize( t,",
"	{ { Highest Score, Name,      Location, Game 1, Game 2, Remarks, Count },",
"	  { 210,           Taylor,    Rome,     32,     20                      },",
"	  { 190,           Tailor,    Prague,   41,     13,     Exceptional win },",
"	  { 190,           Snyder,    Berne,    41,     12,                     },",
"	  { 200,           Tailor,    Miami,    51,     10,     great job       },",
"	  { 230,           Taylor,    Jakarta,  14,     21                      },",
"	  { 230,           Taylor,    Boston,   15,     22                      },",
"	  { 190,           Tailor,    Oslo,     41,     13      great job       } } );",
"",
"",
"	table copy table( t, u );",
"",
"	// '*' in 3rd function parameter selects all columns except 'Name'.",
"	// In this case, the 6 consolidation actions apply to the 6 columns from left to right.",
"",
"	c[] = table consolidate              ( t, Name,'*', {max, append, sum, average, append once, count}, \", \" );",
"	echo(\"All rows consolidated (\", c[], \" rows removed):\");",
"	table list ( t );",
"",
"	c[] = table consolidate selected rows( u, [Name]==Taylor, Name,'*', {max, append, sum, average, append once, count}, \", \" );",
"	echo(\"Only Taylor's rows consolidated (\", c[], \" rows removed):\");",
"	table list ( u );",
"",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "table spread", "table spread given headers", "table serialize" ]
}

,

"table merge ..." :
{
	"Function Names":	[ "table merge", "table merge extend columns", "table merge intersect columns", "table merge subtract columns", "table merge exclusive columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The functions described here merge the contents of the source table into the destination table.  Identifier columns can be defined for both tables in order to",
"		identify the overlapping table rows (e.g. same first and last names).",
"",
"		<br><br>",
"",
"		For the merging process, the principle of <i>union set</i> is applied.  All rows in the source tables which do not share the same identifier data as in the",
"		destination table will be added to the end of the table.  This does also apply  if no identifier columns are specified (e.g. 3rd function parameter not used or {} or '' provided).",
"		In the other case, where rows in the source table share the same identifier data as in the destination table and are considered <i>overlapping</i>, ",
"		the data from the source table row will be consolidated into the destination table row using available __consolidation actions__.  The consolidation actions",
"		work similarly like in the function __table consolidate(__) where exactly two rows are consolidated into one row.",
"",
"		<br><br>",
"",
"		In case the two tables contain multiple equal values in the identifier columns (for example if only the first name has been referred), then every affecting row in the",
"		source table will be consolidated in one row in the destination table and then checked off as 'done'.  If another row in the source table has the same value, then",
"		the next match further below in the destination table will be seeked.  If the source table contains more repeated contents in the identifier column than in the ",
"		destination table, then the remaining rows will be added to the end of the destination table.",
"",
"		<br><br>",
"		The following functions use different approaches to combine the data columns:",
"		=== 250, 750, noframe_1stcolbold, noheader",
"		table merge						| No further columns are added to the destination table",
"		table merge extend columns		| Columns in the source table but not found in the destinationtable will be added to the target table (union set)",
"		table merge intersect columns	| Removes columns from the destination table if they do not exist in the source table (intersection)",
"		table merge subtract columns	| removes columns from destination table if they are found in the source table, but keeps the identifier columns.",
"		table merge exclusive columns	| Removes columns found in both source and destination table, but keeps the identifier columns (exclusive OR).",
"		===",
"",
"		<br/><img src=\"Images/Function_table_merge.jpg\" alt=\"Function 'table merge'\"><br/><br/>",
"",
"		Typical applications:",
"		* Gathering information collected from different sources",
"		* Merger and acquisitions",
"",
"",
"		<u>Note</u>: If the destination table does not yet exist, or if the table is entirely empty (i.e. no header inside), then the data in the source table will be copied into the destination table.",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-6 (Max 3 for function names 'table merge subtract/exclusive columns')",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing source table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of destionation table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "Opt. 3.",
		  "Name": "Identifier Columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns specified)",
"Description" : [
"			   The identifier columns are used to match common data in both tables.",
"			   Rows with same identifier data in both source and destination tables",
"			   are considered as <i>overlapping</i> rows.  The data in overlapping rows will be consolidated.",
"			   If no columns are specified, then no commonalities are assumed and no rows will be consolidated.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified.  This applies to both tables (i.e. they must have same header names)",
"			* Use column numbers only if the data in both tables are physically located in the same columns.",
"			* Specifying no headers (i.e. softquoted empty string '' or empty set {}) will consolidate all table rows to 1 single row.",
"			* Do not repeat the same column",
""
 ]
			
		},
		{ "Number": "4.",
		  "Name": "Columns to consolidate",
		  "Direction": "input",
		  "Types": [ "table columns" ],
		  "Default value": "{} (no columns consolidated)",
"Description" : [
"				Specify the columns where the data from the source table shall be consolidated into the destination table.  ",
"				The remaining columns in the table will not be consolidated, i.e. the values in the destination table remain unchanged.",
"				<u>Note</u>: If all columns (except the identifier columns) need to be consolidated, then specify an asterisk in a softquoted literal using single quotation marks, e.g. '*'. (\"*\" looks for header name = \"*\").<br>",
"				<u>Note</u>: This parameter is not applicable for function names ending with <b>... subtract columns</b> and <b>... exclusive columns columns</b>.",
"",
"			<br><br>",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified.  This applies to both tables (i.e. they must have same header names)",
"			* Specifying no headers (i.e. softquoted empty string '' or empty set {}) will exclude all columns from active consolidation.  Contents in top row will apply.",
"			* Do not specify any columns already referenced in the previous function parameter (identifier columns)",
"			* Do not repeat the same column",
"			* Softquoted literal '*' in single quotation marks: Consolidate all columns in the table except the identifier columns",
""
 ]
			
		},
		{ "Number": "Opt. 5.",
		  "Name": "Consolidation actions",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'overwrite' if preious parameter is specified, otherwise 'none'",
"Description" : [
"",
"				Specify one of the various __consolidation actions__.<br>",
"				The operation is applied with the data from the next lower applicable row and the destination data in the first applicable row (= target row).",
"				For example, <b>add</b> adds the value from the lower row to the target row.<br>",
"				<u>Note</u>: This parameter is not applicable for function names ending with <b>... subtract columns</b> and <b>... exclusive columns columns</b>.",
"",
"",
"				The number of operation identifiers is less than the number of columns specified in the 3rd (output columns) and 6th parameter (destination columns),",
"				then the default value 'overwrite' is assumed for the remaining columns.  If this parameter contains more elements than columns retrieved, then the exess ones will be ignored.",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* No values can be provided by using empty set {} or blank softquoted literal ''.  'none' is assumed for all consolidating columns here.",
"				* Ideally, the number of consolidation actions shall equal to the number of columns to consolidate (previous function parameter).",
"				* If fewer consolidation actions are listed than number of columns to consolidate, then the last action will apply to all remaining columns.",
"				* If more consolidation actions are listed, then the excessive numbr of actions will be ignored.",
"				* If '*' (consolidate all columns) is specified in the 4th parameter, the the consolidation actions apply to the table columns from left to right, <u>skipping</u> the identifier columns and columns to be removed if using <b>table merge intersect columns</b>. "
 ]
				
		},
		{ "Number": "Opt. 6.",
		  "Name": "Separator string",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "'' (empty string)",
"Description" : [
"				For some __consolidation actions__ (e.g. <b>append, append once</b>), a separator string can be specified to separate the consolidated strings",
"				in a more visible way, for example using a comma or new line.<br>",
"				<u>Note</u>: This parameter is not applicable for function names ending with <b>... subtract columns</b> and <b>... exclusive columns columns</b>."
 ]
				
		}
	],
	"Return value":
	[
		{ "Name": "Number of rows removed by combining the tables and consolidating the overlapping rows",
		  "Types": [ "numeral" ],
"Description" : [
"			>=0 = Number of rows removed<br>",
"			-1 = Error identified."
 ]
		  
		}
	],
	"Details 01:Program Examples with 'table merge ...'": "",
"Examples 01:Merging tables into one without identifier columns specified" : [
"		include( Support Library );",
"		echo(\"Loading farms in Hillboro and Hillville\");",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		echo(\"Farms in Hillboro:\");",
"		table list( hb );",
"",
"		echo(\"Farms in Hillville:\");",
"		table list( hv );",
"",
"		count[] = table merge( hv, hb );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 01:Output: Zero rows consolidated": "automatic",

"Examples 02:Declare 'Farmer' as unique identifier" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table merge( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 02:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 03:Merge data in smart way and add 2 columns from source table:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table merge extend columns( hv, hb, Farmer, '*', { must match, append, 5:sum, append }, \", \" ); ",
"		// '*' corresponds to {Organic, Place, Wheat, Oat, Sheeps, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 03:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 04:Merge data in smart way and keep intersected columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table merge intersect columns( hv, hb, Farmer, '*', { must match, append, 3:sum, append }, \", \" );",
"		// '*' corresponds to {Organic, Place, Wheat, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 04:Output: 3 farmers with land in both towns have been consolidated.": "automatic",



"Examples 05:Merge data in smart way and subtract the columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table merge subtract columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 05:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 06:Merge data in smart way and show all columns except comomon ones:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table merge exclusive columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 06:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Details 07:Tables with multiple non-unique identifiers being merged:" : [
"		In case you plan to merge two tables with a one or a selection of column identifiers which cannot guarantee uniqueness, ",
"		e.g. a list of names identified by first name only, then this function will match first name pairs first, ",
"		then the next ones below, and so forth.  As a result, every row is considered only once.  Long story short:",
"		Every row in the destination table will be consolidated only once.",
"		The following code example demonstrates this:"
 ]
		,
"Examples 07:One Jill and tow Micheles will be consolidated:" : [
"		include( Support Library );",
"		table load( h1, \"Examples/Table Merge Examples Hobbies 1.csv\");",
"		table load( h2, \"Examples/Table Merge Examples Hobbies 2.csv\");",
"",
"		echo(\"Hoobies 1:\");      table list( h1 );",
"		echo(\"Hoobies 2:\");      table list( h2 );",
"",
"		count[] = table merge( h2, h1, Name, '*', append, ', ' );",
"",
"		echo(\"Combined list of hobbies (\", count[], \" rows consolidated):\");",
"		table list( h1 );"
 ]
		,

	"Output 07:The outcome": "automatic",

	"See also": [ "table overlay", "table intersect", "table subtract", "table exclude", "table consolidate" ]
}

,

"table overlay/subtract ..." :
{
	"Function Names":	[ "table overlay", "table overlay extend columns", "table overlay intersect columns", "table overlay columns", "table overlay exclusive columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The functions described here overlay the contents of the source table into the destination table.  Identifier columns can be defined for both tables in order to",
"		identify the overlapping table rows (e.g. same first and last names).",
"",
"		<br><br>",
"",
"		For the merging process, the principle of <i>union set</i> is applied.  Different from the __table merge(__) function family, all rows in the source tables which do not",
"		share the same identifier data as in the destination table will <u>not be added</u> to the end of the table.  This does also apply if no identifier columns ",
"		are specified (e.g. 3rd function parameter not used or {} or '' provided).",
"		In the other case, where rows in the source table share the same identifier data as in the destination table and are considered <i>overlapping</i>,",
"		the data from the source table row will be consolidated into the destination table row using available __consolidation actions__.  The consolidation actions",
"		work similarly like in the function __table consolidate(__) where exactly two rows are consolidated into one row.",
"",
"		<br><br>",
"",
"		In case the two tables contain multiple equal values in the identifier columns (for example if only the first name has been referred), then every affecting row in the",
"		source table will be consolidated in one row in the destination table and then checked off as 'done'.  If another row in the source table has the same value, then",
"		the next match further below in the destination table will be seeked.  If the source table contains more repeated contents in the identifier column than in the",
"		destination table, then the remaining rows will be added to the end of the destination table.",
"",
"		<br><br>",
"		The following functions use different approaches to combine the data columns:",
"		=== 250, 750, noframe_1stcolbold, noheader",
"		table overlay						| No further columns are added to the destination table",
"		table overlay extend columns		| Columns in the source table but not found in the destinationtable will be added to the target table (union set)",
"		table overlay intersect columns		| Removes columns from the destination table if they do not exist in the source table (intersection)",
"		table subtract columns				| removes columns from destination table if they are found in the source table, but keeps the identifier columns.<br><u>Note</u>: The function name does not contain the word <b>overlay</b> because it is meaningless here.",
"		table overlay exclusive columns		| Removes columns found in both source and destination table, but keeps the identifier columns (exclusive OR).",
"		===",
"",
"		<br/><img src=\"Images/Function_table_overlay.jpg\" alt=\"Function 'table overlay'\"><br/><br/>",
"",
"		<u>Note</u>: If the destination table does not yet exist, or if the table is entirely empty (i.e. no header inside), then the data in the source table will be copied into the destination table.",
"",
"		Typical applications:",
"		* Enriching tables with additional information from other sources",
"		* Keeping key performance figures (KPI's) in tables up-to-date",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-6 (Max 3 for function names 'table overlay exclusive columns' and 'table subtract columns'). <br>See __table merge(__) for parameter and return value description",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Details 01:Program Examples with 'table overlay ...'": "",
"Examples 01:Merging tables into one without identifier columns specified" : [
"		include( Support Library );",
"		echo(\"Loading farms in Hillboro and Hillville\");",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		echo(\"Farms in Hillboro:\");",
"		table list( hb );",
"",
"		echo(\"Farms in Hillville:\");",
"		table list( hv );",
"",
"		count[] = table overlay( hv, hb );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 01:Output: Zero rows consolidated": "automatic",

"Examples 02:Declare 'Farmer' as unique identifier" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table overlay( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 02:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 03:Merge data in smart way and add 2 columns from source table:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table overlay extend columns( hv, hb, Farmer, '*', { must match, append, 5:sum, append }, \", \" );",
"		// '*' corresponds to {Organic, Place, Wheat, Oat, Sheeps, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 03:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 04:Merge data in smart way and keep intersected columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table overlay intersect columns( hv, hb, Farmer, '*', { must match, append, 3:sum, append }, \", \" );",
"		// '*' corresponds to {Organic, Place, Wheat, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 04:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 05:Merge data in smart way and subtract the columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract columns( hv, hb, Farmer ); // Note: 'overlay' is not part of function name.",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 05:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 06:Merge data in smart way and show all columns except comomon ones:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table overlay exclusive columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 06:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Details 07:Tables with multiple non-unique identifiers being merged:" : [
"		In case you plan to merge two tables with a one or a selection of column identifiers which cannot guarantee uniqueness,",
"		e.g. a list of names identified by first name only, then this function will match first name pairs first,",
"		then the next ones below, and so forth.  As a result, every row is considered only once.  Long story short:",
"		Every row in the destination table will be consolidated only once.",
"		The following code example demonstrates this:"
 ]
		,
"Examples 07:One Jill and tow Micheles will be consolidated:" : [
"		include( Support Library );",
"		table load( h1, \"Examples/Table Merge Examples Hobbies 1.csv\");",
"		table load( h2, \"Examples/Table Merge Examples Hobbies 2.csv\");",
"",
"		echo(\"Hoobies 1:\");      table list( h1 );",
"		echo(\"Hoobies 2:\");      table list( h2 );",
"",
"		count[] = table overlay( h2, h1, Name, '*', append, ', ' );",
"",
"		echo(\"Combined list of hobbies (\", count[], \" rows consolidated):\");",
"		table list( h1 );"
 ]
		,

	"Output 07:The outcome": "automatic",

	"See also": [ "table merge", "table intersect", "table subtract", "table exclude", "table consolidate" ]
}

,

"table intersect ..." :
{
	"Function Names":	[ "table intersect", "table intersect extend columns", "table intersect intersect columns", "table intersect columns", "table intersect exclusive columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The functions described here intersect the contents of the source table into the destination table.  Identifier columns can be defined for both tables in order to",
"		identify the overlapping table rows (e.g. same first and last names).",
"",
"		<br><br>",
"",
"		For the merging process, the principle of <i>intersection</i> is applied.  After the function call, the destination table will only contain those rows which",
"		share the same data in the identifier columns in both source and destination tables, where the data in the rows from the source table has been consolidated into",
"		the corresponding rows in the destination table using available __consolidation actions__.  The consolidation actions",
"		work similarly like in the function __table consolidate(__) where exactly two rows are consolidated into one row.",
"",
"		<br><br>",
"",
"		In case the two tables contain multiple equal values in the identifier columns (for example if only the first name has been referred), then every affecting row in the",
"		source table will be consolidated in one row in the destination table and then checked off as 'done'.  If another row in the source table has the same value, then",
"		the next match further below in the destination table will be seeked.  If the source table contains more repeated contents in the identifier column than in the",
"		destination table, then the remaining rows will be added to the end of the destination table.",
"",
"		<br><br>",
"		The following functions use different approaches to combine the data columns:",
"		=== 250, 750, noframe_1stcolbold, noheader",
"		table intersect						| No further columns are added to the destination table",
"		table intersect extend columns		| Columns in the source table but not found in the destinationtable will be added to the target table (union set)",
"		table intersect intersect columns	| Removes columns from the destination table if they do not exist in the source table (intersection)",
"		table intersect subtract columns	| removes columns from destination table if they are found in the source table, but keeps the identifier columns.",
"		table intersect exclusive columns	| Removes columns found in both source and destination table, but keeps the identifier columns (exclusive OR).",
"		===",
"",
"		<br/><img src=\"Images/Function_table_intersect.jpg\" alt=\"Function 'table intersect'\"><br/><br/>",
"",
"		<u>Note</u>: If the destination table does not yet exist, or if the table is entirely empty (i.e. no header inside), then the data in the source table will be copied into the destination table.",
"",
"		Typical applications:",
"		* Finding commonalities in mulitple tables",
"		* Helful to identify the degree of standardization of items (e.g. re-use of components listed in bills of materials)",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-6 (Max 3 for function names 'table intersect subtract/exclusive columns').  <br>See __table merge(__) for parameter and return value description",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Details 01:Program Examples with 'table intersect ...'": "",
"Examples 01:Merging tables into one without identifier columns specified" : [
"		include( Support Library );",
"		echo(\"Loading farms in Hillboro and Hillville\");",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		echo(\"Farms in Hillboro:\");",
"		table list( hb );",
"",
"		echo(\"Farms in Hillville:\");",
"		table list( hv );",
"",
"		count[] = table intersect( hv, hb );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 01:Output: Table will be empty because no identifier column is specified, so every column is unique": "automatic",

"Examples 02:Declare 'Farmer' as unique identifier" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table intersect( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 02:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 03:Merge data in smart way and add 2 columns from source table:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table intersect extend columns( hv, hb, Farmer, '*', { must match, append, 5:sum, append }, \", \" );",
"		// '*' corresponds to {Organic, Place, Wheat, Oat, Sheeps, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 03:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 04:Merge data in smart way and keep intersected columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table intersect intersect columns( hv, hb, Farmer, '*', { must match, append, 3:sum, append }, \", \" );",
"		// '*' corresponds to {Organic, Place, Wheat, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 04:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 05:Merge data in smart way and subtract the columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table intersect subtract columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 05:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 06:Merge data in smart way and show all columns except comomon ones:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table intersect exclusive columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 06:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Details 07:Tables with multiple non-unique identifiers being merged:" : [
"		In case you plan to merge two tables with a one or a selection of column identifiers which cannot guarantee uniqueness,",
"		e.g. a list of names identified by first name only, then this function will match first name pairs first,",
"		then the next ones below, and so forth.  As a result, every row is considered only once.  Long story short:",
"		Every row in the destination table will be consolidated only once.",
"		The following code example demonstrates this:"
 ]
		,
"Examples 07:One Jill and tow Micheles will be consolidated:" : [
"		include( Support Library );",
"		table load( h1, \"Examples/Table Merge Examples Hobbies 1.csv\");",
"		table load( h2, \"Examples/Table Merge Examples Hobbies 2.csv\");",
"",
"		echo(\"Hoobies 1:\");      table list( h1 );",
"		echo(\"Hoobies 2:\");      table list( h2 );",
"",
"		count[] = table intersect( h2, h1, Name, '*', append, ', ' );",
"",
"		echo(\"Combined list of hobbies (\", count[], \" rows consolidated):\");",
"		table list( h1 );"
 ]
		,

	"Output 07:The outcome": "automatic",

	"See also": [ "table merge", "table overlay", "table subtract", "table exclude", "table consolidate" ]
}

,

"table subtract ..." :
{
	"Function Names":	[ "table subtract", "table subtract extend columns", "table subtract subtract columns", "table subtract columns", "table subtract exclusive columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The functions described here subtract the contents of the source table from the destination table.  Identifier columns can be defined for both tables in order to",
"		identify the overlapping table rows (e.g. same first and last names).",
"",
"		<br><br>",
"",
"		For all rows which share the same information in the identifier columns in both source and target tables, the correponding row in the destination table will be",
"		deleted.  The destination table remains unchanged if there are no rows with common identifer data or if no identifer columns have been specified so every row is",
"		considered unique.  The principle of data consolidation does not apply for these functions and this explains the that tehse functions take max. 3 parameters, ",
"		excluding the remaining parameters otherwise needed for data consolidation.",
"",
"		<br><br>",
"",
"		In case the two tables contain multiple equal values in the identifier columns (for example if only the first name has been referred), then every affecting row in the",
"		source table will be consolidated in one row in the destination table and then checked off as 'done'.  If another row in the source table has the same value, then",
"		the next match further below in the destination table will be seeked.  If the source table contains more repeated contents in the identifier column than in the",
"		destination table, then the remaining rows will be added to the end of the destination table.",
"",
"		<br><br>",
"		The following functions use different approaches to combine the data columns:",
"		=== 250, 750, noframe_1stcolbold, noheader",
"		table subtract						| No further columns are added to the destination table",
"		table subtract extend columns		| Columns in the source table but not found in the destinationtable will be added to the target table (union set)",
"		table subtract intersect columns	| Removes columns from the destination table if they do not exist in the source table (intersection)",
"		table subtract subtract columns		| removes columns from destination table if they are found in the source table, but keeps the identifier columns.",
"		table subtract exclusive columns	| Removes columns found in both source and destination table, but keeps the identifier columns (exclusive OR).",
"		===",
"",
"		<br/><img src=\"Images/Function_table_subtract.jpg\" alt=\"Function 'table subtract'\"><br/><br/>",
"",
"		<u>Note</u>: In contrast to other functions like __table merge(__), the destination table must exist with header information inside.<br>",
"",
"		Typical applications:",
"		* Eliminating duplications",
"",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-3 (Note: Max 3 parameters for this function family, not 6).<br>See __table merge(__) for parameter and return value description",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Details 01:Program Examples with 'table subtract ...'": "",
"Examples 01:Merging tables into one without identifier columns specified" : [
"		include( Support Library );",
"		echo(\"Loading farms in Hillboro and Hillville\");",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		echo(\"Farms in Hillboro:\");",
"		table list( hb );",
"",
"		echo(\"Farms in Hillville:\");",
"		table list( hv );",
"",
"		count[] = table subtract( hv, hb );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 01:Output: Table will be empty because no identifier column is specified, so every column is unique": "automatic",

"Examples 02:Declare 'Farmer' as unique identifier" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 02:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 03:Merge data in smart way and add 2 columns from source table:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract extend columns( hv, hb, Farmer );",
"		// '*' corresponds to {Organic, Place, Wheat, Oat, Sheeps, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 03:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 04:Merge data in smart way and keep subtracted columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract intersect columns( hv, hb, Farmer );",
"		// '*' corresponds to {Organic, Place, Wheat, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 04:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 05:Merge data in smart way and subtract the columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract subtract columns( hv, hb, Farmer ); ",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 05:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 06:Merge data in smart way and show all columns except comomon ones:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table subtract exclusive columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 06:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Details 07:Tables with multiple non-unique identifiers being merged:" : [
"		In case you plan to merge two tables with a one or a selection of column identifiers which cannot guarantee uniqueness,",
"		e.g. a list of names identified by first name only, then this function will match first name pairs first,",
"		then the next ones below, and so forth.  As a result, every row is considered only once.  Long story short:",
"		Every row in the destination table will be consolidated only once.",
"		The following code example demonstrates this:"
 ]
		,
"Examples 07:One Jill and tow Micheles will be consolidated:" : [
"		include( Support Library );",
"		table load( h1, \"Examples/Table Merge Examples Hobbies 1.csv\");",
"		table load( h2, \"Examples/Table Merge Examples Hobbies 2.csv\");",
"",
"		echo(\"Hoobies 1:\");      table list( h1 );",
"		echo(\"Hoobies 2:\");      table list( h2 );",
"",
"		count[] = table subtract( h2, h1, Name );",
"",
"		echo(\"Combined list of hobbies (\", count[], \" rows consolidated):\");",
"		table list( h1 );"
 ]
		,

	"Output 07:The outcome": "automatic",

	"See also": [ "table merge", "table overlay", "table intersect", "table exclude", "table consolidate" ]
}

,

"table exclude ..." :
{
	"Function Names":	[ "table exclude", "table exclude extend columns", "table exclude exclude columns", "table exclude columns", "table exclude exclusive columns" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		In the destination table, the functions described here will remove all rows which share the same contents in the identifier columns and include the rows from the",
"		source table whic do also not share the same identifier columns.  Briefly said, the principle of <i>exclusive or</i> or <i>disjoint union</i> is applied on the rows.",
"		If if no identifier columns have been specified, then all rows are considered unique and will be integrated into the target table.",
"",
"		<br><br>",
"	",
"		The principle of data consolidation does not apply for these functions and this explains the that tehse functions take max. 3 parameters,",
"		excluding the remaining parameters otherwise needed for data consolidation.",
"",
"		<br><br>",
"",
"		In case the two tables contain multiple equal values in the identifier columns (for example if only the first name has been referred), then every affecting row in the",
"		source table will be consolidated in one row in the destination table and then checked off as 'done'.  If another row in the source table has the same value, then",
"		the next match further below in the destination table will be seeked.  If the source table contains more repeated contents in the identifier column than in the",
"		destination table, then the remaining rows will be added to the end of the destination table.",
"",
"		<br><br>",
"		The following functions use different approaches to combine the data columns:",
"		=== 250, 750, noframe_1stcolbold, noheader",
"		table exclude						| No further columns are added to the destination table",
"		table exclude extend columns		| Columns in the source table but not found in the destinationtable will be added to the target table (union set)",
"		table exclude intersect columns	| Removes columns from the destination table if they do not exist in the source table (intersection)",
"		table exclude subtract columns	| removes columns from destination table if they are found in the source table, but keeps the identifier columns.",
"		table exclude exclusive columns	| Removes columns found in both source and destination table, but keeps the identifier columns (exclusive OR).",
"		===",
"",
"		<br/><img src=\"Images/Function_table_exclude.jpg\" alt=\"Function 'table exclude'\"><br/><br/>",
"",
"		<u>Note</u>: If the destination table does not yet exist, or if the table is entirely empty (i.e. no header inside), then the data in the source table will be copied into the destination table.",
"",
"		Typical applications:",
"		* Eliminating commonalities",
""
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"2-3 (Note: Max 3 parameters for this function family, not 6).<br>See __table merge(__) for parameter and return value description",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Details 01:Program Examples with 'table exclude ...'": "",
"Examples 01:Merging tables into one without identifier columns specified" : [
"		include( Support Library );",
"		echo(\"Loading farms in Hillboro and Hillville\");",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		echo(\"Farms in Hillboro:\");",
"		table list( hb );",
"",
"		echo(\"Farms in Hillville:\");",
"		table list( hv );",
"",
"		count[] = table exclude( hv, hb );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 01:Output: Table will be empty because no identifier column is specified, so every column is unique": "automatic",

"Examples 02:Declare 'Farmer' as unique identifier" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table exclude( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 02:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 03:Merge data in smart way and add 2 columns from source table:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table exclude extend columns( hv, hb, Farmer );",
"		// '*' corresponds to {Organic, Place, Wheat, Oat, Sheeps, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 03:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 04:Merge data in smart way and keep excludeed columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table exclude intersect columns( hv, hb, Farmer );",
"		// '*' corresponds to {Organic, Place, Wheat, Cows, Acres, Speciality}",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 04:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Examples 05:Merge data in smart way and exclude the columns:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table exclude subtract columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 05:Output: 3 farmers with land in both towns have been consolidated.": "automatic",


"Examples 06:Merge data in smart way and show all columns except comomon ones:" : [
"		include( Support Library );",
"		table load( hb, \"Examples/Table Merge Examples Hillboro.csv\");",
"		table load( hv, \"Examples/Table Merge Examples Hillville.csv\");",
"",
"		count[] = table exclude exclusive columns( hv, hb, Farmer );",
"",
"		echo(\"Hilltown is a merger of Hillboro and Hillville (\", count[], \" rows consolidated):\");",
"		table list( hb );"
 ]
		,
	"Output 06:Output: 3 farmers with land in both towns have been consolidated.": "automatic",

"Details 07:Tables with multiple non-unique identifiers being merged:" : [
"		In case you plan to merge two tables with a one or a selection of column identifiers which cannot guarantee uniqueness,",
"		e.g. a list of names identified by first name only, then this function will match first name pairs first,",
"		then the next ones below, and so forth.  As a result, every row is considered only once.  Long story short:",
"		Every row in the destination table will be consolidated only once.",
"		The following code example demonstrates this:"
 ]
		,
"Examples 07:One Jill and tow Micheles will be consolidated:" : [
"		include( Support Library );",
"		table load( h1, \"Examples/Table Merge Examples Hobbies 1.csv\");",
"		table load( h2, \"Examples/Table Merge Examples Hobbies 2.csv\");",
"",
"		echo(\"Hoobies 1:\");      table list( h1 );",
"		echo(\"Hoobies 2:\");      table list( h2 );",
"",
"		count[] = table exclude( h2, h1, Name  );",
"",
"		echo(\"Combined list of hobbies (\", count[], \" rows consolidated):\");",
"		table list( h1 );"
 ]
		,

	"Output 07:The outcome": "automatic",

	"See also": [ "table merge", "table overlay", "table intersect", "table subtract", "table consolidate" ]
}

,

"table multiply ..." :
{
	"Function Names":	[ "table multiply", "table multiply selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		A <i>cartesian multiplication</i> will be applied on the destination table using the data from the source table.  All (selected) rows in the destination table will be",
"		repeated by the number of rows in the source table and the additional columns be repeatedly appended.<br>",
"		<b>table multiply selected rows</b>takes an extra parameter to specify abBoolean expression to select rows to multiply and leave the remaining rows unchanged.<br>",
"		<u>Attention</u>: Multiplication by zero rows: If the source table contains zero rows below the headers, then a multiplication by zero will happen, which means",
"		that the rows in the destination will be removed.",
"",
"		<br/><img src=\"Images/Function_table_multiply.jpg\" alt=\"Function 'table multiply'\"><br/><br/>",
"",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2-4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing source table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2.",
		  "Name": "Name of destionation table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{   "Number":		"Opt. 3.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
			"Default value": "true (all rows selected)",
"Description" : [
"				Applicable to function <b>table multiply selected rows</b> only, addressing the rows in the destination table.<br>",
"				Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side, then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "Opt 3./4.",
		  "Name": "Destination columns",
		  "Direction": "input",
		  "Types": [ "table column" ],
		  "Default value": "-1 (behind last column)",
"Description" : [
"			Specify a header name or column number where to insert the new columns added. The specified column and further ones to the right will shift to the",
"			right accordingly.<br>",
"			Negative number are supported for indexing from right to left, however -1 refers to the end of the table, -2 to left of last column, etc.",
"			<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Only 1 header name or column number may be specified.",
""
 ]
			
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( colors,",
"		{ { Color,  Delight, Another Delight },",
"		  { red,    tomatoes,  strawberries },",
"		  { yellow, bananas,   lemons },",
"		  { green,  lettuce,   cucumbers },",
"		  { blue,   plums,     blueberries } } );",
"",
"	table initialize( shades,",
"		{ { Shade,   Example 2 }, { Dark, moonshine }, { Light, sunshine } } );",
"",
"	table multiply selected rows( shades, colors, ([Color]<>green), Another Delight );",
"",
"	// Why parentheses used in the 3rd parameter?",
"	// Comparison would otherwise hijack the 4th parameter.",
"	// Alternatively, use '!=' which expects only 1 comparison operand.",
"",
"	table list ( colors );"
 ]
	,
	"Output": "automatic",
	"See also": "table divide"
}

,

"table divide ..." :
{
	"Function Names":	[ "table divide", "table divide selected rows" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	A relational division will be made from two tables referred as <i>dividend (numerator) </i> and <i>divisor (denominator)</i>.  A new table called <i>quotient</i> will be generated.",
"",
"	<br><br>",
"",
"		The dividend (numerator) table contains a set of headers <b>C = A + B</b> where<br>",
"		<b>A</b> refers to a set of headers which are not found in the divisor (denominator), and<br>",
"		<b>B</b> refers to a set of headers which are found in the divisor (<b>B'</b>).",
"",
"		The divisor table does not contain header names which are not found in the dividend table, meaning that both sets <b>B</b> and <b>B'</b> must contain the same headers.  ",
"		Ordering does not matter.",
"		",
"		The resulting quotient table will contain columns with headers <b>A'</b> which are the same headers as in set A in the dividend table.  ",
"		Briefly said: From the dividend table, pick all entries with common headers <b>A</b>, which match with all rows in the divisor table.",
"",
"		<br/><img src=\"Images/Function_table_divide.jpg\" alt=\"Function 'table divide'\"><br/><br/>",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"4-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{   "Number":		"Opt. 1.",
			"Name" :		"Expression to select rows",
			"Direction" :	"code",
			"Types" :		[ "expression", ":literal" ] ,
			"Default value": "true (all rows selected)",
"Description" : [
"				Applicable to function <b>table divide selected rows</b> only, affecting the numerator table.<br>",
"				Specify the conditions or rules to select the row.  See __expressions to select rows__.<br>",
"				__Partial table specification__ is supported here to reference table columns easily.  Example: <b>[Score]>=5</b>.<br>",
"				<u>Attention</u>: If you are using comparison operators = and <> (instead of == and !=) which allow more than 1 operand on the righ hand side, then make sure you put the entire expression into parentheses.  Otherwise the operators will hijack subsequent function parameters as part of their operands."
 ]
			
		},
		{ "Number": "1. / 2.",
		  "Name": "Name of existing numerand (dividend) table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "The table will not be modified by this function" ]
		},
		{ "Number": "2. / 3.",
		  "Name": "Name of existing denominator (divisor) table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "The table will not be modified by this function" ]
		},
		{ "Number": "3. / 4.",
		  "Name": "Name of quotient table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "This table will be created." ]
		},
		{ "Number": "Opt 4. / 5.",
		  "Name": "Numerator columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"			Select the columns in the dividend (numerator) table to be used for the actual division process.  This feature drops the need for extracting a dedicated dividend",
"			table with the chosen columns to be used for division process.",
"			<br><br>		  ",
"		  ",
"		    See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		},
		{ "Number": "Opt 5. / 6.",
		  "Name": "Categorization columns",
		  "Direction": "input",
		  "Types": [ "table columns" ],
"Description" : [
"				Specifing categorization columnns allows to do multiple division runs with different categories as specified as set of 1 or more headers this parameter.  ",
"				As an example if a country name is specified, then the division process will be repeated for all countries, and the quotient table contains an additional column",
"				at the left listing the country name in one of the examples shown below.<br><br>",
"",
"			See __table columns as function parameters__ for general ruling for this parameter.<br>",
"			Specific rules apply for this function:",
"			* Any number of header names and column numbers may be specified",
""
 ]
			
		}


	],
"Details 01:Simple example" : [
"		The following example does actually scan the numerator table for common parents of both children called Maria and Sabine (note: Age must also match).",
"		Actually, <b>function divide</b> answers the question on: \"Find all parents (father and mother) who have two children, one called Maria and 4 years old, and",
"		the other one called Sabine, 2 years old.  Two parents will be identified."
 ]
		,
"Examples 01:Code" : [
"	include ( Support Library );",
"	table initialize( numerator,",
"		{ { Father,    Mother,   Child,   Age },",
"		  { Franz,     Helga,    Harald,    5 },",
"		  { Franz,     Helga,    Maria,     4 }, // No match - different parents",
"		  { Franz,     Ursula,   Sabine,    2 }, // \"",
"		  { Moritz,    Melanie,  Gertrud,   7 },",
"		  { Moritz,    Melanie,  Maria,     4 }, // Match",
"		  { Moritz,    Melanie,  Sabine,    2 }, // Match",
"		  { Peter,     Lisa,     Robert,    9 },",
"		  { Johann,    Lisa,     Maria,     4 }, // Match",
"		  { Johann,    Lisa,     Sabine,    2 }  // Match",
"		} );",
"",
"	table initialize( denominator,",
"		{ { Child,   Age },",
"		  { Maria,     4 },",
"		  { Sabine,    2 } } );",
"",
"	table divide( numerator, denominator, quotient );",
"",
"	table list( quotient );"
 ]
	,
	"Output 01: Two parent couples have been identified": "automatic",
"Details 02:Example with categorization by country" : [
"		The following example shows the categorization feature:"
 ]
		,
"Examples 02:Code" : [
"	include ( Support Library );",
"	table initialize( numerator,",
"		{ { Father,    Mother,   Child,   Age },",
"		  { Franz,     Helga,    Harald,    5 },",
"		  { Franz,     Helga,    Maria,     4 }, // No match - different parents",
"		  { Franz,     Ursula,   Sabine,    2 }, // \"",
"		  { Moritz,    Melanie,  Gertrud,   7 },",
"		  { Moritz,    Melanie,  Maria,     4 }, // Match",
"		  { Moritz,    Melanie,  Sabine,    2 }, // Match",
"		  { Peter,     Lisa,     Robert,    9 },",
"		  { Johann,    Lisa,     Maria,     4 }, // Match",
"		  { Johann,    Lisa,     Sabine,    2 }  // Match",
"		} );",
"",
"	table initialize( 2 countries, { Country, Austria, Germany } ); // Add countries for each row",
"	table multiply( 2 countries, numerator, 0 );",
"	table sort rows ( numerator, Country );",
"	table list ( numerator );",
"",
"	table initialize( denominator,",
"		{ { Child,   Age },",
"		  { Maria,     4 },",
"		  { Sabine,    2 } } );",
"",
"	table divide( numerator, denominator, quotient, { Father, Mother, Child, Age }, Country );",
"",
"	table list( quotient );"
 ]
	,
	"Output 02: Two parent couples from each country have been identified": "automatic",
	"See also": "table multiply"
}	

,

"table arrange ..." :
{
	"Function Names":	[ "table arrange", "table arrange with spacing" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		Theses simple functions arrange multiple tables side-by-side, with or without spacing (1 blank column) inbetween.",
"",
"		<br/><img src=\"Images/Function_table_arrange.jpg\" alt=\"Function 'table arrange'\"><br/><br/>",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2-4",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "The other tables are arranged on the right-hand side next to this table." ]
		},
		{ "Number": "2, 3, etc.",
		  "Name": "Name of additional table(s)",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		}
	],
"Examples" : [
"	include ( Support Library );",
"	table initialize( t1, { { Left, Right }, { L1, R1 }, { L2, R2 }, { L3, R3 }, { L4 , R4 } } );",
"	table initialize( t2, { { Animal, Size, Leg count }, { ant, tiny, 6 }, { donkey, big, 4 }, { whale, huge, 0 } } );",
"	table initialize( t3, { City, Aberdeen, Boston, Charlotteville, Denver } );",
"",
"	table copy table( t1, t0 );",
"",
"	table arrange( t0, t2, t3 );",
"	table list( t0 );",
"",
"	echo(\"This one is with spacing\");",
"	table arrange with spacing( { t1 .. t3 } ); // Note: Indirect parameter passing demonstrated here",
"	table list( t1 );",
""
 ]
	,
	"Output": "automatic",
	"See also": "table append"
}

,

"table explore" :
{
	"Function Names":	[ "table explore" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function explores the table for sub-tables.  It will scan through the entire table in a reading-style manner (1st row left-to-right, then 2nd row, etc.)",
"	to identify all sub-tables with contents.",
"",
"	<br><br>",
"	Following criteria must be met for the beginning of the sub-table:  X adjacent columns in one row must be non-blank.  ",
"	If number of starting rows is bigger than 1, then in X adjacent columns at least one of the rows must contain contents.  ",
"	This allows table recognition in case the header consists of multiple rows and has blank items.",
"	The end of the table is recognized by number of adjacent blank rows below the identified table.",
"",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-4",
	"Restrictions":		"Indirect parameter passing is enabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "It is assumed that this table contains one or more sub-tables." ]
		},
		{ "Number": "Opt. 2",
		  "Name": "Starting rows",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			This parameter specifies the number of top rows where at least one of the rows in each column must be non-blank to recognize begin of the table.  ",
"			<br>",
"			<u>Attention</u>: Choosing 1 will also capture single rows of data.  If you know that all tables contain at least one row of data, ",
"			then use 2 in order to filter away free text fields such as titles."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Ending rows",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			This parameter specifies the number of adjacent blank rows below the last non-blank table row to identify end of table. ",
"			A value of 2 or bigger tolerates blank rows inside the identified table	"
 ]
		  
		}

	],
	"Return value":
	[
		{ "Name": "Coordinates of identified sub-tables",
		  "Types": [ "matrix of numerals" ],
"Description" : [
"",
"			The matrix of numerals is a parameter set which contains 0, 1 or more parameter sets where each of them refers to a found sub-table and contain 4 numerals:",
"			<br><br>",
"			<b>{ { x start, y start, x end, y end }, { x start, y start, x end, y end }, ... }</b>",
"			<br><br>",
"			<b>x start</b>: Column number in main where the sub-table is beginning<br>",
"			<b>y start</b>: Row number in main where the sub-table is beginning<br>",
"			<b>x end</b>: Column number in main where the sub-table is ending<br>",
"			<b>y end</b>: Row number in main where the sub-table is ending<br>"
 ]
		  
		}
	],
"Examples" : [
"	include( Support Library );",
"	table load( test, \"Examples\\Table Explore Demo.csv\" );",
"	table list ( test );",
"	coords[] = table explore ( test );",
"",
"	echo(\"Identified \", coords[]{},\" sub-tables:\");",
"	for all parameters( coords[], c[], i[] )",
"	{",
"		print(\"    Table \", i[], \":  (\", c[]{0}, \", \", c[]{1},\") ... ( \", c[]{2}, \", \", c[]{3},\") \" );",
"		echo (\"    ('\", [test:c[]{0},c[]{1}],\"', ...)\" );",
"	}"
 ]
	,
	"Output": "automatic",
	"See also": ["table filter", "table extract" ]
}

,

"table filter ..." :
{
	"Function Names":	[ "table filter", "table filter ignore case" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function takes the coordinates from __table explore(__) and filters those out which do not qualify the selection criteria.  ",
"	Four ifferent selection criteria are supported.",
"	* Checking for header names to exist in the header row(s) in the sub-tables",
"	* Checking sub-tables entirely located in the <i>Inside Area</i>.",
"	* Checking sub-tables partially located in teh <i>Overlay Area</i>.",
"	* Checking sub-tables for minimum and maximum number of rows and columns",
"",
"	",
"	<br/><img src=\"Images/Function_table_filter.jpg\" alt=\"Function 'table filter'\"><br/><br/>",
"",
"	The coordinates of all sub-tables not meeting the specified filter criteria will be removed.  Optionally, the size of the",
"	sub-tables can be adjusted in order to include or excluded selected contents.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "It is assumed that this table contains one or more sub-tables." ]
		},
		{ "Number": "2.",
		  "Name": "Coordinates of identified sub-tables",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
"Description" : [
"			The matrix of numerals is a parameter set which contains 0, 1 or more parameter sets where each of them refers to a found sub-table and contain 4 numerals",
"			marking top left and bottom right coordinates: <b>{ { x start, y start, x end, y end }, { x start, y start, x end, y end }, ... }</b>.",
"			Normally, provide the return value from __table explore(__) in this parameter."
 ]
		  
		},
		{ "Number": "Opt. 3",
		  "Name": "Header search pattern",
		  "Direction": "input",
		  "Types": [ "parameter set or literal" ],
		  "Default value": "{} (nothing specified)",
"Description" : [
"				Specify the header names wich must exist in the sub-tables.  All sub-tables not containing these header names will be removed from the coordinates list.",
"				The ordering of the header names does not matter.",
"				If no value is provided, then no sub-tables will be disqualified here.  The function <b>table filter ignore case</b> will ignore cases in the comparison.",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* __Wildcard symbols__ are supported when using single quotation marks (softquoted literals).  Example: { '* Name', 'City,Town' } accepts sub-tables with header \"Last Name\" or \"First Name\" and \"City\" or \"Town\".",
"				* No values can be provided by using empty set {} or blank softquoted literal ''."
 ]
				
		},
		{ "Number": "Opt. 4",
		  "Name": "Header rows",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "1",
"Description" : [
"			Number of header rows assumed in the sub-tables.  The comparison described above is applied on all header rows.<br>",
"			Specify 1 if you need further parameters and not this and the previous one."
 ]
		  
		},
		{ "Number": "Opt. 5",
		  "Name": "Inside area filter",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Default value": "{} (nothing specified)",
"Description" : [
"		    The <i>Inside area</i> describes a rectangular area in the table where only those entire sub-tables located inside this area will be kept and the other sub-tables filtered out.<br>",
"			The parameter set must contain at most 4 numerals represent the 4 coordinates <b>{ x start, y start, x end, y end }</b>.  __Negative indexing__ is supported here.",
"			If the parameter set contains fewer elements, then the 0 are assumed for the first two elements and -1 (last column, last row) for the latter two elements."
 ]
		  
		},
		{ "Number": "Opt. 6",
		  "Name": "Overlay area filter",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Default value": "{} (nothing specified)",
"Description" : [
"			The <i>Overlay area</i> describes a rectangular area in the table where at least parts (min. 1 field) of the sub-tables located inside this area will be kept and the other sub-tables filtered out.<br>",
"			The parameter set must contain at most 4 numerals represent the 4 coordinates <b>{ x start, y start, x end, y end }</b>.  __Negative indexing__ is supported here.",
"			If the parameter set contains fewer elements, then the 0 are assumed for the first two elements and -1 (last column, last row) for the latter two elements."
 ]
		  
		},
		{ "Number": "Opt. 7",
		  "Name": "Size filter",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Default value": "{} (nothing specified)",
"Description" : [
"			The <i>Size filter</i> rules the minimum and maximum number of rows and columns the sub-tables must have.  All smaller and larger sub-tables will be filtered out.",
"			For example, you can filter out some text fields otherwise interpreted as very small tables consisting of a small number of rows and columns.<br>",
"			The parameter set must contain at most 4 numerals represent the 4 coordinates <b>{ x min, y min, x max, y max}</b>.  ",
"			If the parameter set contains fewer elements, then the 0 are assumed for the first two elements and unlimited size for the latter two elements."
 ]
		  
		},
		{ "Number": "Opt. 8",
		  "Name": "Size adjustment",
		  "Direction": "input",
		  "Types": [ "parameter set of numerals" ],
		  "Default value": "{} (nothing specified)",
"Description" : [
"			The <i>Size adjustment</i> is not a filter criterion like in the previous parameters.  You can specify and maximum for both columns and rows.  If the remaining",
"			sub-tables are larger, then the size will be reduced.  If the sub-tables are smaller, then the size will be increased.<br>",
"			<u>Attention:</u> The size adjustment happens on the coordinate values only.  The actual table will not be touched<br>",
"			<u>Attention:</u> When forcing sizes to increase, be aware that the sub-tables may overlap into neighboring subtables on the right or below.<br>",
"			__Negative indexing__ is supported here where -1 relates to the number of rows and columns of the sub-tables being worked on.<br>",
"			The parameter set must contain at most 4 numerals represent the 4 coordinates <b>{ x min, y min, x max, y max}</b>.",
"			If the parameter set contains fewer elements, then the 0 are assumed for the first two elements and unlimited size for the latter two elements."
 ]
		  
		}
	],
	"Return value":
	[
		{ "Name": "Coordinates of identified sub-tables",
		  "Types": [ "matrix of numerals" ],
"Description" : [
"		    The return value contains the remaining coordinates as provided in the 2nd function parameters and possibly some of the sub-table coordinates removed.<br>",
"			The matrix of numerals is a parameter set which contains 0, 1 or more parameter sets where each of them refers to a found sub-table and contain 4 numerals:",
"			<b>{ { x start, y start, x end, y end }, { x start, y start, x end, y end }, ... }</b>.  See return value of __table explore(__) for more details."
 ]
		  
		}
	],
"Examples" : [
"	include( Support Library );",
"	define procedure( print coordinates, { { coordinates, parameters }, { msg, literal } } )",
"	{",
"		echo( msg[] );",
"		for all parameters( coordinates[], c[], i[] )",
"		{",
"			print(\"    Table \", i[], \":  (\", c[]{0}, \", \", c[]{1},\") ... ( \", c[]{2}, \", \", c[]{3},\") \" );",
"			echo (\"    ('\", [test:c[]{0},c[]{1}],\"', ...)\" );",
"		}",
"	}",
"",
"	table load( test, \"Examples/Table Explore Demo.csv\" );",
"	table list ( test );",
"	coords[] = table explore ( test, 1, 2 ); // 2 = left table includes the lone row at the bottom",
"",
"	coords 2[] = table filter( test, coords[], '*Name' );",
"	print coordinates ( coords 2[], \"All tables with at least 1 header containing 'Name'\" );",
"",
"	coords 2[] = table filter( test, coords[], {}, 1, { 2,2, 6,13 } );",
"	print coordinates ( coords 2[], \"All tables in 'Inside Area': Given Name and Cities\" );",
"",
"	coords 2[] = table filter( test, coords[], {}, 1, {}, { 2,2, 6,13 } );",
"	print coordinates ( coords 2[], \"All tables in 'Overlay Area': All except Country\" );",
"",
"	coords 2[] = table filter( test, coords[], {}, 1, {}, {}, { 2, 2, 3, 4 } );",
"	print coordinates ( coords 2[], \"2 tables meet size specs (2-3 columns, 2-4 rows)\" );"
 ]
	,
	"Output": "automatic",
	"See also": ["table explore", "table extract" ]
}

,

"table extract ..." :
{
	"Function Names":	[ "table extract" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function extracts a sub-table from a table using coordinates of the sub-table. The coordinates are typically generated with",
"	the function __table explore(__) and optionally filtered with __table filter(__). Alternatively, you can specify the coordinates",
"	directly.",
"",
"	<br/><img src=\"Images/Function_table_extract.jpg\" alt=\"Function 'table extract'\"><br/><br/>",
"",
"	This function extracts exactly 1 table.  If the coordinates describe more than 1 sub-table, then call this function for every",
"	sub-table using different index values to be specified in the 3rdfunction parameter.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"4-6",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "This is the original table which contains at least one sub-table to extract" ]
		},
		{ "Number": "2.",
		  "Name": "Name of destination table",
		  "Direction": "input",
		  "Types": [ "literal" ],
"Description" : [
"			The extracted source table will be written into this table.  The table will be created automatically if it is not yet existing",
"			Using appropriate offset values allows to add various sub-tables into one destination table, e.g. by arranging them next or below",
"			each other."
 ]
			
		},
		{ "Number": "3.",
		  "Name": "Coordinates of identified sub-tables",
		  "Direction": "input",
		  "Types": [ "matrix of numerals" ],
"Description" : [
"			The matrix of numerals is a parameter set which contains 0, 1 or more parameter sets where each of them refers to a found sub-table and contain 4 numerals",
"			marking top left and bottom right coordinates: <b>{ { x start, y start, x end, y end }, { x start, y start, x end, y end }, ... }</b>.",
"			Normally, provide the return value from __table explore(__) or __table filter(__) in this parameter."
 ]
		  
		},
		{ "Number": "4.",
		  "Name": "Index",
		  "Direction": "input",
		  "Types": [ "numeral" ],
"Description" : [
"		    The index refers to one coordinate in the list of coordinates provided in the 3rd function parameter.",
"			The range is between 0 and <i>coordinates[]{}-1</i> where coordinates[] is assumed to contain the list of coordinates.",
"			<u>Note</u>: Only one sub-table can be retrieved at a time."
 ]
			
		},
		{ "Number": "Opt. 5.",
		  "Name": "Row offset",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			This value rules the vertical offset of the sub-table to be added in the destination table.  Use 0 to write the table beginning on row 0, 1 on the next row below, etc.",
"			To append tables vertically, use the function __table length(__) and add a small number on top in order to provide some accetable spacing."
 ]
			
		},
		{ "Number": "Opt. 6.",
		  "Name": "Column offset",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Default value": "0",
"Description" : [
"			This value rules the horizontal offset of the sub-table to be added in the destination table.  Use 0 to write the table starting at the leftmost column.",
"			Use larger nummbers to write the table further to the right.  To append tables horizontally, use the function __table row width(__) or __table max width(__) and add a",
"			small number on top in order to provide some accetable spacing.",
"			<u>Curiosity</u>: If you use the starting coordinates, then you can place the sub-tables in their original positions in the new table, using the same horizontal and vartical offsets."
 ]
			
		}
	],
"Examples" : [
"	include( Support Library );",
"	table load( test, \"Examples\\Table Explore Demo.csv\" );",
"	table list ( test );",
"",
"	coords[] = table explore ( test );",
"",
"	coords 1[] = table filter( test, coords[], 'Profession' );",
"	table extract( test, out, coords 1[], 0 );",
"",
"	coords 2[] = table filter( test, coords[], 'Cities' );",
"	table extract( test, out, coords 2[], 0, 0, table row width(out) );",
"",
"	echo(\"Extracted table containing 'Profession' and 'Cities' in headers\");",
"	table list( out );"
 ]
	,
	"Output": "automatic",
	"See also": ["table explore", "table filter" ]
}

,

  "existing (and valid)" :
  {
	"Function Names":	[ "existing", "existing and valid" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function checks if the variable is existing.",
"	The function <b>existing and valid</b> will also check the contents.  True is returned as long the contents are not void.",
"",
"	<br><br>",
"	Attention: If the function name does not contain the word <b>strictly</b>, then literals containing legitimate numbers with and without",
"	decimal point, minus sign and scientific notation (exponents) are also considered as numbers.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable to check",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if variable is existing."
		}
	],
"Examples" : [
"	a[] = 1;",
"	b[me] = you;",
"	c[2] = true;",
"",
"	echo( existing ( a[] ), \", \", existing ( b[] ), \", \", existing ( c[] ), \", \", existing ( d[] ) );",
"	// true, true, true, false",
"",
"	echo( existing ( a[1] ), \", \", existing ( b[me] ), \", \", existing ( b[he] ), \", \", existing ( b[0] ) );",
"	// false, true, false, true",
"",
"	for (i[] = 0, i[] <= 3, i[]++) echo(\"c[\",i[],\"] existing: \", existing(c[i[]]), \"   valid: \", existing and valid(c[i[]]) );"
 ]
	,
	"Output": "automatic"
  },


  "identify" :
  {
	"Function Names":	[ "identify" ],
	"Documentation":	"Function Description",
"Description" : [
"	Identifies the variable form (existence of structure or array).  If the variable does not exist, then \"not found\" will be returned."
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable to check",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "variable form",
		  "Types": [ "literal" ],
"Description" : [
"		  One of the following:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			not found		| Variable does not exist",
"			simple			| Simple variable (contains no members)",
"			structure		| Variable contains named members",
"			array			| Variable contains array members",
"			zero members	| A variable which contained members but have been deleted or originates from a loaded JSON file with zero-element array read in.",
"			==="
 ]
		  
		}
	],
"Examples" : [
"	a[] = 1;",
"	b[a] = 2;",
"	dim(c[], 1, 3);",
"",
"	echo( identify(a[]));     // Returns simple",
"	echo( identify(b[]));     // Returns structure",
"	echo( identify(b[a]));    // Returns simple",
"	echo( identify(c[]));     // Returns array",
"	echo( identify(d[]));     // Returns not found",
"	delete( b[a] );",
"	echo( identify(b[]));     // Returns zero members",
""
 ]
	,
	"Output": "automatic"
  },


  "scope" :
  {
	"Function Names":	[ "scope" ],
	"Documentation":	"Function Description",
"Description" : [
"	Identifies the variable scope (e.g. global, local)."
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable to check",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "variable form",
		  "Types": [ "literal" ],
"Description" : [
"		  One of the following:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			not found		| Variable does not exist",
"			system			| System variable",
"			global			| Global variable",
"			regional		| Regional variable (reserved, not yet implemneted)",
"			local			| Local variable",
"			==="
 ]
		  
		}
	],
"Examples" : [
"	// In the main program area, variables created are global.",
"	g[] = world;",
"",
"	define procedure ( foo )",
"	{",
"		// Inside procedure, functions and B4P programs called with start(...),",
"		// the variables declared are local unless the 'global' function is used.",
"",
"		a[] = 1;",
"		global { h[] = 1; }",
"		g[me] = you;",
"",
"		echo( \"Variable a[]: \", scope( a[] ) );     // global",
"		echo( \"Variable g[]: \", scope( g[] ) );     // local",
"		echo( \"Variable g[me]: \", scope( g[me] ) );   // global",
"		echo( \"Variable h[]: \", scope( h[] ) );     // global",
"		echo( \"Verbose settings: \", scope( runtime settings[verbose] ) );     // system",
"	}",
"",
"	foo; // Call the function"
 ]
	,
	"Output": "automatic"
  }




,

  "name" :
  {
	"Function Names":	[ "name" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function checks returns the current variable name as a string.  If applicable, the name also contains the members.",
""
 ]
	,

	"Call as":			"function",
	"Parameter count":	"1-2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable to check",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  },
	  {
		 "Number":		"2",
		 "Name":		"Option",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "text",
"Description" : [
"			Following options are supported:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			text			| Variable name is provided as text",
"			members named	| Variable name is provided as parameter set containing base variable as literal and members as names (for structure members) and numbers (for array members)",
"			members numbered| Variable name is provided as parameter set containing base variable as literal and members are always numbered.",
"			===",
""
 ]
		 
	  }
	],
	"Return value":
	[
		{ "Name": "Variable name as text",
		  "Types": [ "literal" ],
		  "Description": "Uses same syntax as B4P code"
		},
		{ "Name": "Variable name as parameter set",
		  "Types": [ "parameter set" ],
		  "Description": "Parameter set contains variable name in 1st element followed by member names and/or numbers."
		},
		{ "Name": "false if variable not found",
		  "Types": [ "boolean" ],
		  "Description": "In this case, false is returned."
		}
	],
"Examples" : [
"	a[] =  Ah;",
"	b[2] = two;",
"	c[alex] = Alexander;",
"	c[tim] = Timothy;",
"",
"	d[] = ^c[alex]; // Reference",
"",
"	echo( name( a[]  ) );",
"	echo( name( c[tim]  ) );",
"	echo( name( c[tim], members named  ) );",
"	echo( name( b[2],   members named  ) );   // Array members will always be numbered",
"	echo( name( c[tim], members numbered) );  // All members are numbered",
"",
"	echo( name( d[] ) ); // References reveal their destination variables",
""
 ]
	,
	"Output": "automatic"
  }


,

  "exchange" :
  {
	"Function Names":	[ "exchange" ],
	"Documentation":	"Function Description",
"Description" : [
"	This function exchanges the contents betweeen two variables, one variable and one entry in the table,",
"	or between two table entries.",
"",
"	<u>Note</u>: Regarding variables, only the value in the base variable will be exchanged.  Member variables will not be touched	"
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable or table entry 1",
		 "Direction":	"io",
		 "Types":		["all types"],
		 "Description": ""
	  },
	  {
		 "Number":		"2",
		 "Name":		"Variable or table entry 2",
		 "Direction":	"io",
		 "Types":		["all types"],
		 "Description": ""
	  }
	],
"Examples" : [
"	a[] = Abel; a[Age] = 30;",
"	b[] = Beata; b[Age] = 31;",
"",
"	exchange( a[], b[] );",
"",
"	echo( \"Using exchange(...): Only base variables are exchanged.\");",
"	echo( \"  a[]: \", a[], \", \", a[Age] );",
"	echo( \"  b[]: \", b[], \", \", b[Age] );",
"",
"	table initialize( t, { { Name, Age}, {Corinne, 32} } );",
"",
"	exchange( a[],    [t:Name,1] );",
"	exchange( a[Age], [t:Age,1] );",
"",
"	echo( new line, \"Exchanged with table entry: \");",
"	echo( \"table: \", [t:Name,1] );",
"	echo( \"  a[]: \", a[], \", \", a[Age] );",
"",
"	// In case you want to exchange base variables with their members, use transactions.",
"",
"	a[] = Abel; a[Age] = 30;",
"	b[] = Beata; b[Age] = 31;",
"",
"	a[] <=> b[];",
"",
"	echo( new line, \"Using transactions: Members are also exchanged\");",
"	echo( \"  a[]: \", a[], \", \", a[Age] );",
"	echo( \"  b[]: \", b[], \", \", b[Age] );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "Transactions", "<=>" ]
  }


,

  "delete ..." :
  {
	"Function Names":	[ "delete", "delete members" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function deletes the specified variable including all members if available.",
"		If an array member is deleted, (e.g. <b>delete( a[2] );</b>), then the remaining array members further down close up.  Obviously, members of structures",
"		can also be deleted.",
"",
"		<br><br>",
"		The function <b>delete members</b> will remove all member variables, but leave the base variable untouched.",
"",
"		<br><br>",
"			<u>Attention</u>: If the function call is executed in a local varaible contect (e.g inside a user-defined fuction or a B4P program called by another B4P",
"			program using __start(__) or __include(__), then attempting to delete a non-local variable asserts an exception.",
"			You can circumvent this by deleting the global variable in a global context provided with the __global(__) function.<br>",
"			example: <b>global ( ) delete ( a global variable [ ] );</b><br>",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, ...",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The affected variable will be deleted resp. their members deleted."
	  }
	],
	"Exceptions": [ "Variable is protected", "Attempting to delete global variable in local context", "Attempting to delete system variables" ],
"Examples" : [
"	structure( pets[], { Cat, Dog, { Shepard, Dachshund }, Bird,  { Parrot,  Parakeet } },",
"			   { Katze, Hund, { Schäfer, Dackel }, Vogel, { Papagei, Sittich } } );",
"	array( pets[Cat], { Hauskatze, Puma, Tiger } );",
"	pets[] = Favored Animals;",
"",
"	echo(\"Variable created:\");",
"	inspect(pets[]);",
"",
"	delete( pets[Bird] );",
"	delete members( pets[Cat] );",
"",
"	echo(\"All birds removed, array in Cat removed\");",
"	inspect(pets[]);",
"	echo( \"pets[Cat] is identified as '\", identify(pets[Cat]), \"' variable\" );",
"",
"	echo(\"Delete all pets\");",
"	delete( pets[] );",
"	echo( \"pets[] is identified as '\", identify(pets[]), \"'.\" );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "release" ]
  }



,

  "protect ..." :
  {
	"Function Names":	[ "protect", "protect recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function applies a protection setting on the variables.  Protection can only be applied on local variables only if running in a local variable context (e.g.",
"	inside a user-function or running a B4P file started from another B4P file using __start(__) or __include(__).  Exceptions can be enabled using __global(__).",
"	Changing protection on a system variable is not possible at all and any time.",
"	<br><br>",
"	<u>Attention</u>: If protecting a member variable, do not forget to protect the parents, too (If parents are in danger, then the members are, too, even if they are protected).",
"",
"	<br><br>",
"",
"	The \"protect recursive\" call will apply the protection setting to all member variables.  <br>",
"	<u>Note</u> that \"protect recursive (check)\" only checks protection settings in the base variable.",
"	<br><br>",
"",
"	<u>Note:</u> Member variables created after protection settings made do not inherit any protection settings from their parents. <b>full access</b> is assumed initially.",
"",
""
 ]
	,

	"Call as":			"procedure or function",
	"Parameter count":	"Min 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Protection setting",
		 "Direction":	"input",
		 "Types":		["literal"],
"Description" : [
"		    Following protection settings are available:",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			tightly locked		| Entire variable incl. members locked: Reading writing and deleting is forbidden",
"			locked				| Reading, writing and deleting is forbidden",
"			read only			| Writing and deleting is forbidden",
"			limited access		| Values can be modified, but not the type (e.g. writing a literal to a variable containing a numeral).  For some system variables, only specific values are allowed.  No members can be created.",
"			prevent deleting	| Reading and writing is allowed, but not deleting.  Members may be introduced.",
"			full access			| Unrestricted access",
"			check				| Poll the current protection setting of the variable specified in the 2nd function parameter.  This call even works if the variable is locked. ",
"			===",
""
 ]
		 
	  },
	  {
		 "Number":		"2, etc.",
		 "Name":		"Variable to protect",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "Polled protection setting",
		  "Types": [ "literal" ],
		  "Description": "The protection setting of the 1st variable is returned."
		}
	],
"Examples" : [
"	b[] = 2;",
"	b[Hi] = 3;",
"	b[Ho] = 4;",
"",
"	protect( read only, b[] ) ;",
"",
"	echo( \"Base variable protection setting: \", protect( check, b[] ) );",
"	inspect( b[] );",
"",
"	protect recursive( prevent deleting, b[] ) ;",
"",
"	echo( \"Base variable protection setting: \", protect( check, b[] ) );",
"	inspect( b[] );",
"	b[] = 2;",
"	b[Hi] = 3;",
"	b[Ho] = 4;",
"",
"	protect( read only, b[] ) ;",
"",
"	echo( \"Base variable protection setting: \", protect( check, b[] ) );",
"	inspect( b[] );",
"",
"	protect recursive( prevent deleting, b[] ) ;",
"",
"	echo( \"Base variable protection setting: \", protect( check, b[] ) );",
"	inspect( b[] );"
 ]
	,
	"Output": "automatic"
  }


,

"global" :
{
	"Function Names":		"global",
	"Documentation":		"Function Description",
	"Keywords":				"one-time execution",
	"Synopsis": 			[ "global { statements; }", "global () statement;", "global () { statements; }" ],

"Description" : [
"",
"		This function defines a code block where all new variables defined will become global variables.  This ruling is only in effect in that code block,",
"		but not in further procedures and functions called, as well as program files started or included.",
"		The global variables are obviously retained if this function is called out from other user defined functions or program files.",
""
 ]
		 ,

	"Call as":				"procedure",
	"Restrictions":			"No indirect parameter passing",
	"Parameter count":		"0",
"Examples"  : [
"	d[] = 10; // Global variable defined outside the function",
"",
"	define procedure ( foo )",
"	{",
"	    a[] = 1;",
"	    global",
"	    {",
"	        b[] = 2;",
"	        a[c] = 3; // This one stays a local variable",
"",
"	        delete( d[] ); // If not in the global block, then exception happens.",
"	    }",
"	    echo( \"Scope of b[] : \", scope( b[] ) ); // globa",
"	    echo( \"Scope of a[] : \", scope( a[] ) ); // local",
"	    echo( \"Scope of a[c]: \", scope( a[c]) ); // local",
"	    echo( \"Scope of d[] : \", scope( d[] ) ); // Not found.",
"	}",
"",
"	foo;",
"	echo( \"Global variable b[] = \", b[] );"
 ]
	 ,
	"Output" : "automatic"
}

,

  "dim / redim" :
  {
	"Function Names":	[ "dim", "redim" ],
	"Documentation":	"Function Description",
"Description" : [
"		<b>dim</b> defines one or more arrays with specified dimensions and initial values.  If the variable is already existing as an array or a structure,",
"		then all member variables will be eliminated and initialized accordingly.",
"",
"		<br><br>",
"		<b>redim</b> will preserve the the existing array contents as long the size is increased.  In this case, only the added members will be initialized.",
"		The arrays can also be downsized where the excessive members will be eliminated.",
"",
"		<br><br>",
"		Impact on base variables:  The base variable values remain unaffected.  These functions affect the members only.",
"",
"		<br><br>",
"		<u>Note</u>: B4P supports __spontaneous array creation__ and extension by simply write-accessing a member which does not yet exist. However, only this",
"		designated member will be assigned where the additional members to be initialized contain void values.  Example: a[10] = 1; Here, a[0]..a[9] are ",
"		initialized with void values.",
"",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"3, 6, 9, etc.",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, 4, 7, ...",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The array will be built on the specified variable.  Member variables of existing arrays and structures are allowed so you can build more complex data structures."
	  },
	  {
		 "Number":		"2, 5, 8, ...",
		 "Name":		"Dimension",
		 "Direction":	"input",
		 "Types":		["numeral", "parameter set of numerals"],
		 "Default value": "text",
"Description" : [
"			Following types are supported:",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			numeral						| A one-dimensional array will be created.",
"			parameters set of numerals	| A multi-dimensional array will be created, depending on number of elements specified.  No array will be defined if an empty set is provided.",
"			===",
""
 ]
		 
	  },
	  {
		 "Number":		"3, 6, 9, ...",
		 "Name":		"Initial value",
		 "Direction":	"input",
		 "Types":		["valid types"],
		 "Description": "The initial value will be applied for every variable member."
	  }

	],
"Examples" : [
"	a[] = 123; // Will be preserved",
"",
"	dim( a[], 5, Hi, b[], {}, 1, a[2], {2,2}, 0 );",
"	redim( a[], 8, Ho );",
"",
"	inspect( a[] ); // Nested arrays",
"	inspect( b[] ); // Void",
"",
"	dim( c[], { 2, 2 }, 1 );	// 2x2 array",
"	redim( c[], { 3, 3}, 3 );	// Extend to 3x3 array",
"",
"	inspect( c[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "dim protect", "redim protect", "array" ]
  },

  "dim / redim protect" :
  {
	"Function Names":	[ "dim protect", "redim protect" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		These two functions work similarly like __dim(__) and __redim(__), but will also apply protection settings on all member variables.",
"		It may be useful to choose protection setting <u>limited access</u> in order to avoid accidental type changes on the array members.  ",
"		No impact on protection settings on already existing array members with the redim protect function.  Here only the new members will be applied with the new protection setting.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"4, 7, 10, etc.",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Protection setting",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Description": "The supported protection settings are defined in the description for the function __protect(__)."
	  },
	  {
		 "Number":		"2, 5, 8, ...",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The array will be built on the specified variable.  Member variables of existing arrays and structures are allowed so you can build more complex data structures."
	  },
	  {
		 "Number":		"3, 6, 9, ...",
		 "Name":		"Dimension",
		 "Direction":	"input",
		 "Types":		["numeral", "parameter set of numerals"],
		 "Default value": "text",
"Description" : [
"			Following types are supported:",
"",
"			=== 200, 600, noframe_1stcolbold, noheader",
"			numeral						| A one-dimensional array will be created.",
"			parameters set of numerals	| A multi-dimensional array will be created, depending on number of elements specified.  No array will be defined if an empty set is provided.",
"			===",
""
 ]
		 
	  },
	  {
		 "Number":		"4, 7, 10, ...",
		 "Name":		"Initial value",
		 "Direction":	"input",
		 "Types":		["valid types"],
		 "Description": "The initial value will be applied for every variable member."
	  }

	],
"Examples" : [
"	dim protect( limited access, a[], 5, 123 );",
"	a[0] = 1;",
"",
"	a[1] = Hi; // Will issue an exception",
"	echo(\"Test\");"
 ]
	,
"Output" : [
"	savecode",
"Row #: Code Text _______________________________________________________",
"	1:     dim protect( limited access, a[], 5, 123 );",
"	2:    a[0] = 1;",
"	3:",
"	4:    a[1] = Hi; // Will issue an exception",
"			   ^",
"Inside the started program code:",
"Assignment on variable with limited access and type numeral",
"with value of type literal is not allowed",
"Failed to access variable, protections apply.",
"Code execution will stop.  Going to interactive mode",
"________________________________________________________________________",
"",
"Type 'help' for help, 'docs' for B4P docs, 'web docs' for online docs.",
">>"
 ]
	,
	"See also": [ "dim", "redim", "array protect" ]
  }



,

  "array, array protect" :
  {
	"Function Names":	[ "array", "array protect" ],
	"Documentation":	"Function Description",
"Description" : [
"		<b>array</b> defines one or more arrays with all intial values provided directly.  Already existing variable members will be eliminated.",
"		The function <b>array project</b> will also apply the protection settings on all member variables created.  See description for function __protect(__) for details.",
"		It may be useful to choose protection setting <b>limited access</b> in order to avoid accidental type changes on the array members.",
"",
"		<br><br>",
"		Impact on base variables:  The base variable values remain unaffected.  These functions affect the members only.",
""
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"array: 2, 4, 6, etc.; array protect: 3, 5, 7, etc.",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Protection setting",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Description": "Applicable to <b>array protect</b> only. The supported protection settings are defined in the description for the function __protect(__)."
	  },
	  {
		 "Number":		"1, 3, ... or 2, 4, ...",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The array will be built on the specified variable.  Member variables of existing arrays and structures are allowed so you can build more complex data structures."
	  },
	  {
		 "Number":		"2, 4, ... or 3, 5, ...",
		 "Name":		"Initial values",
		 "Direction":	"input",
		 "Types":		["parameter set"],
		 "Default value": "text",
"Description" : [
"			If a simple parameter set is provided (no nested elements), then a one-dimensional array will be built.",
"			Nested paramter sets will create nested arrays."
 ]
		 
	  }

	],
"Examples" : [
"	array( a[], { 1,2,3,{4,5},6 } );",
"",
"	// Builds a[0] ... a[3] = { 1,2,3,6 }",
"	// Builds a[3,0] and a[3,2] with 4 and 5",
"",
"	inspect ( a[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "dim", "dim protect", "structure", "structure protect" ]
  }


,

  "structure, structure protect" :
  {
	"Function Names":	[ "structure", "structure protect" ],
	"Documentation":	"Function Description",
"Description" : [
"		The function <b>structure</b> defines a structure with members and their initial values provided directly. Already existing variable members will be eliminated.",
"		The function <b>structure project</b> will also apply the protection settings on all member variables created.  See description for function __protect(__) for details.",
"		It may be useful to choose protection setting <b>limited access</b> in order to avoid accidental type changes on the structure members.",
"",
"		<br><br>",
"		Impact on base variables:  The base variable values remain unaffected.  These functions affect the members only."
 ]
	,

	"Call as":			"procedure",
	"Parameter count":	"structure: 3, 6, 9, etc.; structure protect: 4, 7, 10, etc.",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Protection setting",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Description": "Applicable to <b>structure protect</b> only. The supported protection settings are defined in the description for the function __protect(__)."
	  },
	  {
		 "Number":		"1, 4, ... or 2, 5, ...",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The structure will be built on the specified variable.  Member variables of existing arrays and structures are allowed so you can build more complex data structures."
	  },
	  {
		 "Number":		"2, 5, ... or 3, 6, ...",
		 "Name":		"Member names",
		 "Direction":	"input",
		 "Types":		["parameter set"],
		 "Default value": "text",
"Description" : [
"			If a simple parameter set is provided (no nested elements), then a one-dimensional structure will be built.",
"			Nested paramter sets will create nested structures."
 ]
		 
	  },
	  {
		 "Number":		"2, 5, ... or 3, 6, ...",
		 "Name":		"Initial values",
		 "Direction":	"input",
		 "Types":		["parameter set"],
		 "Default value": "text",
"Description" : [
"			If a simple parameter set is provided (no nested elements), then a one-dimensional array will be built.",
"			Nested paramter sets will create nested arrays.",
"			The parameter set must have the same structure (attention to nesting) as in the previous function parameter for the corresponding paramter names."
 ]
		 
	  }

	],
"Examples" : [
"	structure( sizes[], { Cat, Mouse, Ant }, {medium, small, tiny} );",
"	echo( sizes[Cat ]);",
"	echo( sizes[Mouse]);",
"	echo( sizes[Ant]);",
"	echo;",
"	structure( a[], { a,b,c,{d,e},f}, { 1,2,3,{4,5},6 }  );",
"",
"	// Builds a[a,b,c,f]  = { 1,2,3,6 }",
"	// Builds a[c,d] and a[c,e] with 4 and 5",
"",
"	inspect ( a[] );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "array", "array protect" ]
  }


,

  "member count" :
  {
	"Function Names":	[ "member count" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function returns the number of members in __arrays__ and __structures__.  Nested members will not be counted."
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  }
	],
	"Return value":
	[
		{ "Name": "Member count",
		  "Types": [ "numeral" ],
		  "Description": ""
		}
	],
"Examples" : [
"	dim( a[], 10, Hey );	// An array with 10 elements",
"	dim( a[3], 3, Hi );	// 3 sub-members in a[3]",
"	b[Name]= Jim;		// A structure with 2 members",
"	b[Age] = 38;",
"",
"	c[] = 1;		// A simple variable, 0 members",
"",
"	echo( member count( a[] ), \", \", member count( a[3]), \", \",",
"		  member count( b[] ), \", \", member count( c[] ) );"
 ]
	,
	"Output": "automatic",
	"See also": [ "dim", "array", "structure" ]
  }


,

  "set, set names":
  {
	"Function Names":	[ "set", "set names" ],
	"Documentation":	"Function Description",
"Description" : [
"		The function <b>set</b> lists all member values of the __array__ or __structure__ in a parameter set.<br>",
"		The function <b>set names</b> lists all member names of the __structure__ in a parameter set.  For obvious reasons, this function will not work with arrays.",
"		<br><br>",
"		<u>Hint</u>: Use the function __flat(__) to remove any nesting in generated parameter sets.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1-3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": ""
	  },
	  {
		 "Number":		"2",
		 "Name":		"Level",
		 "Direction":	"input",
		 "Types":		["numeral"],
		 "Default value": "0",
"Description" : [
"		 <b>0</b>: All valid contents (except voids) of members and sub-members will be returned.  Sub-members will be packaged in nested paramter sets.<br>",
"		 <b>1</b>: Direct members only (children)<br>",
"		 <b>2</b>: All sub-members only (grandchildren)<br>",
"		 <b>3, 4, ...</b>: All deeper sub-members according to the level specified."
 ]
		
	  },
	  {
		 "Number":		"3",
		 "Name":		"Option",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "(nothing specified)",
"Description" : [
"			Only supported value: <b>all</b>.<br>It forces all data, including voids to be included. If not specified, void data will be skipped.",
"			This applies to both <b>set</b> and <b>set names</b>."
 ]
			
	  }
	],
	"Return value":
	[
		{ "Name": "Extracted values or names",
		  "Types": [ "parameter set" ],
		  "Description": ""
		}
	],
"Examples" : [
"	Hi[ German ] = Hallo; Hi[ German, in Switzerland ] = Grüezi;",
"	Hi[ German, in Bavaria ] = Grüss Gott;",
"	Hi[ French ] = Allô; Hi [ English ] = Hello;",
"	Hi[ Spanish, on the Phone ] = Diga;",
"",
"	v[] = set( Hi[ ] ); n[] = set names( Hi[ ] );",
"	echo(\"Names: \", n[]);",
"	echo(\"Values: \", v[]);",
"",
"	// Include 'invalid value' in Hi[Spanish].",
"	v[] = set( Hi[ ], 0, all ); n[] = set names( Hi[ ], 0, all );",
"	echo(\"Names: \", n[]);",
"	echo(\"Values: \", v[]);",
"",
"	// Only 2nd level (like in Bavria ...)",
"	v[] = set( Hi[ ], 2 ); n[] = set names( Hi[ ], 2 );",
"	echo(\"Names: \", n[]);",
"	echo(\"Values: \", v[]);",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "dim", "array", "structure", "member count" ]
  }


,

  "structure to array ...":
  {
	"Function Names":	[ "structure to array", "structure to array recursive" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function converts a structure to an array. This is done by eliminating the member names. ",
"		While <b>structure to array</b> affects the direct variable members only, <b>structure to array recursive</b> will also convert all nested members (grandchildren, etc).",
"		Numbering is based on the alphabetic order of the member names.  Multiple variables can be converted with one single function call by providing all of them as function parameters.",
"		No actions are taken if the variable provided is a __simple variable__ or contains arrays only.<br><br>",
"		<u>Note</u>: No protection may be applied on the variable, incl. <b>prevent deleting</b>, otherwise exceptions are asserted."
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"Min 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The structure members of this variable will be converted to to array members."
	  }
	],
"Examples" : [
"	country[] = \"Somewhere in Italy ...\";",
"	structure( country[],  { Name,       Climate,       { Winter, Summer }, Language },",
"						   { San Marino, Mediterranean, { cool,   hot    }, Italian  } );",
"	temperatures[] = \"And the temperatures ...\";",
"	array( temperatures[], { 10, 30 } );",
"",
"	copy[] <== country[]; // Transaction: Make copy of variable including members",
"",
"	structure to array( copy[], temperatures[] );",
"",
"	echo(new line, \"Calling 'structure to array':\");",
"	inspect( copy[] );",
"	inspect( temperatures[] ); // Is already an array",
"",
"	echo(new line, \"Calling 'structure to array recursive':\");",
"	structure to array recursive( country[] );",
"	inspect( country[] );",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "array to structure" ]
  }


,

  "array to structure ...":
  {
	"Function Names":	[ "array to structure", "array to array structure" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function converts an array to a structure. This is done by adding the member names.",
"		While <b>array to structure</b> affects the direct variable members only, <b>array to structure recursive</b> will also convert all nested members (grandchildren, etc).",
"		Multiple variables can be converted with one single function call by providing all of them as function parameters.",
"		No actions are taken if the variable provided is a __simple variable__ or contains arrays only.",
"		<br><br>",
"		<u>Note</u>: No protection may be applied on the variable, incl. <b>prevent deleting</b>, otherwise exceptions are asserted.",
"",
"		<br><br>",
"		If only the 1st parameter is specified, then the member names are ascending numbers (beginning with 0) with 8 digits and leading zeros.  This ensures that",
"		the members being converted are still retained in alphabetic order (\"00000000\", \"00000001\", \"00000002\", etc.) as long the number of members is less than 1 billion.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"1, 2",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The structure members of this variable will be converted to to array members."
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"number of digits",
		 "Direction":	"input",
		 "Types":		["numeral"],
		 "Default value": "8",
		 "Description": "The number of digits can be changed to a different value other than 8.  Values below 1 are considered as 1 digit."
	  },
	  {
		 "Number":		"Alt. 2",
		 "Name":		"Member name prefix",
		 "Direction":	"input",
		 "Types":		["literal"],
"Description" : [
"			The member name will be placed before the number. Example: \"Nr. \" -> \"Nr. 0\", \"Nr. 1\", etc."
 ]
			
	  },
	  {
		 "Number":		"Alt. 2",
		 "Name":		"Member names",
		 "Direction":	"input",
		 "Types":		["parameter set"],
"Description" : [
"			Alternatively, a parameter set can be provided with member names to be applied sequentially.  The contents of every parameter set element will be converted to",
"			literals first.  Nested parameter elements will be treated as literals, i.e. 2nd element in member name in {a,{b,c},...} will literally be called \"{'b','c'}\".",
"			If the parameter set contains more elements than members to be named, then the excessive elements will be ignored.  If fewer elements are provided, then the",
"			remaining members will be numbered with 8-digit numbers (with leading zeros) as if no parameter would be provided.",
"",
"			<br><br>",
"",
"			Example: <b>{true, a, date(\"31.12.2015\"), 123 }</b> applied on an array with 6 members will convert to <b>\"true\", \"a\", \"2015-12-31\", \"123\"}</b>",
"			and then sorted to <b>\"123\", \"2015-12-31\", \"a\", \"true\"</b>.",
"			Duplicate member names will be resolved with automatic addition of numbers,  E.g. { a, a, a } would result in names like { a, a_1, a_2 } using underscore symbols.",
""
 ]
			
	  }
	],
"Examples" : [
"	array( a[], { a, b, c, { d, e }, f, g, h } );",
"	inspect( a[] );",
"",
"	b[] <== a[];",
"	array to structure( b[] );",
"	echo(\"Conversion with 1 paramemter only:\");",
"	inspect( b[] );",
"",
"",
"	b[] <== a[];",
"	array to structure recursive( b[], 3);",
"	echo(\"Conversion with number in 2nd parameter: 3 digits \");",
"	inspect( b[] );",
"",
"	b[] <== a[];",
"	array to structure recursive( b[], \"No. \" );",
"	echo(\"Conversion with literal in 2nd parameter:\");",
"	inspect( b[] );",
"",
"	b[] <== a[];",
"	array to structure recursive( b[], {A,B,C,F} );",
"	echo(\"Conversion with parameter set in 2nd parameter:\");",
"	inspect( b[] );",
"",
"	b[] <== a[];",
"	array to structure ( b[], {true, a, date(\"31.12.2015\"), 123 } );",
"	echo(\"Conversion with diverse contents in parameter set in 2nd parameter:\");",
"	inspect( b[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "structure to array" ]
  }


,

  "variable load ...":
  {
	"Function Names":	[ "variable load" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function loads a JSON file with structured data into a variable.<br>",
"		<br><br>",
"		If the specified variable is existing then all contents will be deleted before the loading procedure starts.  The members (and sub-members) ",
"		will be built up while loading / reading in is in progress.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2, 3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Destination variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The contents will be loaded into this variable."
	  },
	  {
		 "Number":		"2",
		 "Name":		"File name",
		 "Direction":	"input",
		 "Types":		["literal"],
"Description" : [
"			The file must refer to an existing JSON file.  The JSON file may optionally contain a plain array with the starting symbol '[' instead of '{'."
 ]
			
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"JSON Format",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "JSON",
"Description" : [
"			Following values are supported:",
"			<b>JSON</b>: Load JSON files normally.  Since JSON does not support data in intermediate nodes (vs. B4P variable model which does), the",
"			the beginning and intermediate base veriables will be void.<br>",
"			<b>JSON B4P</b>: Load JSON files wich has previously been saved with __variable save(__) where the data is organized in the JSON format in order",
"			to include the data in intermediate nodes."
 ]
			
	  }
	],
"Examples" : [
"	include( Support Library );",
"",
"	pets[] = \"All my pets\";",
"	structure( pets[], { Cat, Dog, { Shepard, Dachshund }, Bird,  { Parrot,  Parakeet } },",
"			   { Katze, Hund, { Schäfer, Dackel }, Vogel, { Papagei, Sittich } } );",
"	array( pets[Cat], { Hauskatze, Puma, Tiger } );",
"",
"	inspect( pets[] );",
"",
"	variable save( pets[], \"Outputs\\pets.json\" );",
"",
"	// With 'All my pets' defined in the base variable, the JSON code will be a 'plain array'",
"	// beginning with '[' and not with '{^'.",
"",
"	table load( t, \"Outputs\\pets.json\", TEXT ); // Show the JSON file",
"	table list( t );",
"",
"	echo(\"Load the JSON file, assuming it originated from B4P output\");",
"	variable load( animals[], \"Outputs\\pets.json\", JSON B4P );",
"",
"	inspect( animals[] ); // You will see that all contents are preserved.",
"",
"	echo(\"Now load the JSON file as if the file originated from somewhere else ...\");",
"",
"	// B4P saves intermediate nodes in intermediate arrays containing 2 elements:",
"	// Element 0:  The base variable at that level",
"	// Element 1:  Further structured data",
"",
"	variable load( animals[], \"Outputs\\pets.json\", JSON );",
"	inspect( animals[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "variable save", "json to variable" ]
  },

  "json to variable ...":
  {
	"Function Names":	[ "json to variable" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function loads JSON contents from a text string into a variable.  This approach is useful if JSON text has been obtained",
"		from other sources, for example a table.",
"",
"		<br><br>",
"		If the specified variable is existing then all contents will be deleted before the loading procedure starts.  The members (and sub-members)",
"		will be built up while loading / reading in is in progress.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"2, 3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Destination variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The contents will be loaded into this variable."
	  },
	  {
		 "Number":		"2",
		 "Name":		"JSON text",
		 "Direction":	"input",
		 "Types":		["literal"],
"Description" : [
"			The complete JSON code is in this string.  The JSON text may optionally contain a plain array with the starting symbol '[' instead of '{'."
 ]
			
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"JSON Format",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "JSON",
"Description" : [
"			Following values are supported:",
"			<b>JSON</b>: Load JSON text normally.  Since JSON does not support data in intermediate nodes (vs. B4P variable model which does), the",
"			the beginning and intermediate base veriables will be void.<br>",
"			<b>JSON B4P</b>: Load JSON text wich has previously been saved with __variable to json(__) where the data is organized in the JSON format in order",
"			to include the data in intermediate nodes."
 ]
			
	  }
	],
"Examples" : [
"	include( Support Library );",
"",
"	pets[] = \"All my pets\";",
"	structure( pets[], { Cat, Dog, { Shepard, Dachshund }, Bird,  { Parrot,  Parakeet } },",
"			   { Katze, Hund, { Schäfer, Dackel }, Vogel, { Papagei, Sittich } } );",
"	array( pets[Cat], { Hauskatze, Puma, Tiger } );",
"",
"	inspect( pets[] );",
"",
"	variable save( pets[], \"Outputs\\pets.json\" );",
"",
"	// With 'All my pets' defined in the base variable, the JSON code will be a 'plain array'",
"	// beginning with '[' and not with '{'.",
"",
"	table load( t, \"Outputs\\pets.json\", TEXT ); // Show the JSON file",
"	table list( t );",
"",
"	echo(\"Load the JSON file, assuming it originated from B4P output\");",
"	variable load( animals[], \"Outputs\\pets.json\", JSON B4P );",
"",
"	inspect( animals[] ); // You will see that all contents are preserved.",
"",
"	echo(\"Now load the JSON file as if the file originated from somewhere else ...\");",
"",
"	// B4P saves intermediate nodes in intermediate arrays containing 2 elements:",
"	// Element 0:  The base variable at that level",
"	// Element 1:  Further structured data",
"",
"	variable load( animals[], \"Outputs\\pets.json\", JSON );",
"	inspect( animals[] );"
 ]
	,
	"Output": "automatic",
"Details 01:Loading different data types" : [
"		The following code example demonstrates how the different B4P data types are loaded.",
"		An automatic recognition of numbers, dates, booleans, etc. is supported."
 ]
		,
"Examples 01:Code example" : [
"	include( Support Library );",
"",
"	misc[boolan] = true;",
"	misc[numeral] = 123.45;",
"	misc[date] = date( \"2020-07-14 17:00\" );",
"	misc[set] = { a, 1, { b, 2 }, c, true, date( \"2020-08-01 21:00\" ) };",
"",
"	j[] = variable to json( misc[], JSON );",
"",
"	// With 'All my pets' defined in the base variable, the JSON code will be a 'plain array'",
"	// beginning with '[' and not with '{'.",
"",
"	echo(\"This is the JSON code:\", new line, j[], new line, \"_End of JSON text ___________\");",
"",
"	echo(\"Load the JSON text, assuming it originated from B4P output\");",
"	json to variable( diverse[], j[], JSON B4P );",
"",
"	inspect( diverse[] ); // You will see that all contents are preserved."
 ]
	,
	"Output 01": "automatic",
	"See also": [ "variable load", "variable to json" ]
	  }


,

  "variable save ...":
  {
	"Function Names":	[ "variable save" ],
	"Documentation":	"Function Description",
"Description" : [
"		This function saves the contents of a variable into a JSON file.  If the file is already existin, then the contents will be replaced (and not appended).",
"		<br><br>",
"		Since JSON does not support intermediate nodes in the data trees, but B4P variables do, the base variables at all levels will be put into",
"		intermediate arrays containing 2 elements.  Element 0 contains the value of the base variable, and Element 1 contains further data up the data tree.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"2, 3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Source variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The contents will be loaded into this variable."
	  },
	  {
		 "Number":		"2",
		 "Name":		"File name",
		 "Direction":	"input",
		 "Types":		["literal"],
"Description" : [
"			This file will be created."
 ]
			
	  },
	  {
		 "Number":		"Opt. 3",
		 "Name":		"JSON Format",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "JSON",
"Description" : [
"			Following values are supported:",
"			<b>JSON</b>: Save JSON in nice format with every item in a separate line and text indentation used<br>",
"			<b>JSON compact</b>: Save JSON in condensed format without indentation and line breaks in order reduce overall size but without loosing any data"
 ]
			
	  }
	],
"Examples" : [
"	b[Green] = Grün;",
"	b[Blue] = Blau;",
"	b[Blue,light] = Hellblau;",
"	b[Blue,dark] = Dunkelblau;",
"",
"	variable save( b[], \"Outputs/colors.json\");",
"",
"	variable load( c[], \"Outputs/colors.json\", JSON B4P );",
"",
"	inspect( c[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "variable load", "variable to json" ]
  },

  "variable to json ...":
  {
	"Function Names":	[ "variable to json" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		This function loads JSON contents from a text string into a variable.  This approach is useful if JSON text has been obtained",
"		from other sources, for example a table.",
"",
"		<br><br>",
"		If the specified variable is existing then all contents will be deleted before the loading procedure starts.  The members (and sub-members)",
"		will be built up while loading / reading in is in progress.",
""
 ]
	,
	"Call as":			"function",
	"Parameter count":	"1, 3",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Source variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The contents will be loaded into this variable."
	  },
	  {
		 "Number":		"Opt. 2",
		 "Name":		"JSON Format",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Default value": "JSON",
"Description" : [
"			Following values are supported:",
"			<b>JSON</b>: Save JSON in nice format with every item in a separate line and text indentation used<br>",
"			<b>JSON compact</b>: Save JSON in condensed format without indentation and line breaks in order reduce overall size but without loosing any data"
 ]
			
	  }
	],
	"Return value":
	[
		{ "Name": "JSON contents",
		  "Types": [ "literal" ],
		  "Description": "Contains JSON text of saved variable"
		}
	],
"Examples" : [
"	a[] = Hello World;",
"	j[] = variable to json( a[] );",
"	echo(\"Simple variable in JSON: \", j[] );",
"	json to variable( b[], j[], JSON B4P );",
"	inspect(b[]);"
 ]
	,
	"Output": "automatic",
	"See also": [ "variable save", "json to variable" ]
  }


,

  "release":
  {
	"Function Names":	[ "release" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function is applied on varible names which are __variable references__ in order to release the reference (linkage) to the target variable.",
"	Given no other lockups (other references linked to that variable, ongoing assignments calculated, ongoing transactions or in use by I/O function parameters) apply,",
"	then the target variable may be deleted.",
"",
"	<br><br>",
"	All released references to variables turn into regular simple variables containing void values and no members.  The same variable may be used as a reference again",
"	as long no array or structure members have been added to them.",
"",
"	<br><br>",
"	References defined in local variables will be released automatically when execution of user-defined functions or B4P programs called with __start(__) or __include(__) have been completed.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"Min. 1",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The specified variable(s) must reference another variable."
	  }
	],
	"Exceptions": [ "Variable is not a reference", "Variable is protected", "Variable is a function parameter which cannot be released" ],
"Examples" : [
"	Country[] = USA;",
"	Country[State] = Pennsylvania;",
"	Country[State,Town] = Wilkes Barre;",
"",
"	wb[] =^ Country[State,Town];",
"	echo(wb[]);",
"",
"	release( wb[] );"
 ]
	,
	"Output": "automatic",
	"See also": [ "release all" ]
  }


,

  "release all":
  {
	"Function Names":	[ "release all" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"	This function releases all reference variable either in the specified variable or in one of its members or sub-members.",
"	If no parameter is specified, then all locally defined references to variables (for example in a user-defined functions) will be released.",
"	All released references to variables turn into regular variables containing void values.  See __release(__) for further details.",
"",
"	<br><br>",
"	In contrast to __release(__), no exception is asserted if the specified variable is neiter a reference to a variable nor containing references.",
"	This setup allows to release all references in variables which contain a mix of direct contents and references and carries out an effective clean-up.",
"	Protected variables as well as function parameters containing references will not be released.",
"",
"",
"	<br><br>",
"	References defined in local variables will be released automatically when execution of user-defined functions or B4P programs called with __start(__) or __include(__) have been completed.",
""
 ]
	,
	"Call as":			"procedure",
	"Parameter count":	"Min. 0",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1, etc.",
		 "Name":		"Variable name",
		 "Direction":	"code",
		 "Types":		["variable", ":literal"],
		 "Description": "The specified variable(s) may (but must not necessarily) contain __variable references__.  No actions if the variable contains no references at all."
	  }
	],
"Examples" : [
"	Country[] = USA;",
"	Country[State] = Pennsylvania;",
"	Country[State,Town] = Wilkes Barre;",
"",
"	a[wb] = ^Country[State,Town];",
"	a[pa] = ^Country[State];",
"	a[us] = The United States;",
"",
"	b[] = '';",
"	echo(a[wb],\", \", a[pa],\", \", a[us]);",
"",
"	release all( a[] ); // Also try: release all;",
"	echo(a[wb],\", \", a[pa],\", \", a[us]);"
 ]
	,
	"Output": "automatic",
	"See also": [ "release" ]
  }


,

  "attribute ...":
  {
	"Function Names":	[ "attribute read", "attribute write", "attribute modify", "attribute delete", "attribute remove", "attribute listing" ],
	"Documentation":	"Function Description",
"Description" : [
"",
"		The functions perform the following:",
"",
"		=== 200, 800, noframe_1stcolbold, noheader",
"		attribute read		| Reads a resident attribute from a file",
"		attribute write		| Writes attribute.  If file is missing, then new file (incl. directory path) is created. If attribute is missing, then new attribute name will be added.",
"		attribute modify	| Updates attribute if file is existing and the attribute name is also available.  Returns false otherwise.",
"		attribute delete	| Deletes the attribute entry.  Will refuse if sub-attributes still exist.",
"		attribute remove	| Deletes the attribute entry as well as sub-attributes.",
"		attribute listing	| Lists all attribute names",
"		===",
"",
"		<u>Note</u>: No exceptions are assert in following cases: Directory not found, file not found, attribute name not found, cannot delete attribute name because nested attributes exist and must be deleted first.<br>"
 ]
	,
	"Call as":			"procedure or function",
	"Parameter count":	"attribute delete: 3; all other functions: 4",
	"Restrictions":		"Indirect parameter passing is disabled",
	"Parameters":
	[
	  {
		 "Number":		"1",
		 "Name":		"Path name",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Description": "Directory path to file where the attributes are stored."
	  },
	  {
		 "Number":		"2",
		 "Name":		"File name",
		 "Direction":	"input",
		 "Types":		["literal"],
		 "Description": "File name where the attributes are stored."
	  },
	  {
		 "Number":		"3",
		 "Name":		"Attribute name(s)",
		 "Direction":	"input",
		 "Types":		["parameter set or literal"],
"Description" : [
"			A hierarchical structure of attribute names is supported by putting the subsequent names into one parameter set.  Empty parameter set is not allowed.",
"			Except for <b>attribute listing</b>, at least one attribute name must be provided.",
"				* Use a literal to specify one value",
"				* Use parameter set to specify multiple values",
"				* Alternatively use a softquoted literal (using single quotation marks) to specify multiple values, separated by commas",
"				* No values can be provided by using empty set {} or blank softquoted literal ''."
 ]
				
	  },
	  {
		 "Number":		"4",
		 "Name":		"Attribute value",
		 "Direction":	"output",
		 "Types":		["valid types"],
		 "Description": "Applicable to <b>attribute read</b> and <b>attribute listing</b>: Attribute value is written into specified destination (variable or table entry)."
	  },
	  {
		 "Number":		"Alt. 4",
		 "Name":		"Attribute value",
		 "Direction":	"input",
		 "Types":		["valid types"],
		 "Description": "Applicable to <b>attribute write</b> and <b>attribute modify</b>: Input parameter providing the value to be written."
	  }

	],
	"Return value":
	[
		{ "Name": "Result",
		  "Types": [ "boolean" ],
		  "Description": "true if successful, otherwise false."
		}
	],
	"Exceptions": [ "Invalid path and/or file name (e.g. invalid symbols inside)", "File locked" ],
"Examples" : [
"	include( Support Library );",
"",
"	my file[] = \"My attributes.json\";",
"	attribute write ( \"\", my file[], { Name, First Name }, Nic );  // Use 'write' in 1st call so it creates the JSON file",
"	attribute write ( \"\", my file[], { Name, Middle Initial }, M. );",
"	attribute modify( \"\", my file[], { Name, Middle Initial }, N. );",
"	attribute write ( \"\", my file[], { Name, Last Name },  Nicholas );",
"	attribute write ( \"\", my file[], { Name, Graduated at MIT }, true  );",
"	attribute write ( \"\", my file[], { Name, Birth Date },  date( \"2000-02-03\")  );",
"",
"	attribute listing( \"\", my file[], Name, listing[] );",
"	echo(\"List all attribute names behind 'Name': \", listing[] );",
"",
"	for all parameters( listing[], attribute name[] )",
"	{",
"		attribute read( \"\", my file[], {Name, attribute name[]}, attribute value[] );",
"		echo(\"    \", attribute name[], \": \", attribute value[] );",
"	}",
"",
"	echo(new line, \"Take a quick look at the JSON file:\" );",
"	table load( t, my file[], TEXT );",
"	table list (t);",
"",
"	echo(\"Try deleting some items\");",
"",
"	res[1] = attribute delete( \"\", my file[], {Name, Birth Date });",
"	res[2] = attribute delete( \"\", my file[], {Name, Graduated at Harvard } );",
"	res[3] = attribute delete( \"\", my file[],  Name );",
"",
"	echo(\"Success: Delete birth date: \", res[1],\";  Harvard U.: \", res[2], \";  Name: \", res[3] );",
"",
"	for all parameters( listing[], attribute name[] )",
"	{",
"		attribute read( \"\", my file[], {Name, attribute name[]}, attribute value[] );",
"		echo(\"    \", attribute name[], \": \", attribute value[] );",
"	}",
"",
"	echo(\"Try removing the Name\");",
"",
"	attribute remove( \"\", my file[], Name );",
"",
"	echo(new line, \"Take a quick look at the empty JSON file:\" );",
"	table load( t, my file[], TEXT );",
"	table list (t);",
"	file delete( my file[] );",
"",
""
 ]
	,
	"Output": "automatic",
	"See also": [ "variable load", "variable save" ]
  }


,

"system" :
{
  "Function Names":	[ "system" ],
  "Documentation":	"Function Description",
"Description" : [
"    This function executes system commands.  It accepts an arbitrary number of function parameters where each of them contains one system command.",
"    Calling this function with zero parameters have no effect.",
"",
"    <br><br>",
"    <u>Attention</u>: In the 1980's, file names were limited to 6-8 capital letters and digits.  Nowadays, many directory and file names contain spaces and special characters.",
"    When using such path names in system commands, they need to be preconditioned in order to avoid confusing path and file names with spaces inbetween as multiple",
"    command line parameters, as well as ensuring that the right directory separator symbols (slash or backslash) are used.  Use the function __quote path(__) to precondition",
"    all path and file names where this function takes care of operating system specific differences.",
""
 ]
    ,
    "OS differences":   "System commands are operating-system speicifc.  Please refer to the (on-line) user guides and reference manuals of the operating system you are using",
    "Call as":			"procedure or function",
    "Restrictions":		"Indirect parameter passing is enabled.",
    "Parameter count":	"Min 0",
    "Parameters":
    [
        { "Number": "1, ...",
          "Name": "System command",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": ["This command will be executed"]
        }
    ],
    "Return value":
    [
        { "Name": "Return code",
          "Types": [ "numeral" ],
          "Description": "The return code of the last command executed will be provided. Typically, 0 refers to successful outcome.  -1 is returned if no system command has been executed."
        }
    ],
"Examples"  : [
"    path[] = quote path(\"Examples/*table_lookup*.*\");",
"    echo(\"Path used for directory: \", path[]);",
"",
"    if (system info[operating system] = Windows)",
"    {",
"        a[] = system( \"dir /w /b \" + path[] );",
"    }",
"    else // Linux, MacOS",
"    {",
"        a[] = system( \"ls \" + path[] );",
"    }",
"    echo(\"Return value is \", a[] );"
 ]
    ,
    "Output": "automatic",
    "See also": ["quote path" ]
}



,

"quote path" :
{
  "Function Names":	[ "quote path" ],
  "Documentation":	"Function Description",
"Description" : [
"    This function preconditions path and file names before they can be used for operating system calls.  This function takes care of putting names into quoatation marks",
"    if spaces are contained, and directory symbols (slash, backslash) are corrected so they fit with the target operating system and you can use them to compose the",
"    command to use with the __system(__) function.  Your benefit is that you can use neutral path and file names (as is the case with __directory and file system functions__, too),",
""
 ]
    ,
    "OS differences":   "The OS-specific directory separators and quotation mark rules on names with blanks will be applied accordingly.",
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"1",
    "Parameters":
    [
        { "Number": "1",
          "Name": "Path or file name",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": ["This path or file name will be preconditioned"]
        }
    ],
    "Return value":
    [
        { "Name": "Preconditioned path or file name",
          "Types": [ "literal" ],
          "Description": ""
        }
    ],
"Examples"  : [
"    echo( quote path( \"C:/program files/B4P/B4P.exe\") );     // Quotation marks added and separators aligned",
"    echo( quote path( \"..\\Test Directory\\Test123/Subdir\") ); // \"",
"    echo( quote path( \"Countries/*.xlsx\") );                 // Directory separator will be aligned for Windows",
"    echo( quote path( \"Username\\Nic\\Programs\") );            // No changes made (if executed under Windows)",
"    echo( quote path( \"Username/Nic/Programs\") );            // Windows: Corrects sepearators.  Linux: Puts into quotation marks"
 ]
    ,
    "Output": "automatic",
    "See also": ["quote path" ]
}



,

"set locale" :
{
  "Function Names":	[ "set locale" ],
  "Documentation":	"Function Description",
"Description" : [
"",
"    During the installation process, you have been asked to specify a language and a country in order to set the <i>locale</i> settings applicable for B4P.",
"    The locale settings rule data formats such as numbers, dates and times, and also chooses the right language for weekdays and months.  This function",
"    is available to change the locale setting to a different locale.",
"",
"    <br><br>",
"    You can either specify a country, a language or a locale keyword (like en_US).  Specifying a country is fine if only one major language is spoken",
"    (e.g. English for Great Britain), and specifying a language is fine if the language is spoken in one country or a few (e.g. German). For German, Germany",
"    is assumed.  For Spanish, Spain is assumed.  In order to specify the locale properly (e.g. Canadian French fr_CA, Spanish in Mexico es_MX), using",
"    locale codes is recommended.",
""
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"1",
    "Parameters":
    [
        { "Number": "1",
          "Name": "Locale",
          "Direction": "input",
          "Types": [ "literal" ],
"Description" : [
"",
"            All values (Locale, Language, Country) are supported.  First match is assumed if specifying language or country.",
"            === 100, 200, 200, 300",
"            Locale	| Language	| Country           | Remarks",
"            none	| none	    | none              |",
"            en_US	| English	| USA               | M-D-Y date format",
"            en_GB	| English	| Great Britain     |",
"            en_UK	| English	| United Kingdom    | Same as Great Britain",
"            en_CA	| English	| Canada            |",
"            en_FR	| English	| France            |",
"            en_IN	| English	| India             | Indian numbering system",
"            hi_IN	| Hindi	    | India             | Indian numbering system",
"            de_DE	| German	| Germany           |",
"            en_DE	| English	| Germany           |",
"            de_CH	| German	| Switzerland       | Apostroph used as thousand separator",
"            en_CH	| English	| Switzerland       |",
"            de_AT	| German	| Austria           | Some month names are different than DE, CH",
"            en_AT	| English	| Austria           |",
"            fr_CA	| French	| Canada            |",
"            fr_FR	| French	| France            |",
"            fr_CH	| French	| Switzerland       |",
"            fr_BE	| French	| Belgium           |",
"            it_IT	| Italian	| Italy             |",
"            it_CH	| Italian	| Switzerland       | Apostroph used as thousand separator",
"            de_IT	| German	| Italy             |",
"            es_ES	| Spanish	| Spain             |",
"            es_US	| Spanish	| USA               | M-D-Y date format",
"            sv_SE	| Swedish	| Sweden            |",
"            en_SE	| English	| Sweden            |",
"            ===",
""
 ]
          
        },
        { "Number": "Opt. 2",
          "Name": "Locale table file name",
          "Direction": "input",
          "Types": [ "literal" ],
"Description" : [
"             In case you have maintained your own locale file (e.g. to support additional countries or specifi configurations),",
"             then specify the CSV file name with your locale data.  The CSV file must contain the same column header names as the",
"             original \"List of Locales.csv\")."
 ]
             
        }
    ],
"Examples"  : [
"    orig locale[] = local settings[locale];",
"    echo(\"Keep the original locale in order to restore orig. settings later on: \", orig locale[] );",
"",
"    date[] = date( \"2020-01-14\" );",
"    num[] = 12345678.90;",
"",
"    for all parameters( { en_IN, es_US, de_AT, it_IT, Switzerland }, loc[], i[] )",
"    {",
"        echo(loc[],\":\");",
"        set locale( loc[] );",
"        echo( literal( date[], \"  Tttt, DD.Mmmm.YYYY\", local ) );",
"        echo( literal( num[],  \"  #,###.##\", local ) );",
"        if (i[]==0) list system variables( \"local settings\" ); //  Do this for 1 example",
"    }",
"",
"    set locale( orig locale[] );"
 ]
    ,
    "Output": "automatic",
    "See also": ["quote path" ]
}

,

"global / script privileges" :
{
  "Function Names":	[ "global privileges", "script privileges" ],
  "Documentation":	"Function Description",
"Description" : [
"",
"    <b>global privileges</b> provides the B4P privilege level applicable to all B4P programs.<br>",
"    <b>script privileges</b> provides the B4p privilege level for the currently running program.  Under specific circumstances, the privileges",
"    for a particular program may be escalated with a dedicated __activation code__.",
""
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"0",
    "Return value":
    [
        { "Name": "B4P specific privileges",
          "Types": [ "numeral" ],
"Description" : [
"            One of the following may be returned:",
"            === 200, 600, noframe_1stcolbold, noheader",
"            none        | No privileges to run B4P programs",
"            demo        | Demo mode with __restricted functionality__",
"            standard	| standard privileges for normal operation",
"            supervisor  | Enhanced privileges, allows more freedom in registry access functions (Windows)",
"            installer	| Enhanced privileges for program installation, used by the B4P installation program",
"            administrator |	Full B4P administrator rights (not to be confused with operating system admin privileges).  Will not be granted to B4P users.",
"            ==="
 ]
            
        }
    ],
"Examples"  : [
"    echo( global privileges() );",
"    echo( script privileges() );"
 ]
    ,
    "Output": "automatic"
}

,

"license provide identification" :
{
  "Function Names":	[ "license provide identification" ],
  "Documentation":	"Function Description",
"Description" : [
"",
"    In case a new license or license extension is needed, you may be asked to provide identification information.",
"    Use this function call to retrieve the identification.",
""
 ]
    ,
    "Call as":			"function",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"0",
    "Return value":
    [
        { "Name": "16 byte identification",
          "Types": [ "literal" ],
          "Description": "Format: 16 pairs of hexadecimal digits"
        }
    ]
}

,

"license apply key" :
{
  "Function Names":	[ "license apply key" ],
  "Documentation":	"Function Description",
"Description" : [
"",
"        Normally, you do not need to call this function manually as it is taken care by the installation script.",
"        The license provided will be checked and, if valid, stored in the registry so Beyond4P will refer to this one at start-up.",
"        If the call is successful (no exceptions), then the license key is memorized and stays active until further notice.",
""
 ]
    ,
    "Call as":			"procedure",
    "Restrictions":		"Indirect parameter passing is disabled.",
    "Parameter count":	"3",
    "Parameters":
    [
        { "Number": "1",
          "Name": "Key",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": "24-byte key in hexadecimal format"
        },
        { "Number": "2",
          "Name": "License holder name",
          "Direction": "input",
          "Types": [ "literal" ],
          "Description": "License holder name.  This value is case sensitive and must correspond with the license key."
        },
        { "Number": "3",
          "Name": "For machine or user installation",
          "Direction": "input",
          "Types": [ "boolean" ],
"Description" : [
"            <b>true</b>: License key stored in appropriate directory for machine installations;<br>",
"            <b>false</b>: License key stored in appropriate directory for current user installations,<br>"
 ]
            
        }
    ]
}

,
"Index" :
{
"Documentation": "General Description",
"Feature Names": [ "Index" ],
"Description 01:1" : [
"__10p__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>" ],
"Description 02:A" : [
"__abbreviate name__<br>",
"Function Library Guide: 6.3.2 abbreviate name<br><br>",
"__abort__<br>",
"Function Library Guide: 2.5.6 abort<br><br>",
"__abs__, __absolute value__<br>",
"Function Library Guide: 5.1.3 abs - Absolute Value<br><br>",
"__Accessing table information__<br>",
"Function Library Guide: 9.2.4 Accessing Table Information<br><br>",
"__accessing tables__<br>",
"Language Guide: 5.1 Accessing Tables<br><br>",
"__acos__, __acos deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__acosh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__ad-hoc operations__, __ad-hoc operators__<br>",
"Language Guide: 6.6 Ad-hoc Operators<br><br>",
"__ad-hoc operators overview__<br>",
"Language Guide: 6.6.2 Ad-hoc Operators Overview<br><br>",
"__add__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__add color__<br>",
"Function Library Guide: 9.6.1.2 add color<br><br>",
"__ADD Transactions between tables__<br>",
"Language Guide: 7.4.4 &#43; Transactions between Tables<br><br>",
"__ADD Transactions between variables__<br>",
"Language Guide: 7.4.1 &#43; Transactions between Variables<br><br>",
"__ADD Transactions from tables to variables__<br>",
"Language Guide: 7.4.2 &#43; Transactions from Tables to Variables<br><br>",
"__ADD Transactions from variables to tables__<br>",
"Language Guide: 7.4.3 &#43; Transactions from Variables to Tables<br><br>",
"__addition__<br>",
"Language Guide: 6.2.1.1 Additions<br><br>",
"__additional function names__<br>",
"Function Library Guide: 2.3.2 define additional procedure / function<br><br>",
"__Additional info on fast processing of rows__<br>",
"Function Library Guide: 9.4.4.5.1 Addt'l Info on fast rows processing<br><br>",
"__advanced directory listing__, __advanced directory listing recursive__<br>",
"Function Library Guide: 11.2.2 advanced directory listing ...<br><br>",
"__alternative execution of code blocks__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__and__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__AND Transactions between tables__<br>",
"Language Guide: 7.2.4 &amp; Transactions between Tables<br><br>",
"__AND Transactions between variables__<br>",
"Language Guide: 7.2.1 &amp; Transactions between Variables<br><br>",
"__AND Transactions from tables to variables__<br>",
"Language Guide: 7.2.2 &amp; Transactions from Tables to Variables<br><br>",
"__AND Transactions from variables to tables__<br>",
"Language Guide: 7.2.3 &amp; Transactions from Variables to Tables<br><br>",
"__Arithmetic and Boolean Series Functions__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__arithmetic operators__<br>",
"Language Guide: 6.2.1 Arithmetic Operators<br><br>",
"__array__<br>",
"Function Library Guide: 10.2.3 array, array protect<br><br>",
"__array member__, __array members__<br>",
"Language Guide: 4.3.2 Arrays<br><br>",
"__array protect__<br>",
"Function Library Guide: 10.2.3 array, array protect<br><br>",
"__array to array structure__, __array to structure__<br>",
"Function Library Guide: 10.2.7 array to structure ...<br><br>",
"__arrays__<br>",
"Language Guide: 4.3.2 Arrays<br><br>",
"__Arrays and Structures__<br>",
"Function Library Guide: 10.2 Arrays and Structures<br><br>",
"__asin__, __asin deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__asinh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__assign__, __assign [function]__<br>",
"Function Library Guide: 2.7.6 assign<br><br>",
"__Assignment operators__<br>",
"Language Guide: 6.4 Assignment operators<br><br>",
"__assignments__<br>",
"Language Guide: 6 Assignments and Expressions<br><br>",
"__atan__, __atan deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__atanh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__attribute delete__, __attribute listing__, __attribute modify__, __attribute read__, __attribute remove__, __attribute write__<br>",
"Function Library Guide: 10.5.1 attribute ...<br><br>",
"__average__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average if__, __average if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__average ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average ignore blanks if__, __average ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__average ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__average ignore zero if__, __average ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>" ],
"Description 03:B" : [
"__background color__<br>",
"Function Library Guide: 3.2.3 text / background color<br><br>",
"__base variable__, __base variables__<br>",
"Language Guide: 4.3 Variable Forms and Trees<br><br>",
"__Basic Commands__<br>",
"Language Guide: 2.6.7 Basic Commands<br><br>",
"__basic data types__<br>",
"Language Guide: 3.7 Basic Data Types<br><br>",
"__basic directory and file functions__<br>",
"Function Library Guide: 11.1 Basic Directory and File Functions<br><br>",
"__Basic Language Structure__<br>",
"Language Guide: 3.1 Basic Language Structure<br><br>",
"__basic math functions__<br>",
"Function Library Guide: 5.1 Basic Math Functions<br><br>",
"__basic statistics functions__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__Basic table access__<br>",
"Function Library Guide: 9.2 Basic Table Access<br><br>",
"__basic variables functions__<br>",
"Function Library Guide: 10.1 Basic Variables Functions<br><br>",
"__best type__<br>",
"Function Library Guide: 4.10 best type<br><br>",
"__binary operators__<br>",
"Language Guide: 6.2 Binary Operators<br><br>",
"__Blocks__<br>",
"Language Guide: 3.1 Basic Language Structure<br><br>",
"__boolean__, __boolean conversion function__<br>",
"Function Library Guide: 4.8 boolean<br><br>",
"__boolean to literal conversion and formatting__, __Boolean to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.6 Boolean to Literal Formatting<br><br>",
"__Branches__<br>",
"Function Library Guide: 2.1 Branches<br><br>",
"__break case__, __break loop__<br>",
"Function Library Guide: 2.1.6 break, continue<br><br>",
"__business functions__<br>",
"Function Library Guide: 5.7 Finance and Business Functions<br><br>" ],
"Description 04:C" : [
"__cagr__<br>",
"Function Library Guide: 5.7.1 cagr - Compond Annual Growth Rate<br><br>",
"__call__<br>",
"Function Library Guide: 2.7.1 call<br><br>",
"__cascading ad-hoc operators__<br>",
"Language Guide: 6.6.1 Cascading ad-hoc Operators<br><br>",
"__case__<br>",
"Function Library Guide: 2.1.5 case<br><br>",
"__case sensitivity__<br>",
"Language Guide: 3.4.1 Case Sensitivity<br><br>",
"__catch__, __catch if__<br>",
"Function Library Guide: 2.5.8 catch, catch if<br><br>",
"__character coding__<br>",
"Function Library Guide: 6.2 Character Encoding and Decoding<br><br>",
"__character decoding__<br>",
"Function Library Guide: 6.2.2 code<br><br>",
"__character encoding__<br>",
"Function Library Guide: 6.2.1 chr<br><br>",
"__Characters__<br>",
"Language Guide: 3.4 Characters<br><br>",
"__check__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__Checking headers__<br>",
"Function Library Guide: 9.4.1 Checking and Processing Headers<br><br>",
"__checking numbers__<br>",
"Function Library Guide: 5.1.1 is numeric / integer - Functions<br><br>",
"__choose recent file__<br>",
"Function Library Guide: 11.2.4 choose recent file<br><br>",
"__chr__<br>",
"Function Library Guide: 6.2.1 chr<br><br>",
"__clean if numeral__, __clean numeral__, __clean numerals__<br>",
"Function Library Guide: 4.3 clean (if) numeral<br><br>",
"__clear the screen__<br>",
"Function Library Guide: 3.2.1 cls<br><br>",
"__Clearing and deleting tables__<br>",
"Function Library Guide: 9.2.3 Clearing and Deleting Tables<br><br>",
"__cls__<br>",
"Function Library Guide: 3.2.1 cls<br><br>",
"__code__<br>",
"Function Library Guide: 6.2.2 code<br><br>",
"__Code Execution Functions__<br>",
"Function Library Guide: 2.7 Code Execution Functions<br><br>",
"__Code Piece__, __code pieces__<br>",
"Language Guide: 8.4.3 Code Pieces (Func. Param. Type)<br><br>",
"__col__<br>",
"Function Library Guide: 9.2.2.2 col<br><br>",
"__Color Palettes__<br>",
"Function Library Guide: 9.6.1.1 Color Palettes<br><br>",
"__Color Specification__<br>",
"Function Library Guide: 9.6.1 Defining User Specific Colors<br><br>",
"__Combining multiple tables__<br>",
"Function Library Guide: 9.5.3 Combining Multiple Tables<br><br>",
"__Command line options__, __Command line switches__<br>",
"Language Guide: 2.2 Command Line Switches<br><br>",
"__comments__<br>",
"Language Guide: 3.3 Comments<br><br>",
"__compare__<br>",
"Function Library Guide: 2.7.5 compare<br><br>",
"__compare pick__, __compare select__<br>",
"Function Library Guide: 2.6.5 compare select / pick<br><br>",
"__compare [function]__<br>",
"Function Library Guide: 2.7.5 compare<br><br>",
"__Comparing and validating tables__<br>",
"Function Library Guide: 9.5.1 Comparing and Validating Tables<br><br>",
"__Comparison and selection functions__<br>",
"Function Library Guide: 2.6 Comparison and Selection Functions<br><br>",
"__comparison expression__<br>",
"Language Guide: 6.2.2 Comparison Operators<br><br>",
"__Comparison Expression [func. params]__, __Comparison Expressions__<br>",
"Language Guide: 8.4.3.1 Comparison Expressions (func. params)<br><br>",
"__comparison operators__<br>",
"Language Guide: 6.2.2 Comparison Operators<br><br>",
"__comparison options__<br>",
"Language Guide: 6.2.3 Comparison Options<br><br>",
"__compose__, __compose line__<br>",
"Function Library Guide: 3.1.2 compose ...<br><br>",
"__compound annual growth rate__<br>",
"Function Library Guide: 5.7.1 cagr - Compond Annual Growth Rate<br><br>",
"__conditional branches__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__conditional combination functions__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__console__<br>",
"Language Guide: 3.4.2 Console Input / Output<br><br>",
"__Console I/O Functions__<br>",
"Function Library Guide: 3 Console I/O Functions<br><br>",
"__Console I/O with tables__<br>",
"Function Library Guide: 9.1.2 Console I/O with Tables<br><br>",
"__Console special effects__<br>",
"Function Library Guide: 3.2 Console Special Effects<br><br>",
"__consolidation actions__<br>",
"Function Library Guide: 14.2 Consolidation Actions<br><br>",
"__continue case__, __continue loop__, __continue with next case__<br>",
"Function Library Guide: 2.1.6 break, continue<br><br>",
"__Control Flow Functions__<br>",
"Function Library Guide: 2 Control Flow Functions<br><br>",
"__Copying__<br>",
"Function Library Guide: 9.4.6 Copying, Renaming and Splitting Tables<br><br>",
"__copying references__<br>",
"Language Guide: 4.4.4 Copying References<br><br>",
"__correlation__<br>",
"Function Library Guide: 5.5.2 covariance, correlation<br><br>",
"__cos__, __cos deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__cosh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__count__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count elements__, __count elements ignore blanks__, __count elements ignore both__, __count elements ignore case__<br>",
"Function Library Guide: 8.1.8 count elements ...<br><br>",
"__count files__, __count files recursive__<br>",
"Function Library Guide: 11.2.5 count files ...<br><br>",
"__count functions__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count if__, __count if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore blanks__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore blanks if__, __count ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore both__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore both if__, __count ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__count ignore zero__<br>",
"Function Library Guide: 5.3.5 count Functions<br><br>",
"__count ignore zero if__, __count ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__covariance__, __covariance and correlation__<br>",
"Function Library Guide: 5.5.2 covariance, correlation<br><br>",
"__Creating tables and adding contents__<br>",
"Function Library Guide: 9.2.1 Creating Tables and Adding Contents<br><br>",
"__Cross-functional info__<br>",
"Function Library Guide: 14 Cross-Functional Info<br><br>",
"__CSV__<br>",
"Language Guide: 3.8.4 CSV File Format<br><br>",
"__cursor__, __cursor position__<br>",
"Function Library Guide: 3.2.2 cursor<br><br>",
"__custom initialization program__<br>",
"Language Guide: 2.4 User Initialization Program<br><br>" ],
"Description 05:D" : [
"__darken colors__<br>",
"Function Library Guide: 9.6.1.4 darken colors<br><br>",
"__data types booleans__<br>",
"Language Guide: 3.7.4 Booleans<br><br>",
"__data types dates__<br>",
"Language Guide: 3.7.3 Dates<br><br>",
"__data types literals__<br>",
"Language Guide: 3.7.1 Literals<br><br>",
"__data types literals extracting substrings__<br>",
"Language Guide: 3.7.1.2 Literals - Extracting Substrings<br><br>",
"__data types numerals__<br>",
"Language Guide: 3.7.2 Numerals<br><br>",
"__data types parameter sets__<br>",
"Language Guide: 3.7.6 Parameter sets<br><br>",
"__data types parameter sets extracting subsets__<br>",
"Language Guide: 3.7.6.2 Parameter sets - Extracting Subsets<br><br>",
"__data types parameter sets indexing__<br>",
"Language Guide: 3.7.6.1 Parameter sets - Indexing<br><br>",
"__data types parameter sets value ranges__<br>",
"Language Guide: 3.7.6.3 Parameter sets - Value Ranges<br><br>",
"__data types parameter sets value repetitions__<br>",
"Language Guide: 3.7.6.4 Parameter sets - Value Repetitions<br><br>",
"__data types voids__<br>",
"Language Guide: 3.7.5 Voids<br><br>",
"__date__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__Date and Time Detection Rules__<br>",
"Function Library Guide: 4.7 Date and Time Detection Rules<br><br>",
"__date and time functions__<br>",
"Function Library Guide: 7 Date and Time Functions<br><br>",
"__date conversion functions__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__date functions__<br>",
"Function Library Guide: 7.1 Date Functions<br><br>",
"__Date info functions__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__date info functions__<br>",
"Function Library Guide: 7.1.4 serial date<br><br>",
"__date inside__<br>",
"Function Library Guide: 7.1.1 date inside, time inside<br><br>",
"__date time__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__date to literal conversion and formatting__, __Date to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.4 Date to Literal Formatting<br><br>",
"__day__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__day of year__<br>",
"Function Library Guide: 7.1.3 day of year<br><br>",
"__De-installing B4P__<br>",
"User Guide: 2.5 De-installing B4P<br><br>",
"__decode entities__<br>",
"Function Library Guide: 6.2.3 decode entities<br><br>",
"__deep__<br>",
"Function Library Guide: 2.7.2 deep, deepr<br><br>",
"__deep assignment operators__<br>",
"Language Guide: 6.5 Deep Assignment Operators<br><br>",
"__deep binary operators__<br>",
"Language Guide: 6.3.2 Deep Binary Operators<br><br>",
"__deep operators__<br>",
"Language Guide: 6.3 Deep Operators<br><br>",
"__deep unary operators__<br>",
"Language Guide: 6.3.1 Deep Unary Operators<br><br>",
"__deepr__<br>",
"Function Library Guide: 2.7.2 deep, deepr<br><br>",
"__default members__<br>",
"Language Guide: 4.3.3 Structures<br><br>",
"__define additional function__, __define additional procedure__, __define additional procedure and function__<br>",
"Function Library Guide: 2.3.2 define additional procedure / function<br><br>",
"__define function__, __define procedure__, __define procedure and function__, __defining user procedures and user functions__<br>",
"Function Library Guide: 2.3.1 define procedure / function<br><br>",
"__Defining User Specific Colors__<br>",
"Function Library Guide: 9.6.1 Defining User Specific Colors<br><br>",
"__delete__, __delete members__<br>",
"Function Library Guide: 10.1.7 delete ...<br><br>",
"__delete user function__<br>",
"Function Library Guide: 2.3.6 delete user function<br><br>",
"__Detects dates correctly in literals__<br>",
"Function Library Guide: 4.7 Date and Time Detection Rules<br><br>",
"__deviation__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation if__, __deviation if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__deviation ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation ignore blanks if__, __deviation ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__deviation ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__deviation ignore zero if__, __deviation ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__diagonal__<br>",
"Function Library Guide: 8.2.4 diagonal<br><br>",
"__dim__<br>",
"Function Library Guide: 10.2.1 dim / redim<br><br>",
"__dim protect__<br>",
"Function Library Guide: 10.2.2 dim / redim protect<br><br>",
"__directories__<br>",
"Language Guide: 3.8 Directories and Files<br><br>",
"__directory and file system functions__<br>",
"Function Library Guide: 11 Directory and File System Functions<br><br>",
"__Directory and files__<br>",
"Language Guide: 3.8 Directories and Files<br><br>",
"__directory create__, __directory create ... Functions__, __directory create all__, __directory create silently__<br>",
"Function Library Guide: 11.3.1 directory create ...<br><br>",
"__directory create temp__<br>",
"Function Library Guide: 11.3.2 directory create temp<br><br>",
"__directory delete__, __directory delete ... Functions__, __directory delete all__<br>",
"Function Library Guide: 11.3.5 directory delete ...<br><br>",
"__directory delete multiple__, __directory delete multiple all__, __directory delete multiple/recursive ... Functions__, __directory delete recursive__, __directory delete recursive all__, __directory delete recursive if empty__<br>",
"Function Library Guide: 11.3.6 directory delete multiple/recursive ...<br><br>",
"__directory delete silently__<br>",
"Function Library Guide: 11.3.5 directory delete ...<br><br>",
"__directory existing__<br>",
"Function Library Guide: 11.1.1 directory existing, file existing<br><br>",
"__directory listing__, __directory listing recursive__<br>",
"Function Library Guide: 11.2.1 directory listing ...<br><br>",
"__directory rename__, __directory rename ... Functions__, __directory rename all__, __directory rename silently__<br>",
"Function Library Guide: 11.3.8 directory rename ...<br><br>",
"__directory size__<br>",
"Function Library Guide: 11.1.5 directory size<br><br>",
"__discount__<br>",
"Function Library Guide: 5.7.4 discount - Discount Values<br><br>",
"__disk space__, __disk space free__<br>",
"Function Library Guide: 11.1.7 disk space ...<br><br>",
"__Distinct Language Features__<br>",
"Language Guide: 3.2 Distinct Language Features<br><br>",
"__distribute__, __distribute advance__, __distribution over timeline__<br>",
"Function Library Guide: 5.7.5 distribute - Value Distribution over Timeline<br><br>",
"__div__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__division__<br>",
"Language Guide: 6.2.1.4 Divisions<br><br>",
"__do__, __do-loop__<br>",
"Function Library Guide: 2.2.1 do<br><br>",
"__docs__<br>",
"Function Library Guide: 13.2 docs<br><br>",
"__docs search__<br>",
"Function Library Guide: 13.3 docs search<br><br>" ],
"Description 06:E" : [
"__echo__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__else__<br>",
"Function Library Guide: 2.1.2 else<br><br>",
"__encode entities__<br>",
"Function Library Guide: 6.2.4 encode entities<br><br>",
"__end__<br>",
"Function Library Guide: 2.5.5 end<br><br>",
"__entering interactive mode__<br>",
"Language Guide: 2.6.1 Entering Interactive Mode<br><br>",
"__Entities__<br>",
"Language Guide: 3.5.2 Softquoted Literals<br><br>",
"__Epsilon__<br>",
"Language Guide: 6.2.3 Comparison Options<br><br>",
"__equal to__<br>",
"Language Guide: 6.2.2.1 Equal to<br><br>",
"__even__, __even numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__Examples__<br>",
"User Guide: 4 Examples<br><br>",
"__excel column__<br>",
"Function Library Guide: 4.14 excel column<br><br>",
"__excel coordinates__<br>",
"Function Library Guide: 4.15 excel coordinates<br><br>",
"__excel list sheets__<br>",
"Function Library Guide: 9.1.1.2 excel list sheets<br><br>",
"__excel validate sheet name__<br>",
"Function Library Guide: 4.16 excel validate sheet name<br><br>",
"__exception__<br>",
"Function Library Guide: 2.5.9 exception<br><br>",
"__Exception Functions__<br>",
"Function Library Guide: 2.5 Exception Functions<br><br>",
"__exchange__<br>",
"Function Library Guide: 10.1.5 exchange<br><br>",
"__Execute B4P expressions interactively__<br>",
"Language Guide: 2.6.4 Execute B4P Expressions Interactively<br><br>",
"__Execute B4P statements interactively__<br>",
"Language Guide: 2.6.3 Execute B4P Statements Interactively<br><br>",
"__executing system commands__<br>",
"Function Library Guide: 12.1 Executing System Commands<br><br>",
"__Execution Engine__<br>",
"Language Guide: 2 Execution Engine<br><br>",
"__existing__, __existing and valid__<br>",
"Function Library Guide: 10.1.1 existing (and valid)<br><br>",
"__exit__<br>",
"Function Library Guide: 2.5.4 exit<br><br>",
"__exp__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>",
"__Explore and filter and extract sub-tables__<br>",
"Function Library Guide: 9.3.2 Explore, Filter, Extract Sub-Tables<br><br>",
"__exponential functions__<br>",
"Function Library Guide: 5.2.3 Exponential Functions<br><br>",
"__exponential regression__<br>",
"Function Library Guide: 5.5.4 Linear and Exponential Regression<br><br>",
"__expression__, __expression [function]__<br>",
"Function Library Guide: 2.7.4 expression<br><br>",
"__expressions__<br>",
"Language Guide: 6 Assignments and Expressions<br><br>",
"__Expressions to select columns__<br>",
"Language Guide: 8.4.5 Expressions to Select Columns<br><br>",
"__Expressions to select rows__<br>",
"Language Guide: 8.4.4 Expressions to Select Rows<br><br>",
"__Expressions [func params]__<br>",
"Language Guide: 8.4.3.2 Expressions (func. params)<br><br>" ],
"Description 07:F" : [
"__file compression decompression__<br>",
"Function Library Guide: 11.4 File Compression and Decompression<br><br>",
"__file copy__, __file copy ... Functions__, __file copy all__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file copy multiple__, __file copy multiple all__, __file copy multiple overwrite__, __file copy multiple overwrite all__, __file copy multiple/recursive ... Functions__<br>",
"Function Library Guide: 11.3.10 file copy mulitple/recursive ...<br><br>",
"__file copy overwrite__, __file copy overwrite all__, __file copy overwrite silently__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file copy recursive__, __file copy recursive all__, __file copy recursive overwrite__, __file copy recursive overwrite all__<br>",
"Function Library Guide: 11.3.10 file copy mulitple/recursive ...<br><br>",
"__file copy silently__<br>",
"Function Library Guide: 11.3.9 file copy ...<br><br>",
"__file create link__, __file create link ... Functions__, __file create link all__, __file create link silently__<br>",
"Function Library Guide: 11.3.11 file create link ...<br><br>",
"__file delete__, __file delete ... Functions__, __file delete all__<br>",
"Function Library Guide: 11.3.3 file delete ...<br><br>",
"__file delete multiple__, __file delete multiple all__, __file delete multiple/recursive ... Functions__, __file delete recursive__, __file delete recursive all__<br>",
"Function Library Guide: 11.3.4 file delete multiple/recursive ...<br><br>",
"__file delete silently__<br>",
"Function Library Guide: 11.3.3 file delete ...<br><br>",
"__file download__, __file download ... Functions__, __file download all__, __file download overwrite__, __file download overwrite all__, __file download overwrite silently__, __file download silently__<br>",
"Function Library Guide: 11.3.12 file download ...<br><br>",
"__file existing__<br>",
"Function Library Guide: 11.1.1 directory existing, file existing<br><br>",
"__file name__, __file names__<br>",
"Language Guide: 3.8.1 Path and File Names<br><br>",
"__file rename__, __file rename ... Functions__, __file rename all__, __file rename silently__<br>",
"Function Library Guide: 11.3.7 file rename ...<br><br>",
"__file size__<br>",
"Function Library Guide: 11.1.6 file size<br><br>",
"__filter__, __filter 1__, __filter n__, __filter start__, __filter start include__, __filter start n__, __filter start n include__, __filter stop__, __filter stop include__<br>",
"Function Library Guide: 8.1.10 filter ...<br><br>",
"__finance functions__<br>",
"Function Library Guide: 5.7 Finance and Business Functions<br><br>",
"__find__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore blanks__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore blanks__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore both__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore both__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find ignore case__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__find ignore case__, __find [parameter set function]__<br>",
"Function Library Guide: 8.1.2 find ... (parameter set function)<br><br>",
"__find [string function]__<br>",
"Function Library Guide: 6.1.1 find ... (string function)<br><br>",
"__Finishing up formatting__<br>",
"Function Library Guide: 9.6.3 Finishing up formatting<br><br>",
"__flat__<br>",
"Function Library Guide: 8.2.3 flat<br><br>",
"__font color__<br>",
"Function Library Guide: 3.2.3 text / background color<br><br>",
"__for__<br>",
"Function Library Guide: 2.2.2 for<br><br>",
"__for all current table columns__<br>",
"Function Library Guide: 2.2.5 for all current table columns<br><br>",
"__for all current table selected columns__<br>",
"Function Library Guide: 2.2.10 for all current table selected columns<br><br>",
"__for all parameters__<br>",
"Function Library Guide: 2.2.6 for all parameters<br><br>",
"__for all table columns__<br>",
"Function Library Guide: 2.2.4 for all table columns<br><br>",
"__for all table rows__<br>",
"Function Library Guide: 2.2.7 for all table rows<br><br>",
"__for all table selected columns__<br>",
"Function Library Guide: 2.2.11 for all table selected columns<br><br>",
"__for all table selected rows__<br>",
"Function Library Guide: 2.2.8 for all table selected rows<br><br>",
"__for all variables__, __for all variables if existing__, __for all variables if existing and valid__<br>",
"Function Library Guide: 2.2.9 for all variables<br><br>",
"__for-loop__<br>",
"Function Library Guide: 2.2.2 for<br><br>",
"__for-loop through current table columns__<br>",
"Function Library Guide: 2.2.5 for all current table columns<br><br>",
"__for-loop through parameter elements__<br>",
"Function Library Guide: 2.2.6 for all parameters<br><br>",
"__for-loop through selected table rows__<br>",
"Function Library Guide: 2.2.8 for all table selected rows<br><br>",
"__for-loop through table columns__<br>",
"Function Library Guide: 2.2.4 for all table columns<br><br>",
"__for-loop through table rows__<br>",
"Function Library Guide: 2.2.7 for all table rows<br><br>",
"__for-loop through table selected columns__<br>",
"Function Library Guide: 2.2.10 for all current table selected columns<br><br>",
"__for-loop through table selected columns__<br>",
"Function Library Guide: 2.2.11 for all table selected columns<br><br>",
"__for-loop through variables__<br>",
"Function Library Guide: 2.2.9 for all variables<br><br>",
"__foreground color__<br>",
"Function Library Guide: 3.2.3 text / background color<br><br>",
"__forget memorized table columns__<br>",
"Function Library Guide: 9.2.2.3 forget memorized table columns<br><br>",
"__Formatting and styling tables__<br>",
"Function Library Guide: 9.6 Formatting and Styling Tables<br><br>",
"__Formatting Coverages__, __Formatting Precedences__<br>",
"Function Library Guide: 9.6.2.6 Formatting Coverages and Precedences<br><br>",
"__formatting template__<br>",
"Function Library Guide: 4.1 literal, quoted literal, softquoted literal<br><br>",
"__Formatting the Tables__<br>",
"Function Library Guide: 9.6.2 Styling Functions<br><br>",
"__Function call__, __Function calls__<br>",
"Language Guide: 8 Functions and Procedures<br><br>",
"__function dump__<br>",
"Function Library Guide: 13.7 function dump<br><br>",
"__function existing__<br>",
"Function Library Guide: 2.3.5 function / user function existing<br><br>",
"__function explain__<br>",
"Function Library Guide: 13.6 function list / explain<br><br>",
"__Function Library__<br>",
"Function Library Guide: 1 Function Library<br><br>",
"__function list__<br>",
"Function Library Guide: 13.6 function list / explain<br><br>",
"__Function Naming__<br>",
"Language Guide: 8.1 Function Naming<br><br>",
"__Function parameter__<br>",
"Language Guide: 8.2 Function Parameters<br><br>",
"__Function parameter directions__<br>",
"Language Guide: 8.3 Function Parameter Directions<br><br>",
"__Function parameter types__<br>",
"Language Guide: 8.4 Function Parameter Types<br><br>",
"__Function Parameters__<br>",
"Language Guide: 8.2 Function Parameters<br><br>",
"__Functions and Procedures__<br>",
"Language Guide: 8 Functions and Procedures<br><br>" ],
"Description 08:G" : [
"__Generic Attribute Names__, __Generic Attribute Values__, __Generic Formatting Attributes__<br>",
"Function Library Guide: 9.6.2.5 Generic Formatting Attributes<br><br>",
"__geometric mean__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean if__, __geometric mean if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__geometric mean ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean ignore blanks if__, __geometric mean ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__geometric mean ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__geometric mean ignore zero if__, __geometric mean ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__get differences__<br>",
"Function Library Guide: 6.1.11 get differences<br><br>",
"__getch__, __getch ignore case__<br>",
"Function Library Guide: 3.1.5 getch ...<br><br>",
"__Getting help__<br>",
"User Guide: 3.1 Getting Help<br><br>",
"__Getting started__<br>",
"User Guide: 3 Getting Started<br><br>",
"__gini__, __gini coefficient__, __gini ignore blanks__, __gini ignore zero__<br>",
"Function Library Guide: 5.5.3 gini Coefficient Functions<br><br>",
"__global__<br>",
"Function Library Guide: 10.1.8 global<br><br>",
"__global privileges__<br>",
"Function Library Guide: 12.4.1 global / script privileges<br><br>",
"__global variables__<br>",
"Language Guide: 4.1.1 Global Variables<br><br>",
"__greater than or equal to__<br>",
"Language Guide: 6.2.2.6 Greater than (or Equal to)<br><br>" ],
"Description 09:H" : [
"__harmonic mean__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__harmonic mean if__, __harmonic mean if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__hash signature__<br>",
"Function Library Guide: 4.13 hash signature<br><br>",
"__header name exception handling__<br>",
"Language Guide: 5.1.8 Header Name Exception Handling<br><br>",
"__help__<br>",
"Function Library Guide: 13.1 help<br><br>",
"__help and support functions__<br>",
"Function Library Guide: 13 Help and Support Functions<br><br>",
"__Hijacking parameters__<br>",
"Language Guide: 3.11 Language Pitfalls<br><br>",
"__horizontal__<br>",
"Function Library Guide: 8.2.1 horizontal<br><br>",
"__horizontal table access__<br>",
"Language Guide: 5.1.2 Horizontal Table Access<br><br>",
"__Horizontal table access using parameter sets__<br>",
"Language Guide: 5.1.2.1 Horizontal Table Access w. Param. Sets<br><br>",
"__Horizontal table access using ranges__<br>",
"Language Guide: 5.1.2.3 Horizontal Table Access w. Ranges<br><br>",
"__Horizontal table access using wildcards__<br>",
"Language Guide: 5.1.2.2 Horizontal Table Access w. Wildcards<br><br>",
"__horizontal table accesses__<br>",
"Language Guide: 5.1.2 Horizontal Table Access<br><br>",
"__hour__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__hyperbolic functions__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>" ],
"Description 10:I" : [
"__identify__<br>",
"Function Library Guide: 10.1.2 identify<br><br>",
"__Identify variable types__<br>",
"Function Library Guide: 4.12 type, type detailed<br><br>",
"__if__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__include__, __include B4P program__, __include libraries__, __include library__<br>",
"Function Library Guide: 2.4.2 include<br><br>",
"__include programs__<br>",
"Function Library Guide: 2.4 Start or include Beyond4P Programs<br><br>",
"__income disparity__<br>",
"Function Library Guide: 5.5.3 gini Coefficient Functions<br><br>",
"__Index__<br>",
"User Guide: 6 Index<br><br>",
"__Index__<br>",
"Language Guide: 9 Index<br><br>",
"__Index__<br>",
"Function Library Guide: 15 Index<br><br>",
"__Indirect parameter passing__<br>",
"Language Guide: 8.5 Indirect Parameter Passing<br><br>",
"__input__<br>",
"Function Library Guide: 3.1.3 input<br><br>",
"__input quick__, __input quick ignore case__<br>",
"Function Library Guide: 3.1.4 input quick ...<br><br>",
"__inspect__<br>",
"Function Library Guide: 3.3.2 inspect<br><br>",
"__Inspect Tables__<br>",
"Language Guide: 2.6.5 Inspecting Tables Interactively<br><br>",
"__Inspect Variables__<br>",
"Language Guide: 2.6.6 Inspecting Variables Interactively<br><br>",
"__Inspection and debugging__<br>",
"Function Library Guide: 3.3 Inspection and Debugging<br><br>",
"__Installation and Setup__<br>",
"User Guide: 2 Installation and Setup<br><br>",
"__Installation and Setup on MacOS__<br>",
"User Guide: 2.3 MacOS<br><br>",
"__Installation on Linux__<br>",
"User Guide: 2.2 Linux<br><br>",
"__Installation on Windows__<br>",
"User Guide: 2.1 Windows<br><br>",
"__Installting and starting up__<br>",
"Language Guide: 2.1 Installing and Starting Up<br><br>",
"__interactive__<br>",
"Function Library Guide: 2.5.3 interactive<br><br>",
"__interactive expressions__<br>",
"Language Guide: 2.6.4 Execute B4P Expressions Interactively<br><br>",
"__Interactive help__<br>",
"Language Guide: 2.6.2 Interactive Help<br><br>",
"__interactive mode__<br>",
"Language Guide: 2.6 Interactive Mode<br><br>",
"__Interactive mode workflow__<br>",
"User Guide: 3.2 Interactive Mode Workflow<br><br>",
"__interactive statements__<br>",
"Language Guide: 2.6.3 Execute B4P Statements Interactively<br><br>",
"__Interpolation Examples__, __interpolation examples__<br>",
"Function Library Guide: 5.5.5.1 Interpolation Examples Visualized<br><br>",
"__Introduction__<br>",
"Language Guide: 1 Introduction<br><br>",
"__Introduction to User-Defined Functions__<br>",
"Language Guide: 8.6 Introduction to User-Defined Functions<br><br>",
"__irr__<br>",
"Function Library Guide: 5.7.2 irr - Internal Rate of Return<br><br>",
"__is integer__, __is integer or blank__, __is numeric__, __is numeric or blank__, __is strictly integer__, __is strictly integer or blank__, __is strictly numeric__, __is strictly numeric or blank__<br>",
"Function Library Guide: 5.1.1 is numeric / integer - Functions<br><br>" ],
"Description 11:J" : [
"__join__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join if__, __join if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__join ignore blanks__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join ignore blanks if__, __join ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__join unique__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join unique if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__join unique ignore blanks__<br>",
"Function Library Guide: 4.11 join ...<br><br>",
"__join unique ignore blanks if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__json to variable__<br>",
"Function Library Guide: 10.3.2 json to variable ...<br><br>" ],
"Description 12:K" : [
"__Key Benefits__<br>",
"User Guide: 1.1 Key Benefits<br><br>",
"__Key Features__<br>",
"User Guide: 1.2 Key Features<br><br>" ],
"Description 13:L" : [
"__Language pitfalls__<br>",
"Language Guide: 3.11 Language Pitfalls<br><br>",
"__left__<br>",
"Function Library Guide: 6.1.5 left ... (string function)<br><br>",
"__left__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left include__<br>",
"Function Library Guide: 6.1.5 left ... (string function)<br><br>",
"__left include__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left last match__<br>",
"Function Library Guide: 6.1.5 left ... (string function)<br><br>",
"__left last match__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left last match include__<br>",
"Function Library Guide: 6.1.5 left ... (string function)<br><br>",
"__left last match include__, __left [parameter set function]__<br>",
"Function Library Guide: 8.1.3 left ... (parameter set function)<br><br>",
"__left [string function]__<br>",
"Function Library Guide: 6.1.5 left ... (string function)<br><br>",
"__length__<br>",
"Function Library Guide: 6.1.4 length ... (string function)<br><br>",
"__length__<br>",
"Function Library Guide: 8.1.1 length ... (parameter set function)<br><br>",
"__length of literals__<br>",
"Language Guide: 3.7.1.1 Literals - Indexing<br><br>",
"__length of parameter sets__<br>",
"Language Guide: 3.7.6.1 Parameter sets - Indexing<br><br>",
"__length [parameter set function]__<br>",
"Function Library Guide: 8.1.1 length ... (parameter set function)<br><br>",
"__length [string function]__<br>",
"Function Library Guide: 6.1.4 length ... (string function)<br><br>",
"__license apply key__<br>",
"Function Library Guide: 12.4.3 license apply key<br><br>",
"__license provide identification__<br>",
"Function Library Guide: 12.4.2 license provide identification<br><br>",
"__Licensing__<br>",
"User Guide: 5.1 Licensing<br><br>",
"__licensing__<br>",
"Language Guide: 2.5 Licensing<br><br>",
"__licensing and privileges__<br>",
"Function Library Guide: 12.4 Licensing and Privileges<br><br>",
"__lighten colors__<br>",
"Function Library Guide: 9.6.1.3 lighten colors<br><br>",
"__linear__, __linear equation__<br>",
"Function Library Guide: 5.4.4 linear - Solve Linear Equations<br><br>",
"__linear interpolation__<br>",
"Function Library Guide: 5.5.5 Interpolation Functions<br><br>",
"__linear regression__<br>",
"Function Library Guide: 5.5.4 Linear and Exponential Regression<br><br>",
"__Linux Download__<br>",
"User Guide: 2.2.1 Linux - Download<br><br>",
"__Linux Getting Started__<br>",
"User Guide: 2.2.3 Linux - Getting Started<br><br>",
"__Linux Installation__<br>",
"User Guide: 2.2.2 Linux - Installation<br><br>",
"__list global variables__, __list local variables__<br>",
"Function Library Guide: 3.3.3 list variables ...<br><br>",
"__list of Locales__<br>",
"Language Guide: 3.9 Locales<br><br>",
"__list of parameter types in user functions__<br>",
"Function Library Guide: 2.3.3 Parameter Types in User-Defined Functions<br><br>",
"__list of system variables__<br>",
"Language Guide: 4.1.3.1 List of System Variables<br><br>",
"__list system variables__, __list variables__<br>",
"Function Library Guide: 3.3.3 list variables ...<br><br>",
"__listing directories and files__<br>",
"Function Library Guide: 11.2 Listing and Searching Directories and Files<br><br>",
"__literal__<br>",
"Function Library Guide: 4.1 literal, quoted literal, softquoted literal<br><br>",
"__Literal Constants__<br>",
"Language Guide: 3.5 Literal Constants<br><br>",
"__literal conversion__, __literal conversion functions__<br>",
"Function Library Guide: 4.1 literal, quoted literal, softquoted literal<br><br>",
"__literal functions__<br>",
"Function Library Guide: 6 String Functions<br><br>",
"__literal to literal conversion and formatting__, __Literal to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.1 Literal to Literal Formatting<br><br>",
"__literals indexing__<br>",
"Language Guide: 3.7.1.1 Literals - Indexing<br><br>",
"__ln__<br>",
"Function Library Guide: 5.2.4 Logarithmic Functions<br><br>",
"__Loading and saving tables__<br>",
"Function Library Guide: 9.1.1 Loading and Saving Tables<br><br>",
"__Loading and saving variables__<br>",
"Function Library Guide: 10.3 Loading and Saving Variables<br><br>",
"__loading files__<br>",
"Language Guide: 3.8.2 Loading Files - Character sets<br><br>",
"__Loading HTML files__, __loading HTML files__<br>",
"Function Library Guide: 9.1.1.1.1 Loading HTML files<br><br>",
"__Loading JSON files__, __loading JSON files__<br>",
"Function Library Guide: 9.1.1.1.3 Loading JSON files<br><br>",
"__Loading XML files__, __loading XML files__<br>",
"Function Library Guide: 9.1.1.1.2 Loading XML files<br><br>",
"__local variables__<br>",
"Language Guide: 4.1.2 Local Variables<br><br>",
"__locale__, __Locales__<br>",
"Language Guide: 3.9 Locales<br><br>",
"__locate differences__<br>",
"Function Library Guide: 6.1.12 locate differences<br><br>",
"__log__, __logarithmic functions__<br>",
"Function Library Guide: 5.2.4 Logarithmic Functions<br><br>",
"__logical and__<br>",
"Language Guide: 6.2.4.1 Logical And<br><br>",
"__logical operators__<br>",
"Language Guide: 6.2.4 Logical Operators<br><br>",
"__logical or__<br>",
"Language Guide: 6.2.4.2 Logical Or<br><br>",
"__Looking up other tables__<br>",
"Function Library Guide: 9.5.2 Looking up Other Tables<br><br>",
"__lookup access exception handling__<br>",
"Language Guide: 5.1.9 Lookup Access Exception Handling<br><br>",
"__Loops__<br>",
"Function Library Guide: 2.2 Loops<br><br>",
"__Loops__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>" ],
"Description 14:M" : [
"__MacOS Download__<br>",
"User Guide: 2.3.2 MacOS - Download<br><br>",
"__MacOS Getting Started__<br>",
"User Guide: 2.3.4 MacOS - Getting Started<br><br>",
"__MacOS Installation__<br>",
"User Guide: 2.3.3 MacOS - Installation<br><br>",
"__MacOS Prerequisites__<br>",
"User Guide: 2.3.1 MacOS - Prerequisites<br><br>",
"__manipulating directories and files__<br>",
"Function Library Guide: 11.3 Manipulating Directories and Files<br><br>",
"__Mathematics and Statistics__<br>",
"Function Library Guide: 5 Mathematics and Statistics<br><br>",
"__matrix determinant__<br>",
"Function Library Guide: 5.4.2 mdet - Matrix Determinant<br><br>",
"__matrix division__<br>",
"Function Library Guide: 5.4.3 mmul, mmdiv - Multiplication and Division<br><br>",
"__matrix functions__<br>",
"Function Library Guide: 5.4 Matrix Functions<br><br>",
"__matrix inversion__<br>",
"Function Library Guide: 5.4.1 minv - Matrix Inversion<br><br>",
"__matrix manipulation functions__, __matrix manipulations__<br>",
"Function Library Guide: 8.2 Matrix Manipulation Functions<br><br>",
"__matrix mathematics__<br>",
"Language Guide: 6.3.3 Matrix Operations Summary<br><br>",
"__matrix multiplication__<br>",
"Function Library Guide: 5.4.3 mmul, mmdiv - Multiplication and Division<br><br>",
"__matrix operations summary__<br>",
"Language Guide: 6.3.3 Matrix Operations Summary<br><br>",
"__matrix table access__, __matrix table accesses__<br>",
"Language Guide: 5.1.4 Matrix Table Access<br><br>",
"__max 123__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max 123 if__, __max 123 if any__, __max 123 ignore zero if__, __max 123 ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max 124 ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max abc__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__max abc if__, __max abc if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max abc ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__max abc ignore case if__, __max if__, __max if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max ignore blanks__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__max ignore blanks if__, __max ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max ignore zero__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__max ignore zero if__, __max ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max literal__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__max literal if__, __max literal if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max literal ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__max literal ignore case if__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max numeral__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max numeral if__, __max numeral if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__max numeral ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__max numeral ignore zero if__, __max numeral ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__mdet__<br>",
"Function Library Guide: 5.4.2 mdet - Matrix Determinant<br><br>",
"__mdiv__<br>",
"Function Library Guide: 5.4.3 mmul, mmdiv - Multiplication and Division<br><br>",
"__median__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__median if__, __median if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__median ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__median ignore zero if__, __median ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__member count__<br>",
"Function Library Guide: 10.2.5 member count<br><br>",
"__memory effect__<br>",
"Language Guide: 5.2 Header Names - Memory Effect<br><br>",
"__merging two football clubs__<br>",
"User Guide: 4.1 Football team merger<br><br>",
"__middle__<br>",
"Function Library Guide: 6.1.7 middle ... (string function)<br><br>",
"__middle__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle include__<br>",
"Function Library Guide: 6.1.7 middle ... (string function)<br><br>",
"__middle include__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle until__<br>",
"Function Library Guide: 6.1.7 middle ... (string function)<br><br>",
"__middle until__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle until include__<br>",
"Function Library Guide: 6.1.7 middle ... (string function)<br><br>",
"__middle until include__, __middle [parameter set function]__<br>",
"Function Library Guide: 8.1.5 middle ... (parameter set function)<br><br>",
"__middle [string function]__<br>",
"Function Library Guide: 6.1.7 middle ... (string function)<br><br>",
"__min__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min 123__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min 123 if__, __min 123 if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min 123 ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min 123 ignore zero if__, __min 123 ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min abc if__, __min abc if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore blanks__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min abc ignore blanks if__, __min abc ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore both__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min abc ignore both if__, __min abc ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min abc ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min abc ignore case if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min and max functions__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min and max functions on literals__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min and max functions on numerals__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min if__, __min if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min ignore blanks__<br>",
"Function Library Guide: 5.3.2 min, max Functions<br><br>",
"__min ignore blanks if__, __min ignore blanks if any__, __min ignore zero if__, __min ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min literal__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min literal if__, __min literal if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min literal ignore blanks__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min literal ignore blanks if__, __min literal ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min literal ignore both__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min literal ignore both if__, __min literal ignore both if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min literal ignore case__<br>",
"Function Library Guide: 5.3.3 min, max Functions on Literals<br><br>",
"__min literal ignore case if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min numeral__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min numeral if__, __min numeral if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__min numeral ignore zero__<br>",
"Function Library Guide: 5.3.4 min, max Functions on Numerals<br><br>",
"__min numeral ignore zero if__, __min numeral ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__minute__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__minv__<br>",
"Function Library Guide: 5.4.1 minv - Matrix Inversion<br><br>",
"__Miscellaneous Features__<br>",
"Language Guide: 3.10 Miscellaneous Features<br><br>",
"__mmul__<br>",
"Function Library Guide: 5.4.3 mmul, mmdiv - Multiplication and Division<br><br>",
"__mod__, __modulo__<br>",
"Function Library Guide: 5.1.5 mod - Modulo function<br><br>",
"__month__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__move cursor__<br>",
"Function Library Guide: 3.2.2 cursor<br><br>",
"__mul__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__Multi-table integration__<br>",
"Function Library Guide: 9.5 Multi-Table Integration<br><br>",
"__multiplication__<br>",
"Language Guide: 6.2.1.3 Multiplications<br><br>",
"__My B4P Init.b4p__<br>",
"Language Guide: 2.4 User Initialization Program<br><br>" ],
"Description 15:N" : [
"__name__<br>",
"Function Library Guide: 10.1.4 name<br><br>",
"__nearest neighbor interpolation__, __nearest right neighbor interpolation__<br>",
"Function Library Guide: 5.5.5 Interpolation Functions<br><br>",
"__negative indexing__<br>",
"Language Guide: 3.10.2 Negative Indexing<br><br>",
"__nested partial table specification__, __nested partial table specifications__<br>",
"Language Guide: 5.1.6 Nested Partial Table Specification<br><br>",
"__not equal to__<br>",
"Language Guide: 6.2.2.2 Not Equal to<br><br>",
"__null__, __null function__<br>",
"Function Library Guide: 2.8.1 null - Function<br><br>",
"__numeral__, __numeral conversion function__<br>",
"Function Library Guide: 4.2 numeral<br><br>",
"__numeral to literal conversion and formatting__, __Numeral to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.3 Numeral to Literal Formatting<br><br>",
"__Numeric Constants__<br>",
"Language Guide: 3.6 Numeric Constants<br><br>" ],
"Description 16:O" : [
"__odd__, __odd numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__office document properties__<br>",
"Function Library Guide: 11.2.7 office document properties<br><br>",
"__once__, __one-time execution__<br>",
"Function Library Guide: 2.1.3 once<br><br>",
"__one-time execution__<br>",
"Function Library Guide: 10.1.8 global<br><br>",
"__Open-ended ranges__<br>",
"Language Guide: 7.1.3 Transactions from Variables to Tables<br><br>",
"__Operating System Commands__<br>",
"Language Guide: 2.6.8 Operating System Commands<br><br>",
"__or__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__OR Transactions between tables__<br>",
"Language Guide: 7.3.4 &vert; Transactions between Tables<br><br>",
"__OR Transactions between variables__<br>",
"Language Guide: 7.3.1 &vert; Transactions between Variables<br><br>",
"__OR Transactions from tables to variables__<br>",
"Language Guide: 7.3.2 &vert; Transactions from Tables to Variables<br><br>",
"__OR Transactions from variables to tables__<br>",
"Language Guide: 7.3.3 &vert; Transactions from Variables to Tables<br><br>",
"__OS Commands__<br>",
"Language Guide: 2.6.8 Operating System Commands<br><br>",
"__Other Control Flow Functions__<br>",
"Function Library Guide: 2.8 Other Control Flow Functions<br><br>",
"__Other string functions__<br>",
"Function Library Guide: 6.3 Miscellaneous String Functions<br><br>",
"__outside__<br>",
"Function Library Guide: 6.1.8 outside ... (string function)<br><br>",
"__outside__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside exclude__<br>",
"Function Library Guide: 6.1.8 outside ... (string function)<br><br>",
"__outside exclude__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside until__<br>",
"Function Library Guide: 6.1.8 outside ... (string function)<br><br>",
"__outside until__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside until exclude__<br>",
"Function Library Guide: 6.1.8 outside ... (string function)<br><br>",
"__outside until exclude__, __outside [parameter set function]__<br>",
"Function Library Guide: 8.1.6 outside ... (parameter set function)<br><br>",
"__outside [string function]__<br>",
"Function Library Guide: 6.1.8 outside ... (string function)<br><br>",
"__overview__<br>",
"User Guide: 1 Overview<br><br>" ],
"Description 17:P" : [
"__parallel__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__parallel if__, __parallel if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__parameter set__<br>",
"Function Library Guide: 2.2.6 for all parameters<br><br>",
"__parameter set__, __parameter set conversion function__<br>",
"Function Library Guide: 4.9 parameter set<br><br>",
"__parameter set extraction functions__<br>",
"Function Library Guide: 8.1 Set Search and Extraction Functions<br><br>",
"__parameter set functions__<br>",
"Function Library Guide: 8 Parameter Set Functions<br><br>",
"__parameter set indexing__<br>",
"Language Guide: 3.7.6.1 Parameter sets - Indexing<br><br>",
"__parameter set or literal__<br>",
"Language Guide: 8.4.1 Parameter Set or Literal (Func. Param. Type)<br><br>",
"__parameter set search and extraction__, __parameter set search functions__<br>",
"Function Library Guide: 8.1 Set Search and Extraction Functions<br><br>",
"__Parameter Set to literal conversion and formatting__, __Parameter Set to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.5 Parameter Set to Literal Formatting<br><br>",
"__parameter set value ranges__<br>",
"Language Guide: 3.7.6.3 Parameter sets - Value Ranges<br><br>",
"__parameter set value repetitions__<br>",
"Language Guide: 3.7.6.4 Parameter sets - Value Repetitions<br><br>",
"__partial table referencee__, __partial table references__, __partial table specification__, __partial table specifications__<br>",
"Language Guide: 5.1.5 Partial Table Specification<br><br>",
"__path names__<br>",
"Language Guide: 3.8.1 Path and File Names<br><br>",
"__pause__<br>",
"Function Library Guide: 2.5.1 pause<br><br>",
"__pick__<br>",
"Function Library Guide: 2.6.1 select, pick<br><br>",
"__pick by value__<br>",
"Function Library Guide: 2.6.4 select / pick by value<br><br>",
"__pick if__<br>",
"Function Library Guide: 2.6.2 select if, pick if<br><br>",
"__pick ifs__<br>",
"Function Library Guide: 2.6.3 select ifs, pick ifs<br><br>",
"__Pivoting and consolidating tables__<br>",
"Function Library Guide: 9.4.5 Pivoting and Conosolidating Tables<br><br>",
"__plain date__, __plain dates__<br>",
"Language Guide: 3.7.3 Dates<br><br>",
"__plain numeral__, __plain numerals__<br>",
"Language Guide: 3.7.2 Numerals<br><br>",
"__polynomial interpolation__<br>",
"Function Library Guide: 5.5.5 Interpolation Functions<br><br>",
"__pow__, __power function__<br>",
"Function Library Guide: 5.2.2 pow - Power Function<br><br>",
"__print__, __print line__<br>",
"Function Library Guide: 3.1.1 echo, print ...<br><br>",
"__Procedure call__, __Procedure calls__<br>",
"Language Guide: 8 Functions and Procedures<br><br>",
"__Processing headers__<br>",
"Function Library Guide: 9.4.1 Checking and Processing Headers<br><br>",
"__Processing table columns__<br>",
"Function Library Guide: 9.4.2 Processing Table Columns<br><br>",
"__Processing table contents__<br>",
"Function Library Guide: 9.4.4 Processing Table Contents<br><br>",
"__Processing table rows__<br>",
"Function Library Guide: 9.4.3 Processing Table Rows<br><br>",
"__Processing tables__<br>",
"Function Library Guide: 9.4 Processing Tables<br><br>",
"__product__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product if__, __product if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__product ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product ignore blanks if__, __product ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__product ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__product ignore zero if__, __product ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__Programming mode workflow__<br>",
"User Guide: 3.3 Programming Mode Workflow<br><br>",
"__prompt__<br>",
"Function Library Guide: 3.3.1 prompt<br><br>",
"__protect__, __protect recursive__<br>",
"Function Library Guide: 10.1.6 protect ...<br><br>",
"__protecting setting__, __protecting variables__, __protection settings__<br>",
"Language Guide: 4.5 Protecting Variables<br><br>",
"__pure date__<br>",
"Function Library Guide: 4.5 date, pure date, date time<br><br>",
"__pure time__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>" ],
"Description 18:Q" : [
"__quarter__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>",
"__quote path__<br>",
"Function Library Guide: 12.1.2 quote path<br><br>",
"__Quoted Literals__<br>",
"Language Guide: 3.5.3 Quoted Literals<br><br>" ],
"Description 19:R" : [
"__random__<br>",
"Function Library Guide: 5.1.6 random - Random Integers<br><br>",
"__random letters__, __random string__<br>",
"Function Library Guide: 6.3.1 random string, random letters<br><br>",
"__Ranking options__<br>",
"Function Library Guide: 14.1 Sorting and Ranking Options<br><br>",
"__read access__, __read access repeat if locked__<br>",
"Function Library Guide: 11.1.2 read access ..., write access ...<br><br>",
"__Reading and writing tables__<br>",
"Function Library Guide: 9.2.2 Reading and Writing Tables<br><br>",
"__redim__<br>",
"Function Library Guide: 10.2.1 dim / redim<br><br>",
"__redim protect__<br>",
"Function Library Guide: 10.2.2 dim / redim protect<br><br>",
"__redirecting references__<br>",
"Language Guide: 4.4.3 Redirecting References<br><br>",
"__References in member variables__<br>",
"Language Guide: 4.4.6 References in Member Variables<br><br>",
"__references to variables__<br>",
"Language Guide: 4.4 References to Variables<br><br>",
"__registry access functions__<br>",
"Function Library Guide: 12.3 Registry Access Functions<br><br>",
"__regression__<br>",
"Function Library Guide: 5.5.4 Linear and Exponential Regression<br><br>",
"__release__<br>",
"Function Library Guide: 10.4.1 release<br><br>",
"__release all__<br>",
"Function Library Guide: 10.4.2 release all<br><br>",
"__Releasing references__<br>",
"Language Guide: 4.4.5 Releasing References<br><br>",
"__renaming and spitting tables__<br>",
"Function Library Guide: 9.4.6 Copying, Renaming and Splitting Tables<br><br>",
"__replace__, __replace all__<br>",
"Function Library Guide: 6.1.2 replace, replace all<br><br>",
"__reschedule__<br>",
"Function Library Guide: 7.1.7 reschedule<br><br>",
"__reserved keywords__<br>",
"Language Guide: 3.5.4 Reserved Keywords<br><br>",
"__Resident attributes functions__<br>",
"Function Library Guide: 10.5 Resident Attributes Functions<br><br>",
"__resolve directory name__, __resolve file name__, __resolve path name__<br>",
"Function Library Guide: 11.2.6 resolve path/directory/file name<br><br>",
"__return__<br>",
"Function Library Guide: 2.3.4 return<br><br>",
"__right__<br>",
"Function Library Guide: 6.1.6 right ... (string function)<br><br>",
"__right__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right include__<br>",
"Function Library Guide: 6.1.6 right ... (string function)<br><br>",
"__right include__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right last match__<br>",
"Function Library Guide: 6.1.6 right ... (string function)<br><br>",
"__right last match__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right last match include__<br>",
"Function Library Guide: 6.1.6 right ... (string function)<br><br>",
"__right last match include__, __right [parameter set function]__<br>",
"Function Library Guide: 8.1.4 right ... (parameter set function)<br><br>",
"__right [string function]__<br>",
"Function Library Guide: 6.1.6 right ... (string function)<br><br>",
"__rms__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms if__, __rms if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__rms ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms ignore blanks if__, __rms ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__rms ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__rms ignore zero if__, __rms ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__round__, __round down__, __round up__, __rounding functions__<br>",
"Function Library Guide: 5.1.4 round, round up / down<br><br>",
"__row__<br>",
"Function Library Guide: 9.2.2.1 row<br><br>" ],
"Description 20:S" : [
"__saving files__<br>",
"Language Guide: 3.8.3 Saving Files - Character sets<br><br>",
"__Saving JSON files__<br>",
"Function Library Guide: 9.1.1.4.1 Saving JSON files<br><br>",
"__scope__<br>",
"Function Library Guide: 10.1.3 scope<br><br>",
"__screen color__<br>",
"Function Library Guide: 3.2.3 text / background color<br><br>",
"__script privileges__<br>",
"Function Library Guide: 12.4.1 global / script privileges<br><br>",
"__search files__, __search files recursive__<br>",
"Function Library Guide: 11.2.3 search files ...<br><br>",
"__Search functions__<br>",
"Function Library Guide: 9.3.1 Search Functions<br><br>",
"__Searching and exploring tables__<br>",
"Function Library Guide: 9.3 Searching and Exploring Tables<br><br>",
"__second__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__select__<br>",
"Function Library Guide: 2.6.1 select, pick<br><br>",
"__select by value__<br>",
"Function Library Guide: 2.6.4 select / pick by value<br><br>",
"__select if__<br>",
"Function Library Guide: 2.6.2 select if, pick if<br><br>",
"__select ifs__<br>",
"Function Library Guide: 2.6.3 select ifs, pick ifs<br><br>",
"__serial date__<br>",
"Function Library Guide: 7.1.4 serial date<br><br>",
"__series functions__<br>",
"Function Library Guide: 5.3 Series Functions<br><br>",
"__set__<br>",
"Function Library Guide: 10.2.8 set, set names<br><br>",
"__set locale__<br>",
"Function Library Guide: 12.2 set locale<br><br>",
"__set names__<br>",
"Function Library Guide: 10.2.8 set, set names<br><br>",
"__shifted table column specification__, __shifted table column specifications__<br>",
"Language Guide: 5.1.7 Shifted Table Column Specifications<br><br>",
"__simple references to variables__<br>",
"Language Guide: 4.4.1 Simple References<br><br>",
"__simple table access__<br>",
"Language Guide: 5.1.1 Simple Table Access<br><br>",
"__simple variables__<br>",
"Language Guide: 4.3.1 Simple Variables<br><br>",
"__sin__, __sin deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__sinh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__sleep__<br>",
"Function Library Guide: 7.3.1 sleep, sleep countdown<br><br>",
"__sleep and wait functions__<br>",
"Function Library Guide: 7.3 Sleep and Wait Functions<br><br>",
"__sleep countdown__<br>",
"Function Library Guide: 7.3.1 sleep, sleep countdown<br><br>",
"__sleep until__, __sleep until countdown__<br>",
"Function Library Guide: 7.3.2 sleep until, sleep until countdown<br><br>",
"__smaller than or equal to__<br>",
"Language Guide: 6.2.2.5 Smaller than (or Equal to)<br><br>",
"__smart conversion and formatting__, __smart formatting__, __Smart Formatting Parameters__<br>",
"Function Library Guide: 4.1.7 Smart Formatting<br><br>",
"__smart if numeral__, __smart numeral__, __smart numerals__<br>",
"Function Library Guide: 4.4 smart (if) numeral<br><br>",
"__softquoted literal__<br>",
"Function Library Guide: 4.1 literal, quoted literal, softquoted literal<br><br>",
"__Softquoted Literals__<br>",
"Language Guide: 3.5.2 Softquoted Literals<br><br>",
"__Sorting options__<br>",
"Function Library Guide: 14.1 Sorting and Ranking Options<br><br>",
"__specifying members with parameter sets__<br>",
"Language Guide: 4.3.5 Parameter Sets Specifying Members<br><br>",
"__spline interpolation__<br>",
"Function Library Guide: 5.5.5 Interpolation Functions<br><br>",
"__spontaneous array creation__<br>",
"Language Guide: 4.3.2 Arrays<br><br>",
"__sqrt__, __Square Root__<br>",
"Function Library Guide: 5.2.1 sqrt - Square Root<br><br>",
"__start__, __start B4P program__<br>",
"Function Library Guide: 2.4.1 start<br><br>",
"__Start or include Beyond4P Programs__, __start programs__<br>",
"Function Library Guide: 2.4 Start or include Beyond4P Programs<br><br>",
"__Starting Behavior__<br>",
"Language Guide: 2.3 Starting Behavior<br><br>",
"__starting directory__<br>",
"Function Library Guide: 11.1.4 starting directory<br><br>",
"__statements__<br>",
"Function Library Guide: 2.7.3 statements<br><br>",
"__Statements [func params]__<br>",
"Language Guide: 8.4.3.4 Statements (func. params)<br><br>",
"__statements [function]__<br>",
"Function Library Guide: 2.7.3 statements<br><br>",
"__statistics functions__<br>",
"Function Library Guide: 5.5 Statistics Functions<br><br>",
"__stop__<br>",
"Function Library Guide: 2.5.2 stop<br><br>",
"__strictly equal to__<br>",
"Language Guide: 6.2.2.3 Strictly Equal to<br><br>",
"__strictly not equal to__<br>",
"Language Guide: 6.2.2.4 Strictly Not Equal to<br><br>",
"__string extraction functions__<br>",
"Function Library Guide: 6.1 String Search and Extraction Functions<br><br>",
"__string functions__<br>",
"Function Library Guide: 6 String Functions<br><br>",
"__string search and extraction__, __string search functions__<br>",
"Function Library Guide: 6.1 String Search and Extraction Functions<br><br>",
"__structure__<br>",
"Function Library Guide: 10.2.4 structure, structure protect<br><br>",
"__structure members__<br>",
"Language Guide: 4.3.3 Structures<br><br>",
"__structure protect__<br>",
"Function Library Guide: 10.2.4 structure, structure protect<br><br>",
"__structure to array__, __structure to array recursive__<br>",
"Function Library Guide: 10.2.6 structure to array ...<br><br>",
"__structures__<br>",
"Language Guide: 4.3.3 Structures<br><br>",
"__sub__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__subset__, __subset ignore blanks__, __subset ignore both__, __subset ignore case__, __subset recursive__, __subset recursive ignore blanks__, __subset recursive ignore both__, __subset recursive ignore case__<br>",
"Function Library Guide: 8.1.9 subset ...<br><br>",
"__substitute__, __substitute all__<br>",
"Function Library Guide: 6.1.3 substitute, substitute all<br><br>",
"__subtraction__<br>",
"Language Guide: 6.2.1.2 Subtractions<br><br>",
"__sum__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__sum if__, __sum if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__switch__<br>",
"Function Library Guide: 2.1.4 switch, check<br><br>",
"__system__<br>",
"Function Library Guide: 12.1.1 system<br><br>",
"__system functions__<br>",
"Function Library Guide: 12 System Functions<br><br>",
"__system variables__<br>",
"Language Guide: 4.1.3 System Variables<br><br>" ],
"Description 21:T" : [
"__table access methods__<br>",
"Language Guide: 5.1 Accessing Tables<br><br>",
"__table add missing row__<br>",
"Function Library Guide: 9.2.1.5 table (write or) add missing row<br><br>",
"__table add row__<br>",
"Function Library Guide: 9.2.1.4 table add / write row<br><br>",
"__table append__<br>",
"Function Library Guide: 9.2.1.2 table initialize/append ...<br><br>",
"__table append blank rows__<br>",
"Function Library Guide: 9.2.1.3 table append blank rows<br><br>",
"__table append on same field__, __table append on same row__<br>",
"Function Library Guide: 9.2.1.2 table initialize/append ...<br><br>",
"__table arrange__, __table arrange with spacing__<br>",
"Function Library Guide: 9.5.3.8 table arrange ...<br><br>",
"__table check duplicates__, __table check duplicates ignore blanks__, __table check duplicates ignore blanks selected rows__, __table check duplicates ignore case__, __table check duplicates ignore case selected rows__, __table check duplicates ingore both__, __table check duplicates ingore both selected rows__, __table check duplicates selected rows__<br>",
"Function Library Guide: 9.5.1.3 table check duplicates ...<br><br>",
"__table check header__<br>",
"Function Library Guide: 9.4.1.1 table check header<br><br>",
"__table check headers__, __table check headers silently__<br>",
"Function Library Guide: 9.4.1.3 table check headers ...<br><br>",
"__table check row__<br>",
"Function Library Guide: 9.4.3.8 table check row<br><br>",
"__table clear__<br>",
"Function Library Guide: 9.2.3.1 table clear ...<br><br>",
"__table column number__<br>",
"Function Library Guide: 9.4.1.2 table column number<br><br>",
"__Table columns__, __table columns as function parameters__<br>",
"Language Guide: 8.4.2 Table Columns (Func. Param. Type)<br><br>",
"__table compare__, __table compare ignore blanks__, __table compare ignore both__, __table compare ignore case__<br>",
"Function Library Guide: 9.5.1.1 table compare ...<br><br>",
"__Table comparison reports__<br>",
"Function Library Guide: 9.5.1.1.2 Table Comparison Reports<br><br>",
"__Table comparison strategy__<br>",
"Function Library Guide: 9.5.1.1.1 Table Comparison Strategy<br><br>",
"__table configure__<br>",
"Function Library Guide: 9.2.1.6 table configure<br><br>",
"__table consolidate__, __table consolidate selected rows__<br>",
"Function Library Guide: 9.4.5.5 table consolidate ...<br><br>",
"__table copy columns__, __table copy columns selected rows__<br>",
"Function Library Guide: 9.4.2.2 table copy columns ...<br><br>",
"__table copy table__<br>",
"Function Library Guide: 9.4.6.2 table copy table<br><br>",
"__table copy table columns__, __table copy table columns selected rows__<br>",
"Function Library Guide: 9.4.6.4 table copy table columns ...<br><br>",
"__table copy table selected rows__<br>",
"Function Library Guide: 9.4.6.3 table copy/split table selected rows<br><br>",
"__table correct headers__, __table correct headers ignore case__<br>",
"Function Library Guide: 9.4.1.5 table correct headers ...<br><br>",
"__table create__, __table create if not existing__<br>",
"Function Library Guide: 9.2.1.1 table create ...<br><br>",
"__table delete__<br>",
"Function Library Guide: 9.2.3.2 table delete ...<br><br>",
"__table delete all blank columns__, __table delete all empty columns__, __table delete all unnamed columns__, __table delete blank columns__<br>",
"Function Library Guide: 9.4.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table delete blank rows__<br>",
"Function Library Guide: 9.4.3.7 table delete blank rows<br><br>",
"__table delete cells selected columns__<br>",
"Function Library Guide: 9.4.4.12 table delete cells selected columns<br><br>",
"__table delete cells selected rows__<br>",
"Function Library Guide: 9.4.4.11 table delete cells selected rows<br><br>",
"__table delete columns__<br>",
"Function Library Guide: 9.4.2.7 table delete columns<br><br>",
"__table delete empty columns__<br>",
"Function Library Guide: 9.4.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table delete remaining columns__<br>",
"Function Library Guide: 9.4.2.8 table delete remaining columns<br><br>",
"__table delete remaining rows__<br>",
"Function Library Guide: 9.4.3.4 table delete remaining rows<br><br>",
"__table delete rows__<br>",
"Function Library Guide: 9.4.3.3 table delete rows<br><br>",
"__table delete selected rows__<br>",
"Function Library Guide: 9.4.3.5 table delete selected rows<br><br>",
"__table delete silently__<br>",
"Function Library Guide: 9.2.3.2 table delete ...<br><br>",
"__table delete unnamed columns__<br>",
"Function Library Guide: 9.4.2.9 table delete blank/empty/unnamed columns<br><br>",
"__table distribute__, __table distribute accumulate__, __table distribute advance__, __table distribute advance accumulate__<br>",
"Function Library Guide: 9.4.5.6 table distribute ...<br><br>",
"__table divide__, __table divide selected rows__<br>",
"Function Library Guide: 9.5.3.7 table divide ...<br><br>",
"__table duplicate columns__<br>",
"Function Library Guide: 9.4.2.3 table duplicate columns ...<br><br>",
"__table exclude__, __table exclude columns__, __table exclude exclude columns__, __table exclude exclusive columns__, __table exclude extend columns__<br>",
"Function Library Guide: 9.5.3.5 table exclude ...<br><br>",
"__table existing__<br>",
"Function Library Guide: 9.2.4.1 table existing<br><br>",
"__table expand__<br>",
"Function Library Guide: 9.5.2.11 table expand ...<br><br>",
"__table expand fast__, __table expand fast ignore case__<br>",
"Function Library Guide: 9.5.2.12 table expand fast ...<br><br>",
"__table expand fast smart__, __table expand fast smart ignore case__<br>",
"Function Library Guide: 9.5.2.14 table expand fast smart ...<br><br>",
"__table expand ignore case__<br>",
"Function Library Guide: 9.5.2.11 table expand ...<br><br>",
"__table expand smart__, __table expand smart ignore case__<br>",
"Function Library Guide: 9.5.2.13 table expand smart ...<br><br>",
"__table explore__<br>",
"Function Library Guide: 9.3.2.1 table explore<br><br>",
"__table extract__<br>",
"Function Library Guide: 9.3.2.3 table extract ...<br><br>",
"__Table file and console IO__<br>",
"Function Library Guide: 9.1 Table File and Console I/O<br><br>",
"__table fill horizontally__, __table fill horizontally selected rows__<br>",
"Function Library Guide: 9.4.4.8 table fill horizontally ...<br><br>",
"__table fill vertically__, __table fill vertically selected rows__<br>",
"Function Library Guide: 9.4.4.7 table fill vertically ...<br><br>",
"__table filter__, __table filter ignore case__<br>",
"Function Library Guide: 9.3.2.2 table filter ...<br><br>",
"__table find row__<br>",
"Function Library Guide: 9.3.1.3 table find row<br><br>",
"__table fit__<br>",
"Function Library Guide: 9.4.4.14 table fit<br><br>",
"__table format numbers__<br>",
"Function Library Guide: 9.4.4.13 table format numbers<br><br>",
"__table functions__<br>",
"Function Library Guide: 9 Table Functions<br><br>",
"__table initialize__<br>",
"Function Library Guide: 9.2.1.2 table initialize/append ...<br><br>",
"__table insert above selected rows__<br>",
"Function Library Guide: 9.4.3.2 table insert ... selected rows<br><br>",
"__table insert columns__, __table insert missing columns__<br>",
"Function Library Guide: 9.4.2.1 table insert (missing) columns<br><br>",
"__table insert rows__<br>",
"Function Library Guide: 9.4.3.1 table insert rows<br><br>",
"__table insert selected rows__<br>",
"Function Library Guide: 9.4.3.2 table insert ... selected rows<br><br>",
"__table integrate__<br>",
"Function Library Guide: 9.5.2.6 table integrate ...<br><br>",
"__table integrate fast__, __table integrate fast ignore case__<br>",
"Function Library Guide: 9.5.2.8 table integrate fast ...<br><br>",
"__table integrate ignore case__<br>",
"Function Library Guide: 9.5.2.6 table integrate ...<br><br>",
"__table integrate once__, __table integrate once ignore case__<br>",
"Function Library Guide: 9.5.2.7 table integrate once ...<br><br>",
"__table integrate smart__<br>",
"Function Library Guide: 9.5.2.9 table integrate smart ...<br><br>",
"__table integrate smart once__, __table integrate smart once ignore case__<br>",
"Function Library Guide: 9.5.2.10 table integrate smart once ...<br><br>",
"__table integrate top down__, __table integratetop down ignore case__<br>",
"Function Library Guide: 9.5.2.6 table integrate ...<br><br>",
"__Table integration operation identifiers__<br>",
"Function Library Guide: 9.5.2.15 Table Integration Operation Identifiers<br><br>",
"__table intersect__, __table intersect columns__, __table intersect exclusive columns__, __table intersect extend columns__, __table intersect intersect columns__<br>",
"Function Library Guide: 9.5.3.3 table intersect ...<br><br>",
"__table keep columns__, __table keep existing columns__<br>",
"Function Library Guide: 9.4.2.6 table keep ... columns<br><br>",
"__table keep selected rows__<br>",
"Function Library Guide: 9.4.3.6 table keep selected rows<br><br>",
"__table length__<br>",
"Function Library Guide: 9.2.4.2 table length<br><br>",
"__table lift contents__, __table lift header row__, __table lift headers__<br>",
"Function Library Guide: 9.4.1.6 table lift ...<br><br>",
"__table list__<br>",
"Function Library Guide: 9.1.2.1 table list<br><br>",
"__table load__<br>",
"Function Library Guide: 9.1.1.1 table load ...<br><br>",
"__table load excel file__<br>",
"Function Library Guide: 9.1.1.3 table load excel file<br><br>",
"__table load unchanged__<br>",
"Function Library Guide: 9.1.1.1 table load ...<br><br>",
"__table lookup__<br>",
"Function Library Guide: 9.5.2.1 table lookup ...<br><br>",
"__table lookup fast__, __table lookup fast ignore case__<br>",
"Function Library Guide: 9.5.2.3 table lookup fast ...<br><br>",
"__table lookup ignore case__<br>",
"Function Library Guide: 9.5.2.1 table lookup ...<br><br>",
"__table lookup integrate ignore case__<br>",
"Function Library Guide: 9.5.2.9 table integrate smart ...<br><br>",
"__table lookup once__, __table lookup once ignore case__<br>",
"Function Library Guide: 9.5.2.2 table lookup once ...<br><br>",
"__table lookup smart__, __table lookup smart ignore case__<br>",
"Function Library Guide: 9.5.2.4 table lookup smart ...<br><br>",
"__table lookup smart once__, __table lookup smart once ignore case__<br>",
"Function Library Guide: 9.5.2.5 table lookup smart once ...<br><br>",
"__table lookup top down__, __table lookup top down ignore case__<br>",
"Function Library Guide: 9.5.2.1 table lookup ...<br><br>",
"__table manipulate__<br>",
"Function Library Guide: 9.4.4.6 table manipulate<br><br>",
"__table max width__<br>",
"Function Library Guide: 9.2.4.4 table min/max width<br><br>",
"__table menu__, __table menu quick__<br>",
"Function Library Guide: 9.1.2.2 table menu ...<br><br>",
"__table merge__, __table merge exclusive columns__, __table merge extend columns__, __table merge intersect columns__, __table merge subtract columns__<br>",
"Function Library Guide: 9.5.3.1 table merge ...<br><br>",
"__table min width__<br>",
"Function Library Guide: 9.2.4.4 table min/max width<br><br>",
"__table move rows__<br>",
"Function Library Guide: 9.4.3.9 table move rows<br><br>",
"__table move selected rows__<br>",
"Function Library Guide: 9.4.3.10 table move selected rows<br><br>",
"__table multiply__, __table multiply selected rows__<br>",
"Function Library Guide: 9.5.3.6 table multiply ...<br><br>",
"__table overlay__, __table overlay columns__, __table overlay exclusive columns__, __table overlay extend columns__, __table overlay intersect columns__<br>",
"Function Library Guide: 9.5.3.2 table overlay/subtract ...<br><br>",
"__table process__<br>",
"Function Library Guide: 9.4.4.1 table process (selected rows)<br><br>",
"__table process all cells__, __table process cells__<br>",
"Function Library Guide: 9.4.4.4 table process cells (selected rows)<br><br>",
"__table process cells in columns__, __table process cells in columns selected rows__<br>",
"Function Library Guide: 9.4.4.5 table process cells in columns (selected rows)<br><br>",
"__table process cells selected rows__<br>",
"Function Library Guide: 9.4.4.4 table process cells (selected rows)<br><br>",
"__table process columns__<br>",
"Function Library Guide: 9.4.4.3 table process (selected) columns<br><br>",
"__table process rows__<br>",
"Function Library Guide: 9.4.4.1 table process (selected rows)<br><br>",
"__table process selected columns__<br>",
"Function Library Guide: 9.4.4.3 table process (selected) columns<br><br>",
"__table process selected rows__<br>",
"Function Library Guide: 9.4.4.1 table process (selected rows)<br><br>",
"__table process selected rows fast__<br>",
"Function Library Guide: 9.4.4.2 table process selected rows fast<br><br>",
"__table rank rows__, __table rank selected rows__<br>",
"Function Library Guide: 9.4.3.13 table rank (selected) rows<br><br>",
"__table read column selected rows__<br>",
"Function Library Guide: 9.2.2.4 table read column selected rows<br><br>",
"__table rearrange columns__, __table rearrange existing columns__<br>",
"Function Library Guide: 9.4.2.5 table rearrange ... columns<br><br>",
"__table rearrange selected rows__<br>",
"Function Library Guide: 9.4.3.11 table rearrange selected rows<br><br>",
"__table references__<br>",
"Language Guide: 5.1 Accessing Tables<br><br>",
"__table rename__<br>",
"Function Library Guide: 9.4.6.1 table rename<br><br>",
"__table rename column headers__, __table rename existing headers__, __table rename headers__<br>",
"Function Library Guide: 9.4.1.4 table rename ... headers<br><br>",
"__table row width__<br>",
"Function Library Guide: 9.2.4.3 table row width<br><br>",
"__table save__, __table save multiple__, __table save with decimal comma__, __table save with local decimal separator__<br>",
"Function Library Guide: 9.1.1.4 table save ...<br><br>",
"__table search__<br>",
"Function Library Guide: 9.3.1.1 table search ...<br><br>",
"__table search header row__<br>",
"Function Library Guide: 9.3.1.6 table search header row<br><br>",
"__table search row__<br>",
"Function Library Guide: 9.3.1.2 table search row<br><br>",
"__table search vertically__<br>",
"Function Library Guide: 9.3.1.1 table search ...<br><br>",
"__table selected column numbers__, __table selected columns__, __table selected headers__<br>",
"Function Library Guide: 9.3.1.5 table selected columns/headers ...<br><br>",
"__table selected rows__<br>",
"Function Library Guide: 9.3.1.4 table selected rows<br><br>",
"__table serialize__, __table serialize all__, __table serialize ignore zero__<br>",
"Function Library Guide: 9.4.5.2 table serialize ...<br><br>",
"__table sort columns__<br>",
"Function Library Guide: 9.4.2.4 table sort columns<br><br>",
"__table sort rows__, __table sort selected rows__<br>",
"Function Library Guide: 9.4.3.12 table sort (selected) rows<br><br>",
"__table split table columns__<br>",
"Function Library Guide: 9.4.6.5 table split table columns ...<br><br>",
"__table split table selected rows__<br>",
"Function Library Guide: 9.4.6.3 table copy/split table selected rows<br><br>",
"__table spread__, __table spread accumulating__<br>",
"Function Library Guide: 9.4.5.3 table spread ...<br><br>",
"__table spread given headers__, __table spread given headers accumulating__<br>",
"Function Library Guide: 9.4.5.4 table spread given headers ...<br><br>",
"__table style cells__<br>",
"Function Library Guide: 9.6.2.4 table style cells<br><br>",
"__table style columns__<br>",
"Function Library Guide: 9.6.2.3 table style columns<br><br>",
"__table style reset__<br>",
"Function Library Guide: 9.6.3.2 table style reset<br><br>",
"__table style rows__<br>",
"Function Library Guide: 9.6.2.2 table style rows<br><br>",
"__table style table__<br>",
"Function Library Guide: 9.6.2.1 table style table<br><br>",
"__table substitute horizontally__, __table substitute horizontally selected rows__<br>",
"Function Library Guide: 9.4.4.10 table substitute horizontally ...<br><br>",
"__table substitute vertically__, __table substitute vertically selected rows__<br>",
"Function Library Guide: 9.4.4.9 table substitute vertically ...<br><br>",
"__table subtract__, __table subtract columns__, __table subtract exclusive columns__, __table subtract extend columns__, __table subtract subtract columns__<br>",
"Function Library Guide: 9.5.3.4 table subtract ...<br><br>",
"__table transpose__<br>",
"Function Library Guide: 9.4.5.1 table transpose<br><br>",
"__table validate__<br>",
"Function Library Guide: 9.5.1.2 table validate<br><br>",
"__table validate - examples__<br>",
"Function Library Guide: 9.5.1.2.2 table validate - Examples<br><br>",
"__table validate - group results__, __table validate - row results__<br>",
"Function Library Guide: 9.5.1.2.1 table validate - Row and Group Results<br><br>",
"__table write column selected rows__<br>",
"Function Library Guide: 9.2.2.5 table write column selected rows<br><br>",
"__table write or add missing row__<br>",
"Function Library Guide: 9.2.1.5 table (write or) add missing row<br><br>",
"__table write row__<br>",
"Function Library Guide: 9.2.1.4 table add / write row<br><br>",
"__tables__<br>",
"Language Guide: 5 Tables<br><br>",
"__tan__, __tan deg__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__tanh__<br>",
"Function Library Guide: 5.2.6 Hyperbolic Functions<br><br>",
"__Terms and Conditions__<br>",
"User Guide: 5 Terms and Conditions<br><br>",
"__text color__<br>",
"Function Library Guide: 3.2.3 text / background color<br><br>",
"__text input output__<br>",
"Function Library Guide: 3.1 Text Input / Output<br><br>",
"__The Language__<br>",
"Language Guide: 3 The Language<br><br>",
"__through-referencing__<br>",
"Language Guide: 4.4.2 Through-Referencing<br><br>",
"__throw__<br>",
"Function Library Guide: 2.5.7 throw<br><br>",
"__time__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>",
"__time and stopwatch functions__<br>",
"Function Library Guide: 7.2 Time and Stopwatch Functions<br><br>",
"__time conversion functions__<br>",
"Function Library Guide: 4.6 time, pure time<br><br>",
"__time functions__<br>",
"Function Library Guide: 7.2 Time and Stopwatch Functions<br><br>",
"__Time Info Functions__<br>",
"Function Library Guide: 7.2.1 hour, minute, second<br><br>",
"__time inside__<br>",
"Function Library Guide: 7.1.1 date inside, time inside<br><br>",
"__tokenize__<br>",
"Function Library Guide: 6.1.10 tokenize<br><br>",
"__Transactions__<br>",
"Language Guide: 7 Transactions<br><br>",
"__Transactions between tables__<br>",
"Language Guide: 7.1.4 Transactions between Tables<br><br>",
"__Transactions between variables__<br>",
"Language Guide: 7.1.1 Transactions between Variables<br><br>",
"__Transactions from tables to variables__<br>",
"Language Guide: 7.1.2 Transactions from Tables to Variables<br><br>",
"__Transactions from variables to tables__<br>",
"Language Guide: 7.1.3 Transactions from Variables to Tables<br><br>",
"__Transactions with ADD assignment operator__<br>",
"Language Guide: 7.4 &#43; Transaction Assignment Operators<br><br>",
"__Transactions with AND assignment operator__<br>",
"Language Guide: 7.2 &amp; Transaction Assignment Operators<br><br>",
"__Transactions with OR assignment operator__<br>",
"Language Guide: 7.3 &vert; Transaction Assignment Operators<br><br>",
"__transcendental functions__<br>",
"Function Library Guide: 5.2 Transcendental Functions<br><br>",
"__translate style attributes for excel__, __translate style attributes for html__<br>",
"Function Library Guide: 9.6.3.1 translate style attributes ...<br><br>",
"__transpose__, __transpose matrices__, __transpose matrix__<br>",
"Function Library Guide: 8.2.5 transpose<br><br>",
"__trigonometric functions__<br>",
"Function Library Guide: 5.2.5 Trigonometric Functions<br><br>",
"__trim__<br>",
"Function Library Guide: 6.1.9 trim ... (string function)<br><br>",
"__trim__<br>",
"Function Library Guide: 8.1.7 trim ... (parameter set function)<br><br>",
"__trim all__<br>",
"Function Library Guide: 6.1.9 trim ... (string function)<br><br>",
"__trim [parameter set function]__<br>",
"Function Library Guide: 8.1.7 trim ... (parameter set function)<br><br>",
"__trim [string function]__<br>",
"Function Library Guide: 6.1.9 trim ... (string function)<br><br>",
"__tv__<br>",
"Function Library Guide: 5.7.3 tv - Terminal Value<br><br>",
"__Two parameter passing methods for series functions__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>",
"__typd detailed__, __type__<br>",
"Function Library Guide: 4.12 type, type detailed<br><br>",
"__type conversion__, __Type Conversion Functions__<br>",
"Function Library Guide: 4 Type Conversion and Formatting<br><br>" ],
"Description 22:U" : [
"__unary operators__<br>",
"Language Guide: 6.1 Unary Operators<br><br>",
"__unless__<br>",
"Function Library Guide: 2.1.1 if, unless<br><br>",
"__unlock__<br>",
"Language Guide: 2.5 Licensing<br><br>",
"__Unquoted Literals__<br>",
"Language Guide: 3.5.1 (Unquoted) Literals<br><br>",
"__until__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>",
"__Updates and Upgrades__<br>",
"User Guide: 2.4 Updates and Upgrades<br><br>",
"__use cases__<br>",
"User Guide: 1.3 Use Cases<br><br>",
"__User Defined Procedures and Functiions__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__user function existing__<br>",
"Function Library Guide: 2.3.5 function / user function existing<br><br>",
"__user functions__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__User initialization program__<br>",
"Language Guide: 2.4 User Initialization Program<br><br>",
"__user parameter types__<br>",
"Function Library Guide: 2.3.3 Parameter Types in User-Defined Functions<br><br>",
"__user procedures__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>",
"__user-defined function__<br>",
"Function Library Guide: 2.3.1 define procedure / function<br><br>",
"__user-defined functions__, __user-defined procedures__, __User-defined procedures and functions__<br>",
"Function Library Guide: 2.3 User-Defined Procedures and Functions<br><br>" ],
"Description 23:V" : [
"__variable__<br>",
"Language Guide: 4 Variables<br><br>",
"__Variable attributes__<br>",
"Language Guide: 4.2 Variable Attributes<br><br>",
"__Variable forms__<br>",
"Language Guide: 4.3 Variable Forms and Trees<br><br>",
"__variable load__<br>",
"Function Library Guide: 10.3.1 variable load ...<br><br>",
"__variable protection__, __variable protections__<br>",
"Language Guide: 4.5 Protecting Variables<br><br>",
"__variable references__<br>",
"Language Guide: 4.4 References to Variables<br><br>",
"__Variable references functions__<br>",
"Function Library Guide: 10.4 Variable References Functions<br><br>",
"__variable save__<br>",
"Function Library Guide: 10.3.3 variable save ...<br><br>",
"__variable scopes__<br>",
"Language Guide: 4.1 Variable Scopes<br><br>",
"__variable to json__<br>",
"Function Library Guide: 10.3.4 variable to json ...<br><br>",
"__variables__<br>",
"Language Guide: 4 Variables<br><br>",
"__variables functions__<br>",
"Function Library Guide: 10 Variables Functions<br><br>",
"__Variables [func params]__<br>",
"Language Guide: 8.4.3.3 Variables (func. params)<br><br>",
"__variance__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance if__, __variance if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__variance ignore blanks__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance ignore blanks if__, __variance ignore blanks if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__variance ignore zero__<br>",
"Function Library Guide: 5.5.1 Basic Statistics Functions<br><br>",
"__variance ignore zero if__, __variance ignore zero if any__<br>",
"Function Library Guide: 5.6 Conditional Combination Functions<br><br>",
"__verbose__, __verbose levels__<br>",
"Language Guide: 3.10.1 Verbose Levels<br><br>",
"__vertical__<br>",
"Function Library Guide: 8.2.2 vertical<br><br>",
"__vertical table access__<br>",
"Language Guide: 5.1.3 Vertical Table Access<br><br>",
"__Vertical table access using parameter sets__<br>",
"Language Guide: 5.1.3.1 Vertical Table Access w. Param. Sets<br><br>",
"__Vertical table access using ranges__<br>",
"Language Guide: 5.1.3.3 Vertical Table Access w. Ranges<br><br>",
"__Vertical table access using wildcards__<br>",
"Language Guide: 5.1.3.2 Vertical Table Access w. Wildcards<br><br>",
"__vertical table accesses__<br>",
"Language Guide: 5.1.3 Vertical Table Access<br><br>",
"__view__<br>",
"Function Library Guide: 13.4 view<br><br>",
"__view reset__<br>",
"Function Library Guide: 13.5 view reset<br><br>",
"__void to literal conversion and formatting__, __Void to Literal Formatting Parameters__<br>",
"Function Library Guide: 4.1.2 Void to Literal Formatting<br><br>" ],
"Description 24:W" : [
"__wait__, __wait countdown__<br>",
"Function Library Guide: 7.3.4 wait, wait countdown<br><br>",
"__wait until__, __wait until countdown__<br>",
"Function Library Guide: 7.3.3 wait until, wait until countdown<br><br>",
"__watch continue__, __watch read__, __watch reset__, __watch start__, __watch stop__<br>",
"Function Library Guide: 7.2.2 Stopwatch Functions<br><br>",
"__weaken colors__<br>",
"Function Library Guide: 9.6.1.5 weaken colors<br><br>",
"__week__<br>",
"Function Library Guide: 7.1.6 week<br><br>",
"__weekday__, __weekday from date__<br>",
"Function Library Guide: 7.1.5 weekday<br><br>",
"__while__<br>",
"Function Library Guide: 2.2.3 while, until<br><br>",
"__whole__, __whole numbers__<br>",
"Function Library Guide: 5.1.2 even, odd, whole<br><br>",
"__wildcard symbols__, __wildcards__<br>",
"Language Guide: 6.2.3.1 Wildcards<br><br>",
"__Windows Download__<br>",
"User Guide: 2.1.1 Windows - Download<br><br>",
"__Windows Getting Started__<br>",
"User Guide: 2.1.3 Windows - Getting Started<br><br>",
"__Windows Installation__<br>",
"User Guide: 2.1.2 Windows - Installation<br><br>",
"__with table__<br>",
"Function Library Guide: 2.8.2 with table<br><br>",
"__Without Transaction Assignment Operators__<br>",
"Language Guide: 7.1 Without Transaction Assignment Operators<br><br>",
"__working directory__<br>",
"Function Library Guide: 11.1.3 working directory<br><br>",
"__write access__, __write access repeat if locked__<br>",
"Function Library Guide: 11.1.2 read access ..., write access ...<br><br>" ],
"Description 25:X" : [
"__xnor__, __xor__<br>",
"Function Library Guide: 5.3.1 Arithmetic and Boolean Series Functions<br><br>" ],
"Description 26:Y" : [
"__year__<br>",
"Function Library Guide: 7.1.2 year, quarter, month, day<br><br>" ],
"Description 27:Z" : [
"__zero members__<br>",
"Language Guide: 4.3.4 Zero Members Variables<br><br>",
"__zip compress__<br>",
"Function Library Guide: 11.4.3 zip compress<br><br>",
"__zip extract all__<br>",
"Function Library Guide: 11.4.2 zip extract all<br><br>",
"__zip extract files__<br>",
"Function Library Guide: 11.4.1 zip extract files<br><br>"
 ]

}
}
