
{

"Welcome" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Table of Contents" ],

"Description 01:" : [
"",
"	<b>B4P is a Low-Code Solution for data analysts to improve their performance in extracting insights from big data.</b>  ",
"",
"	B4P is a data integration and analytics engine with built-in programming language, and is purpose-built for integration",
"	and analysis of large complex datasets, rapidily generating results in Excel and other business intelligence tools. ",
"",
"	<br/><br/>",
"",
"	<img src=\"Images/B4P_General_Overview.png\" alt=\"B4P Overview\"><br/>"
 ]
	,

"Description 02:Getting Started" : [
"",
"	=== 300, 700, noheader, noframe column_1_bold",
"	<a href=\"Images/B4P_Introduction.pdf\" target=\"_blank\"><b>Presentation</b></a>		| Introduction into the B4P language and analytics and execution engine",
"	__User Guide__			| Overview and getting started",
"	__Language Guide__		| Comprehensive introduction to the feature-rich B4P language",
"	__Function Library Guide__	| Library containing ca. 800 procedures and functions",
"	===",
""
 ]
	
},


"Benefits and Features" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Benefits and Features" ],
"Description 01:Introduction" : [
"",
"	B4P, with its full name <b>Beyond Former Expectations</b>, consist of two main building blocks:",
"",
"	* The __B4P Language__",
"	* The __B4P Analytics Engine__",
"",
"	The B4P Analytics Engine is a powerful and yet light-weight interpreter which executes the B4P language reliably and with high performance",
"	and is proven to run on Windows, LINUX and MacOS platforms with both 64-bit Intel/AMD and ARM processors.",
""
 ]
	
},


"Key Benefits" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Benefits" ],
"Description 01:Introduction" : [
"",
"	B4P is a language built on long-lasting experience handling large complex data",
"	from different sources and providing efficient means to integrate, align an analyze the data quickly and efficiently.",
"",
"	* Learn the language quickly",
"	* Low-Code: Minimizes the number of statements needed to solve challenging data processing problems",
"	* Simple:  No advanced programming skills required",
"	* Rapid: Minimizes the time required to find solutions for your problems",
"	* Powerful: Provides maximum processing performance, especially with large data",
"	* Legible: The language is easy to read and understand",
"	* Universal: Able to access the Internet and negotiate with standard file formats like Excel, HTML, JSON, CSV, etc.",
"	* Portable: The language and execution engine requires no further installation of external libraries",
"	* Focused: Focus on the problem to solve, without wasting time coding algorithic details",
"	* Comprehensie: Contains library of over 800 functions, with focus on table data processing",
"",
"	<b>Focus on solving the problems</b>",
"",
"	<br/><img src=\"Images/Description_Introduction_Flowchart.png\" alt=\"B4P Typical Data Processing Steps\">",
"",
"	<br><br>",
"	By experience, successful solutions have been provided already <b>during the first consultation</b> with colleagues who needed solutions for",
"	their data processing needs.  They originally expected a cost and time estimation and a project plan for the project in order to approve the ",
"	budget for hiring programmers or consultants, and all that ended up not necessary at all because a few lines of code solved the problem",
"	and a lot of money saved.",
"",
"	<br><br>",
"	The full web documentation has been compiled with a B4P program which extracts embedded raw documentation from source code and text files,",
"	creates one master file (JSON) and generates all pages including tables of contents, illustrations, and code examples which are automatically executed",
"	and their results included in the documentation.",
""
 ]
	
},

// ------------------------------------------------------------------------------------------------
"Key Features":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Features" ],
"Description 01:Key Benefits" : [
"",
"	The overall intention is to provide a tool for you which helps to solve sophisticated problems with large amounts of data involved:",
"	* <b>Simple</b> procedural language easy to read, understand and lear.",
"	* Powerful langauge semantics <b>minimizes the number of statements</b> needed to solve the problem.",
"	* <b>Tables</b> of any size are one of the main data storage models and B4P is optimized for this",
"	* <b>No programming bureaucracy</b> such as declaring all the variables you need.",
"	* Significantly less need for <i>fine grained</i> programming like formulating loops, detailed algorithms, etc.",
"	* B4P understands data formats such as <b>Excel, HTML, XML, JSON, CSV</b>, etc. to retrieve data from Excel, database and the Internet directly",
"	* Extremely <b>flexible in naming</b> variables, tables, functions, procedures, etc. (natural language).",
"	* The execution engine and all libary files are very lean, very robust and start quickly.",
"	** Powerful table processing functions available such as merging, consolidating and applying pivots on tables",
"	** Powerful vector and matrix operations available for high-performance calculations on your tables and data",
"	* High focus on <b>cross-platform portability</b> (Windows, LINUX, etc.), enabling to run the same B4P program on different platforms.",
"",
"	You will get to full speed quickly if you have some basic programming experience with a high level programming language or a macro",
"	language such as Visual Basic inside Excel.  B4P requires no knowledge about object oriented programming and specific algorithms to manage",
"	big data (e.g. indexing).  The syntax is, even though looking differently from other langauges, incredibly easy to understand and to use.",
"	In contrast to other programming langages, much fewer statements and time are needed, no additional libraries need to be installed ",
"	separately (like Panda for Python) and you experience unparalleled machine performance, forgetting the fact that B4P is an interpreted language.",
"",
""
 ]
	,
"Description 02:No Graphic Gadgets" : [
"",
"	Intentionally, B4P does not make use of any visual features such as graphical user interfaces.  For visualization purposes, powerful",
"	and highly standardized tools such as Microsoft Excel providie all features to do the visualziation, creating all required charts, etc.",
"	to round up you presentation.   The philosophy of B4P is to do all data processing first and very rapidly, and creating final Excel files",
"	for visualization purposes.",
"",
"	<br><br>",
"	However, B4P is able to save tables into Excel files, with multiple sheets in one workbook, and, if needed, some formatting and styling already",
"	included (e.g. column widths, fonts, colors, number formats, autofilter, freezing panes, etc.)."
 ]
	
}




,



"Use Cases" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Use cases" ],
"Description 01:Overview" : [
"",
"	A few use cases are described next where B4P can be used easily to address the problem statements and",
"	provide the solutions with maximum performance and accuracy.",
"",
"	<br><br>",
"",
"",
"	B4P is predestined to let you <b>focus on the 'what'</b>, and hot 'how'.  The philosophy with this language is to express the",
"	steps briefly, with very few smart statements and using loops and variables as little as possible.  A large __function library__ is available",
"	to provide various means to solve your data processing solutions efficiently.",
"",
""
 ]
	
},

"Different data from different sources" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Use case - Different data from different sources" ],
"Description 01:Problem Statement" : [
"",
"	Your organization has more than 25 branch offices in various countries around the world.  You are requesting product forecasts",
"	from them in regular time intervals.    Because every office is using different systems to store and manage their data,",
"	you will likely receive the information in different formats.  Past attempts asking them to harmonize their systems did not",
"	work because the switchover costs appeared too high.  Some are database exports, and others are hand-crafted",
"	Excel tables.",
"" ],
"Description 02:The Solution" : [
"",
"	* Use different short B4P program routines to read the different data from every branch office",
"	* Automatically check for any inconsistencies, especially if data is provided in hand-made Excel sheets",
"	* Align the data using common header names, e.g. 'Customer Name', 'Deliery Date', etc.",
"	* Merge the data from the different sites",
"	* Notify you if two sites start dealing with the same customer",
"	* Consolidate and aggregate all forecast data according to your specifications",
"	* Add formatting, colors and style to make the report easy to use",
"	* Save the final report.",
""
 ]
	
},



"Machine to Machine Data Transfer" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Use case - Machine to Machine Data Transfer" ],
"Description 01:Problem Statement" : [
"",
"	You want to automate the information exchange between your ERP system (Enterprise Resource Planning) and the web-base",
"	CRM system (Customer Relationship Management).  Both systems provide means to upload and downlaod data with commands,",
"	so you can automate the data exchange entirely.  You want to be notified on discrepancies discovered in both databases",
"	which require manual alignment involving the sales managers.",
"" ],
"Description 02:The Solution" : [
"",
"	* Let B4P initiate the data exports from both CRM and ERP systems",
"	* Check if the customer data and opportunities are matching with each other.  Inform about new customers and opportunities.",
"	* Check consistencies of key dates, for example planned order date.  Consider correcting minor differences (e.g. 1 week or less) automatically or notify sales to check the data",
"	* Refer to a foreign exchange information from a website in case the opportunities are valued in a different currency",
"	* Do necessary format conversions, such as numeric format (One generates EUR values, the other requires them in k EUR, etc.)",
"	* Initiate the data uploads into the ERP and CRM systems respectively",
"	* Generate a report with transactions made and issues requiring attention by sales management.",
""
 ]
	
},


"Analyzing Stock Data" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Use case - Analyzing Stock Data" ],
"Description 01:Problem Statement" : [
"",
"	Do the best with your savings by investing your money in a smart way better than others do.  You have identified multiple web pages which provide",
"	structured corporate information such as",
"	* Stock market data (in HTML format)",
"	* Credit rating information (e.g. from rating agencies like Standard and Poors)",
"	* Financial data of selected businesses (compiled in Excel files you can download)",
"	With all the infomation, you have a neat appraoch to make up you own idea whether the shares are fairly valued, overvalued",
"	or undervalued, so you your own decision base available whether to intiate buying or selling shares.",
"" ],
"Description 02:The Solution" : [
"",
"	* Let download all stock market data on a daily base, as well as credit rating info and othe data.",
"	* Align the data to the company names, making sure no mistakes happen with similarly named businesses.  Use their symbol names as a common key.",
"	* Provide som accompanying information, e.g. the market areas the businesses are active in (e.g. banking and finance, pharmaceuticals, nutrition, etc.)",
"	* Do some calculation, for example if a business is doing better than the average market",
"	* Condense the analytics to a list which is easy to understand",
"	* Add color, formatting and style to make it even easier to read",
"	* Save the file and start investing.",
""
 ]
	
},



"Comparing Bills of Material" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Use case - Comparing Bills of Material" ],
"Description 01:Problem Statement" : [
"",
"	Your enterprise has developed lots of different products which have similarities to a certain extent.  After some time, you have sufficient sales",
"	data available for the different products so you can do a cross-product analysis by checking for commonalities of the components and pre-assembly",
"	units used.  The engineers have provided a large number (200+) of bill of materials (part lists) for the various products, each of them listing",
"	several thousand parts.  You want to identify the commonalities (i.e. same or similar parts used)",
"	among the product variants, and weigh them up with the number of products sold, in order to initiate some strategic improvements in the product portfolio",
"	in order to optimize operational efficiency and profitability.",
"" ],
"Description 02:The Solution" : [
"",
"	* Use a simple statement to identify all bill of material files (do not name them individually in your program)",
"	* Load one file after the other and apply relational algebraic operations (e.g. intersections) in order to spot commonalities",
"	* Identify individual parts and similar pre-assembly units used frequently",
"	* Consolidate the information to an abstraction level you can use a a decision base",
"	* Add format, style and save the work.",
""
 ]
	
}




  }


}
