//
B4PDOCU.START

  "Reserved keywords" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "reserved keywords" ],
    "Keywords":			[ "keywords" ],
    "Description 01:Introduction to reserved keywords"::
	Beyond4P has only six reserved symbols.  If not put into quotation marks, these special symbols are automatically converted into special characters or values.


	=== 120, 120, 360, bold_column_1
	Keyword 	| Meaning | Description
	tab		| Tabulator | Converts to a tab character (ANSI and UNICODE 9)
	new line	| Line Break | Converts to CR+LF (Windows) or LF (LINUX) to continue on the next line
	escape		| Escape chracter | Converts to an escape character (ANSI and UNICODE 27)
	true		| Boolean true  | 'true' as boolean type, not literal
	false		| Boolean false | 'false' as boolean type, not literal
	else		| 'else' in code syntax | To be used in association with <b>if</b>, <b>switch</b> and other control flow functions
	===

	You may wonder why obvious names such as 'if', 'while' and 'for' are not considered as similar reserved keywords.  In Beyond4P, the control flow statements
	are actually procedure names which then influence executing further statements or blocks.  Therefore, you can actually use 'if' as the given function.
	+++,
    "Examples 01:"::
	echo( type(true) );
	echo( 1st line, new line, 2nd line );
	+++,
    "Output 01:":		"automatic",
    "Examples 02:"::
	echo( 1, tab, 2, tab, 3 );
	+++,
    "Output 02:":		"automatic",
    "OS differences":		[ "LINUX uses a different representation of 'new line' than Windows." ],
    "See also":			[ "Control flow functions" ]

  }


B4PDOCU.STOP