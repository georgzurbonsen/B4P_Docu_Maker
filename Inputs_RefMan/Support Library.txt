

This text file contains all relevant function descriptions in the "Support Library".


B4PDOCU.START


"help" :
{
	"Function Names":	[ "help" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function provides an overview of the most important features provided in __interactive__ mode
		such as accessing help and support information, and how B4P statements and expressions can be 
		executed directly as commands.

		<br><br>
		This help feature provides user interaction allowing to browse through different pages.
	+++,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Examples:'help' entered in interactive mode"::
>> help

0. Interactive - Help Table of Contents
________________________________________________________________________________

Page Number

[1]     Entering interactive mode

[2]     Help commands (for help text and accessing B4P documentation)

[3]     Executing B4P statements and expressions by hand

[4]     Basic commands (incl. leaving interactive mode)

[5]     Operating system commands

[6]     Inspecting tables

[7]     Inspecting variables


_______________________________________________________________________________
Page [0]..[7], [N]ext / [P]revious page [C]lear screen on/off  [Q]uit:  Q
>>
+++,
	"See also": [ "docs", "docs search" ]
},



"docs" :
{
	"Function Names":	[ "docs" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function accesses the on-line B4P documentation.
		When calling this function for the very first time without providing a favorite web browser specified in the
		1st function parameter, then you will be asked to choose one.  Make sure that the favorite web browser is already
		installed.

	+++,
	"Call as":		"procedure",
	"Parameter count":	"0 or 1",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description"::
			Specify a valid web browser name:
			=== 100, 400, noframe_1stcolbold, noheader
			Windows	| chrome, edge, explorer
			Linux   | chrome, firefox, brave
			MacOS   | brave, chrome, firefox, safari
			===
			If the entered browser is not valid, then you will be asked to choose one of the valid browsers interactively.
			The chosen browser will be memorized for the next times you are using this function if you do not specify the browser expicitly.<br><br>
			<u>Note</u>: This function does not check if the browser is installed, nor does it search for all browsers installed in your system.
			+++
		}
	],
	"See also": [ "docs search" ]
},





"docs search" :
{
	"Function Names":	[ "docs search" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function uses the keyword provided to access the on-line B4P documentation and opens the page you are looking
		for.  When calling this function for the very first time without providing a favorite web browser specified in the
		2nd function parameter, then you will be asked to choose one.  Make sure that the favorite web browser is already
		installed.

		<br><br>

		If the keyword provided matches with an existing keyword in the online B4P documentation, then the targeted page
		will be opened immediately.  Try <b>docs search( table process )</b> to get the details about the function __table search(__).
		Otherwise, yo will be prompted to enter a keyword.  While typing the letters, the number of possible matches shown at the
		left will narrow down.  Try to type as match so the number of matches reduces to below 20 so they fit into one menu
		overview.  

		<br><br>

		The keywords are not case-sensitive.  Wildcards are supported, e.g. typing 'e*o' or 'e??o' finds 'echo.
		You can use the question mark (?) to toggle among three comparison methods applied for the keyword:
		* <b>begins with</b>: Keyword is compared with beginning letter(s) of the existing choices (applicable when beginning to narrow down)
		* <b>contains</b>: Keyword is checked as part of the existing choices
		* <b>equals</b>: Keyword is checked for perfect match (matches is 0 when nothing is typed and changes to 1 when a matching keyword is found)

		<u>Note</u>: When you use <b>docs search</b> for the first time, you will be asked to select the web browser.  Select one which is installed on your system.<br>
		<u>Note</u>: Your own user-defined functions are not included here becasue this feature uses the B4P table of contents available on the B4P web page.

	+++,
	"Call as":		"procedure",
	"Parameter count":	"0-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "Opt. 1.",
		  "Name": "Keyword",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description"::
			If a matching keyword (e.g. 'echo') is entered, then the web page with the right contents will open directly.
			Wildcards like '*' and '?' are supported to provide a precise search.<br><br>
			<u>Note</u>: When using wildcard symbols, then put the expression in single or double quotation marks, e.g. <b>"table lookup*"</b>
			+++
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description"::
			Specify a valid web browser name:
			=== 100, 400, noframe_1stcolbold, noheader
			Windows	| chrome, edge, explorer
			Linux   | chrome, firefox, brave
			MacOS   | brave, chrome, firefox, safari
			===
			If the entered browser is not valid, then you will be asked to choose one of the valid browsers interactively.
			The chosen browser will be memorized for the next times you are using this function if you do not specify the browser expicitly.<br><br>
			<u>Note</u>: This function does not check if the browser is installed, nor does it search for all browsers installed in your system.
			+++
		}

	],
	"Examples:'docs search' entered in interactive mode"::
>> docs search('table li*')

Note: Web documentation is still under construction and not yet complete.

Advice:  docs search ( [keyword] ) looks for specific keyword.
Exmaple: docs search ( for )   looks for help for 'for'
         docs search ( 'for*' )    looks for keywords beginning with 'for'

Use 'single' quotation marks when using wildcard symbols *,?,..


Narrow down the number of matches for your keyword (target: Max 20).
Add text by typing, [Backspace] to delete last character
Press [Enter] to confirm, [Escape] to leave.
The number of matches will update automatically while typing
Press [-] to toggle comparison mode between 'begins with', 'contains' and 'equals'.
Comparison mode is equals

   4 matches: table li*

     A :  table lift contents
     B :  table lift header row
     C :  table lift headers
     D :  table list
     X :  Exit this menu
Please select: D
>>
	+++,
	"See also": [ "docs" ]
},





"table list" :
{
	"Function Names":	[ "table list" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function lists the entire table or selected rows and columns of a table
		on standard output (for example the console).  Since this function does not make use of any
		fancy I/O features, listing tables can also be integerated in B4P programs running in batch mode
		in order to provide some more visibility.

		<br><br>
		<u>Hint</u>: This function is suitable for __interactive__ and __debugging__ use in order to inspect tables conveniently.

	+++,
	"Call as":		"procedure",
	"Parameter count":	"1, 3, 5, ...",
	"Restrictions":		["Indirect parameter passing is disabled",
				 "Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed." ],
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": [ "" ]
		},
		{ "Number": "2., 4., ...",
		  "Name": "Option",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description"::
			Following options are supported:<br>
			=== 100, 700, noframe_1stcolbold, noheader
			1st row   | Specify first row number to list (e.g. 2 = begin with row 2).  The header row (row 0) will always be displayed.
			last row  | Specify last  row number to list
			1st col   | Specify first column number to list. Column numbering begins with 0, not 1.
			last col  | Specify last column number to list.
			briefly   | Specify top <i>n</i> and bottom <i>n</i> rows to list, skipping the ones in the middle (if any left).
			===
			+++
		},
		{ "Number": "3., 5., ...",
		  "Name": "Value",
		  "Direction": "input",
		  "Types": [ "numeral" ],
		  "Description"::
			This is the value associated to the option in the previous function parameter.<br>
			__Negative indexing__ is supported for specifying rows (-1 = last row) and columns (-1 = last column acc. to widest row in the whole table).
			+++
		}
	],
	"Examples"::
	include ( Support Library );
	table load ( t, "Examples\Cities.csv" );

	// Begin with row 2, skip last 3 columns, and for the rows to list, list only the first and last 3 of them.
	table list ( t, 1st row, 2, briefly, 3, last col, -3 );
	+++,
	"Output": "automatic",
	"See also": [ "list" ]
},




"view" :
{
	"Function Names":	[ "view" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function provides a more elaborate approach to view tables than the function __table list(__) which is just outputting some or all
		rows and columns of the table to the console.  You have the choice to view and scan through the table in B4P (using the console) or
		the web browser.  For the web browser, you can view the table either in conventional manner (static HTML file) or as a browsable
		data table (Data table functionaltiy is craeted and provided by: SpryMedia Ltd, Scotland, MIT license).

		<br><br>
		<u>Note</u>: Every time you view a table with this function, a copy of the table will be saved in the current working directory.
		The file name begins with "_b4p_view... .html" containing the table name.  The function __view reset(__) will do the clean-up by deleting all such files created.

	+++,
	"Call as":		"procedure",
	"Parameter count":	"1-2",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"Parameters":
	[
		{ "Number": "1.",
		  "Name": "Name of existing table",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description": ""
		},
		{ "Number": "Opt. 2.",
		  "Name": "Web browser",
		  "Direction": "input",
		  "Types": [ "literal" ],
		  "Description"::
			Specify a valid web browser name:
			=== 200, 600, noframe_1stcolbold, noheader
			Windows	| chrome, chrome datatables, edge, edge datatables, explorer, explorer datatables
			Linux   | chrome, chrome datatables, firefox, firefox datatables, brave, brave datatables
			MacOS   | brave, brave datatables, chrome, chrome datatables, firefox, firefox datatables, safari, safari datatabls
			All systems | here
			===
			<b>here</b> opens the table locally.
			All other options open the 

			+++
		}

	],
	"Examples:'view' entered in interactive mode"::
>> table load( cities, Examples\Cities.csv )

    Loaded CSV/TSV file 'Examples\Cities.csv':
    15 rows, max 8 columns, 8 columns in 1st row, 120 fields, list separator: ;

>> view ( cities, here )
000000: City          State / Province Country Inhabitants Famous attraction
        ------------- ---------------- ------- ----------- ------------------
000001: New York City New York         USA     8300000     St. of Liberty
000002: Washington    D.C.             USA     650000      Lincoln Statue
000003: Philadelphia  Pennsylvania     USA     1500000     Independence hall
000004: Boston        Massachusetts    USA     620000      Freedom trail
000005: San Francisco California       USA     805000      Golden Gate
000006: Montréal      Quebec           CAN     1700000     Hôtel du Parlement
000007: Copenhagen    Hovedstaten      DAN     580000      Little Mermaid
000008: Venice        Venetia          ITA     260000      Doge's Palace
000009: Los Angeles   California       USA     3800000     Hollywood
000010: Vienna                         AUT     1800000     Prater
_______________________________________________________________________________
Action ([?] for help):  ?
Navigation: l = Left,      r = Right       u = Page Up   d = Page Down   s = Search next
            L = 1st Col.   R = Last Col.   U = Top       D = Bottom      S = Search
            n = 1 column  narrower         w = 1 column wider            c = ClS on/off
            N = 5 columns narrower         W = 5 columns wider
            X = Change Screen Width        P = Change Page Height

            Q = Quit

Procedure call list:  list ( table name [, chars per row [, rows to show]] )
               e.g.:  list ( my table, 160, 20 ) // My table, 160 chars, 20 rows to show

_______________________________________________________________________________
Action ([?] for help):  r
000000: State / Province Country Inhabitants Famous attraction  Alt. (m)
        ---------------- ------- ----------- ------------------ --------
000001: New York         USA     8300000     St. of Liberty     10
000002: D.C.             USA     650000      Lincoln Statue     7
000003: Pennsylvania     USA     1500000     Independence hall  12
000004: Massachusetts    USA     620000      Freedom trail      43
000005: California       USA     805000      Golden Gate        16
000006: Quebec           CAN     1700000     Hôtel du Parlement
000007: Hovedstaten      DAN     580000      Little Mermaid     24
000008: Venetia          ITA     260000      Doge's Palace      1
000009: California       USA     3800000     Hollywood          100
000010:                  AUT     1800000     Prater
_______________________________________________________________________________
Action ([?] for help):  q
>>
	+++,
	"See also": [ "table list", "view reset" ]
},



"view reset" :
{
	"Function Names":	[ "view reset" ],
	"Documentation":	"Function Description",
	"Library":		"Support Library",
	"Description"::
		This function deletes all temporary HTML files beginning with "_b4p_view... .html".
		These files are create by the __view(__) command when viewing B4P tables using web browsers.  It is advised to use this 
		function in __interactive__ mode only.
	+++,
	"Call as":		"procedure",
	"Parameter count":	"0",
	"Restrictions":		"Under normal conditions, the 'Support Library' is loaded automatically, so no 'include(...)' call is needed.",
	"See also": [ "view"]
}






B4PDOCU.STOP