//
B4PDOCU.START

"Path and File Names" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "path names" ],
    "Keywords":			[ "path name", "path names", "file name", "file names" ],
    "Description 01:Introduction to portable Path Names"::

	The different operating systems (Windows, LINUX, MACOS) use different conventions to specify drives, directory path names
	and file names.  Directory separators (slash or backslash) is one example.  FUll case sensitivity of path and file names in LINUX and MACOS
	environments is another example. Beyond4P supports some measures in order to make path and file naming more portable for the applications.

	* Both directory separator symbols "/" (UNIX/ / LINUX style) and "\" (WINDOWS style) are supported.  They will be changed to the right symbol automatically before accessing directories and files in the present operating system.
	* Returned directory and file names, e.g. in directory listings, __file search(__) function, etc. will use the directory separator native to the operating system (e.g. "/" under LINUX).
	* Under LINUX and MACOS, the file names are fully case sensitive.
	* Under Windows, case sensitivity only applies to creating new directory and file names.
	* Please avoid using following special symbols in file names:
	** : Colon - Used to specify drives in Windows environments
	** ", ' quotation marks - Not valid as part of file name.  Quotation marks may be needed at command level to specify path and file names containing spaces, but not to be done in Beyond4P code.
	** *, ? wildcard symbols
	** , comma - Beyond4P uses commas to specify multiple file names, e.g. in the __directory listing(__) function
	** & ampersand - Typically a control symbol for operating system command shells
	** &lt;, &gt;, | - Rediction and piping
	** /, \ - Directory separators
	* Further OS-specific restrictions on path and file names may apply
	* __Wildcard symbols__ are resolved by Beyond4P and not by the operating system.

	+++

}


B4PDOCU.STOP
