//
B4PDOCU.START

"Path and File Names" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "path names" ],
    "Keywords":			[ "path name", "path names", "file name", "file names" ],
    "Description 01:Introduction to portable Path Names"::

	The different operating systems (Windows, LINUX, MACOS) use different conventions to specify drives, directory path names
	and file names.  Directory separators (slash or backslash) is one example.  FUll case sensitivity of path and file names in LINUX and MACOS
	environments is another example. Beyond4P supports some measures in order to make path and file naming more portable for the applications.

	* Both directory separator symbols "/" (UNIX/ / LINUX style) and "\" (WINDOWS style) are supported.  They will be changed to the right symbol automatically before accessing directories and files in the present operating system.
	* Returned directory and file names, e.g. in directory listings, __file search(__) function, etc. will use the directory separator native to the operating system (e.g. "/" under LINUX).
	* Under LINUX and MACOS, the file names are fully case sensitive.
	* Under Windows, case sensitivity only applies to creating new directory and file names.
	* Please avoid using following special symbols in file names:
	** : Colon - Used to specify drives in Windows environments
	** ", ' quotation marks - Not valid as part of file name.  Quotation marks may be needed at command level to specify path and file names containing spaces, but not to be done in Beyond4P code.
	** *, ? wildcard symbols
	** , comma - Beyond4P uses commas to specify multiple file names, e.g. in the __directory listing(__) function
	** & ampersand - Typically a control symbol for operating system command shells
	** &lt;, &gt;, | - Rediction and piping
	** /, \ - Directory separators
	* Further OS-specific restrictions on path and file names may apply
	* __Wildcard symbols__ are resolved by Beyond4P and not by the operating system.

	+++

},



"Wildcards" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "wildcards" ],
    "Keywords":			[ "wildcard symbols" ],
    "Description 01:Introduction"::

	B4P supports wildcards which enables for more effective search and comparison functions as they enable pattern matching with concepts such as
	* Begins with ...
	* Ends with ...
	* Contains ...
	* Multiple optios separated by cmmas ...


	Wildcards are used, amongst others, in following functionalities:
	* Comparison operators __equal to__ <b>=</b> and __not equal to__ <b>&lt;&gt;</b> where the operands on the right hand side may consist of literals containing wildcards
	* __Horizontal table access w. wildcards__ and __vertical table access w. wildcards__
	* Various B4P functions accepting parameters allowign wildcards for pattern matching
	* Searching for files, e.g. __directory listing(__) and __resolve path name(__) function.

	Unless specified otherwise (like in searching files), wildcard symbols in strings will only work if specified as __softquoted literals__, for
	example using single (and not double) quotation marks.

 	=== 100, 200, 100, 600, bold_column_1 bold_column_3
	Symbol	| Meaning						| Example			| Explanation
	*	| Plaholder for any number of characters (incl. 0)	| A*<br>*s<br>*-*<br>A*E	| Begins with 'A' <br>Ends with 's'<br>Contains '-' <br>\
													  Begins with 'A' and ends with 'E'
	~	| Placeholder for any number of letters (incl. 0)<br>\
		  Foreign (non-ANSI) characters are accepted here, too.	| ~ Street			| Expecting a name for the street (letters only)
	&amp;	| Placeholder for any number of numeric digits 0..9	| &amp; kg			| Expects a number of any size before ' kg'
	?	| Placeholder for exactly 1 character			| ???<br>A?			| Contains 3 characters of choice<br>A follwed by 1 character of choice
	#	| Placeholder for exactly 1 numeric digit 0..9		| ###-##-####			| Expect a social security number (U.S. number format)
	^	| Placeholder for exactly 1 alphanumeric character<br>\
		  Foreign (non-ANSI) characters are accepted here, too.	| ^^^				| Expect 3 letters
	,	| Defines additional pattern to compare			| A*,B*,C*			| May begin with A, B or C.
	===

	For searching files using directory and file functions, the wildcards are limited to * and ?.

	+++,
	"Examples 01:Programming example"::
	include( Support Library );

	table initialize ( demo wildcards,
	{ { Target string, '*', '~', 'A*', '&', 'Zip*#####', '??t', '*t', 'A*,B*,C*' },
	    Hello,
	    1234,
	    12345,              // Column headers contain wildcard symbols
	    Zip 12010,          // 1st column contain target strings to compare with these patterns
	    Cat,                // The blank rows will be filled in with comparison results
	    Bat,                // 'true' and 'false'.
	    halt } );

	table configure( demo wildcards, read numerals, no ); // Read numbers from tables as strings

	table process( demo wildcards,
	    for (c[] = 1, c[] < table row width( demo wildcards, 0 ), c[]++ )
	    {
	        [c[]]      = [0]      = softquoted literal( [c[], 0 ] ); // Compare and write the result
	        // Current   Column   Compared with corresponding header name above
	        // column    zero
	    } );

	table list( demo wildcards );
	+++,
	"Output 01": "automatic"
}


B4PDOCU.STOP
