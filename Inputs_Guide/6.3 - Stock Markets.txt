//
B4PDOCU.START

"Stock Markets - Program" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Example - Retrieve stock market data" ], // 1st overview item is used for HTML file name.  All overview items can be cross-referenced.


    "Description 01:Obtain S&amp;P 500 and NASDAQ 100 listings"::

	The following program example demonstrates downloading some stock market data from a web page and combine
	both listings in one Excel files.  Negative values will appear in red.	

	<br><br>
	<img src="Images/GUI_Stock_Market_Data.png" alt="Guide-Tutorial-Merging Football teams">
	<br><br>
	Information source: <a href="https://www.slickcharts.com/nasdaq100" target="_blank"><b>slickcharts.com NASDAQ 100</b></a> and 
	<a href="https://www.slickcharts.com/sp500" target="_blank"><b>slickcharts.com SP500</b></a>

+++,

"Examples 01:The Full Program"::
include ( Support Library );
include ( Utility Library );
include ( Office Library );
include ( Style Library );      // Include this library if you want to use the 'table style ...' functions.
//  Step 1: Download two web pages.

    echo("Stock market originates from slickcharts.  Date downloaded: ", str( date(today), "Tttt DD. Mmmm. YYYY", en_US ) );
    for all parameters ( {nasdaq100, sp500} , listing[] )
    {
        file download overwrite     ( "https://www.slickcharts.com/" + listing[], listing[] + .html);
        table load                  ( listing[] ,listing[] + .html,  HTML, "Components of the" );
        table rename column headers ( listing[], "Weight", "Weight " + listing[] ); 
    }                                   // Weight info are specific to SP and Nasdaq, so add the listing name

//  Step 2: Combine the two tables

    table merge extend columns      ( nasdaq100, sp500, Symbol );
    table rename                    ( sp500, stocks );

//  Step 3: Cleanup

    table correct headers           ( stocks, '*Price*', Price );
    table rearrange columns         ( stocks, { '#', Company, Symbol, Price, Chg, '% Chg' } ); // Weightings follow afterwards
	
//  Percent value gets converted to regular number, price value is claned up

    table process                   ( stocks, ['% Chg'] = smart num( middle(['% Chg'],'(',')')); [Price] = clean num([Price]) );
    table sort rows                 ( stocks, Company );
    table process                   ( stocks, ['#'] = row() );

//  Step 4: Add some color

    table style auto width          ( stocks );
    table style theme               ( stocks, Zebra Vertical Lines, pattern, 2, table, "gridlines, false" ); // Double zebra patterns
    table process                   ( stocks, // Negative numbers: red, positive numbers: navy blue
        table style cells               ( stocks, {'Chg', '% Chg'}, {2:row()}, single, text color, select if ( [Chg]>0, navy, red ) ) );

    table style columns             ( stocks, '% Chg', sheet, number format, "0.00%" ); // Value to show as percent. EXCEL only
    table style table               ( stocks, sheet, freeze rows, 1, autofilter, 0);

//  Step 5: Save the artwork

    table save excel file           ( stocks, "NASDAQ and SP500", "Images/Stock Market Listing.xlsx" );
    table list                      ( stocks, briefly, 5 ); // Show top and bottom 5 rows on the console

//  Step 6: Also demonstrate saving results in HTML

    table format numbers            ( stocks, '% Chg', "0.00%" ); // For HTML, the number must be physically reformulated with %-sign
    translate style attributes for html (stocks);
    table save                      ( stocks, "Images\Stock Market Listing.html", HTML );

+++,
    "Output 01:The Output": "automatic",
    "Description 02:View the generated HTML file with the formatting included:"::


	Test Click on the file name open the file with Excel (.xlsx) :<br>
	<a href="Images/Stock Market Listing.xlsx" >Stock Market Listing.xlsx</a>, and <br>
	<a href="Images/Stock Market Listing.html" >Stock Market Listing.html</a>.
    +++

}

B4PDOCU.STOP
