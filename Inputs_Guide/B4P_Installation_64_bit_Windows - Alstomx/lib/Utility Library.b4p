

/*
	Utility Library.b4p
	____________________________________________________________________________________________________________


	A collection of useful functions

	____________________________________________________________________________________________________________


	Author:			Georg zur Bonsen
				Copyright (C) 2022 by Georg zur Bonsen, All Rights Reserved

	Contents:

	If you want to use this library, then you need to specify following function call:   include ( Utility Library )
	If the library is not in the same directory, then specfiy an appropriate directory path.
	

	Revision History:
	____________________________________________________________________________________________________________

	Library	B4P		Date		Features

	1.00	5.00				First Release, supports HTML and EXCEL XML file formats from databases
	1.01	5.07		2019-04-01	Added: choose recent file
	1.02	5.08		2019-06-10	Misc. updates
	1.10	7.01		2019-07-24	Misc. updates
	2.00	8.00		2020-08-08	Transition to B4P
	2.01	8.00		2020-10-03	Minor improvements
	2.02	8.00		2020-11-13	Version info moved to system variable
	2.03	8.00		2020-11-29	Added "directory create temp"
	2.04	8.00		2021-01-03	Final alignments for compatibility
	2.05	8.00a		2021-03-02	Added function 'get long options'.  
						Hardened all functions against collisions with equally named global variables

*/


once
{

	//
	// Version verification
	// _________________________________________________________________________________________________________
	//

	libraries[utility library,version info] = "2.05";
	if (runtime settings[verbose] != quiet) echo("Included: ", "Utility Library", "  ", libraries[utility library,version info] );
	

	if (numeral( left( version info[], ' ')) < 8.00)
	{
	    echo("Version Mismatch. Prerequisite for using this file 'Utility Library.txt' is B4P Release 8.00 or newer");
	    echo("Please obtain and install latest available release.");
	    stop;
	}
	

	//
	// Command Line Options
	// _________________________________________________________________________________________________________
	//


	define procedure and function( get long options, {{ valid option names, to parameters members to literal}}, 0, 1 )
	{
	    if (existing( long options[] )) if (identify( long options[] )=='array') delete members( long options[] ); // Delete members if array
	    local
	    {
		count[]= 0;
		arg[]= '';
	    }	   
	    for all variables( command line arguments[], arg[] )
	    {
		if (arg[] = '--*')
		{
		    arg[] -= '--';

		    if (parameter count[] >= 1) if ( find( valid option names[], left( arg[], "=") ) < 0 )
		    {
		        exception( stop, compose("Function 'get long options': long option '--", arg[], "' in the command line is not valid."), -1);
		    }

		    count[]++;
		    global() long options[left( arg[], '=' )] = select if( (arg[] = '*=*'), best type(right( arg[], "=" )), null() );
		}
	    }
	    return( count[] );
	}




	//
	// Advanced file functions
	// _________________________________________________________________________________________________________
	//



	// Function:	directory create temp
	//
	// Description:	Create an own temporary directory.  Highly advisable to remove that directory when you are done
	//		B4P ensures that an existing directory will not be re-used because it may be in use by anotehr
	//		instance.  Subdirectory name is B4P_XXXXXX (6 random letters)
	//
	// Parameters:	-
	//
	// Return val:	literal		Full path name of new directory.  The directory has been created.


	define function( directory create temp )
	{
		local() do
		{
		    dir[] =  system info[temp directory] + system info[directory separator] + "b4p" + system info[directory separator] + "B4P_" + random string( 6 ) + system info[directory separator];
		}
		while ( directory existing( dir[] ) );
		directory create( dir[] );
		return ( dir[] );
	}


	// Function:	choose recent file
	//
	// Description:	Shows up to 35 file names and allows to choose from.
	//
	// Parameters:	prompt		Prompt text 
	//		path		Directory path to location where files are existing
	//		match		Matching pattern, e.g. "*.txt" (Microsoft specifc patterns)
	//		order		Ordering criteria, one of following:
	//				  oldest	List n oldest files
	//				  newest	List n newest files
	//				  first		List first n files (alphabetic order, start with A)
	//				  last		List last n files (reverse alphabetic order)
	//				  biggest	List n biggest files
	//				  smallest	List n smallest files
	//		count		Number of filesto show.  Must be between 1 and 35.
	//
	// Return val:	literal		Name of chosen file.



	define function ( choose recent file, { { prompt, literal }, { path, literal }, { match, literal }, { ordering criteria, literal }, { count, numeral } } )
	{

	    if (ordering criteria[] <> newest,oldest,first,last,biggest,smallest)
	    {
		exception( stop, compose("4th paramter: ordering criteria = '", ordering criteria[], "' is invalid,", new line, "Valid choises are: newest, oldest, first, last, biggest, smallest"), 1);
	    }

	    if ((count[] < 1) | (count[]>35))
	    {
		exception( stop, compose("5th paramter: count = '", count[], "' is invalid. Must be between 1..35"), 1);
		stop;
	    }

	    
	    ret val[] = directory listing( local directory table, path[], "*.*", files );
	    if (ret val[] < 0)
	    {
		exception( stop, compose("2nd paramter: path '", path[], "' not found."), 1);
	    }

	    local() ret val[] = directory listing( local directory table, path[], match[], files );
	    ret val[] = max( ret val[], 0 );

	    if (ret val[] = 0)
	    {
		echo("No files have been found.  Blank contents returned " );
		return( "" ); // Nothing found
	    }

	    switch( ordering criteria[] )
	    {
		case (newest)	table sort rows( local directory table, {Date Updated,Time Updated}, alphabetic down );
		case (oldest)	table sort rows( local directory table, {Date Updated,Time Updated}, alphabetic      );
		case (first)	table sort rows( local directory table, {Name}, alphabetic );
		case (last)	table sort rows( local directory table, {Name}, alphabetic down     );
		case (biggest)	table sort rows( local directory table, {Size}, numeric down );
		case (smallest)	table sort rows( local directory table, {Size}, numeric      );
	    }

	    if (count[] == 1) // Looking for only 1 file.  No menu query needed.
	    {
		return( [local directory table: Name, 1] );
	    }

	    echo("Found ", ret val[], " files.");
	    table delete remaining rows( local directory table, count[]+1 );

	    sequence[] = { '1'..'9','A'..'Z' }; // 35 elements
	    local() i[] = 0;
	    table insert columns( local directory table, {Menu Choice,Name with Date}, "", 0 );

	    table process( local directory table, [Menu Choice] = sequence[]{i[]++}; 
		[Name with Date] = literal([Name],"########################################") + "  ("+[Date Updated]+" "+[Time Updated]+"  "+literal([Size]/1024,"????0") + " kB)" );

	    echo(new line, prompt[]);
	    choice[] = table menu quick( local directory table, Menu Choice, Name with Date, Name );
	    
	    table delete( local directory table );
	    return(choice[]);
	}



	// Function:	abbreviate names
	//
	// Description:	Abbreviates a name into initials
	//
	// Parameters:	literal		Full name (First name followed by last name) 
	//
	// Return val:	literal		Name of chosen file.
	//
	// Description:	Takes the first letter of evry word.
	//		Additional letters are included if continuing with:
	//		Ch, Gh, Ll, Ph, Th, Sch, Sh, Sp, St, Zh
	//



    define function(abbreviate name, { { full name, literal } } )
    {
	// Step 1: Split the names

      local
      {
	n[] = {};
	do
	{
	    i[] = find( full name[], " ");
	    if ( i[] == 0 ) // Possibly double space
	    {
		full name[] = right( full name[], -1 );
	    }
	    else: if ( i[] < 0) // no more space (last word)
	    {
		if (full name[]<>"") n[] += { full name[] };
		full name[] = "";
	    }
	    else
	    {
		n[] += { left( full name[], " " ) };
		full name[] = right( full name[], " " );
	    }
	    i[] = find( full name[], " ");
	}
	while (full name[] <> "");
	
	rv[] = "";

	for all parameters( n[], s[] )
	{
	    rv_next[] = "";

	    for all parameters( { Ch, Gh, Ll, Ph, Rh, Sch, Sh, Sp, St, Th, Zh }, a[] )
	    {
		if ( find( s[], a[] )==0 )
		{
		    rv_next[] = a[];
		    break;
		}
	    }
	    if (rv_next[]=="") rv_next[] = s[]{0};
	    rv[] += rv_next[];

	}
	return (rv[]);
      }
    }

//
// Following functions are experimental and not yet formally documented.
//
//
	define procedure( table load and keep, { { table name, literal }, { file name,  literal }, { columns to keep, parameters} } )
	{
	    echo("Loading table ", table name[], " from file ", file name[] );

	    if (function name[]= table load csv and keep)
	    {
		table load( table name[], file name[] );
	    }
	    else
	    {
		table load( table name[], file name[], MHTML );
	    }
	    table delete blank rows( table name[] );
	    table keep columns( table name[], columns to keep[] );  // Erase all other input data which is not of interest
	}


	define additional procedure( table load csv and keep, table load and keep, { { table name, literal }, { file name,  literal }, { columns to keep, parameters} } );



} // once



