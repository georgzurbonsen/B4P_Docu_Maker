/*
	Console Library.b4p
	____________________________________________________________________________________________________________


	Provides a set of functions for console I/O
	Requires:		-
	

	____________________________________________________________________________________________________________


	Author:			Georg zur Bonsen
				Copyright (C) 2019-2022 by Georg zur Bonsen, All Rights Reserved

	Contents:

	This library contains a set of console functions.  Next to dedicated functions, it takes over a smart
	line input feature which support editing with arrow keys, clipboard and accessing previously entered text.

	Limitations:

	Some consoles in some operating systems may have slighlty deviating characterisitics, but should not be an issue.


	Revision History:
	____________________________________________________________________________________________________________

	Library	B4P		Date		Features

	1.00	9.00		2021-12-01	Introduced
	1.01	9.00		2022-01-05	Bugfixes

*/


once
{

	libraries[console library,version info] = "1.01";
	if (runtime settings[verbose] != quiet) echo("Included: ", "Console Library", "  ", libraries[console library,version info] );


	if (numeral( left( version info[], ' ')) < 9.00)
	{
	    echo("Version Mismatch. Prerequisite for using this file 'Console Library.b4p' is B4P Release 9.00 or newer.");
	    echo("Please obtain and install latest available release.");
	    stop;
	}



define procedure( __ console add to command history __, {{ st, literal }} )
{
    local
    {
	if (st[]='') return; // Blank strings are not stored.
        libraries[console library, history] = 0; // Index
	if ( !existing( libraries[console library, history, 0] )) // New
	{
	    libraries[console library, history, 0] = st[];
	    return;
	}
	found[] = false;
	for (i[] = 0, i[] < member count(libraries[console library, history]), i[]++ )
	{
	    if (libraries[console library, history, i[]] == st[]) found[] = true;
	    if (found[]) if (i[] < member count(libraries[console library, history])-1 )
	    {
		libraries[console library, history, i[]] = libraries[console library, history, i[]+1];
	    }
	}
	libraries[console library, history, member count(libraries[console library, history])-found[]] = st[];
    }
}


define function( __ console command history up __, {{ up, boolean }} )
{
    local
    {
	if ( !existing( libraries[console library, history, 0] )) return( '' );
	i[] = libraries[console library, history];
	if (up[])
	{
	    if (i[] = 0) i[] = member count( libraries[console library, history] );
	    libraries[console library, history] = --i[];
	}
	else // down
	{
	    if (++i[] = member count( libraries[console library, history]) ) i[] = 0;
	    libraries[console library, history] = i[];
	}
	return (libraries[console library, history, i[] ]);
    }
}







//	input[ buf   ]	Not used	Input buffer, contains payload text
//	input[ pos 1 ]	Not used	Current character offset where cursor is located, begins with 0
//	input[ pos 2 ]	Not used	Current character offset where marking ends, if greater than input[pos 1], begins with 0
//	input[ x pos ]	output		Absolute text and cursor position, begins with 1 - 
//	input[ y pos ]	in/out		Relative text and cursor position, begins with 1 - Will be updated
//	input[ width ]	input		Usable console width minus 1 - Will be used

//	input[ x pos initial ]	Initial position, typically x-position after the prompt.


define procedure( __ console relative cursor position __, {{ input, all, reference }, { pos, numeral}} )
{
    local
    {
	memorized[y pos] = input[y pos]; // Memorize position of last row

	input[x pos] = pos[] + input[ x pos initial ];
	input[y pos] = 1;
	while ( input[x pos] > input[width] )
	{
	    input[x pos] -= input[width];
	    input[y pos] ++;   
	}
	cursor( up, memorized[y pos] - input[y pos] );
	cursor( column, input[x pos] );
    }

}


//	The following function outputs the already existing contents, and advances the cursor to the working position.
//	Marked contents will be shown in inverted color.
//

//	input[]				Full structure for input contents
//	input[ buf   ]	input		Input buffer, contains payload text
//	input[ pos 1 ]	input,init	Current character offset where cursor is located, begins with 0
//	input[ pos 2 ]	input,init	Current character offset where marking ends, if greater than input[pos 1], begins with 0
//	input[ x pos ]	in/out,init	Absolute text and cursor position, begins with 1
//	input[ y pos ]	in/out,init	Relative text and cursor position, begins with 1
//	input[ width ]	output		Usable console width minus 1

//	input[ x pos initial ]	Initial position, typically x-position after the prompt.




define procedure( __ console reprint input __ , {{ input, all, reference }, { first call, boolean}, { from cursor, boolean }} )
{

    local
    {
	if (first call[])
	{
	    input[ x pos ] = console( x text );		// x pos is absolute
	    input[ x pos initial ] = input[ x pos ];
	    input[ y pos ] = 1; 			// y pos is relative.
	    input[ width ] = console( width )-1;	// Console width, minus 1
	    input[ pos 1 ] = input[ buf ]{};
	    input[ pos 2 ] = input[ pos 1 ];
	}

	if (from cursor[])
	{
	    __ console relative cursor position __( input[], input[pos 1] );
	    p[start] = input[pos 1];
	}
	else
	{
	    __ console relative cursor position __ ( input[], 0 );
	    p[start] = 0;
	}


	smaller[] = min 123( input[ pos 1 ], input[ pos 2 ] );
	bigger [] = max 123( input[ pos 1 ], input[ pos 2 ] );

	for (p[] = p[start], p[] < input[buf]{}, p[] ++ )
	{

	    if ( smaller[] != bigger[] & p[] == smaller[] )
	    {
		reverse( true );
	    }
	    if ( smaller[] != bigger[] & p[] == bigger[] )
	    {
		reverse( false );
	    }

	    print( input[buf]{p[]} );

	    if (input[ x pos ] >= input[ width ])
	    {
		echo;
		input[ x pos ] = 1;
		input[ y pos ]++;
	    }
	    else
	    {
		input[ x pos ]++;
	    }
	}
	reverse( false );
	clear(right below);

    }

}




define function( __ console input string __, {{ initial, literal }} )
{
    local
    {
	input[buf] = "";  

	__ console reprint input __ ( input[], true, false ); // Initialize input[] and print out existing contents, cursor at end of string
	
	reprint[]= false;
	insert[] = false; // Insert key pressed
	ctrl c pressed[] = false;

	do
	{
	    input[ch] = getch();
	    if ( input[ch] == '&#x7f;' ) input[ch] = '&ctrl-h;'; // Backspace

	    if (input[ch] != '&ctrl-c;') ctrl c pressed[] = false;

	    cursor( hide );
	    {	    
		switch( input[ch] )
		{
/* Debug
 		    case ( '&ctrl-b;' )
		    {
			echo(new line, new line, "Inspection:");
			inspect(input[]);
			pause;
		    }
*/
		    case ( '&ctrl-k;' )
		    {
			input[buf] = select if( input[pos 1] <= 0, '', input[buf]{..input[pos 1]-1} );
			if (input[pos 2]>input[pos 1]) input[pos 2] = input[pos 1];
			clear(right below);
			reprint[] = true;
		    }

		    case ( '&ctrl-h;', '&delete;', '&ctrl-v', '&ctrl-x;', ' ' .. '&#x0effff;') // Backspace, Delete, Insert from clipboard, and visible characters
		    {

			if ( input[ch]>=' ' & input[ch]!='&delete;' & input[pos 1] == input[pos 2]) continue;

			if (input[ch]='&ctrl-h;')
			{
			    if (input[pos 1]<=0) break;
			    if (input[pos 2]>=input[pos 1])
			    {
				input[pos 1]--;
				input[pos 2] = input[pos 1];
			    }
			}

			smaller[] = min 123( input[pos 1], input[pos 2] );
			bigger [] = max 123( input[pos 1], input[pos 2] );

			if (input[ch]=='&ctrl-x;') // CTRL-X: Cut
			{
			    if (smaller[]!=bigger[])
			    {
			        clipboard( input[buf]{smaller[]..bigger[]-1} );
			    }
			}

			input[pos 1] = smaller[];
			if (smaller[] == bigger[]) bigger[]++;


			if (smaller[]==0)
			{
			    input[buf] = input[buf]{bigger[]..-1 };
			}
			else
			{
			    input[buf] = input[buf]{0..smaller[]-1, bigger[]..-1 };
			}
			input[pos 2] = input[pos 1];
			__ console reprint input __ ( input[], false, false );
			clear(right below);
		    }

		    else: {} // Cases below will be checked even if cases above have already been matched.

		    case ('&ctrl-a;') // CTRL-A: Select all
		    {
			input[pos 1] = 0;
			input[pos 2] = input[buf]{};
			reprint[] = true;
		    }

		    case ('&ctrl-c;') // CTRL-C: Copy
		    {
			if (ctrl c pressed[]) throw; // Stop execution
			smaller[] = min 123( input[pos 1], input[pos 2] );
			bigger [] = max 123( input[pos 1], input[pos 2] );
			if (smaller[]!=bigger[])
			{
			    clipboard( input[buf]{smaller[]..bigger[]-1} );
			}
			ctrl c pressed[] = true;
		    }




		    case ('&insert;')
		    {
			insert[] = !insert[];
			if (input[pos 1] = input[pos 2]-1) input[pos 2]--;
			reprint[] = true;
		    }

		    case( '&home;' )
		    {
			reprint[] = input[pos 1]!=input[pos 2];
			input[pos 1] = 0;
			input[pos 2] = 0;
		    }

		    case( '&shift-home;' )
		    {
			reprint[] = true;
			input[pos 1] = 0;
		    }

		    case( '&end;' )
		    {
			reprint[] = input[pos 1]!=input[pos 2];
			input[pos 1] = input[buf]{};
			input[pos 2] = input[pos 1];
		    }

		    case( '&shift-end;' )
		    {
			reprint[] = true;
			input[pos 2] = input[pos 1];
			input[pos 1] = input[buf]{};
		    }

		    case( '&arrow-left;' )
		    {
			reprint[] = input[pos 1]!=input[pos 2];
			if (input[pos 1]>0) input[pos 1]--;
			input[pos 2] = input[pos 1];
		    }

		    case( '&arrow-right;' )
		    {
			reprint[] = input[pos 1]!=input[pos 2];
			if (input[pos 1]<input[buf]{}) input[pos 1]++;
			input[pos 2] = input[pos 1];
		    }

		    case( '&shift-arrow-left;' )
		    {
			if (input[pos 1]>0) input[pos 1]--;
			reprint[] = true;
		    }

		    case( '&shift-arrow-right;' )
		    {
			if (input[pos 1]<input[buf]{}) 
			{
			    if (insert[] & input[pos 1]+1==input[pos 2])
			    {
				input[pos 2]=input[pos 1];
				input[pos 1]++;
			    }
			    input[pos 1]++;
			}
			reprint[] = true;
		    }


		    case( '&ctrl-arrow-left;', '&ctrl-shift-arrow-left;')
		    {
			reprint[] = input[pos 1]!=input[pos 2] | input[ch]=='&ctrl-shift-arrow-left;';
			encountered text[] = false;
			while (input[pos 1]>0)
			{
			    input[pos 1]--;
			    if ((input[buf]{input[pos 1]} = ' ','-') & encountered text[])
			    {
				input[pos 1]++;
				break loop;
			    }
			    if (input[buf]{input[pos 1]} <> ' ','-') encountered text[] = true;
			}
			if (input[ch]=='&ctrl-arrow-left;') input[pos 2] = input[pos 1];
		    }

		    case( '&ctrl-arrow-right;', '&ctrl-shift-arrow-right;')
		    {
			reprint[] = input[pos 1]!=input[pos 2] | input[ch]=='&ctrl-shift-arrow-right;';
			encountered text[] = false;
			while (input[pos 1]<input[buf]{})
			{
			    if (insert[] & input[pos 1]+1==input[pos 2])
			    {
				input[pos 2]=input[pos 1];
				input[pos 1]++;
			    }
			    input[pos 1]++;
			    if ((input[buf]{input[pos 1]} = ' ','-') & encountered text[])
			    {
				break loop;
			    }
			    if (input[buf]{input[pos 1]} <> ' ','-') encountered text[] = true;
			}
			if (input[ch]=='&ctrl-arrow-right;') input[pos 2] = input[pos 1];
		    }

		    case('&arrow-up;','&arrow-down;')
		    {
			input[ch] = __ console command history up __ ( input[ch]=='&arrow-up;' );
			if (input[ch]='') break;
			input[buf] = input[ch];
			reprint[] = true;
			__ console reprint input __ ( input[], false, true );
			input[pos 1] = input[ch]{};
			input[pos 2] = input[pos 1];
			__ console reprint input __ ( input[], false, true ); // print("IN:", input[pos 1]);
		    }

		    case( '&ctrl-v;', ' ' .. '&#x0effff;' ) // Insert from clipboad, All visible characters exept the PUA
		    {
			if (input[ch]=='&ctrl-v;')
			{
			    input[ch] = clipboard();
			    substitute all( input[ch], new line, ' ' );
			}
			reprint[] = input[pos 1]!=input[pos 2];
			if (input[pos 1]==0)
			{
			    input[buf] = input[ch] + input[buf]{input[pos 1]..-1};
			}
			else
			{
			    input[buf] = input[buf]{..input[pos 1]-1} + input[ch] + input[buf]{input[pos 1]..-1};
			}
			__ console reprint input __ ( input[], false, true );
			input[pos 1] += input[ch]{};
			input[pos 2] = input[pos 1];
		    }

		}

	    }

	    if (insert[])
	    {
		if (input[pos 1]==input[pos 2] & input[pos 2]<input[buf]{})
		{
		    input[pos 2]++;
		    reprint[] = true;
		}
	    }

	    if (reprint[])
	    {
		__ console reprint input __ ( input[], false, false );
		reprint[] = false;
	    }

	    __ console relative cursor position __( input[], input[pos 1] );
	    cursor( show );

	}
	while (input[ch] != new line);
	__ console relative cursor position __( input[], input[buf]{} );
	echo;

    }
    __ console add to command history __ ( input[buf] );
    return( input[buf] );
    catch
    {
	__ console relative cursor position __( input[], input[buf]{} );
	echo(new line, "CTRL-C pressed to stop program execution.");
	exit;
    }

}



define procedure( print bar, {{ pattern, literal }, {count, numeral}, {offset, numeral}}, 0, 3 )
{
    local
    {
	if (!existing(offset[])) offset[] = 0;
	if (offset[] < 0)
	{
	    offset[] += console(width);
	}
	else: if (offset[] < 1 & offset[] > 0)
	{
	    offset[] = round up( offset[] * console(width) );
	    if (offset[] == console(width)) offset[]--;
	}

	if (!existing(count[])) count[] = -1;
	if (count[] < 0)
	{
	    count[] += console(width) - offset[];
	}
	else: if (count[] < 1 & count[] > 0)
	{
	    count[] = round up( count[] * (console(width)-1) );
	    count[] -= offset[];
	}
	
	if (!existing(pattern[])) pattern[] = '_';
	if (pattern[]='') pattern[] = '_';

	while (pattern[]{} < count[]) pattern[] += pattern[];
	pattern[] = left( pattern[], count[] );

	while (offset[]-->0) print(' ');
	echo( pattern[] );
    }
}


// This is the internal procedure which deals with one string *not* containing any line brea.

define procedure and function( __ format print __, {{ attr, all, reference }, { st, literal }, { format only, boolean }} )
{
    local
    {
	ret val[] = {}; // Needed for 'format' only

	buf[] = '';
	row[] = 1;
	col[] = 1;
	1st[] = true; // Use '1st tab' on tab
	fix till here in buf[] = 0; // Character position indication fix till here.
	last stop in buf[] = -1;
	last stop in st[] = -1;
	last stop in col[] = -1;
	print[] = false;


	if (st[]=='') // Empty string handling
	{
	    if (format only[])
	    {
		return ( { '' } );
	    }
	    else
	    {
		echo;
		return (1);
	    }
	}

	s[] = 0;
	while (s[] < st[]{})
	{

	    ch[] = st[]{s[]};

	    if (col[]==1)
	    {
		lm[] = select if( row[]==1, attr[left margin], attr[indented] );
		buf[] += replicate( ' ', lm[]-1 );
		col[] = lm[];
		fix till here in buf[] = buf[]{};
	    }

	    if (ch[]==tab)
	    {
		if (1st[] & col[] >= attr[first tab])  1st[] = false;
		if (!1st[])
		{
		    if (attr[tab interval]>=1)
		    {
			do { buf[] += ' '; col[]++; } while ( mod(col[]-1, attr[tab interval] )!= 0 );
		    }
		}
		else:
		{
		    while( (col[]-1) < attr[first tab]) { buf[] += ' '; col[]++; };
		    1st[] = false;
		}
		fix till here in buf[] = buf[]{};
	    }

	    else: 
	    {
		if ( (ch[] >= ' ') & (ch[] <= '&#x0effff;' | attr[style]) )
		{
		    if (ch[] <= '&#x0effff;') col[]++;
		    if (ch[]==' ') 
		    {
			last stop in buf[] = buf[]{};
			last stop in st[] = s[];
			last stop in col[] = col[];
		    }
		    buf[] += ch[];
		}

		spaces to insert[] = 0;

		if (attr[wrap] == yes) // Character wraparound.  Alignment not effective here.
		{
		    if ( col[] > attr[right margin] ) print[] = true;
		}
		else: if (attr[wrap] == word)
		{
		    if ( col[] > (attr[right margin]+1) )
		    {
			if ( buf[]{-1}==' ' )
			{
			    buf[] = left( buf[], -1 );
			}
			else
			{
			    found[] = false;
			    t[] = buf[]{}-2;
			    if (last stop in buf[]>0)
			    {
				buf[] = left( buf[], last stop in buf[] );
				s[] = last stop in st[];
				spaces to insert[] = col[] - last stop in col[];
			    }
			    else
			    {
				buf[] = left( buf[], -1 );
				s[]--;
			    }
		    
			}
			print[] = true;
		    }
		}

		if (s[]==st[]{}-1) print[] = true;

		if (print[])
		{

		    if (s[]+1 >= st[]{}) spaces to insert[] = attr[right margin] - col[] + 1; // Last row
		    if (attr[align]==center) spaces to insert[] = round down( spaces to insert[] / 2 );
		    

		    if (spaces to insert[]>0 & attr[align]=center,center,right)
		    {
			if (fix till here in buf[] == 0)
			{
			    buf[] = replicate( ' ', spaces to insert[] ) + buf[]{fix till here in buf[]..-1};
			}
			else
			{
			    buf[] = buf[]{0..fix till here in buf[]-1} + replicate( ' ', spaces to insert[] ) + buf[]{fix till here in buf[]..-1};
			}
		    }


		    if (spaces to insert[]>0 & attr[align]=full & s[]<st[]{}-1) // Full alignment except on last row
		    {
			space insert positions[] = {};
			for (i[] = buf[]{}-1, i[]>=fix till here in buf[], i[]--)
			{
			    if (buf[]{i[]}==' ') space insert positions[] += {i[]};
			}
			num spaces found[] = space insert positions[]{};

			spaces to distribute[] = distribute amount( spaces to insert[], num spaces found[], row wise random );

			if (num spaces found[] > 2)
			{
			    for (i[] = 0, i[] < num spaces found[], i[]++)
			    {
				k[] =  space insert positions[]{i[]}+1;
				if (k[]==0)
				{
				    buf[] = replicate( ' ', spaces to distribute[]{i[]} ) + buf[];
				}
				else
				{
				    buf[] = buf[]{0..k[]-1} + replicate( ' ', spaces to distribute[]{i[]} ) + buf[]{k[]..-1};
				}
			    }
			}
		    }

		    if (format only[])
		    {
			ret val[] += { buf[] };
		    }
		    else
		    {
			echo( buf[] );
		    }
		    buf[] = '';
		    row[]++;
		    col[] = 1;
		    1st[] = true;
		    fix till here in buf[] = 0; // Character position indication fix till here.
		    last stop in buf[] = -1;
		    last stop in col[] = -1;
		    print[] = false;

		}

	    }

	    s[]++;
	}

	// Still to implemnet: Adjustment (left, middle, right) and word break;

	return (select if( format only[], ret val[], row[]-1 ) );

    }
}


define procedure and function( format print, {{ attributes, parameters }, { parameter 2, to literal }}, 1, -1 )
{

    local
    {
	attr[align] 		= left;	// Default values
	attr[left margin]	= 1;
	attr[right margin]	= console(width)-1;
	attr[indent]		= 0;
	attr[tab interval]	= 8;
	attr[first tab]		= 8;
	attr[style]		= true;
	attr[paragraph]		= true;
	attr[wrap]		= word;
	attr[as text]		= false;

	first tab specified[]   = false;

	// Step 1: Check parameters on attributes

	for all parameters( attributes[], attribute[], i[] )
	{
	    if (even(i[]))
	    {
		attr name[] = attribute[];
	        if ( type( attr name[] ) != literal )
		    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], " is of type ", type(attr name[]), " and not a literal."), 1);
		continue;
	    }

	    attr value[] = attribute[];

	    switch( attr name[] )
	    {
		case (align)
		{
			if (attr value[] = left,center,right,full) attr[align] = attr value[];
			else: 
			    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ", for ", attr name[]," = '", attr value[], "'  is invalid."), 1);
		}
		case (wrap)
		{
			if (attr value[] = no,yes,word) attr[wrap] = attr value[];
			else: 
			    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ", for ", attr name[]," = '", attr value[], "'  is invalid."), 1);
		}
		case (left margin, right margin)
		{
			if (type(attr value[])==numeral) attr[attr name[]] = console(column,attr value[]);
			else: 
			    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ", for ", attr name[]," = '", attr value[],"' is of type '", type(attr value[]), "' and not a numeral."), 1);
		}
		case (indent, tab interval, first tab)
		{
			if (type(attr value[])==numeral) attr[attr name[]] = attr value[];
			else: 
			    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ", for ", attr name[]," = '", attr value[],"' is of type '", type(attr value[]), "' and not a numeral."), 1);
		}
		case (style, paragraph, as text)
		{
			if (type(attr value[])==boolean) attr[attr name[]] = attr value[];
			else: 
			    exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ", for ", attr name[]," = '", attr value[],"' is of type '", type(attr value[]), "' and not a boolean."), 1);
		}
		else
		{
			exception( stop, compose("Function '", function name[], "':", new line, "1st parameter: attributes, element ", i[], ": Attribute name '", attr name[],"' is not valid."), 1);
		}
	    }
	    if (attr name[]==first tab) first tab specified[] = true;

	}


	if (attr[right margin] < attr[left margin]+1)
	    exception( stop, compose("Function 'format print': right margin (", attr[right margin], ") is smaller than left margin (", attr[left margin], ") + 1"), 1);

	attr[indented] = attr[left margin] + attr[indent];
	if (attr[indented] < 1 | attr[indented] > (attr[right margin]-1))
	    exception( stop, compose("Function '", function name[], "': indented margin  (", attr[left margin]," + ",attr[indent]," = ", attr[indented], " is either below 1 or less than 10 characters till right margin" ), 1);

	if (!first tab specified[]) attr[first tab] = attr[tab interval];


	ret val[] = select if (function name[]==format, {}, 0 );


	buf[] = '';
	go[] = true;
	clear buf[]= false;
	blank rows counted[] = 0;
	for (p[] = 2, p[] <= parameter count[], p[]++)
	{
		para[] = 'parameter ' + literal(p[]);
		if (attr[paragraph])
		{
		    go[] = trim( para[][] ) == ''; // buf is ready to process
		    if (!go[])
		    {
			blank rows counted[] = 0;
			if (buf[] != '') buf[] += select if( para[][]{0} == ' ', '', ' ') ;
			buf[] += para[][];
			if (p[] == parameter count[]) go[] = true;
		    }
		    else:
		    {
			clear buf[] = true;
			if (blank rows counted[]>0) buf[] += new line + ' ' + new line;
			blank rows counted[]++;
		    }
		}
		else: buf[] = para[][];

		if (go[]) 
		{
		    if( !attr[paragraph] & trim(buf[])=='')
		    {
			ret val[] += __ format print __( attr[], buf[], function name[]==format ); 
		    }
		    else
		    {
			for all parameters( tokenize( buf[], {}, new line + "" ), st[] ) ret val[] += __ format print __( attr[], st[], function name[]==format ); // ... +"" = Force new line as quoted literal
		    }
		}

		if (clear buf[])
		{
		    clear buf[] = false;
		    buf[]='';
		}
	}

    } // local

    if (attr[as text]) ret val[] = join( ret val[], new line );

    return( ret val[] );
}


define additional procedure and function( format, format print, {{ attributes, parameters }, { parameter 2, to literal }}, 1, -1 );



} // once()