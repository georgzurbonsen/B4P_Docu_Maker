//
B4PDOCU.START


// ------------------------------------------------------------------------------------------------
"User Guide - Overview" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "User Guide" ],
    "Description 01:Introduction to B4P"::

	<b> B4P a Low-Code Solution for data analysts to dramatically improve their performance in extracting insights from big data.</b>  
	B4P is a powerful data integration and analytics engine with built-in programming language, and is purpose-built for ingestion, 
	integration, and analysis of many large complex data sources, generating rapid results in easily understood form for immediate use in
	Excel and other business intelligence tools. 

	<br/><br/>

	<img src="Images/B4P_General_Overview.jpg" alt="B4P Overview"><br/>
	+++,

	
    "Description 02:See also"::

	=== 300, 700, noheader, noframe column_1_bold
	__Language Guide__		| Comprehensive introduction to the feature-rich B4P language
	__Function Library Guide__	| Library containing ca. 800 procedures and functions
	===


	+++
},


// ------------------------------------------------------------------------------------------------
"Key Benefits" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Benefits" ],
    "Description 01:Introduction"::

	B4P, with its full name <b>Beyond Former Expectations</b> is a language which builds on long-lasting experience focussing on handling large amounts of data
	from different sources and providing efficient means to gather, align an analyze the data quickly and efficiently.  The language is based on 
	following key principles aiming to delivering performance, productivity and professionalism:

	* Learn the language quickly
	* Minimize the number of statements needed to solve challenging data processing problems
	* No advanced programming skills required (e.g. object oriented programming)
	* Minimize the time required to find solutions for your problems
	* B4P delivers maximum processing performance, especially with large data
	* The language is easy to read and understand
	* Able to access the Internet and negotiate with standard file formats like Excel, HTML, JSON, CSV, etc.
	* The language and execution engine requires no further installation of external libraries
	* Focus on the problem to solve, without wasting time coding algorithic details
	* A respectable library of procedures and functions, with focus on table data processing, is available

	<b>Focus on solving the problems and nothing else:</b>

	<br/><img src="Images/Description_Introduction_Flowchart.png" alt="B4P Typical Data Processing Steps">

	<br><br>
	By experience, successful solutions have been provided already <b>during the first consultation</b> with colleagues who needed solutions for
	their data processing needs.  They originally expected a cost and time estimation and a project plan for the project in order to approve the 
	budget for hiring programmers or consultants, and all that ended up not necessary at all because a few lines of code solved the problem
	and a lot of money saved.

	<br><br>
	The full web documentation has been compiled with a B4P program which extracts embedded raw documentation from source code and text files,
	creates one master file (JSON) and generates all pages including tables of contents, illustrations, and code examples which are automatically executed
	and their results included in the documentation.

	+++
},

// ------------------------------------------------------------------------------------------------
"Key Features":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Features" ],
    "Description 01:Key Benefits"::

	The overall intention is to provide a tool for you which helps to solve sophisticated problems with large amounts of data involved:
	* <b>Simple</b> procedural language easy to read, understand and lear.
	* Powerful langauge semantics <b>minimizes the number of statements</b> needed to solve the problem.
	* <b>Tables</b> of any size are one of the main data storage models and B4P is optimized for this
	* <b>No programming bureaucracy</b> such as declaring all the variables you need.
	* Significantly less need for <i>fine grained</i> programming like formulating loops, detailed algorithms, etc.
	* B4P understands data formats such as <b>Excel, HTML, XML, JSON, CSV</b>, etc. to retrieve data from Excel, database and the Internet directly
	* Extremely <b>flexible in naming</b> variables, tables, functions, procedures, etc. (natural language).
	* The execution engine and all libary files are very lean, very robust and start quickly.
	** Powerful table processing functions available such as merging, consolidating and applying pivots on tables
	** Powerful vector and matrix operations available for high-performance calculations on your tables and data
	* High focus on <b>cross-platform portability</b> (Windows, LINUX, etc.), enabling to run the same B4P program on different platforms.

	You will get to full speed quickly if you have some basic programming experience with a high level programming language or a macro
	language such as Visual Basic inside Excel.  B4P requires no knowledge about object oriented programming and specific algorithms to manage
	big data (e.g. indexing).  The syntax is, even though looking differently from other langauges, incredibly easy to understand and to use.
	In contrast to other programming langages, much fewer statements and time are needed, no additional libraries need to be installed 
	separately (like Panda for Python) and you experience unparalleled machine performance, forgetting the fact that B4P is an interpreted language.


	+++,
    "Description 02:No Graphic Gadgets"::

	Intentionally, B4P does not make use of any visual features such as graphical user interfaces.  For visualization purposes, powerful
	and highly standardized tools such as Microsoft Excel providie all features to do the visualziation, creating all required charts, etc.
	to round up you presentation.   The philosophy of B4P is to do all data processing first and very rapidly, and creating final Excel files
	for visualization purposes.

	<br><br>
	However, B4P is able to save tables into Excel files, with multiple sheets in one workbook, and, if needed, some formatting and styling already
	included (e.g. column widths, fonts, colors, number formats, autofilter, freezing panes, etc.).
	+++
},



// ------------------------------------------------------------------------------------------------
"Use Cases" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "use cases" ],
//  "Keywords":			[ "add unique keyowrds" ],
    "Description 01:Merging information from different sources"::

	<b>Problem Statement</b><br>
	Your organization has more than 25 branch offices in various countries around the world.  You are requesting product forecasts
	from them in regular time intervals.    Because every office is using different systems to store and manage their data,
	you will likely receive the information in different formats.  Past attempts asking them to harmonize their systems did not
	work because the switchover costs appeared too high.  Some are database exports, and others are hand-crafted
	Excel tables.

	<br><br>

	<b>The Solution</b>
	* Use different short B4P program routines to read the different data from every branch office
	* Automatically check for any inconsistencies, especially if data is provided in hand-made Excel sheets
	* Align the data using common header names, e.g. 'Customer Name', 'Deliery Date', etc.
	* Merge the data from the different sites
	* Notify you if two sites start dealing with the same customer
	* Consolidate and aggregate all forecast data according to your specifications
	* Add formatting, colors and style to make the report easy to use
	* Save the final report.

	
    "Description 02:Transfer from Machine to Machine"::

	<b>Problem Statement</b><br>
	You want to automate the information exchange between your ERP system (Enterprise Resource Planning) and the web-base
	CRM system (Customer Relationship Management).  Both systems provide means to upload and downlaod data with commands,
	so you can automate the data exchange entirely.  You want to be notified on discrepancies discovered in both databases
	which require manual alignment involving the sales managers.

	<br><br>

	<b>The Solution</b>
	* Let B4P initiate the data exports from both CRM and ERP systems
	* Check if the customer data and opportunities are matching with each other.  Inform about new customers and opportunities.
	* Check consistencies of key dates, for example planned order date.  Consider correcting minor differences (e.g. 1 week or less) automatically or notify sales to check the data
	* Refer to a foreign exchange information from a website in case the opportunities are valued in a different currency
	* Do necessary format conversions, such as numeric format (One generates EUR values, the other requires them in k EUR, etc.)
	* Initiate the data uploads into the ERP and CRM systems respectively
	* Generate a report with transactions made and issues requiring attention by sales management.



    "Description 03:Analyzing Stock Market Data"::

	<b>Problem Statement</b><br>
	Do the best with your savings by investing your money in a smart way better than others do.  You have identified multiple web pages which provide
	structured corporate information such as
	* Stock market data (in HTML format)
	* Credit rating information (e.g. from rating agencies like Standard and Poors)
	* Financial data of selected businesses (compiled in Excel files you can download)
	With all the infomation, you have a neat appraoch to make up you own idea whether the shares are fairly valued, overvalued
	or undervalued, so you your own decision base available whether to intiate buying or selling shares.

	<br><br>

	<b>The Solution</b>
	* Let download all stock market data on a daily base, as well as credit rating info and othe data.
	* Align the data to the company names, making sure no mistakes happen with similarly named businesses.  Use their symbol names as a common key.
	* Provide som accompanying information, e.g. the market areas the businesses are active in (e.g. banking and finance, pharmaceuticals, nutrition, etc.)
	* Do some calculation, for example if a business is doing better than the average market
	* Condense the analytics to a list which is easy to understand
	* Add color, formatting and style to make it even easier to read
	* Save the file and start investing.



    "Description 04:Comparing Bill of Materials for Commonalities"::

	<b>Problem Statement</b><br>
	Your enterprise has developed lots of different products which have similarities to a certain extent.  After some time, you have sufficient sales
	data available for the different products so you can do a cross-product analysis by checking for commonalities of the components and pre-assembly
	units used.  The engineers have provided a large number (200+) of bill of materials (part lists) for the various products, each of them listing
	several thousand parts.  You want to identify the commonalities (i.e. same or similar parts used)
	among the product variants, and weigh them up with the number of products sold, in order to initiate some strategic improvements in the product portfolio
	in order to optimize operational efficiency and profitability.

	<b>The Solution</b>
	* Use a simple statement to identify all bill of material files (do not name them individually in your program)
	* Load one file after the other and apply relational algebraic operations (e.g. intersections) in order to spot commonalities
	* Identify individual parts and similar pre-assembly units used frequently
	* Consolidate the information to an abstraction level you can use a a decision base
	* Add format, style and save the work.


    "Description 05:Writing the Programs to Solve these Problems"::

	B4P is predestined to let you <b>focus on the 'what'</b>, and hot 'how'.  The philosophy with this language is to express the
	steps briefly, with very few smart statements and using loops and variables as little as possible.  A large __function library__ is available
	to provide various means to solve your data processing solutions efficiently.

	+++


  },








// ------------------------------------------------------------------------------------------------
  "Getting Started" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting started" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	
	+++
  },



// ------------------------------------------------------------------------------------------------
  "Interactive Mode Workflow" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Interactive mode workflow" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	Note: Interactive commands, e.g. $ ls command, cannot be automated.
	You need to formulate the output contents by hand.  Same applies if you provoke exceptions (error messages).

    "Examples 01:Directory listing command"::
		$ ls
	+++,
    "Output 01:Output is shown manually"::
	.config         b4p          setup          abc.pdf         def.xls
        5 Files.
	+++
  },



// ------------------------------------------------------------------------------------------------
  "Programming Mode Workflow" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Programming mode workflow" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	
	+++,
    "Examples 01"::
	echo("Hello World");
	+++,
    "Output 01:This output is generated automatically.": "automatic",

    "Description 02:Overview"::

	Add text here

	+++
  },





// ------------------------------------------------------------------------------------------------
  "Getting Help" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting help" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::

+++
  },




// ------------------------------------------------------------------------------------------------
  "Examples" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Examples" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::
	
	+++

  }


B4PDOCU.STOP