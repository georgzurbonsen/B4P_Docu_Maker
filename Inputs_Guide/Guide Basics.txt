//
B4PDOCU.START


// ------------------------------------------------------------------------------------------------
"Overview" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "overview" ],
    "Description 01:Introduction to B4P"::

	<b> B4P a Low-Code Solution for data analysts to dramatically improve their performance in extracting insights from big data.</b>  
	B4P is a powerful data integration and analytics engine with built-in programming language, and is purpose-built for ingestion, 
	integration, and analysis of diverse complex data sources, generating rapid results in easily understood form for immediate use in
	Excel and other business intelligence tools. 

	<br><br>

	<br/><img src="Images/B4P_General_Overview.jpg" alt="B4P Overview"><br/>


	
    "Description 02:Getting Started"::

	=== 300, 700, noheader, noframe column_1_bold
	__User Guide__			| Overview and getting started
	__Reference Manual__		| Comprehensive language, features and function reference
	===



	+++
},


// ------------------------------------------------------------------------------------------------
"Key Benefits" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Benefits" ],
    "Description 01:Introduction"::

	B4P, with its full name <b>Beyond Former Expectations</b> is a language which builds on long-lasting experience focussing on handling large amounts of data
	from different sources and providing efficient means to gather, align an analyze the data quickly and efficiently.  The language is based on 
	following key principles aiming to delivering performance, productivity and professionalism:

	* Learn the language quickly
	* Minimize the number of statements needed to solve challenging data processing problems
	* No advanced programming skills required (e.g. object oriented programming)
	* Minimize the time required to find solutions for your problems
	* B4P delivers maximum processing performance, especially with large data
	* The language is easy to read and understand
	* Able to access the Internet and negotiate with standard file formats like Excel, HTML, JSON, CSV, etc.
	* The language and run-time machine requires no further installation of external libraries
	* Focus on the problem to solve, without wasting time coding algorithic details
	* A respectable library of procedures and functions, with focus on table data processing, is available

	<b>Focus on solving the problems and nothing else:</b>

	<br/><img src="Images/Description_Introduction_Flowchart.png" alt="B4P Typical Data Processing Steps">

	<br><br>
	By experience, successful solutions have been provided already <b>during the first consultation</b> with colleagues who needed solutions for
	their data processing needs.  They originally expected a cost and time estimation and a project plan for the project in order to approve the 
	budget for hiring programmers or consultants, and all that ended up not necessary at all because a few lines of code solved the problem
	and a lot of money saved.

	<br><br>
	The full web documentation has been compiled with a B4P program which extracts embedded raw documentation from source code and text files,
	creates one master file (JSON) and generates all pages including tables of contents, illustrations, and code examples which are automatically executed
	and their results included in the documentation.

	+++
},

// ------------------------------------------------------------------------------------------------
"Key Features":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Features" ],
    "Description 01:Key Benefits"::

	The overall intention is to provide a tool for you which helps to solve sophisticated problems with large amounts of data involved:
	* <b>Simple</b> procedural language easy to read, understand and lear.
	* Powerful langauge semantics <b>minimizes the number of statements</b> needed to solve the problem.
	* <b>Tables</b> of any size are one of the main data storage models and B4P is optimized for this
	* <b>No programming bureaucracy</b> such as declaring all the variables you need.
	* Significantly less need for <i>fine grained</i> programming like formulating loops, detailed algorithms, etc.
	* B4P understands data formats such as <b>Excel, HTML, XML, JSON, CSV</b>, etc. to retrieve data from Excel, database and the Internet directly
	* Extremely <b>flexible in naming</b> variables, tables, functions, procedures, etc. (natural language).
	* The run-time machine and all libary files are very lean, very robust and start quickly.
	** Powerful table processing functions available such as merging, consolidating and applying pivots on tables
	** Powerful vector and matrix operations available for high-performance calculations on your tables and data
	* High focus on <b>cross-platform portability</b> (Windows, LINUX, etc.), enabling to run the same B4P program on different platforms.

	You will get to full speed quickly if you have some basic programming experience with a high level programming language or a macro
	language such as Visual Basic inside Excel.  B4P requires no knowledge about object oriented programming and specific algorithms to manage
	big data (e.g. indexing).  The syntax is, even though looking differently from other langauges, incredibly easy to understand and to use.
	In contrast to other programming langages, much fewer statements and time are needed, no additional libraries need to be installed 
	separately (like Panda for Python) and you experience unparalleled machine performance, forgetting the fact that B4P is an interpreted language.


	+++,
    "Description 02:No Graphic Gadgets"::

	Intentionally, B4P does not make use of any visual features such as graphical user interfaces.  For visualization purposes, powerful
	and highly standardized tools such as Microsoft Excel providie all features to do the visualziation, creating all required charts, etc.
	to round up you presentation.   The philosophy of B4P is to do all data processing first and very rapidly, and creating final Excel files
	for visualization purposes.

	<br><br>
	However, B4P is able to save tables into Excel files, with multiple sheets in one workbook, and, if needed, some formatting and styling already
	included (e.g. column widths, fonts, colors, number formats, autofilter, freezing panes, etc.).
	+++
},



// ------------------------------------------------------------------------------------------------
"Use Cases" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "use cases" ],
//  "Keywords":			[ "add unique keyowrds" ],
    "Description 01:Merging information from different sources"::

	<b>Problem Statement</b><br>
	Your organization with branch offices in various countries are executing projects in their local markets, but need to
	provide forecasts for parts and semi-finished goods from you.  Because every office is using different systems to manage
	their demand and supply forecasts, and even follow different philosophies (e.g. weekly or monthly forecasting intervals),
	you want to find a solution to merge the decentrally generated information and generate one common supply and demand
	foreasting file.



	Add text here

	Consider table, or itemization like below
	* Item 1
	* Item 2

	+++,
    "Description 02:Features"::

	Add text here.
	Consider table, or itemization like below
	* Item 1
	* Item 2

	+++,
    "Description 03:Use case 2: Presidents from Wikipedia"::

	Add text here

	+++
  },








// ------------------------------------------------------------------------------------------------
  "Getting Started" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting started" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	
	+++
  },



// ------------------------------------------------------------------------------------------------
  "Interactive Mode Workflow" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Interactive mode workflow" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	Note: Interactive commands, e.g. $ ls command, cannot be automated.
	You need to formulate the output contents by hand.  Same applies if you provoke exceptions (error messages).

    "Examples 01:Directory listing command"::
		$ ls
	+++,
    "Output 01:Output is shown manually"::
	.config         b4p          setup          abc.pdf         def.xls
        5 Files.
	+++
  },



// ------------------------------------------------------------------------------------------------
  "Programming Mode Workflow" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Programming mode workflow" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	Add text here
	
	+++,
    "Examples 01"::
	echo("Hello World");
	+++,
    "Output 01:This output is generated automatically.": "automatic",

    "Description 02:Overview"::

	Add text here

	+++
  },





// ------------------------------------------------------------------------------------------------
  "Getting Help" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting help" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::

+++
  },




// ------------------------------------------------------------------------------------------------
  "Examples" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Examples" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::
	
	+++

  }


B4PDOCU.STOP