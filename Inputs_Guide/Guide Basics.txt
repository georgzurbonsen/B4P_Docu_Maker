	//
B4PDOCU.START


// ------------------------------------------------------------------------------------------------
"User Guide - Overview" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "User Guide" ],
    "Description 01:Introduction to B4P"::

	<b>B4P is a Low-Code Solution for data analysts to dramatically improve their performance in extracting insights from big data.</b>  
	B4P is a powerful data integration and analytics engine with built-in programming language, and is purpose-built for ingestion, 
	integration, and analysis of many large complex data sources, generating rapid results in easily understood form for immediate use in
	Excel and other business intelligence tools. 

	<br/><br/>

	<img src="Images/B4P_General_Overview.png" alt="B4P Overview"><br/>
	+++,

	
    "Description 02:See also"::

	=== 300, 700, noheader, noframe column_1_bold
	__Language Guide__		| Comprehensive introduction to the feature-rich B4P language
	__Function Library Guide__	| Library containing ca. 800 procedures and functions
	===


	+++
},


// ------------------------------------------------------------------------------------------------
"Key Benefits" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Benefits" ],
    "Description 01:Introduction"::

	B4P, with its full name <b>Beyond Former Expectations</b> is a language which builds on long-lasting experience focussing on handling large amounts of data
	from different sources and providing efficient means to gather, align an analyze the data quickly and efficiently.  The language is based on 
	following key principles aiming to delivering performance, productivity and professionalism:

	* Learn the language quickly
	* Minimize the number of statements needed to solve challenging data processing problems
	* No advanced programming skills required (e.g. object oriented programming)
	* Minimize the time required to find solutions for your problems
	* B4P delivers maximum processing performance, especially with large data
	* The language is easy to read and understand
	* Able to access the Internet and negotiate with standard file formats like Excel, HTML, JSON, CSV, etc.
	* The language and execution engine requires no further installation of external libraries
	* Focus on the problem to solve, without wasting time coding algorithic details
	* A respectable library of procedures and functions, with focus on table data processing, is available

	<b>Focus on solving the problems and nothing else:</b>

	<br/><img src="Images/Description_Introduction_Flowchart.png" alt="B4P Typical Data Processing Steps">

	<br><br>
	By experience, successful solutions have been provided already <b>during the first consultation</b> with colleagues who needed solutions for
	their data processing needs.  They originally expected a cost and time estimation and a project plan for the project in order to approve the 
	budget for hiring programmers or consultants, and all that ended up not necessary at all because a few lines of code solved the problem
	and a lot of money saved.

	<br><br>
	The full web documentation has been compiled with a B4P program which extracts embedded raw documentation from source code and text files,
	creates one master file (JSON) and generates all pages including tables of contents, illustrations, and code examples which are automatically executed
	and their results included in the documentation.

	+++
},

// ------------------------------------------------------------------------------------------------
"Key Features":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Key Features" ],
    "Description 01:Key Benefits"::

	The overall intention is to provide a tool for you which helps to solve sophisticated problems with large amounts of data involved:
	* <b>Simple</b> procedural language easy to read, understand and lear.
	* Powerful langauge semantics <b>minimizes the number of statements</b> needed to solve the problem.
	* <b>Tables</b> of any size are one of the main data storage models and B4P is optimized for this
	* <b>No programming bureaucracy</b> such as declaring all the variables you need.
	* Significantly less need for <i>fine grained</i> programming like formulating loops, detailed algorithms, etc.
	* B4P understands data formats such as <b>Excel, HTML, XML, JSON, CSV</b>, etc. to retrieve data from Excel, database and the Internet directly
	* Extremely <b>flexible in naming</b> variables, tables, functions, procedures, etc. (natural language).
	* The execution engine and all libary files are very lean, very robust and start quickly.
	** Powerful table processing functions available such as merging, consolidating and applying pivots on tables
	** Powerful vector and matrix operations available for high-performance calculations on your tables and data
	* High focus on <b>cross-platform portability</b> (Windows, LINUX, etc.), enabling to run the same B4P program on different platforms.

	You will get to full speed quickly if you have some basic programming experience with a high level programming language or a macro
	language such as Visual Basic inside Excel.  B4P requires no knowledge about object oriented programming and specific algorithms to manage
	big data (e.g. indexing).  The syntax is, even though looking differently from other langauges, incredibly easy to understand and to use.
	In contrast to other programming langages, much fewer statements and time are needed, no additional libraries need to be installed 
	separately (like Panda for Python) and you experience unparalleled machine performance, forgetting the fact that B4P is an interpreted language.


	+++,
    "Description 02:No Graphic Gadgets"::

	Intentionally, B4P does not make use of any visual features such as graphical user interfaces.  For visualization purposes, powerful
	and highly standardized tools such as Microsoft Excel providie all features to do the visualziation, creating all required charts, etc.
	to round up you presentation.   The philosophy of B4P is to do all data processing first and very rapidly, and creating final Excel files
	for visualization purposes.

	<br><br>
	However, B4P is able to save tables into Excel files, with multiple sheets in one workbook, and, if needed, some formatting and styling already
	included (e.g. column widths, fonts, colors, number formats, autofilter, freezing panes, etc.).
	+++
},



// ------------------------------------------------------------------------------------------------
"Use Cases" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "use cases" ],
//  "Keywords":			[ "add unique keyowrds" ],
    "Description 01:Merging information from different sources"::

	<b>Problem Statement</b><br>
	Your organization has more than 25 branch offices in various countries around the world.  You are requesting product forecasts
	from them in regular time intervals.    Because every office is using different systems to store and manage their data,
	you will likely receive the information in different formats.  Past attempts asking them to harmonize their systems did not
	work because the switchover costs appeared too high.  Some are database exports, and others are hand-crafted
	Excel tables.

	<br><br>

	<b>The Solution</b>
	* Use different short B4P program routines to read the different data from every branch office
	* Automatically check for any inconsistencies, especially if data is provided in hand-made Excel sheets
	* Align the data using common header names, e.g. 'Customer Name', 'Deliery Date', etc.
	* Merge the data from the different sites
	* Notify you if two sites start dealing with the same customer
	* Consolidate and aggregate all forecast data according to your specifications
	* Add formatting, colors and style to make the report easy to use
	* Save the final report.

	
    "Description 02:Transfer from Machine to Machine"::

	<b>Problem Statement</b><br>
	You want to automate the information exchange between your ERP system (Enterprise Resource Planning) and the web-base
	CRM system (Customer Relationship Management).  Both systems provide means to upload and downlaod data with commands,
	so you can automate the data exchange entirely.  You want to be notified on discrepancies discovered in both databases
	which require manual alignment involving the sales managers.

	<br><br>

	<b>The Solution</b>
	* Let B4P initiate the data exports from both CRM and ERP systems
	* Check if the customer data and opportunities are matching with each other.  Inform about new customers and opportunities.
	* Check consistencies of key dates, for example planned order date.  Consider correcting minor differences (e.g. 1 week or less) automatically or notify sales to check the data
	* Refer to a foreign exchange information from a website in case the opportunities are valued in a different currency
	* Do necessary format conversions, such as numeric format (One generates EUR values, the other requires them in k EUR, etc.)
	* Initiate the data uploads into the ERP and CRM systems respectively
	* Generate a report with transactions made and issues requiring attention by sales management.



    "Description 03:Analyzing Stock Market Data"::

	<b>Problem Statement</b><br>
	Do the best with your savings by investing your money in a smart way better than others do.  You have identified multiple web pages which provide
	structured corporate information such as
	* Stock market data (in HTML format)
	* Credit rating information (e.g. from rating agencies like Standard and Poors)
	* Financial data of selected businesses (compiled in Excel files you can download)
	With all the infomation, you have a neat appraoch to make up you own idea whether the shares are fairly valued, overvalued
	or undervalued, so you your own decision base available whether to intiate buying or selling shares.

	<br><br>

	<b>The Solution</b>
	* Let download all stock market data on a daily base, as well as credit rating info and othe data.
	* Align the data to the company names, making sure no mistakes happen with similarly named businesses.  Use their symbol names as a common key.
	* Provide som accompanying information, e.g. the market areas the businesses are active in (e.g. banking and finance, pharmaceuticals, nutrition, etc.)
	* Do some calculation, for example if a business is doing better than the average market
	* Condense the analytics to a list which is easy to understand
	* Add color, formatting and style to make it even easier to read
	* Save the file and start investing.



    "Description 04:Comparing Bill of Materials for Commonalities"::

	<b>Problem Statement</b><br>
	Your enterprise has developed lots of different products which have similarities to a certain extent.  After some time, you have sufficient sales
	data available for the different products so you can do a cross-product analysis by checking for commonalities of the components and pre-assembly
	units used.  The engineers have provided a large number (200+) of bill of materials (part lists) for the various products, each of them listing
	several thousand parts.  You want to identify the commonalities (i.e. same or similar parts used)
	among the product variants, and weigh them up with the number of products sold, in order to initiate some strategic improvements in the product portfolio
	in order to optimize operational efficiency and profitability.

	<b>The Solution</b>
	* Use a simple statement to identify all bill of material files (do not name them individually in your program)
	* Load one file after the other and apply relational algebraic operations (e.g. intersections) in order to spot commonalities
	* Identify individual parts and similar pre-assembly units used frequently
	* Consolidate the information to an abstraction level you can use a a decision base
	* Add format, style and save the work.


    "Description 05:Writing the Programs to Solve these Problems"::

	B4P is predestined to let you <b>focus on the 'what'</b>, and hot 'how'.  The philosophy with this language is to express the
	steps briefly, with very few smart statements and using loops and variables as little as possible.  A large __function library__ is available
	to provide various means to solve your data processing solutions efficiently.

	+++


  },





"Getting Started" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting started" ],
//  "Keywords":			[ "add unique keywords" ],
    "Description 01:Overview"::

	The follwing sections given an introduction to some common functions which support each of the eight
	following processing steps conveniently.

	<br/><img src="Images/Description_Introduction_Flowchart.png" alt="B4P Typical Data Processing Steps">


	+++
},


"1. Data Ingestion" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Import source data" ],
    "Description 01:Overview"::

	B4P provides various means to ingest, i.e. import and load data from different sources.

	* __table load(__) for loading files in basic formats like text, CSV, HTML, JSON, XML, etc.
	* __table load excel file(__) for loading sheets from Excel files
	* __variable load(__) for loading hierarchically structured JSON data into a structured B4P __variable__.


	The Internet contains rich information sources which could be useful for data processing needs.
	Only two function calls are needed to retrieve tables from the web:

	* __file download(__) and __file download overwrite(__) -- The latter one allows overwriting existing files.
	* __table load(__)


	<hr>

    "Description 03:Example with Country Table from Wikipedia"::

	+++,
    "Examples 03:Simple Example"::
	include(Support Library);
	file download overwrite        ( "https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes", ISO_Codes.html );
	table load                     ( countries, ISO_Codes.html, HTML, Current ISO 3166 country codes);

	table list( countries, briefly, 5, 1st col, 0, last col, 1 ); // List first and last 5 rows and 2 columns only
	table save                     ( countries, temp.csv); // Hide!  Step 1 ends
	+++,
    "Output 03:Original table as retrieved from Wikipedia": "automatic",
    "Description 04:"::
	You may notice the following:
	* The header row is not in the top.
	* Various fields contain references to further literature, e.g. [a], [aa], etc.
	* Note the missing space in the entry for Western Saharah.  An exotic UNICODE 'hair space' symbol exists inside.
	For these reasons above, some initial cleanups are needed which are described on the next page.
	+++
},




"2. Semantic Alignment" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Clean Data" ],
    "Description 01:Overview"::

	Data obtained from external sources may be named and structured differently, and the table may contain
	unnecessary contents which need to be cleaned up first, and/or semantic aligneents made.

	* __table lift header row(__): Specify one (or more) uniqe header names and the headers will shift to the 1st row.  The data below moves up.
	* __table correct headers(__): Data received from different organization may contain different headers or even spelling mistakes.  Use this fucntion to clean up.
	* __table rename headers(__): Rename headers to something easier to understand
	* __clean numeral(__): Convert hard-to-digest values like "GBP 300,15-" to machine-readable numerals like "-300.15".
	* __table process selected rows__<b>( table name, [Answer]=+'yes,true,ja,oui', [Answer]=yes );</b> to align some contents
	* __table process cells__<b>( [.] = __trim__([.]) );</b> to remove all dangling spaces in the fiels, e.g. ' Hello ' to 'Hello'.
	* __table keep selected rows(__) / __table delete selected rows(__): Pre-screen the table for rows you want to keep or discard
	* __table delete blank rows(__): A simple function call to remove all blank rows.

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 1)"::

	The file downloaded from Wikipedia does indeed need some cleanup.

	* First, the table contain two header rows where the 2nd header is the row of interest containing column header names.
	* The header names are sophisticated, e.g. "Internet ccTLD". 
	* In addition, lots of cross references like <b>[1]</b> are included and they distract.
	* Various fields, particularly country names, contain leading spaces.

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	table load                     ( countries, temp.csv); // Hide!  Step 2 begins
	// The table contains an exotic 'hairline spatium' space symbol, various fields begin with spaces,
	// and references with 1 or 2 characters in brackets, e.g. [a], [aa].  The following two statements do the cleanup.
	// Note: literal(...) is needed in roder to avoid error messages when numbers are read from the table.

	table process all cells        ( countries, [.] = replace all( literal([.]), {'[?]', '[??]' }, '' ) );
	table clean                    ( countries, trim spaces );

	table lift header row          ( countries ); // Find header row automatically
	table process                  ( countries, [Country name]= left([Country name], ' (') ); // Remove name additions

	table list( countries, briefly, 5, 1st col, 0, last col, 1 ); // List first and last 5 rows and 2 columns only

	table save                     ( countries, temp.csv); // Hide!  Step 2 ends
	+++,

    "Output 02:The table has been cleaned up.": "automatic"

},



"3. Validate and Explore":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Validate and Explore" ],
    "Description 01:Overview"::

	In the third step, consider further checks on the tables, e.g. that all required headers are available,
	the data inside the table is consistent, etc.  The functions listed below are some commonly used ones:

	* __table check headers(__):  B4P checks if all headers specified here exist in the table.  Various checking options exist, e.g. you can also check that no additional column headers \
	  than those specified are in the table, or even check for complying a certain sequence.  You can also identify repeated header names.
	* __table keep columns(__): Only the specified columns will be kept. The others will be discarded.
	* __table describe(__): B4P checks the contents in selected columns and provides description.  E.g. you can easily identify if a particular \
	  column contains telephone numbers, simple names, dates, and not something else.
	* __table check duplicates(__) checks repeated entries in case redundant entries need to be removed or consolidated.
	* __table fill vertically(__) can be used to replicate contents in rows below if they are blank, assuming the same contents as above are assumed.
	* __table rename headers(__) lets you rename column headers in order to simplify or harmonize header names across multiple tables.
	* __table lookup(__) and related functions allows you to look up data from other tables.


	If the loaded table does actually contain a collection of mutiple sub-tables, then consider the fuctions desribed in the section __Explore and filter and extract sub-tables__.

	<br><br>
	During the validation process, consider further preparation steps on the table.
	

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 2)"::

	Do some validation on this table:

	* Check for header names and keep those columns.  Discard the others.
	* Some rows contain '...' because these country names are interpreted as regions belonging to other countries.\
	  Example: 'Akrotiri and Dhekelia – See United Kingdom, The'

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	table load                     ( countries, temp.csv); // Hide!  Step 3 begins - Semantic alignment
	table keep columns             ( countries, { Country name, 'Alpha-2 code', 'Alpha-3 code' } );
	table delete selected rows     ( countries, ['Alpha-2 code']=='...' );
	table delete columns           ( countries,  'Alpha-3 code' );

	// Check if the 2-character country code is always consisting of 2 characters.
	table process selected rows    ( countries, ['Alpha-2 code']{}!=2, echo("The country code ", ['Alpha-2 code'], " may be incorrect" ) );

	// Some country names need to be harmonized with a language list to combine, e.g. 'Holy See' and 'Vatican City'.

	table initialize               ( country name alignment,
	{ { Country code, Aligned country name },
	  { KR, South Korea },                           { KP, North Korea },
	  { US, United States },                         { VN, Vietnam },
	  { BN, Brunei },                                { CV, Cape Verde },
	  { CZ, Czech Republic },                        { LA, Laos }, 
	  { RU, Russia },                                { VA, Vatican City },
	  { SY, Syria },                                 { CC, 'Cocos (Keeling) Islands' },
	  { CD, 'Democratic Republic of the Congo' },    { CG, 'Republic of the Congo' },
	  { TL, East Timor },                            { CI, Ivory Coast },
	  { FM, 'Federated States of Micronesia' },      { MM, 'Myanmar (Burma)' },
	  { PS, Palestine },                             { TZ, Tanzania },
	  { ST, Sao Tome and Principe },                 { SO, Somaliland } } );

	table lookup                   ( countries, 'Alpha-2 code', Country name, country name alignment, Country code, Aligned country name );

	table list( countries, briefly, 5  ); // List first and last 5 rows and 2 columns only
	table save                     ( countries, temp.csv); // Hide! Step 3 ends
	+++,

    "Output 02:The table has been validated.": "automatic"

},




"4. Merge and Consolidate":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Merge and Consolidate" ],
    "Description 01:Overview"::

	In many application cases, information from multiple sources need to be merged and overlapping information consolidated.
	Data management associated with merging or rearanging mulitple organizations are typical examples.  Typical functions to
	choose from are

	* __table merge(__) and related functions: Merge two tables where identification columns are defined to identify common data to be consoldated.
	* __table lookup(__) is a suitable alternative combining data from two tables into one.
	* __table integrate(__) works similar like__table lookup(__), but applies rules to combine existing data with data looked up, e.g. adding them up.
	* __table compare(__) is useful to check a current and an older data and isolate all relevant differences for further processing.

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 3)"::

	Do some validation on this table:

	* Load a list of languages by countries from Wikipedia
	* Align country names in the country table, e.g. 'Viet Nam' to 'Vietnam'.
	* Merge the language data into the country data.

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	table load                     ( countries, temp.csv); // Hide! Step 4 begins

	// Download a list of languages from Wikipedia and do the clean-up first.

	file download overwrite        ( "https://en.wikipedia.org/wiki/List_of_official_languages_by_country_and_territory", languages.html );
	table load                     ( languages, languages.html, HTML, List of countries );
	table process all cells        ( languages, [.] = replace all( literal([.]), {'[?]', '[??]', '[citation needed]' }, '' ) );
	table clean		       ( languages, trim spaces );
	table delete selected rows     ( languages, [Country]=Country ); // Headers are repeated inside the long table.
	table keep columns             ( languages, {Country, Official language} );
	table rename headers           ( languages, {Country, Official language}, { Country name, Languages } );

	// Merge the data.
	// Note Some languages come without countries (see bottom of table), and vice versa.

	table merge extend columns     ( languages, countries, Country name );
	table list( countries, briefly, 8 ); // List first and last 8 rows only

	table save                     ( countries, temp.csv); // Hide!
	+++,

    "Output 02:Merging has been done.": "automatic"

},





"5. Enrichment":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Enrichment" ],
    "Description 01:Overview"::

	Data enrichment typically involves adding furhter valuble information.  For a list of countries, some economic or demographic information
	could be of interest.  

	* __table lookup(__) is a suitable alternative combining data from two tables into one.
	* __table integrate(__) works similar like__table lookup(__), but applies rules to combine existing data with data looked up, e.g. adding them up.
	* __table process(__) lets you process every rows with algorithms of choice.

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 4)"::

	Do some enrichment this table:

	* In this simple country and language example, no further enrichment is needed.

    "Examples 02:Simple Example"::
	include ( Support Library );
	table load                     ( countries, temp.csv); // Hide!

	// Some language specifications can be very long

	echo(new line, "Example of long contents: ", [countries:Country name,Switzerland,Languages] );
	echo(new line, "Let's cut to max. 25 characters, then remove last incomplete word and add '...' behind", new line);

	table process                  ( countries, while (find([Languages],'(')>=0) 
	                                                [Languages] = trim( outside exclude ( [Languages], '(', ')' ))  );
	max[] = 25;
	table process selected rows    ( countries, [Languages]{}>max[], 
	                                            [Languages] = left last match( left( [Languages], max[] ), ' ') + " ..." );

	echo(new line, "Delete all countries without languages and vice versa...");
	table delete selected rows     ( countries, ['Alpha-2 code']=='' | [Languages]=='' );

	table list( countries, briefly, 8 ); // List first and last 8 rows only
	table save                     ( countries, temp.csv); // Hide!  Step 5 ends
	+++,

    "Output 02:Enrichtment done.": "automatic"

},






"6. Align and Process":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Align and Process" ],
    "Description 01:Overview"::

	Take the opportunity to carry out analyses, depending on the problem you intend to solve.
	Following functions may be suitable:

	* __table process selected rows(__) to apply algorithms of choice on rows selected with an expression
	* __table sort rows(__) to sort tables by alphabetic, numeric, date orders, etc.
	* Do a pivot by combining __table spread(__) to spread values horizontally and then do __table consolidate(__) eliminate unnecessary rows
	* Do a pivot by moving horizontal data to vertical data with __table serialize(__)

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 5)"::

	Do some validation on this table:

	* Load a list of languages by countries from Wikipedia
	* Align country names in the country table, e.g. 'Viet Nam' to 'Vietnam'.
	* Merge the language data into the country data.

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	table load                     ( countries, temp.csv); // Hide!  Step 6 begins
	languages in focus[]           = { Chinese, English, French, Spanish, German, Russian, Hindi };
	table keep selected rows       ( countries, (tokenize( [Languages], {}, {' ',','} ) & languages in focus[]) != {} );

	table insert columns           ( countries, languages in focus[] );
        table process cells in columns ( countries, languages in focus[], if ([Languages] = '*'+softquoted literal([.,0])+'*') [.]=1; );

	table list( countries, briefly, 8 ); // List first and last 8 rows only

	table delete columns           ( countries, {'Alpha-2 code', Languages} );

	table copy table               ( countries, summary );
	table keep columns             ( summary, languages in focus[] );
        table consolidate              ( summary, {}, languages in focus[], sum );
	table transpose                ( summary );
	table insert rows              ( summary, 0 );
	[ summary: ..,0]               = { Language, '# Countries' };
	table sort rows                ( summary, '# Countries', numeric down);

	echo ("Brief summary on key languages:");
	table list ( summary );
	table save                     ( countries, temp.csv); // Hide!
	+++,

    "Output 02:Processing completed.": "automatic"

},






"7. Format and Style":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Format the results" ],
    "Description 01:Overview"::

	As a first step, consider formatting some data, e.g. aligning them, etc, e.g. with __table format numbers(__).
	If you plan to save the output in Excel or HTML format, then consider to apply some style attributions.

	* __table style auto width(__) will adapt the column widths based on the lengths of the contents.
	* __table style theme(__) applies a graphic theme on the table, e.g. highlighted header row and zebra pattern in the rows below for better readability
	* __table style table(__) to apply further formatting, e.g. setting an autofilter feature on the header row or freezing top rows or left columns
	* __table style rows(__), __table style columns(__), ad __table style cells(__) to apply specific formats and colors on specified table locations.

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 6)"::

	Do some validation on this table:

	* Apply a theme "Zebra"
	* Autowidth, but at least 12 Excel width units wide
	* Set autofilter on header row and freeze it

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	include ( Style Library );
	include ( Office Library );
	table load                     ( countries, temp.csv); // Hide!

	table style theme              ( countries, Zebra, pattern, 2 );
	table style auto width         ( countries, min, 12 );
	table style table              ( countries, sheet, freeze rows, 1, autofilter, 0 );
	echo("Formatting done.");
	+++,

    "Output 02:The table has been formatted.": "automatic"

},




"8. Save and Export":
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Save and Export" ],
    "Description 01:Overview"::

	In a final step, save the tables in data formats needed, e.g. Excel, CSV, HTML, JSON and text files.

	* __table save(__) saves tables in text formats, CSV, HTML, JSON tables, etc.
	* __variable save(__) saves a B4P variable tree in a JSON file
	* __table save excel file(__) save one or multiple tables in Excel format

	<br>
	<hr>
    "Description 02:Wikipedia Example (continued from step 7)"::

	Save as Excel file

	* Apply a theme "Zebra"
	* Autowidth, but at least 12 Excel width units wide
	* Set autofilter on header row and freeze it

	+++,
    "Examples 02:Simple Example"::
	include ( Support Library );
	include ( Style Library );
	include ( Office Library );
	table load                     ( countries, temp.csv); // Hide!
// Hide!
	table style theme              ( countries, Zebra, pattern, 2 ); // Hide!
	table style auto width         ( countries, min, 12 ); // Hide!
	table style table              ( countries, sheet, freeze rows, 1, autofilter, 0 ); // Hide!
// Hide!

	table save excel file          ( countries, "Countries and Key Langauges", "Images/Countries.xlsx" ); // Hide!
	file delete ( temp.csv ); // Hide!
	+++,

	"Output 02:All done.": "automatic",
	"Description 03:Viewing the Results:"::
	Test Click on the file name open the file with Excel (.xlsx) : <a href="Images/Countries.xlsx" >Countries.xlsx</a> (Excel .xlsx format).	
	+++
},






// ------------------------------------------------------------------------------------------------
  "Getting Help" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Getting help" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::

+++
  },




// ------------------------------------------------------------------------------------------------
  "Examples" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Examples" ],
//  "Keywords":			[ "add unique keywords" ],

    "Description 01:Overview"::
	
	+++

  }


B4PDOCU.STOP