//
B4PDOCU.START


"Execution Engine" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Execution Engine" ],
    "Description 01:Introduction"::

	The B4P execution engine, including some library files written in B4P langauge, is the key software you need to install in order to make full use of the
	language.  The engine contains a poweful <b>language interpreter</b> which understands and executes the B4P source code directly and without cluttering up your
	drive with additional files.  A wide spectrum of high-performing functions to handle large data structures such as tables and variable trees are integrated
	in the execution engine.

    "Description 02:Lean and Simple"::

	Intentionally, the B4P execution engine is exceptionally lean (few megabytes). Its compactness make it so powerful, i.e. starting immediately after the 
	mouse click and no waiting time until your B4P program starts processing.

    "Description 03:Intentionally no Graphic User Interface"::

	The B4P execution engine is a (probably old-fashioned) console application.  For a good reason, we have left out the nice Windows user interface features,
	and there are some very good rasons for that:

	* <b>Unparalleled start-up performance</b>: The B4P program runs instantaneouly after the mouse click or pushing [Enter].
	* <b>Cross-Platform Portability</b>: B4P runs equally well under Windows, Linux and MacOS.  Additional operating systems can be included in the future.
	* <b>On-line documentation</b> is fully integrated in the B4P execution engineand is available on your fingertips any time.

	GUI features are in most cases more platform-dependent than you are thinking and may slow down overall start-up and execution performance.  
	This pretended disadvantage is compensated by its superior machine processing performance. Long story short:<br>
	<b>We minimize our footprint to provide highest performance, and you maximize from these benefits to get your work done quickly!</b>

    "Description 04:Excel with Excel"::

	For visualization purposes, powerful and highly standardized tools existing today such as Microsoft Excel providie all features to do the visual parts
	such as creating all the charts you need for your presentations.  It makes no sense to let B4P compete against such tools.  The philosophy of B4P is
	to focus on performing all data processing with <i>bare metal</i> machine performance and creating all Excel files (and other file formats like HTML)
	which you can open with such tools to complete the visualization tasks.

	<br><br>

	B4P is able to save tables into Excel files, with multiple sheets in one workbook, and, if needed, some formatting and styling already included 
	(e.g. column widths, fonts, colors, number formats, autofilter, freezing panes, etc.).

	+++
},


"Installing and Starting Up" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Installting and starting up" ],
    "Description 01:Introduction"::

	Please refer to __Installation and Setup__ section in the User's Guide which summarizes installing B4P execution engine and the different ways how to start up
	on the different system platforms.

	<br><br>
	The following sections elaborate on the starting procedure and execution behavior of the B4P execution engine and how applied __command line switches__ influence this staring behavior.
	+++
},



"Command Line Switches":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Command line switches" ],
    "Keywords":			[ "Command line switch", "Command line options", "Short command line options", "Short options", "Switches" ],
    "Description 01:Introduction"::

	If B4P is started with typed commands, then command line switches (or short command line options) can be provided along with other command line arguments such as the B4P program.
	While regular command line parameters will be added to the __system variable__ called <b>command line arguments[]</b> and are visible to the running
	B4P program, the command line switches are not.  They are provided to influence the start-up, run-time and existing procedure of B4P.  The available
	run-time parameters are described in the table below.

	<br><br>

	Whereas short command line options are reserved for and interpreted by the B4P execution engine, the __long options__ beginning with two consecutive
	minus signs are solely provided for user-written B4P programs.

	<br>

	=== 100, 900, bold_column_1
	Swtich	| Description
	-c	| Suppress all console specific features (use standard input instead of console input, no console control like cursor movement and colors).  Use this option for batch processing.
	-d	| Normally, at start-up, B4P changes the working directory to the directory where the B4P program file to execute is located. <br>\
		  This command line switch suppresses this and leaves the working directory unchanged.
	-i	| (lower-case i) Start B4P and enter __interactive mode__ immediately.  Even if a B4P program has been specified, the program will not be loaded and started</b>.
	-I	| (upper-case i) MacOS / Linux only: Starty B4P in installation mode where the welcoming text and loading library files are skipped.  Not recommended for regular B4P program use.  The switch '-c' will also come effective here to suppress console features.
	-w	| Suppress B4P welcome text. <br>\
		  <u>Attention 1:</u> Also the license info text (e.g. demo mode only if no valid license exists) will be hidden.<br>\
		  <u>Attention 2:</u> The B4P initialization program "B4P Init.b4p" will not be started.  This file would otherwise load the default B4P library files (e.g. "Support Library").<br>\
		  The system variable <b>runtime settings[verbose]</b> is set to <b>quiet</b>. This feature is useful for batch scripts which shall run fast and not outputting unnecessary text.
	-q	| Starts the B4P program with runtime <b>settings[verbose]= quiet</b> to suppress any unnecessary output.<br>\
		  To suppress the welcome text, too, use teh command lie swtich -w, too.
	-x	| Skip the "<i>Press [Enter] to end the program</i>" before B4P is exiting.  Useful for running B4P programs from batch scripts without user interaction
	===

	Invalid command line options will provide descriptive error messages and stop the B4P execution engine.<br><br>
	Command line arguments may be freely ordered and specified as combined or individual parameters.  See the example below.
	+++,

    "Examples 07:5 ways to start B4P with the same command line options"::
	b4p -wx myprogram.b4p	// All 5 variations are equivalent.
	b4p myprogram.b4p -wx
	b4p myprogram.b4p -xw
	b4p -w -x myprogram.b4p
	b4p myprogram.b4p -w -x
	+++,

     "See also": [ "Starting Behavior" ]
},





"Long Options":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Long Options" ],
    "Keywords":			[ "Long command line options" ],
    "Description 01:Introduction"::

	<i>Long options</i> are command line options beginning wtih two consecutive minus signs (--) followed by an option name.  In addition, option values
	may be assigned to that name if immediately followed by an equal sign and further values.  For example <b>b4p test.b4p --silent --use_value=3</b>
	specifies two long options.  The long options are passed as command line parameters to the B4P program and can be used for individual purposes.
	In contrast to short command line options, it does not interprete the long options as they are solely provided for use by B4P programs.

	<br><br>
	See the B4P function description of __get long options(__) where some code examples are shown.

	+++,
     "See also": [ "get long options" ]
},


"Starting Behavior":
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Starting Behavior" ],
    "Description 01:Introduction"::

	The B4P execution engine undertakes a few steps before the specified B4P is started up.  The flow chart shown below illustrates this.
	Start-up begins with a common initialzation procedure, beginnign with identifying __command line switches__ if they are provided, and then
	show a welcome-text (if not disabled with <b>-q</b> or <b>-w</b>), initialize all system variables and retrieve the locale settings from <b>B4P Locale Settings.json</b>
	located in the application data directory.  The locale settings has originally been selected during installation, and the function __set locale(__) 
	is available to change tem without new installation.

	<br><br>

	A decision point follows the initial sequence which does either branch right to load a specified B4P Program file, or to the left if no such file has been
	specified, or straight down to enter interactive mode, e.g. with the __command line switch__ <b>-i</b>.  On the left-hand path, B4P looks for 'main.b4p' in the
	current directory and then in the memmorized starting directory.  On the right-and path, B4P opens the specified program file.
	In all three cases, unless if the command line switch <b>-w</b> is applied, the <b>B4P Init.b4p</b> initialization program in the library directory will be called to
	carry out some initial preparations which include:

	* "Utility Library": A collection of supplementary B4P functions
	* "Zip Library": File compression and decompression
	* "Office Library": Ability to access Microsoft office meta data and load Excel files
	* "Support Library": Comprehensive help and support features

	The intialization prgraom <b>B4P Init.b4p</b> will also call the user initialization program __My B4P Init.b4p__, a user customizable initialization program twice (before and after including
	the library files), as long the file is available in the user application directory.  For more details, see the section on __user initialization program__


	Once this has happend, then the loaded B4P program will be started or interactive mode is activated, depending on the parameters provided.

	<br/><img src="Images/REF_Starting_Behavior.png" alt="B4P Starting Behavior"><br/>

	+++
},


"User Initialization Program" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "User initialization program" ],
    "Keywords":			[ "custom initialization program","My B4P Init.b4p" ],
    "Description 01:Introduction"::

	If a file called <b>My B4P Init.b4p</b> is avaiable in the directory for user application data, then it will be loadeod executed:
	The directory name is specified in the system variable <b>system info[user app data directory b4p]</b> and is typically
	* <b>Windows:</b> C:\users\Your User Name\AppData\Local\b4p
	* <b>Linux/MacOS:</b> /home/username/.profile/b4p/
	
	This file will be executed twice, namely before the library files are loaded, and after this.  For this reason, the template code prepared
	in this file makes use of the __once(__) {...} __else__ {...} clause where the first code block after <b>once</b> is executed at the first
	instance, and the code block after <b>else</b> is executed at the 2nd instance.

	<br><br/><img src="Images/REF_Starting_Behavior_2.png" alt="B4P Starting Behavior"><br/><br>

	The original file <b>My B4P Init.b4p</b> provided to you contains the following simple contents:  Silencing output messages while loading
	the libraries by setting <b>system info[verbose]</b> to <b>quiet</b>, and in the 2nd call back to <b>low</b> to allow minimum messages
	and progress information to occur. See __verbose__ for more information about this.

	+++,
    "Examples 01:"::
once // Following code is executed at the 1st call before loading library files begins
{

//	echo("Starting to load the standard library files ...");
	runtime settings[verbose] = quiet;

}
else // Following code is executed at the 2nd call after all library files have been loaded
{

//	echo("... Done.");
	runtime settings[verbose] = low;
}
	+++
},



"Licensing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "licensing" ],
    "Keywords":			[ "licensing","unlock" ],
    "Description 01:Licensing Scheme"::

	Without possessing a license, B4P will start in a demo mode and exploit the full performance.  The demo mode is useful for evaluations,
	demo, education and doing small projects.  However, following restrictions apply:

	=== 240, 760, noframe_1stcolbold, noheader
	Table size restrictions when saving	| Tables can only be saved if the table contains not more than 300 rows and not more than 40 columns.
	Number of savings 			| During a running B4P session, at most 5 tables can be saved.  The number of tables (and not files) also applies when using the procedure <b>table save multiple</b> to save two or more tables in one file.
	===

	Table size restrictions do not apply while processing tables internally, i.e. you are able to load large amounts of data and do data processing and
	analysis, but need to condense your output accordingly inorder to meet the size limitations.
	<br/><br/>
	Individual licenses for one machine, a specific domain or site licenses will be provided on request.

	+++
}


B4PDOCU.STOP

