	//
B4PDOCU.START



"The Language" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Language Guide", "B4P Language" ],
    "Description 01:Overview"::

	The B4P language is designed to solve problems with as few clearly understandable statements as possible, allowing to keep the number of statements,
	variables and loops as low as possible.

	<br/><br/><img src="Images/LAN_Pyramid.png" alt="B4P Language Pyramid"><br/>

	We will elaborate the pyramid from the bottom up
	* Continue at the bottom level beginning how to formulate numbers and text, followed by basic data types (e.g. numerals, strings)
	* Address the main object types __variables__ and __tables__
	* Covering the remaining middle layers language features.
	* And concluding at the top to explain the __blocks__ and __statements__

	+++
},



"Basics" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Basic language elements",
    "Keywords":			["Values"],
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Basics.png" alt="B4P Language Pyramid - Basics"></a><br/>
	

    "Description 02:Introduction"::

	The language consist of following basic elements:

	=== 200, 800, noframe_1stcolbold, noheader
	__Text__	| Any form of text with and without quotation marks around
	__Numbers__	| Any numeric representations
	__Symbols__	| All language specific symbols (e.g. operators, assignment symbols)
	__Comments__	| Contents not to be considered for program execution
	===

	Details about the __characters__ used in B4P, including UNICODE and special input and output
	characters for special keys and console formatting features are addressed afterwardsx

	+++
},




"Text" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text" ],
    "Description 01:Introduction"::

	The B4P language supports 3 different forms of text contents:

	* __Plain text__, which is, unique to B4P, any text <u>with and without spaces</u>.
	* __Text inside single quotation marks__, using apostrophes ( ANSI/UNICODE 39: ') as single quotation mark symbols
	* __Text inside double quotation marks__, using double quotation marks ( ANSI/UNICODE 34: ")

	These text items can be used for following purposes:

	=== 250, 250, 250, 250
	Usage of string constants		| Plain text				 	| Text inside single quotation marks	| Text inside double quotation marks
	String values				| example					| 'example'				| "example"
	__Base variable__ names (see <sup>1</sup>)	| example[]					| 'example'[]				| "example"[]
	__Member variable__ names (see <sup>1</sup>)| example[example 2, ...]			| 'example'['example 2', ...]		| "example"["example 2", ...]
	__Table names__				| [example:...]					| ['example':...]			| ["example":...]
	__Function names__, called as procedures	| example;<br>example(...);			| (Not supported)			| (Not supported)
	__Function names__, called as functions in expressions\
						| = ... example();<br>= ... example(...);	| (Not supported)			| (Not supported)
	__Reserved keywords__			| true, false, else, tab, escape, new line	| (Not reserved if in quotation marks)	| (Not reserved if in quotation marks)
	===

	<sup>1</sup> <u>Attention</u>: Different from other programming languages, __variables__ in B4P are always specified by strings (or __expressions__ returning strings) followed by a <b>[]</b> or <b>[...]</b> sequence.
	It appears outlandish, but has some key advantages which are described later in this manual.

	+++
},



"Plain Text" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Plain Text" ],
    "Description 01:Introduction"::

	Plain text can be used for
	* <b>String values</b>
	* __Variable names__
	* __Table names__
	* __Procedure names__ and __function names__
	* __Reserved keywords__ (true, false, else, tab, escape, new line) <br>\
	  These reserved keywords must always be formulated with lower-case characters, otherwise they are treated as plain text.

    "Description 02:Rules"::

	Following rules apply for plain text:
	* It may consist of any character which does not interfere with the B4P code syntax: Letters, letters combined with numbers, and special symbols not interfering with B4P code syntax (e.g. parentheses, commas, operators, etc.).
	** Good example: <b>A.1</b> (The single point is not a dedicated B4P symbol).
	** Bad example: <b>Baden-Baden</b> (The hyphen is interpreted as a minus sign and results in a successful string subtraction.  The outcome would be a blank string.
	* The text may contain white <i>white spaces</i> (space bar, tab, etc.)
	** Example 1: <b>4200 Pennsylvania Avenue</b> or <b>Number 1</b>
	** Example 2: <b>555 1212</b> (phone number is a text and not a __number__ because of the space inside)
	** Example 3: <b>1.234.567</b> (multiple decimal points between numeric digits constitute a text)
	* The text must be on the same line.
	* Multiple consecutive white spaces inside the text are interpreted as one single space character.
	** Example: <b>Hello&nbsp;&nbsp;&nbsp;World</b> is the same as <b>Hello World</b>.
	* Leading and trailing spaces are ignored.
	** Example: <b>echo(Hello World)</b> outputs the same as <b>echo(&nbsp;&nbsp;Hello World )</b>.
	* A lone point (<b>.</b>) specified without quotation marks is also interpreted as a string containing this one character as long it is not a decimal point in a numeral.
	** The lone point is also used to reference a current column in __partial table specifications__.
	** Note: Two consecutive points are used for __value ranges__ and do not consitute text contents.
	* Reserved keywords are automatically interpreted as part of the B4P syntax, e.g. <b>true</b> as Boolean <i>true</i>, and __else__ is also part of the B4P language.
	* If the text is assigned to B4P variables, then the variable assumes the subtype __softquoted string__.

	+++,
    "Examples 02:Examples"::
	echo( Hello World );
	echo(   Hello   World   );  // Same as above (Spaces outside the strings are ignored, so are multiple spaces inside)
	echo( One + One );          // + sign is an operator, result is 'OneOne'
	echo( 'One + One' );        // This one is OK.
	echo( Baden-Baden );        // Empty string.  Hyphen is treated as minus sign (subtraction of strings)
	echo( 'Baden-Baden' );      // This one is OK.
	echo( 1. 23 );              // This is a string because a space is inside.
	echo( 1 200 );              // Same here.  Use function 'clean numeral' to extract 1200 as a number from here
	echo( Dial 555 1212 );
	echo( this is on, new line, the next line );  // new line is a reserved keyword
	echo( Café in Zürich );     // Foreign characters inside
	echo( . );                  // Lone point
	echo( .     . . );          // A string containing 3 lone points (. . .), also showing how spaces are collapsing
	// echo( .. );              // Would cause an error because .. is a b4p language symbol.
	echo( '..' );               // This one is OK
	echo( new line, Line 1, new line, Line 2 ); 
	+++,
    "Output 02:": "automatic",
    "See also": [ "Text inside single quotation marks", "Text inside double quotation marks" ]
},


"Text Inside Single Quotation Marks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text inside single quotation marks"],
    "Description 01:Introduction"::

	Text inside single quotation marks can be used for
	* <b>String values</b>
	* __Variable names__
	* __Table names__

    "Description 02:Rules"::
	* Use single quotation marks (apostrophes) <b>' ... '</b> to enclose the text.
	* Inside the quotation marks, all characters are fine, except the single quotation mark which delimits the text.
	* All white spaces inside the text inside quoatation marks are preserved.
	** Example 1: <b>'Hello&nbsp;&nbsp;&nbsp;World'</b> is not equal to <b>'Hello World'</b>
	** Example 2: <b>'Hello World'</b> is not equal to <b>'  Hello World  '</b>
	* The text must fit on the same line.
	** Exception: Use  __Multi-line text__ using 3 consecutive quotation marks ''' (apostrophes) as delimiatersto formulate a text requiring multiple lines.
	* Reserved keywords inside quotation marks are treated as text, e.g. 'true'.
	* Various functions and comparisons support __wildcard symbols__
	** Example 1: <b>ABC = 'A*'</b> returns true.
	* __Character entities__ like &amp;euro; or &amp;#x20ac; for the EURO symbol &euro; are supported.  They are converted quasi at compile time to target characters.
	* If the text is assigned to B4P variables, then the variable assumes the subtype __softquoted string__.

	+++,
    "Examples 02:Examples"::
	echo( 'Hello World' );
	echo( '  Hello   World  ' );
	echo( 'One + One' );
	echo( '"In double quotation Marks"' );
	echo( 'Price tags: &euro; 10.00, &#x20ac; 10.00, &#8364; 10.00');
	echo( '3 * 2 = 6' );
	echo( 'A cheap way to continue on&#10;the next line' ); // Not recommended. Use '...', new line, '...' instead.
	echo( new line, 'Line 1', new line, 'Line 2' ); 
	+++,
    "Output 02:": "automatic",
    "See also": [ "Plain text", "Text inside double quotation marks", "Multi-line text", "softquoted strings" ]
},



"Text Inside Double Quotation Marks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Text inside double quotation marks"],
    "Description 01:Introduction"::

	Text inside double quotation marks can be used for
	* <b>String values</b>
	* __Variable names__
	* __Table names__

    "Description 02:Rules"::
	* Use double quotation marks <b>" ... "</b> to enclose the text.
	* Inside the quotation marks, all characters are fine, except the double quotation mark which delimits the text.
	* All white spaces inside the text inside quoatation marks are preserved.
	** Example 1: <b>"Hello&nbsp;&nbsp;&nbsp;World"</b> is not equal to <b>"Hello World"</b>
	** Example 2: <b>"Hello World"</b> is not equal to <b>"  Hello World  "</b>
	* The text must fit on the same line.
	** Exception: Use  __Multi-line text__ using 3 consecutive quotation marks """ as delimiatersto formulate a text requiring multiple lines.
	* Reserved keywords inside quotation marks are treated as text, e.g. 'true'.
	* Various functions and comparisons support __wildcard symbols__
	** Example 1: <b>ABC = 'A*'</b> returns true.
	* __Character entities__ are not supported in texts inside double quotation marks.  Any such specification is part of the quoted text.
	* If the text is assigned to B4P variables, then the variable assumes the subtype __quoted string__.

	+++,
    "Examples 02:Examples"::
	echo( "Hello World" );
	echo( "  Hello   World  " );
	echo( "One + One" );
	echo( "'single quotation Marks'" );
	echo( "Price tags: &euro; 10.00, &#x20ac; 10.00, &#8364; 10.00"); // No translation of entities here
	echo( "3 * 2 = 6" );
	echo( "A cheap way to continue on&#10;the next line" ); // No translation of entitites here
	echo( new line, "Line 1", new line, "Line 2" ); 
	+++,
    "Output 02:": "automatic",
    "See also": [ "softquoted strings", "Plain text", "Text inside single quotation marks", "Multi-line text" ]
},



"Reserved Keywords" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "reserved keywords" ],
    "Keywords":			[ "reserved keyword", "escape", "tab" ],
    "Description 01:Introduction to reserved keywords"::
	B4P has only six reserved symbols which must be specified as __plain text__ using lower-case letters and without quotation marks.

	=== 150, 150, 700, bold_column_1
	Reserved Keyword 	| Meaning 		| Description
	tab			| Tabulator 		| Converts to a tab character (ANSI and UNICODE 9)
	new line		| Line Break 		| Represented as ANSI and UNICODE 10.  Under Windows, <i>Carriage Return</u> symbols are added before line feed symbols when saving contents in files.
	escape			| Escape chracter 	| Converts to an escape character (ANSI and UNICODE 27)
	true			| Boolean true  	| 'true' as boolean type and not as text
	false			| Boolean false		| 'false' as boolean type and not as text
	else			| 'else' in code syntax | To be used in association with __if__, __switch__ and other __control flow functions__.
	===

	Different from other languages, flow control features like __if(__) and __while(__) are function names and not reserved keywords.

	<br><br>
	Alternatively to using <b>tab</b>, you consider __special console output characters__ such as <b>&amp;tab20;</b> to advance to a specified column.
	

	+++,
    "Examples 01:"::
	echo( type(true) );
	echo( 1, tab, 2, tab, 3 );
	echo( 1st line, new line, 2nd line );
	echo( true = false ); // Outputs 'false' (Boolean comparison)
	+++,
    "Output 01:":		"automatic",
    "See also": [ "quoted strings", "Plain text", "Text inside single quotation marks", "Multi-line text" ]

},



"Multi-Line Text" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Multi-line text" ],
    "Keywords":			[ "Multi-line strings" ],
    "Description 01:Introduction"::

	Similar to Python and other modern programming languages, B4P supports multline strings, for both

	* __Text inside single quotation marks__, using three single quotation marks <b>'''</b> (apostrophes) as delimiters, and
	* __Text inside double quotation marks__, using three double quotation marks <b>"""</b> as delimiters.

	Following rules apply for multi-line text items:

	* The text contents are treated similarly as defined for __Text inside single quotation marks__ and __Text inside double quotation marks__.
	* Inside a multi-line text, 1 or 2 consecutive' or " symbols are treated as contents.
	* Inside a multi-line text delimited with """: The ''' is considered part of the text.
	* Inside a multi-line text delimited with ''': The """ is considered part of the text.
	* Similar to __text inside single quotation marks__, __character entities__ are supported.

	Multi-line string contents can start immediately after the three quotation symbols or on the next row.  Same applies for the
	end: The multi-line string can be ended on the same line with three quotation marks, or immediately on the following row.
	If you want to include new line symbols at the beginning and/or at the end of the multi-line string, then include additional
	blank rows.

	<br><br>
	<u>Attention:</u> If the multi-line string is not properly delimited with the same triple quotation marks, then an error message
	will occur <u>at the end</u> of the B4P program file because B4P assumed all contents further down as part of the long string.


	+++,
    "Examples 01:"::
special offer[] = '''

    4 pounds of bananas cost &euro; 2.90.
    """ This is today's special bargain """

''';

echo("Attention!", special offer[], "As long supplies last?" );
	+++,
    "Output 01:":		"automatic",
    "Examples 02:"::
code example[] = """
    /* Comments are part of the multi-line string */

    a[] = 4;
    b[] = sqrt(a[]) + 1; // Square root calculation
    echo( "    sqrt(4)+1 equals ", b[] );
""";

echo(  code example[] );
echo( new line, "Code output:" );
exec( :code example[] );
	+++,
    "Output 02:":		"automatic",
    "Examples 03:"::
example[A] = """This 1st
text fits on
3 rows""";

example[B] = """
This 2st
text fits on
3 rows""";

example[C] = """

This 3rd
text fits on
5 rows (blank rows above and below)

""";

example[D] = """Use Following quotation marks: "Hello" or 'Hello' or '''Hello'''.""";


echo("--------");
for all variables( example[], ex[] )
{
    echo(ex[]);
    echo("--------");
}
	+++,
    "Output 03:":		"automatic",
    "See also":			[ "Text inside single quotation marks", "Text inside double quotation marks" ]

},


"Numbers" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Number", "Numbers" ],
    "Description 01:Introduction"::

	In the B4P language, numbers are numeric values which optionally contain decimal points.  The same applies to reading numbers from __tables__.
	Following rules apply:

	* It must contain at least 1 digit (0..9)
	* Negative numebers start with a minus sign (see: __unary operators__)
	* The number must not contain spaces and/or thousand separator symbols.  Use __clean num(__) to remove such symbols automatically.
	* At most one decimal point may be used.  More points inside make the value look like a __plain text__.
	** A lone decimal describes a __plain text__ containing one character.
	** At least one digit must be added before or after the decimal point, e.g. <b>5.</b> or <b>.5</b> are OK, specifying 5 and 0.5.
	* Leading zeros in front and trailing zeros after the digits after the comma are OK
	* __Scientific notation__: Not supported, but see next section.
	**  However, use __num(__) or __clean num(__) to specify scientific notations.
	** Exceptions: Table entries may contain numbers in scientific notation, but use __table configure(__) to activate reading scientific notation.
	** Scientific notation is also supported in numbers in JSON files.  See __variable load(__) to load JSON files.

	+++,
    "Examples 01:"::
	echo( 1 );                   // Simple numeral
	echo( 1 1 + 2 2 );           // Attention: These two numbers are strings : '1 12 2' is returned, not '33' or '3 3'
	echo( 123.45 );
	echo( 0123.450 );            // Same value as above
	echo( 0123.450 *1);          // Operation applied (multplied by 1), therefore text representation has been dropped
	+++,
    "Output 01:":		"automatic",
    "See also": [ "Numerals", "Scientific Notation" ]

},



"Scientific Notation" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Scientific Notation" ],
    "Description 01:Introduction"::

	Scientific notation is not foreseen in the B4P language itself, i.e. by specifying something like <b>1.5E-01</b> because various active
	data sets, for example section and code numbers would be misinterpreted.  However, B4P provides following workarounds by using the __num(__)
	or __clean num(__) function.  

	<br><br>
	How to formulate scientific notation:
	* The letter <b>E</b> or <b>e</b> must follow the mantissa value (a value with or without the using decimal point) without spaces
	* Adding a <b>+</b> behind is optional.  For negativ exponents, add a <b>-</b>.
	* Then conclude the value with 

	+++,
    "Examples 01:"::
a[] = 1000;
a[text 1] = 1E03;
a[text 2] = '1e+03';  // Put into quotation marks to avoid adding 3 to '1e'
a[num  1] = num(1E03);
a[num  2] = num('1E+03');
a[milli ] = num('1e-3');
a[wrong ] = num('1E 03'); // Space inside.  Only 1st digit will be recgnized 
see(a[])
	+++,
    "Output 01:":		"automatic",

    "Description 02:Scientific Notation in Tables"::

	By default, scientific notation in tables will be recognized as text.  However, the function __table configure(__) allows you to activate
	recognition of scientific notation.


	+++,
    "Examples 02:"::
table create( table );
with table( table, 0, 0 ) // Partial table specification, [.] is row 0 / column 0
{
    [.] = '1.24E-05';
    echo( [.],   '&tab12;Type: ', subtype([.]),   '&tab40;Note: Read in as text into a string' );

    table configure( table, scientific notation, yes );
    echo( [.],   '&tab12;Type: ', subtype([.]),   '&tab40;Note: Text representation still preserved' );
    echo( [.]+0, '&tab12;Type: ', subtype([.]+0), '&tab40;Note: Text representation destroyed by calculation' );

    // Note: Explanatory text uses tabulation using dedicated character entities.
}
	+++,
    "Output 02:":		"automatic",

    "Description 03:Scientific Notation JSON files"::

	Unfortunately, JSON numbers do not support scientific notation by standard.
	Consider handling them as text and use __num(__) to convert them to numbers.

    +++
},




"Symbols" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Symbols" ],
    "Description 01:Overview of B4P Symbos"::

	B4P makes use of the following symbols:

	=== 150, 250, 600, bold_column_1
	Symbols		| Description			| Explanation
	{ }		| Braces			| Specify program __blocks__ <br>\
							  Put values into __parameter sets__ <br>\
							  __Indexing strings__ and __indexing parameter sets__ <br>\
							  __slicing strings__ and __slicing parameter sets__
	( )		| Parentheses			| Used for calculations where contents inside parentheses are calculated first, and describe __function parameters__
	[  ]		| Brackets			| Specify __variables__: Opening bracket follows after the variable name, where further hierarchical member names and array indexes can be specified <br>\
							  Specify __table references__: Tables do always begin with brackets <br>
	,		| Comma				| Separates elements in __parameter sets__, values in __function parameters__, etc.
	;		| Semicolon			| Concludes and separates __statements__
	+ - * / 	| __Arithmetic operators__	| Used as __binary operators__, and some as unary and assignment operators
	&amp; &#124; !	| __Logical operators__		| Used as __binary operators__, and some as unary and assignment operators
	&lt; &lt;= == &gt;= &gt; != | Comparison operators | Compares one value at the left-hand side of this symbol with <u>exactly</u> one value at the right-hand side
	= &lt; &gt:	| __Comparison operators__	| Compares one value at the left-hand side with a __selection of multiple values__ or __value ranges__ at the right-hand side
	=		| __Assignment symbol__		| Inside __statements__, equal signs are interpreted as assignment symbols.  <br>Example: <b>a[] = b[] = c[]</b><br>First equal sign is the assignment symbol.  The 2nd equal sign compares two variables for being equal.
	..		| Range				| Used for __slicing strings__, __slicing parameter sets__, and specifying __value ranges__
	~		| Other operators		| Used as unary operators
	++ -- **	| __Ad-hoc operators__		| Used to increment, decrement and scale variables and table entries
	:		| Colon				| Separates __else__ from subsequent statement <br>\
							  Repeat operator for parameter set elements<br>\
							  Instructs to access multiple table entries
		^		| Deep prefix/postfix symbol	| Use as __deep operators__, __variable references__, __nested partial table specifications__, and in __transactions__ to skip the __base variables__.
	/* */ //	| Comments			| These symbols designate comments inbetween or following till end of line
	&lt;== &lt;&lt;= &lt;=&gt; | __Transaction operators__ | Used for __transactions__
	===

	Various symbols can be combined, for example for the __assignment operator__ <b>+=</b> to add the calculated result of an expression to the destination.

	<br><br>
	<u>Note:</u> The single point (<b>.</b>) is interpreted as part of a __number__ (decimal point) if the whole item constitutes a legitimate number, or part of a __text__.
	Inside __table references__, single points, as long they are not in double quotation marks, may refer to current columns if a __table context__ for __partial table specifications__ with column informaiton is provided.
	+++

},


"Comments" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "comments" ],
    "Keywords":			[ "markdown", "github markdown" ],
    "Description 01:Introduction to Comments"::
	Documenting comments is very similar as in C/C++. The language supports following comment symbols:


	=== 150, 150, 700, bold_column_1 bold_column_2
	Comment Types	| Examples | Description
	Line comment	| // | Comment starting with double slashes and effective until end of line. The symbols for comment blocks /* and */ are ignored inside line comments.
	Comment block	| /* ... */ | Commented code section. <br/>/* begins commented section<br/>*/ ends commented sections<br/>Commented section is not ended prematurely with line comments.<br/>Nested comments are not supported, e.g. /* … /* … */ … */
	===

	You may wonder why obvious names such as 'if', 'while' and 'for' are not considered as similar reserved keywords.  In B4P, the control flow statements
	are actually procedure names which then influence executing further statements or blocks.  Therefore, you can actually use 'if' as the given function.
	+++,
    "Examples 01:"::
	// This is a commment
	// Bla Bla /* Bla Bla
	echo( This statement is outside a comment block );
	// Bla Bla */ Bla Bla
	+++,
    "Output 01:":		"automatic",

    "Description 02:Github Markdown Files"::
	B4P <i>understands</i> markdown files (with filenames ending '.md') where it only executes code lines which inside the code blocks.  All other contents
	outside the code blocks are treated like comments.  Code blocks must be delimited with three accent-grave symbols ```. Multiple such code blocks in one
	markdown file are supported.

    "Examples 02:"::
	# This is a markdown header
	And some text to describe it
	```program code
	echo( This statement is inside a code block );
	```
	# This is the next header

	+++,
    "Output 02:":		"This statement is inside a block"


},



"Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Characters" ],
    "Description 01:Introduction"::

	This section provides a general introduction of the character sets as well as character input and output
	supported by B4P.  The topics addressed are:

	* __Full UNICODE support__
	* __New line__
	* __Case sensitivity__
	* __Character entities__
	* __Console Input/Output__
	* __Special Keyboard Input Characters__
	* __Special Console Output Characters__

	+++
},


"Full UNICODE Support" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Full UNICODE Support" ],
    "Keywords":			[ "UNICODE" ],
    "Description 01:Overview"::

	B4P supports the full UNICODE character set which includes
	* The Basic Multilingual Plane (codes 0 ... 65,535 / U+0000 ... U+FFFF), as well as
	* All 16 additional extended planes ( U+1FFFF ... U+10FFFF ) which includes many emojies.

	B4P treats every UNICODE character as one single character.  For example, 'Caf&eacute;' counts 4 characters.  The full character set is available to define
	variable names, table names, table header names, user function names, path and file names, etc.
	Internally, in order to conserve memory needs for large data, all text data is stored and handled in UTF-8 format, but you don't need to worry about ths.

	<br><br>
	Note that various Latin, Greek and Cyrillic characters contain which look identical, e.g. the capital letter 'A' in the Latin, Greek and Cyrillic alphabets.
	Even if these characters are optically identical, the actual characters are different when compared.
	As another example, the Greek <i>mu</i> &mu; and the <i>micro</i> &micro; symbols are different, too.

	+++,

    "Examples 01:"::
	inhabitants [ Zürich ] = 402000;
	Пётр Чайкoвский [ famous concert ] = Nutcracker; // Piotr Tschaikowski
	echo( inhabitants [ Zürich ] );
	echo( Пётр Чайкoвский [ famous concert ] );
	+++,
    "Output 01:":		"automatic",
    "Description 02:Loading and Saving Files"::

	B4P will automatically detect the character format of input files, e.g. plain ANSI, WIN-1252, Unicode UTF-8, UTF16 little and big endian.


	+++
},


"New Line" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "New Line" ],
    "Description 01:Overview"::

	Inside B4P, every <b>new line</b> is counted as one character, regardless on which operating system B4P is running on.
	The character code is ANSI / UNICODE 10 (line feed).

	<br><br>

	In B4P, the <b>new line</b> can be specified with:
	* The __plain text__ value <b>new line</b>.  Specify it without quotation marks.
	* Using the __chr(__) function: <b>chr(10)</b>
	* Using the __character entity__ <b>&#10;</b> or <b>&nl;</b>.  __Text inside single quotation marks__ is required for this.  The <b>nl</b> entity name \
	  is not an official HTML entity, but supported by B4P.
	* Line breaks inside __multi-line text__ values.

	+++,
    "Examples 01:"::
	echo( Hello, new line, World, new line );	// Hello World on 2 rows, plus additional new line
	echo( Hello, chr(10), World, chr(10) );		// New line represented as a character codes
	echo( 'Hello&#10;World&#nl;' );			// New line represented as a character entities
	echo( 'new line' );				// This is just text and not a new line symbol
	echo( code( new line ) );			// Code 10, line feed
	echo( 'Character count: ', new line{} );	// new line contains one character
	+++,
    "Output 01:":		"automatic",
    "Description 02:Loading and Saving Files"::

	B4P is able to load text files containing both "carriage return + line feed" (CR+LF) characters common in Windows systems
	and "line feed only" (LF) common in UNIX/LINUX/MACOS systems.  When saving contents to files, the <b>new line</b> symbol will
	be automatically saved as line-feed (LF) in UNIX / Linux / MacOS
	systems and carriage-return + line-feed (CR+LF) character pairs in Windows systems. 
	The legacy Macintosh "carriage return only" (CR) used as line separator is not supported.

	+++
},


"Case Sensitivity" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "case sensitivity" ],
    "Description 01:Introduction"::

	B4P is a case sensitive language.  This applies to all text contents such as table, variable, function names and __reserved keywords__.
	In UNIX / Linux / MacOS, directory and file names are fully case sensitive.  However in Windows, file names are only case-sensitivity when creating
	directories or file names, but finding them is not case sensitive.

	+++,

    "Description 02:Case Conversion"::

	B4P provides the __unary operators__ <b>+</b>, <b>-</b> and <b>!</b> to change text to upper case, lower case or just capitalize the first character.
	The case conversion does not respect speciic __locales__, for example special handling of the Turkish letters turkish letters &#x0130; / i / I / &#x0131;.
	The lower case sharp-s &#x00DF; in the German Language will not be converted to upper case or substituted by two capital S.  The B4P case conversion is presently
	supporting following UNICODE characters:

	<br><br>

	=== 300, 300, 300
	UNICODE Block 		| Code Range 		| Example
	Basic Latin 		| 00 - 7F (Hex) 	| A / a
	Latin 1 Supplement 	| 80 - FF (Hex) 	| &Auml; / &auml;
	Latin Extended A 	| 100 - 1FF (Hex) 	| &#x0102; / &#x0103;
	===
	
	+++
},


"Character Entities" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Character Entities" ],
    "Keywords":			[ "Character entity", "Entity" ],
    "Description 01:Introduction"::

	Character entities are descriptive representations of characters which are not available on the keyboard.
	They begin with an ampersand (&amp;), followed by a descriptive string or character code and conclude with a semicolon (;).
	Character entities are commonly used in HTML for web pages in order to avoid ambiguities with reserved symbols (e.g. &amp;lt; for HTML tags)
	and to display special characters.  Character codes can be specified in both decimal and hexadecimal formats.

	<br><br>

	Similar to HTML, B4P supports a large number of character entities.
	See the description of __dump entities(__) for a complete list of currently supported character entities.

	<br><br>

	In addition, B4P provides <b>proprietary character entities</b> to define __special console output characters__ (e.g. text and
	background color and text attributes such as underscoring), as well as __special keyboard input characters__ like cursor navigation keys in
	form of single characters.

	<br><br>

	In __text inside single quotation marks__, character entities are converted into their actual characters.  The conversion takes place before program
	execution begins, quasi at compile time.  Character entities are not converted in __text inside double quotation marks__.


	+++,

    "Examples 01:"::
  echo( 'Value is &ge; 100 &euro;' );  // Text inside single quotation marks
  echo( "Value is &ge; 100 &euro;" );  // Text inside double quotation marks - will show plain text
  echo( decode entities( "Value is &ge; 100 &euro;" )); // Entities decoded at run-time

  echo( '&#x20ac;'); // EURO Sign - UNICODE hexadecimal code
  echo( '&#8364;' ); // EURO Sign - UNICODE decimal code
	+++,
    "Output 01:":		"automatic",
    "See also": [ "encode entities", "decode entities", "dump entities", "special keyboard input characters", "special console output characters" ]

},




"Console Input / Output" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Console Input/Output" ],
    "Keywords":			[ "Console", "Console Input/Output" ],

    "Description 01:Console Output"::

	Good news: The consoles under Windows, LINUX and MacOS support full UNICODE.<br>
	Bad news: Most console and terminal programs do not display all available UNICODE characters properly

	<br><br>

	All consoles support the ANSI (formerly: ASCII) chracter set.  Most consoles support additional character sets such as 

	* Basic Latin
	* Latin-1 Supplement (To ensure Düsseldorf is not written as Dusseldorf - translated as "village of fools")
	* Latin Extended A
	* Greek (for language enthsiasts and fraternity/sorority members in North America)
	* Cyrillic (Russian)
	* A set of additional symbols (also found in win1252 character set) including the Euro currency sign

	Some modern console programs support an increasing number of UNICODE symbols, including various Asian fonts and emojies.
	Unsupported symbols will automatically be shown using question marks or placeholder boxes.

	+++,

    "Description 02:Console Input"::

	Consoles under Windows have only limited capabilities to input non-ANSI characters.  Under Windows, foreign characters are accepted, but the EURO-symbol is not.<br>
	<u>Hint:</u> Consider using __character entities__ to specify special characters which you do cannot find on your keyboard.

	+++
},




"Special Keyboard Input Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Special keys" ],
    "Keywords":			[ "Special Keyboard Input Characters"],
    "Description 01:Introduction"::

	B4P has the unique capability to translate characters received with the functions __getch(__) or __input quick(__) into dedicated UNICODE
	characters located in the <i>Private Use Area B</i>.  This area is freely available for proprietary use and will not interfere with assignments
	of new characters in the future.  Every key pressed, e.g. a function or arrow key, will return a single character.

	<br><br>

	These characters ensure cross-platform compatibility. <br>
	See __Special keyboard input characters__.

	<br><br>
	<u>Note:</u> You may have considered Escape sequences (which date back to Digital Equipment VT100 terminals in the late 1970's , e.g. 
	<b>ESC [A</b> for a cursor key) but these symbols do typically contain multiple characters (up to seven of them) and B4P will not guarantee cross platform portability. 

	+++,

    "Description 02:Function and Navigation Keys"::

	Following table applies with function and arrow keys pressed alone.

	=== 300, 150, 300, bold_column_1
	Key			| UNICODE (hex)	| Character Entity Name
	Insert 			| 108000	| &amp;insert;
	End			| 108001	| &amp;end;
	Arrow down		| 108002	| &amp;arrow-down;
	Pg dn			| 108003	| &amp;pgdn;
	Arrow left		| 108004	| &amp;arrow-left;
	Center key (Keypad 5)	| 108005	| &amp;center;
	Arrow right		| 108006	| &amp;arrow-right;
	Home			| 108007	| &amp;home;
	Arrow up		| 108008	| &amp;arrow-up;
	Pg up			| 108009	| &amp;pgup;
	Delete			| 10800a	| &amp;delete;
	F1			| 108011	| &amp;f1;
	F2			| 108012	| &amp;f2;
	F3			| 108013	| &amp;f3;
	F4			| 108014	| &amp;f4;
	F5			| 108015	| &amp;f5;
	F6			| 108016	| &amp;f6;
	F7			| 108017	| &amp;f7;
	F8			| 108018	| &amp;f8;
	F9			| 108019	| &amp;f9;
	F10			| 10801a	| &amp;f10;
	F11			| 10801b	| &amp;f11;
	F12			| 10801c	| &amp;f12;
	===	

    "Description 03:Control Key held down"::


	Following table applies with function and arrow keys pressed while the control key is held down:

	=== 300, 100, 300, bold_column_1
	Key				| UNICODE (hex)	| Character Entity Name
	ctrl-Insert 			| 108100	| &amp;ctrl-insert;
	ctrl-End			| 108101	| &amp;ctrl-end;
	ctrl-Arrow down			| 108102	| &amp;ctrl-arrow-down;
	ctrl-Pg dn			| 108103	| &amp;ctrl-pgdn;
	ctrl-Arrow left			| 108104	| &amp;ctrl-arrow-left;
	ctrl-Center key (Keypad 5)	| 108105	| &amp;ctrl-center;
	ctrl-Arrow right		| 108106	| &amp;ctrl-arrow-right;
	ctrl-Home			| 108107	| &amp;ctrl-home;
	ctrl-Arrow up			| 108108	| &amp;ctrl-arrow-up;
	ctrl-Pg up			| 108109	| &amp;ctrl-pgup;
	ctrl-Delete			| 10810a	| &amp;ctrl-delete;
	ctrl-F1				| 108111	| &amp;ctrl-f1;
	ctrl-F2				| 108112	| &amp;ctrl-f2;
	ctrl-F3				| 108113	| &amp;ctrl-f3;
	ctrl-F4				| 108114	| &amp;ctrl-f4;
	ctrl-F5				| 108115	| &amp;ctrl-f5;
	ctrl-F6				| 108116	| &amp;ctrl-f6;
	ctrl-F7				| 108117	| &amp;ctrl-f7;
	ctrl-F8				| 108118	| &amp;ctrl-f8;
	ctrl-F9				| 108119	| &amp;ctrl-f9;
	ctrl-F10			| 10811a	| &amp;ctrl-f10;
	ctrl-F11			| 10811b	| &amp;ctrl-f11;
	ctrl-F12			| 10811c	| &amp;ctrl-f12;
	===	


    "Description 04:Shift Key held down"::

	Following table applies with function and arrow keys pressed while the shift key is held down:

	=== 300, 100, 300, bold_column_1
	Key					| UNICODE (hex)	| Character Entity Name
	shift-Insert 				| 108200	| &amp;shift-insert;
	shift-End				| 108201	| &amp;shift-end;
	shift-Arrow down			| 108202	| &amp;shift-arrow-down;
	shift-Pg dn				| 108203	| &amp;shift-pgdn;
	shift-Arrow left			| 108204	| &amp;shift-arrow-left;
	shift-Center key (Keypad 5)		| 108205	| &amp;shift-center;
	shift-Arrow right			| 108206	| &amp;shift-arrow-right;
	shift-Home				| 108207	| &amp;shift-home;
	shift-Arrow up				| 108208	| &amp;shift-arrow-up;
	shift-Pg up				| 108209	| &amp;shift-pgup;
	shift-Delete				| 10820a	| &amp;shift-delete;
	shift-F1				| 108211	| &amp;shift-f1;
	shift-F2				| 108212	| &amp;shift-f2;
	shift-F3				| 108213	| &amp;shift-f3;
	shift-F4				| 108214	| &amp;shift-f4;
	shift-F5				| 108215	| &amp;shift-f5;
	shift-F6				| 108216	| &amp;shift-f6;
	shift-F7				| 108217	| &amp;shift-f7;
	shift-F8				| 108218	| &amp;shift-f8;
	shift-F9				| 108219	| &amp;shift-f9;
	shift-F10				| 10821a	| &amp;shift-f10;
	shift-F11				| 10821b	| &amp;shift-f11;
	shift-F12				| 10821c	| &amp;shift-f12;
	shift-TAB				| 108220	| &amp;shift-tab;
	===	



    "Description 05:Ctrl and Shift Key held down"::

	Following table applies with function and arrow keys pressed while the shift key is held down:

	=== 300, 100, 300, bold_column_1
	Key					| UNICODE (hex)	| Character Entity Name
	ctrl-shift-Insert 			| 108300	| &amp;ctrl-shift-insert;
	ctrl-shift-End				| 108301	| &amp;ctrl-shift-end;
	ctrl-shift-Arrow down			| 108302	| &amp;ctrl-shift-arrow-down;
	ctrl-shift-Pg dn			| 108303	| &amp;ctrl-shift-pgdn;
	ctrl-shift-Arrow left			| 108304	| &amp;ctrl-shift-arrow-left;
	ctrl-shift-Center key (Keypad 5)	| 108305	| &amp;ctrl-shift-center;
	ctrl-shift-Arrow right			| 108306	| &amp;ctrl-shift-arrow-right;
	ctrl-shift-Home				| 108307	| &amp;ctrl-shift-home;
	ctrl-shift-Arrow up			| 108308	| &amp;ctrl-shift-arrow-up;
	ctrl-shift-Pg up			| 108309	| &amp;ctrl-shift-pgup;
	ctrl-shift-Delete			| 10830a	| &amp;ctrl-shift-delete;
	ctrl-shift-F1				| 108311	| &amp;ctrl-shift-f1;
	ctrl-shift-F2				| 108312	| &amp;ctrl-shift-f2;
	ctrl-shift-F3				| 108313	| &amp;ctrl-shift-f3;
	ctrl-shift-F4				| 108314	| &amp;ctrl-shift-f4;
	ctrl-shift-F5				| 108315	| &amp;ctrl-shift-f5;
	ctrl-shift-F6				| 108316	| &amp;ctrl-shift-f6;
	ctrl-shift-F7				| 108317	| &amp;ctrl-shift-f7;
	ctrl-shift-F8				| 108318	| &amp;ctrl-shift-f8;
	ctrl-shift-F9				| 108319	| &amp;ctrl-shift-f9;
	ctrl-shift-F10				| 10831a	| &amp;ctrl-shift-f10;
	ctrl-shift-F11				| 10831b	| &amp;ctrl-shift-f11;
	ctrl-shift-F12				| 10831c	| &amp;ctrl-shift-f12;
	===	



    "Description 06:ALT Key held down"::

	Following table applies with function and arrow keys pressed while the ALT key is held down.
	The following character set assumes that the left-hand <b>alt</b> key is used.
	Note that some machines and operating system interprete the right-hand <b>alt</b> key
	differenty, e.g. for special characters such as the EURO symbol (&euro;).

	=== 300, 100, 300, bold_column_1
	Key				| UNICODE (hex)	| Character Entity Name
	alt-Insert 			| 108400	| &amp;alt-insert;
	alt-End				| 108401	| &amp;alt-end;
	alt-Arrow down			| 108402	| &amp;alt-arrow-down;
	alt-Pg dn			| 108403	| &amp;alt-pgdn;
	alt-Arrow left			| 108404	| &amp;alt-arrow-left;
	alt-Center key (Keypad 5)	| 108405	| &amp;alt-center;
	alt-Arrow right			| 108406	| &amp;alt-arrow-right;
	alt-Home			| 108407	| &amp;alt-home;
	alt-Arrow up			| 108408	| &amp;alt-arrow-up;
	alt-Pg up			| 108409	| &amp;alt-pgup;
	alt-Delete			| 10840a	| &amp;alt-delete;
	alt-F1				| 108411	| &amp;alt-f1;
	alt-F2				| 108412	| &amp;alt-f2;
	alt-F3				| 108413	| &amp;alt-f3;
	alt-F4				| 108414	| &amp;alt-f4;
	alt-F5				| 108415	| &amp;alt-f5;
	alt-F6				| 108416	| &amp;alt-f6;
	alt-F7				| 108417	| &amp;alt-f7;
	alt-F8				| 108418	| &amp;alt-f8;
	alt-F9				| 108419	| &amp;alt-f9;
	alt-F10				| 10841a	| &amp;alt-f10;
	alt-F11				| 10841b	| &amp;alt-f11;
	alt-F12				| 10841c	| &amp;alt-f12;
	===	



    "Description 07:Ctrl + ALT Keys held down"::

	Following table applies with function and arrow keys pressed while both Ctrl and ALT keys are held down.
	Note that some machines and operating system interprete the right-hand <b>alt</b> key
	differenty, e.g. ctrl-alt-Delete to access the task manager or to resetart the machine.

	=== 300, 100, 300, bold_column_1
	Key					| UNICODE (hex)	| Character Entity Name
	ctrl-alt-Insert 			| 108500	| &amp;ctrl-alt-insert;
	ctrl-alt-End				| 108501	| &amp;ctrl-alt-end;
	ctrl-alt-Arrow down			| 108502	| &amp;ctrl-alt-arrow-down;
	ctrl-alt-Pg dn				| 108503	| &amp;ctrl-alt-pgdn;
	ctrl-alt-Arrow left			| 108504	| &amp;ctrl-alt-arrow-left;
	ctrl-alt-Center key (Keypad 5)		| 108505	| &amp;ctrl-alt-center;
	ctrl-alt-Arrow right			| 108506	| &amp;ctrl-alt-arrow-right;
	ctrl-alt-Home				| 108507	| &amp;ctrl-alt-home;
	ctrl-alt-Arrow up			| 108508	| &amp;ctrl-alt-arrow-up;
	ctrl-alt-Pg up				| 108509	| &amp;ctrl-alt-pgup;
	ctrl-alt-Delete				| 10850a	| &amp;ctrl-alt-delete;
	ctrl-alt-F1				| 108511	| &amp;ctrl-alt-f1;
	ctrl-alt-F2				| 108512	| &amp;ctrl-alt-f2;
	ctrl-alt-F3				| 108513	| &amp;ctrl-alt-f3;
	ctrl-alt-F4				| 108514	| &amp;ctrl-alt-f4;
	ctrl-alt-F5				| 108515	| &amp;ctrl-alt-f5;
	ctrl-alt-F6				| 108516	| &amp;ctrl-alt-f6;
	ctrl-alt-F7				| 108517	| &amp;ctrl-alt-f7;
	ctrl-alt-F8				| 108518	| &amp;ctrl-alt-f8;
	ctrl-alt-F9				| 108519	| &amp;ctrl-alt-f9;
	ctrl-alt-F10				| 10851a	| &amp;ctrl-alt-f10;
	ctrl-alt-F11				| 10851b	| &amp;ctrl-alt-f11;
	ctrl-alt-F12				| 10851c	| &amp;ctrl-alt-f12;
	===	



    "Description 08:ALT + Shift Keys held down"::

	Following table applies with function and arrow keys pressed while both ALT and Shift keys are held down.
	Note that some machines and operating system interprete the right-hand <b>alt</b> key
	differenty.

	=== 300, 100, 300, bold_column_1
	Key					| UNICODE (hex)	| Character Entity Name
	alt-shift-Insert 			| 108600	| &amp;alt-shift-insert;
	alt-shift-End				| 108601	| &amp;alt-shift-end;
	alt-shift-Arrow down			| 108602	| &amp;alt-shift-arrow-down;
	alt-shift-Pg dn				| 108603	| &amp;alt-shift-pgdn;
	alt-shift-Arrow left			| 108604	| &amp;alt-shift-arrow-left;
	alt-shift-Center key (Keypad 5)		| 108605	| &amp;alt-shift-center;
	alt-shift-Arrow right			| 108606	| &amp;alt-shift-arrow-right;
	alt-shift-Home				| 108607	| &amp;alt-shift-home;
	alt-shift-Arrow up			| 108608	| &amp;alt-shift-arrow-up;
	alt-shift-Pg up				| 108609	| &amp;alt-shift-pgup;
	alt-shift-Delete			| 10860a	| &amp;alt-shift-delete;
	alt-shift-F1				| 108611	| &amp;alt-shift-f1;
	alt-shift-F2				| 108612	| &amp;alt-shift-f2;
	alt-shift-F3				| 108613	| &amp;alt-shift-f3;
	alt-shift-F4				| 108614	| &amp;alt-shift-f4;
	alt-shift-F5				| 108615	| &amp;alt-shift-f5;
	alt-shift-F6				| 108616	| &amp;alt-shift-f6;
	alt-shift-F7				| 108617	| &amp;alt-shift-f7;
	alt-shift-F8				| 108618	| &amp;alt-shift-f8;
	alt-shift-F9				| 108619	| &amp;alt-shift-f9;
	alt-shift-F10				| 10861a	| &amp;alt-shift-f10;
	alt-shift-F11				| 10861b	| &amp;alt-shift-f11;
	alt-shift-F12				| 10861c	| &amp;alt-shift-f12;
	===	



    "Description 09:Ctrl + ALT + Shift Keys held down"::

	Following table applies with function and arrow keys pressed while both ALT and Shift keys are held down.
	Note that some machines and operating system interprete the right-hand <b>alt</b> key
	differenty.

	=== 300, 100, 300, bold_column_1
	Key					| UNICODE (hex)	| Character Entity Name
	ctrl-alt-shift-Insert 			| 108700	| &amp;ctrl-alt-shift-insert;
	ctrl-alt-shift-End			| 108701	| &amp;ctrl-alt-shift-end;
	ctrl-alt-shift-Arrow down		| 108702	| &amp;ctrl-alt-shift-arrow-down;
	ctrl-alt-shift-Pg dn			| 108703	| &amp;ctrl-alt-shift-pgdn;
	ctrl-alt-shift-Arrow left		| 108704	| &amp;ctrl-alt-shift-arrow-left;
	ctrl-alt-shift-Center key (Keypad 5)	| 108705	| &amp;ctrl-alt-shift-center;
	ctrl-alt-shift-Arrow right		| 108706	| &amp;ctrl-alt-shift-arrow-right;
	ctrl-alt-shift-Home			| 108707	| &amp;ctrl-alt-shift-home;
	ctrl-alt-shift-Arrow up			| 108708	| &amp;ctrl-alt-shift-arrow-up;
	ctrl-alt-shift-Pg up			| 108709	| &amp;ctrl-alt-shift-pgup;
	ctrl-alt-shift-Delete			| 10870a	| &amp;ctrl-alt-shift-delete;
	ctrl-alt-shift-F1			| 108711	| &amp;ctrl-alt-shift-f1;
	ctrl-alt-shift-F2			| 108712	| &amp;ctrl-alt-shift-f2;
	ctrl-alt-shift-F3			| 108713	| &amp;ctrl-alt-shift-f3;
	ctrl-alt-shift-F4			| 108714	| &amp;ctrl-alt-shift-f4;
	ctrl-alt-shift-F5			| 108715	| &amp;ctrl-alt-shift-f5;
	ctrl-alt-shift-F6			| 108716	| &amp;ctrl-alt-shift-f6;
	ctrl-alt-shift-F7			| 108717	| &amp;ctrl-alt-shift-f7;
	ctrl-alt-shift-F8			| 108718	| &amp;ctrl-alt-shift-f8;
	ctrl-alt-shift-F9			| 108719	| &amp;ctrl-alt-shift-f9;
	ctrl-alt-shift-F10			| 10871a	| &amp;ctrl-alt-shift-f10;
	ctrl-alt-shift-F11			| 10871b	| &amp;ctrl-alt-shift-f11;
	ctrl-alt-shift-F12			| 10871c	| &amp;ctrl-alt-shift-f12;
	===	


	+++
},




"Special Console Output Characters" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Special Console Output Characters" ],
    "Keywords":			[ "Special output characters" ],
    "Description 01:Introduction"::

	B4P is also supporting a set of dedicated UNICODE characters for formatting text contents before outputting the with standard functions
	such as __echo(__), __format print(__) and __print(__).  Typical examples are changing text and background color, enabling underscore and
	some cursor navigation symbols.

	<br><br>
	These characters ensure cross-platform compatibility. <br>
	See __Special console output characters__.

	<br><br>
	<u>Note:</u> You may have considered Escape sequences (which date back to Digital Equipment VT100 terminals in the late 1970's , e.g. 
	<b>ESC [A</b> for cursor movements) but these symbols do typically contain multiple characters and B4P will not guarantee cross platform portability. 

	+++,


    "Description 02:Tab Features"::

	The tab character( B4P: reserved keyword __tab__ ) provides fixed tab positions in steps of eight characters.  In addition to this, B4P provides
	a set of reserved characters and entitites to advance to a specific position.

	<br><br>
	This feature is also suitable for batch or redirected output because it converts these characters variable number of spaces.

	=== 400, 200, 400, bold_column_1
	Functionality			| UNICODE (hex)		| Character Entity Name
	Tab position 1			| 103001		| &amp;tab1;
	Tab position 2			| 103002		| &amp;tab2;
	...				| ...			| ...
	Tab position 300		| 10312c		| &amp;tab300;
	===	

	+++,



    "Description 03:Formatting Features"::

	Some functions, especially blinking text, are not supported on all terminals. 

	=== 400, 200, 400, bold_column_1
	Functionality			| UNICODE (hex)		| Character Entity Name
	Reset console			| 100000		| &amp;reset;
	Underscore toggle/off/on	| 100010-100012		| &amp;underscore; &amp;underscore off; &amp;underscore on;
	Boldface toggle/off/on		| 100014-100016		| &amp;boldface; &amp;boldface off; &amp;boldface on;
	Blinking toggle/off/on		| 100018-10001a		| &amp;blinking; &amp;blinking off; &amp;blinking on;
	Reverse toggle/off/on		| 10001c-10001e		| &amp;reverse; &amp;reverse off; &amp;reverse on;
	===	

	+++,


    "Description 04:Console Colors"::

	Following text and background colors are supported on the console:
	Inside the entities, color names in lower-case letters refer to text color, and color names in upper-case letters refer to background color.
	The color names on the left hand column are also valid names for the functions __text color(__) and __background color(__).


	=== 200, 200, 400, 200, bold_column_1
	Color name			| UNICODE (hex)		| Character Entity Names				| RBG Color Code
	previous			| 101120, 102120	| &amp;previous; &amp;PREVIOUS;				| Previous color
	default				| 101121, 102121	| &amp;default; &amp;DEFAULT;				| Default console color
					|			|							|
	black				| 101000, 102000	| &amp;black; &amp;BLACK;				| 0,   0,   0
	very dark gray			| 101001, 102001	| &amp;very dark gray; &amp;VERY DARK GRAY;		| 64,  64,  64
	dark gray			| 101002, 102002	| &amp;dark gray; &amp;DARK GRAY;			| 85,  85,  85
	gray				| 101003, 102003	| &amp;gray; &amp;GRAY;					| 128, 128, 128
	light gray			| 101004, 102004	| &amp;light gray; &amp;LIGHT GRAY;			| 192, 192, 192
	very light gray			| 101005, 102005	| &amp;very light gray; &amp;VERY LIGHT GRAY;		| 224, 224, 224
	white				| 101006, 102006	| &amp;white; &amp;WHITE;				| 255, 255, 255
					|			|							| 
	dark red			| 101010, 102010	| &amp;dark red; &amp;DARK RED;				| 170,   0,   0
	red				| 101011, 102011	| &amp;red; &amp;RED;					| 255,   0,   0
	light red			| 101012, 102012	| &amp;light red; &amp;LIGHT RED;			| 255, 128, 128
					|			|							| 
	dark scarlet			| 101014, 102014	| &amp;dark scarlet; &amp;DARK SCARLET;			| 170,  43,   0
	scarlet				| 101015, 102015	| &amp;scarlet; &amp;SCARLET;				| 255,  64,   0
	light scarlet			| 101016, 102016	| &amp;light scarlet; &amp;LIGHT SCARLET;		| 255, 160, 128
					|			|							|
	dark mandarin			| 101018, 102018	| &amp;dark mandarin; &amp;DARK MANDARIN;		| 170,  86,   0
	mandarin			| 101019, 102019	| &amp;mandarin; &amp;MANDARIN;				| 255, 128,   0
	light mandarin			| 10101a, 10201a	| &amp;light mandarin; &amp;LIGHT MANDARIN;		| 255, 192, 128
					|			|							| 
	dark orange			| 10101c, 10201c	| &amp;dark orange; &amp;DARK ORANGE;			| 170, 128,   0
	orange				| 10101d, 10201d	| &amp;orange; &amp;ORANGE;				| 255, 192,   0
	light orange			| 10101e, 10201e	| &amp;light orange; &amp;LIGHT ORANGE;			| 255, 224, 128
					|			|							| 
	dark mango			| 101020, 102020	| &amp;dark mango; &amp;DARK MANGO;			| 170, 150,   0
	mango				| 101021, 102021	| &amp;mango; &amp;MANGO;				| 255, 224,   0
	light mango			| 101022, 102022	| &amp;light mango; &amp;LIGHT MANGO;			| 255, 240, 128
					|			|							| 
	dark chrome			| 101024, 102024	| &amp;dark chrome; &amp;DARK CHROME;			| 170, 160,   0
	chrome				| 101025, 102025	| &amp;chrome; &amp;CHROME;				| 255, 240,   0
	light chrome			| 101026, 102026	| &amp;light chrome; &amp;LIGHT CHROME;			| 255, 248, 128
					|			|							| 
	dark yellow			| 101028, 102028	| &amp;dark yellow; &amp;DARK YELLOW;			| 170, 170,   0
	yellow				| 101029, 102029	| &amp;yellow; &amp;YELLOW;				| 255, 255,   0
	light yellow			| 10102a, 10202a	| &amp;light yellow; &amp;LIGHT YELLOW;			| 255, 255, 128
					|			|							| 
	dark lemon			| 10102c, 10202c	| &amp;dark lemon; &amp;DARK LEMON;			| 150, 170,   0
	lemon				| 10102d, 10202d	| &amp;lemon; &amp;LEMON;				| 224, 255,   0
	light lemon			| 10102e, 10202e	| &amp;light lemon; &amp;LIGHT LEMON;			| 240, 255, 128
					|			|							| 
	dark granny			| 101030, 102030	| &amp;dark granny; &amp;DARK GRANNY;			| 127, 170,   0
	granny				| 101031, 102031	| &amp;granny; &amp;GRANNY;				| 192, 255,   0
	light granny			| 101032, 102032	| &amp;light granny; &amp;LIGHT GRANNY;			| 224, 255, 128
					|			|							| 
	dark chartreuse			| 101034, 102034	| &amp;dark chartreuse; &amp;DARK CHARTREUSE;		| 86, 170,   0
	chartreuse			| 101035, 102035	| &amp;chartreuse; &amp;CHARTREUSE;			| 128, 255,   0
	light chartreuse		| 101036, 102036	| &amp;light chartreuse; &amp;LIGHT CHARTREUSE;		| 192, 255, 128
					|			|							| 
	dark green			| 101038, 102038	| &amp;dark green; &amp;DARK GREEN;			| 0, 170,   0
	green				| 101039, 102039	| &amp;green; &amp;GREEN;				| 0, 255,   0
	light green			| 10103a, 10203a	| &amp;light green; &amp;LIGHT GREEN;			| 128, 255, 128
					|			|							| 
	dark spring green		| 10103c, 10203c	| &amp;dark spring green; &amp;DARK SPRING GREEN;	| 0, 170,  86 
	spring green			| 10103d, 10203d	| &amp;spring green; &amp;SPRING GREEN;			| 0, 255, 128
	light spring green		| 10103e, 10203e	| &amp;light spring green; &amp;LIGHT SPRING GREEN;	| 128, 255, 192
					|			|							| 
	dark turquoise			| 101040, 102040	| &amp;dark turquoise; &amp;DARK TURQUOISE;		| 0, 170, 128
	turquoise			| 101041, 102041	| &amp;turquoise; &amp;TURQUOISE;			| 0, 255, 192
	light turquoise			| 101042, 102042	| &amp;light turquoise; &amp;LIGHT TURQUOISE;		| 128, 255, 224
					|			|							| 
	dark cyan			| 101044, 102044	| &amp;dark cyan; &amp;DARK CYAN;			| 0, 170, 170
	cyan				| 101045, 102045	| &amp;cyan; &amp;CYAN;					| 0, 255, 255
	light cyan			| 101046, 102046	| &amp;light cyan; &amp;LIGHT CYAN;			| 128, 255, 255
					|			|							| 
	dark sky blue			| 101048, 102048	| &amp;dark sky blue; &amp;DARK SKY BLUE;		| 0, 150, 170
	sky blue			| 101049, 102049	| &amp;sky blue; &amp;SKY BLUE;				| 0, 224, 255
	light sky blue			| 10104a, 10204a	| &amp;light sky blue; &amp;LIGHT SKY BLUE;		| 128, 241, 255
					|			|							| 
	dark aquamarine			| 10104c, 10204c	| &amp;dark aquamarine; &amp;DARK AQUAMARINE;		| 0, 128, 170
	aquamarine			| 10104d, 10204d	| &amp;aquamarine; &amp;AQUAMARINE;			| 0, 192, 255
	light aquamarine		| 10104e, 10204e	| &amp;light aquamarine; &amp;LIGHT AQUAMARINE;		| 128, 224, 255
					|			|							| 
	dark azur			| 101050, 102050	| &amp;dark azur; &amp;DARK AZUR;			| 0, 107, 170
	azur				| 101051, 102051	| &amp;azur; &amp;AZUR;					| 0, 160, 255
	light azur			| 101052, 102052	| &amp;light azur; &amp;LIGHT AZUR;			| 128, 208, 255
					|			|							| 
	dark ocean			| 101054, 102054	| &amp;dark ocean; &amp;DARK OCEAN;			| 0,  86, 170
	ocean				| 101055, 102055	| &amp;ocean; &amp;OCEAN;				| 0, 128, 255
	light ocean			| 101056, 102056	| &amp;light ocean; &amp;LIGHT OCEAN;			| 128, 192, 255
					|			|							| 
	dark sapphire			| 101058, 102058	| &amp;dark sapphire; &amp;DARK SAPPHIRE;		| 0,  64, 170
	sapphire			| 101059, 102059	| &amp;sapphire; &amp;SAPPHIRE;				| 0,  96, 255
	light sapphire			| 10105a, 10205a	| &amp;light sapphire; &amp;LIGHT SAPPHIRE;		| 128, 176, 255
					|			|							| 
	dark lapis			| 10105c, 10205c	| &amp;dark lapis; &amp;DARK LAPIS;			| 0,  43, 170
	lapis				| 10105d, 10205d	| &amp;lapis; &amp;LAPIS;				| 0,  64, 255
	light lapis			| 10105e, 10205e	| &amp;light lapis; &amp;LIGHT LAPIS;			| 128, 160, 255
					|			|							| 
	dark royal blue			| 101060, 102060	| &amp;dark royal blue; &amp;DARK ROYAL BLUE;		| 0,  22, 170
	royal blue			| 101061, 102061	| &amp;royal blue; &amp;ROYAL BLUE;			| 0,  32, 255
	light royal blue		| 101062, 102062	| &amp;light royal blue; &amp;LIGHT ROYAL BLUE;		| 128, 144, 255
					|			|							| 
	dark blue			| 101064, 102064	| &amp;dark blue; &amp;DARK BLUE;			| 0,   0, 170
	blue				| 101065, 102065	| &amp;blue; &amp;BLUE;					| 0,   0, 255
	light blue			| 101066, 102066	| &amp;light blue; &amp;LIGHT BLUE;			| 128, 128, 255
					|			|							| 
	dark admiral			| 101068, 102068	| &amp;dark admiral; &amp;DARK ADMIRAL;			| 43,   0, 170
	admiral				| 101069, 102069	| &amp;admiral; &amp;ADMIRAL;				| 64,   0, 255
	light admiral			| 10106a, 10206a	| &amp;light admiral; &amp;LIGHT ADMIRAL;		| 160, 128, 255
					|			|							| 
	dark ultramarine		| 10106c, 10206c	| &amp;dark ultramarine; &amp;DARK ULTRAMARINE;		| 64,   0, 170
	ultramarine			| 10106d, 10206d	| &amp;ultramarine; &amp;ULTRAMARINE;			| 96,   0, 255
	light ultramarine		| 10106e, 10206e	| &amp;light ultramarine; &amp;LIGHT ULTRAMARINE;	| 176, 128, 255
					|			|							| 
	dark violet			| 101070, 102070	| &amp;dark violet; &amp;DARK VIOLET;			| 86,   0, 170
	violet				| 101071, 102071	| &amp;violet; &amp;VIOLET;				| 128,   0, 255
	light violet			| 101072, 102072	| &amp;light violet; &amp;LIGHT VIOLET;			| 192, 128, 255
					|			|							| 
	dark purple			| 101074, 102074	| &amp;dark purple; &amp;DARK PURPLE;			| 107,   0, 170
	purple				| 101075, 102075	| &amp;purple; &amp;PURPLE;				| 160,   0, 255
	light purple			| 101076, 102076	| &amp;light purple; &amp;LIGHT PURPLE;			| 208, 128, 255
					|			|							| 
	dark electric			| 101078, 102078	| &amp;dark electric; &amp;DARK ELECTRIC;		| 128,   0, 170
	electric			| 101079, 102079	| &amp;electric; &amp;ELECTRIC;				| 192,   0, 255
	light electric			| 10107a, 10207a	| &amp;light electric; &amp;LIGHT ELECTRIC;		| 224, 128, 255
					|			|							| 
	dark phlox			| 10107c, 10207c	| &amp;dark phlox; &amp;DARK PHLOX;			| 150,   0, 170
	phlox				| 10107d, 10207d	| &amp;phlox; &amp;PHLOX;				| 224,   0, 255
	light phlox			| 10107e, 10207e	| &amp;light phlox; &amp;LIGHT PHLOX;			| 240, 128, 255
					|			|							| 
	dark magenta			| 101080, 102080	| &amp;dark magenta; &amp;DARK MAGENTA;			| 170,   0, 170
	magenta				| 101081, 102081	| &amp;magenta; &amp;MAGENTA;				| 255,   0, 255
	light magenta			| 101082, 102082	| &amp;light magenta; &amp;LIGHT MAGENTA;		| 255, 128, 255
					|			|							| 
	dark pink			| 101084, 102084	| &amp;dark pink; &amp;DARK PINK;			| 170,   0, 128
	pink				| 101085, 102085	| &amp;pink; &amp;PINK;					| 255,   0, 192
	light pink			| 101086, 102086	| &amp;light pink; &amp;LIGHT PINK;			| 255, 128, 224
					|			|							| 
	dark carmine			| 101088, 102088	| &amp;dark carmine; &amp;DARK CARMINE;			| 170,   0,  86
	carmine				| 101089, 102089	| &amp;carmine; &amp;CARMINE;				| 255,   0, 128
	light carmine			| 10108a, 10208a	| &amp;light carmine; &amp;LIGHT CARMINE;		| 255, 128, 192
					|			|							| 
	dark cold red			| 10108c, 10208c	| &amp;dark cold red; &amp;DARK COLD RED;		| 170,   0,  43
	cold red			| 10108d, 10208d	| &amp;cold red; &amp;COLD RED;				| 255,   0,  64
	light cold red			| 10108e, 10208e	| &amp;light cold red; &amp;LIGHT COLD RED;		| 255, 128, 160
					|			|							| 
	dark brown			| 101090, 102090	| &amp;dark brown; &amp;DARK BROWN;			| 100,  50,   0
	brown				| 101091, 102091	| &amp;brown; &amp;BROWN;				| 150,  75,   0
	light brown			| 101092, 102092	| &amp;light brown; &amp;LIGHT BROWN;			| 203, 166, 128
					|			|							| 
	dark beige			| 101094, 102094	| &amp;dark beige; &amp;DARK BEIGE;			| 164, 164, 147
	beige				| 101095, 102095	| &amp;beige; &amp;BEIGE;				| 245, 245, 220
	light beige			| 101096, 102096	| &amp;light beige; &amp;LIGHT BEIGE;			| 251, 251, 238
					|			|							| 
	dark tan			| 101098, 102098	| &amp;dark tan; &amp;DARK TAN;				| 140, 120,  94
	tan				| 101099, 102099	| &amp;tan; &amp;TAN;					| 210, 180, 140
	light tan			| 10109a, 10209a	| &amp;light tan; &amp;LIGHT TAN;			| 233, 218, 198
					|			|							| 
	dark salmon			| 101098, 102098	| &amp;dark salmon; &amp;DARK SALMON;			| 170,  97, 110
	salmon				| 101099, 102099	| &amp;salmon; &amp;SALMON;				| 255, 145, 164
	light salmon			| 10109a, 10209a	| &amp;light salmon; &amp;LIGHT SALMON;			| 255, 201, 210
	===
	+++,


    "Description 05:Console Theme Colors"::

	In addition to static colors, theme colors can be chosen.  When B4P starts, some initial colors are assigned, 
	however they can be reassigned to different colors by changing the color names or hexadecimal RGB values (#RRGGBB format)
	in <b>console[theme colors,</b><i>theme color name</i><b>] = </b><i>New color name</i>;

	<br><br>
	The theme colors listed in the 1st column below can also be used with the functions __text color(__) and __background color(__).

	=== 200, 200, 400, 200, bold_column_1
	Theme color name		| UNICODE (hex)		| Character Entity Names				| RBG Color Code
	neutral				| 101100, 102100	| &amp;neutral; &amp;NEUTRAL;				|
	high				| 101101, 102101	| &amp;high; &amp;HIGH;					|
	medium				| 101102, 102102	| &amp;medium; &amp;MEDIUM;				|
	low				| 101103, 102103	| &amp;low; &amp;LOW;					|
					|			|							|
	bad				| 101104, 102104	| &amp;bad; &amp;BAD;					|
	warning				| 101105, 102105	| &amp;warning; &amp;WARNING;				|
	info				| 101106, 102106	| &amp;info; &amp;INFO;					|
	ok				| 101107, 102107	| &amp;ok; &amp;OK;					|
					|			|							|
	start				| 101108, 102108	| &amp;start; &amp;START;				|
	active				| 101109, 102109	| &amp;active; &amp;ACTIVE;				|
	pause				| 10110a, 10210a	| &amp;pause; &amp;PAUSE;				|
	done				| 10110b, 10210b	| &amp;done; &amp;DONE;					|
					|			|							|
	accent 1			| 10110c, 10210c	| &amp;accent 1; &amp;ACCENT 1;				|
	accent 2			| 10110d, 10210d	| &amp;accent 2; &amp;ACCENT 2;				|
	accent 3			| 10110e, 10210e	| &amp;accent 3; &amp;ACCENT 3;				|
	accent 4			| 10110f, 10210f	| &amp;accent 4; &amp;ACCENT 4;				|
					|			|							|
	deco 1				| 101110, 102110	| &amp;deco 1; &amp;DECO 1;				|
	deco 2				| 101111, 102111	| &amp;deco 2; &amp;DECO 2;				|
	deco 3				| 101112, 102112	| &amp;deco 3; &amp;DECO 3;				|
	deco 4				| 101113, 102113	| &amp;deco 4; &amp;DECO 4;				|
	===	
	+++,


    "Description 06:Other Special Output Characters"::

	A limted number of navigation key characters can also be used as output characters in roder to move the cursor:

	=== 200, 200, 400, 200, bold_column_1
	Key Character		| UNICODE (hex)	| Character Entity Name	| Action
	Arrow up		| 108008	| &amp;arrow-up;	| Cursor up 1 row
	Arrow down		| 108002	| &amp;arrow-down;	| Cursor down 1 row
	Arrow left		| 108004	| &amp;arrow-left;	| Cursor left 1 row
	Arrow right		| 108006	| &amp;arrow-right;	| Cursor right 1 row
	Home			| 108007	| &amp;home;		| Cursor to 1st column
	ctrl-Home		| 108107	| &amp;ctrl-home;	| Cursor to top left
	===

	+++



},





"Basic Data Types" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Basic data types", "Types", "Subtypes" ],
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Basic_Types.png" alt="B4P Language Pyramid - Basic Data Types"></a><br/>

    "Description 02:Overview"::

	B4P supports six basic data types for storing data in B4P __variables__ and in all calculation paths.
	However, __tables__ store all data in text form, including __numbers__.  Numerals written to tables are converted into numbers in text form, and
	numbers read are converted into numerals.

	<br><br>
	Strings, numerals and dates are also categorized in two subtypes each which are desribed in the following sections.

	* __Strings__
	** __Softquoted strings__
	** __Quoted strings__
	* __Numerals__
	** __Numerals__ with text representations
	** __Plain numerals__
	* __Dates__, able to contain dates, times or both
	** __Dates__ with text representations
	** __Plain dates__
	* __Booleans__
	* __Parameter sets__
	** They contain multiple elements of values of any data type, including nested parameter sets.  Empty sets (0 elements) are supported.
	* __Voids__

	+++
  },



  "Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data type strings" ],
    "Keywords":			[ "string", "strings" ],
    "Description 01:Introduction"::

	Strings in B4P consist of 0, 1 or any number of UNICODE characters.  Every character counts as 1 character, regardless if it is an ANSI or
	non-ANSI (e.g. foreign) character.  The string length is limited to a specific value, but only by the available system memory.

	<br><br>
	B4P supports following three subtypes:
	* __Quoted strings__, and
	* __Softquoted strings__.

	Simple rules: B4P handles __Text inside double quotation marks__ as __quoted strings__ where all contents are considered <i>as given</i>. <br>
	And __text inside single quotation marks__ as well as __plain text__ are handled as __softquoted strings__.

	+++
  },

  "Softquoted Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Data subtype softquoted strings" ],
    "Keywords":			[ "Softquoted string", "Softquoted strings" ],
    "Description 01:Introduction"::


	The data subtype <b>quoted string</b> is applied in following cases:

	* __Plain text__ or __text inside single quotation marks__ is written into B4P __variables__.
	* __Plain text__ or __text inside single quotation marks__ is used in B4P __expressions__ and __comparisons__.

	Following features apply to <b>softquoted strings</b> only:

	* Symbols like '*' or '?' are treated as __wildcards__ for __comparisons__ and when the equal sign = or not-equal sign &lt;&gt; is used<br> \
	  <u>Note:</u> This is not the case for the other comparison operators such as  == and !=.
	* __Accessing tables__: A single point may be used to access the current coolumn if the __table context__ allows this.
	* __Shifted table column specifications__: Table header names may be prefixed with one or more &lt; or &gt; to access neighboring columns.
	* Some functions support dedicated values in place of column header names in their parameeters, e.g. <b>'#row'</b> or <b>'*'</b> in specific function parameters such as in __table lookup(__) and __table consolidate(__).

   "Examples 01:With Text Inside Single Quotation Marks"::
	a[] = 'Hello World';
	b[] = 'Hello   World';
	c[] = '  Hello World  ';
	echo( 'a[] = "', a[], '"');
	echo( 'b[] = "', b[], '"');
	echo( 'c[] = "', c[], '"');
	echo( 'Subtype of a[] is ', subtype( a[] ) );
	echo( "Simple comparison returning 'true': ", Hello = '*llo' ); // softquoted strings support wildcards
	+++,
    "Output 01:Output:":		"automatic",

   "Examples 02:With Plain Text"::
	a[] = Hello World;
	b[] = Hello   World;
	c[] =   Hello World  ;
	
	echo( 'a[] = "', a[], '"');
	echo( 'b[] = "', b[], '"');
	echo( 'c[] = "', c[], '"');
	echo( 'Subtype of a[] is ', subtype( a[] ) );
	echo( "Simple comparison returning 'true': ", Hello = '*llo' ); // softquoted strings support wildcards

	echo;
	echo("Following texts are read as softquoted strings");
	a[] = 07.04.2020;         // String constant, because it contains two points
	b[] = 555 1212;           // Contains a space
	c[] = 1 Main St.;         // This is a valid string constant
	d[] = mike@example.com;   // Valid, too.  See note below.

	echo( 'a[] = "', a[], '"  Subtype: ', subtype(a[]));
	echo( 'b[] = "', b[], '"  Subtype: ', subtype(b[]));
	echo( 'c[] = "', c[], '"  Subtype: ', subtype(c[]));
	echo( 'd[] = "', d[], '"  Subtype: ', subtype(d[]));

	echo;
	echo("Combine softquoted and quoted string:");
	a[] = Hello + ' World';
	b[] = Hello + " World";
	echo( 'a[] = "', a[], '"  Subtype: ', subtype(a[])); // softquoted string
	echo( 'b[] = "', b[], '"  Subtype: ', subtype(b[])); // quoted string

	+++,
    "Output 02:Output:":		"automatic"

  },

  "Quoted Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Data subtype quoted strings" ],
    "Keywords":			[ "Quoted string", "Quoted strings" ],
    "Description 01:Introduction"::

	The data subtype <b>quoted string</b> is applied in following cases:

	* __Text inside double quotation marks__ is written into B4P __variables__.
	* __Text inside double quotation marks__ is used in B4P __expressions__ and __comparisons__.
	* Unless specified otherwise, almost all B4P functions which return values of type __string__ are of subtype <b>quoted strings</b>.
	* The contents in quoted strings are always considered as given , including:
	** No symbols like '*' or '?' are treated as wildcard symbols for comparisons

   "Examples 01:With Text Inside Double Quotation Marks"::
	a[] = "Hello World";
	b[] = "Hello   World";
	c[] = "  Hello World  ";

	echo( 'a[] = "', a[], '"');
	echo( 'b[] = "', b[], '"');
	echo( 'c[] = "', c[], '"');
	echo( 'Subtype of a[] is ', subtype( a[] ) );
	echo( "Simple comparison returning 'false': ", Hello = "*llo" ); // quoted strings support no wildcards
	+++,
    "Output 01:Output:":		"automatic"


  },



  "Indexing Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Indexing strings" ],
    "Description 01:Strings - Simple Indexing"::

	<i>Simple indexing</i> is used to retrieve single characters from the string.  Indexing begins with 0 which refers to the 1st
	character.  The index value is specified in braces and shall not be confused with a parameter set as such.

	<br><br>
	Following rules apply to the indexing strings:
	* The index must always be a numeric value.
	* Specifying just braces <b>{}</b> without an index will retrieve the length (character count) of the string.  Alternatively, use __length [string function]__.
	* Indexing begins with 0 (zero).
	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.
	* __Negative indexing__ is supported. -1 refers to the last character in the string. -2, -3, etc. refer to the previous ones, and so forth.
	* Empty sets are returned when accessing with index values which lie out of bounds.  Example: <b>{a,b,c}{5}</b> returnss <b>{}</b> (empty set).
	* Updating individual elements on the left hand side of assignments is not possible.  Wrong exmaple: <b>a[]{3} = 'E';</b>.

    "Examples 01:"::
	echo( abcde{} );     // Returns 5 (character count)
	echo( abcde{0} );   // Access the 1st element
	echo( abcde{-2} );  // Access the 2nd last element
	echo( abcde{10} );  // Attempts to access characters outside the string returns blank strings.
	echo( abcde{-10} ); // Same case here.
	+++,

    "Output 01:Output:":		"automatic"

  },



  "Slicing Strings" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Slicing strings", "Extracting substrings" ],
    "Description 01:Introduction"::

	Instead of specifying single index values to retrieve single characters, substrings can be retrieved by listing muliple values and/or ranges.
	In some other programming langauges, this feature is known as slicing.
	The range operator '..' is available to specify a range.  If no value prcedes the range operator, than 0 is assumed.  If no value follows
	the range operator, then the last character is assumed.  The result will always be a string.
	Negative indexing is supported.
	
    "Examples 01:"::
	echo( abcdefg { 0,2,4,2,0 } );    // Returns 'aceca'
	echo( abcdefg { 3..5 } );         // Returns 'def'
	echo( abcdefg { 5..3 } );         // Empty string.  Ranges cannot be listed in reverse direction
	echo( abcdefg { -3..-1 } );       // Returns 'efg' - Last 3 characters
	echo( abcdefg { 4..-1 } );        // Same result
	echo( abcdefg { 3..99 } );        // Returns 'defg'
	echo( abcdefg { -99..2 } );       // Returns 'abc'
	echo( abcdefg { 0..2,5,1..3 } );  // Combinations
	echo( abcdefg { 3.. } );          // Returns 'defg'
	echo( abcdefg { ..3 } );          // Returns 'abcd'
	echo( abcdefg { .. } );           // Returns full string
	echo( abcdefg { ..,.. } );        // Returns full string twice: abcdefgabcdefg
	+++,

    "Output 01:":		"automatic"
  },




  "Numerals" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types numerals" ],
    "Keywords":			[ "numeral", "numerals", "plain numeral", "plain numerals"  ],
    "Description 01:Numerals"::

	B4P handles all numerals as double precision floating point numbers.  This means that numerals can handle both whole numbers and
	numbers with decimal digits behind.  Two subtypes are suppported:

	* <b>Numerals</b> with text represenatations
	* <b>Plain numerals</b>

	Numerals picked up from the B4P program code or read in from tables will initially carry along their original
	text representations, for example 0123.40. They are useful in case the leading and trailing zeros in numbers (like in postal codes and 
	section numbers in document structures) need to be preserved.  The string representation will be discarded immediately when any kind
	of algorithmic operations is applied, for exmaple additions (including adding 0) and even negations.  In all these cases, the
	subtype changes from <b>numeral</b> to <b>plain numeral</b>.


	+++,
    "Examples 01:"::
	a[0] = 123.45;
	a[1] = 007;
	a[2] = 20.20;
	a[3] = num( '1.5E-3' ); // String representation will not be included here
	a[4] = 0.00;

	for all variables( a[], b[] )
	{
	    c[] = str(b[]);  // Recover string representation
	    d[] = b[] + 0;       // String representation gets dropped because a calculation has been made
	    e[] = str(d[]);  // Convert back to string representation

	    echo;
	    echo("For following numeral        : ", b[], " subtype: ", subtype(b[]) );
	    echo("   String representation     : ", c[], " subtype: ", subtype(c[]) );
	    echo("   Converted to plain numeral: ", d[], " subtype: ", subtype(d[]) );
	    echo("   Back to string again      : ", e[], " subtype: ", subtype(e[]) );
	}
	+++,
    "Output 01:":		"automatic"

  },


  "Dates" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types dates" ],
    "Keywords":			[ "date", "dates", "plain date", "plain dates"  ],
    "Description 01:Dates"::


	The date type can store dates (beginning 1990-01-01), time of day (down to the second), combination of both (date and time) and an empty
	values called <b>blank dates</b>.

	B4P handles all numerals as double precision floating point numbers.  This means that numerals can handle both whole numbers and
	numbers with decimal digits behind.  Two subtypes are suppported:

	* Dates with text represenatations
	* Plain dates (don't confuse with blank dates)


	This data type can store pure dates (beginning 1990-01-01), time of day (down to the second), combination of both date and time of day, or <i>blank dates</i> which 
	are blank values neither containing dates or times.

	Following sub-types are supported for dates:

	<br>

	Dates read in from tables (if reading data as dates is activated with the function __table configure(__)) will automatically include their
	text representations.  The string representation will be discarded immediately when any kind of algorithmic operation
	is applied, even if 0 days are added.  No discardings take place on direct assignments
	and transactions without calculations done, e.g. <b>a[] = b[];</b>.

	In B4P code, dates are created using the following functions listed below and the dates are created as plain dates without memorized text representation.

	=== 200, 800, noframe_1stcolbold
	Function name 	| Description
	__date(__)    	| Depending on the string value provided, it returns a date, date and time, time only, or blank date.
	__pure date(__) | Works like date, but ignores any time of day information.  Output is either a date or blank date.
	__date time(__) | Works like date.  If input is not a blank, and if no time of day is provided, then 00:00:00 (midnight) is assumed as time of day.
	__time(__)	| This function will only use the time information.  If the paramter contains a date only, then a blank date wil be returned.
	===	

	Simple and valid examples are: <b>date( 14.07.2020 ), date( "2020-07-04" ), date( today )</b>. The values provided in the date functions are string constants.
	Please note that quotation marks (no matter if single or double) are required for the 2nd example because of the hyphens which would otherwise be treated as
	minus signs where 7 and 4 are subtracted from 2020.

	+++,

    "Examples 01:"::
	// Following assignments are still strings (text)
	a[0] = "July 14. 2021";
	a[1] = '20:15:00';
	a[2] = "2022 August 01 22:15";
	a[3] = today;  // Must be lower case
	a[4] = now;    // "
	a[5] = '' ;    // Blank date

	for all variables( a[], b[] )
	{
	    // The 'date' function converts input strings (text) into plain dates without preserving text

	    c[] = date( b[] ); 
	    d[] = pure date( b[] );
	    e[] = time ( b[] );

	    echo(new line, "For input value      : ", b[] );
	    echo("  Date: ", c[],"  Date only: ", d[], "  Time only: ", e[]);
	}
	echo( new line, Additional Features );

	echo(date("2020 / 12 / 31 15:00")+1);		// Date and time
	echo(date time("2020-12-31"));			// Add a time (default 00:00:00)
	echo(time("2020-12-31 15:00"));			// Time
	echo(time("2020-12-31 15:00")+1/24);		// Time, 1 hour later
	echo(pure date("31. Dezember 2021")+1);		// Numeral
	+++,
    "Output 01:":		"automatic"



  },



"Booleans" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types booleans" ],
    "Keywords":			[ "boolean", "booleans"  ],
    "Description 01:Voids"::

	The boolean data type takes two values which are __reserved keywords__: <b>true</b> and <b>false</b>.  Boolean results are provided with comparisons.<br>
	<u>Attention</u>: The keywords are case-sensitive. <b>True</b> and <b>TRUE</b> are a string values, as well as <b>'true'</b> and <b>"false"</b>.



    "Examples 01:"::
	echo(true, " / ", type(true));        // Boolean true
	echo(True, " / ", type(True));        // This is a string value (T is upper case.)
	echo(5 > 6, " / ", type(5 > 6));      // Boolean false 
	echo(true & false);                   // Logical AND
	echo(true | false);                   // Logical OR
	+++,

    "Output 01:":		"automatic"

},





"Voids" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types voids" ],
    "Keywords":			[ "void", "voids"  ],
    "Description 01:Voids"::

	The void data type typically indicates an invalid value returned from a function or a variable with undefined values.
	The following table lists few approaches how to obtain a void value intentionally.

	=== 200, 800, noframe_1stcolbold
	Method	 		| Description
	__null(__)    		| Call the null function
	Undefined array member	| Create an array implicity, e.g. by assigning a[1] = 1;  Read-accessing a[0] will return <i>void</i>
	Reading JSON data	| Intermediate nodes carry no values and are <i>void</i>.  End nodes with value 'null' are also interpreted as <i>void</i>.
	===

	Please try to use void values as little as possible in your B4P programs.
	+++,

    "Examples 01:"::
	a[1] = 1;
	echo( a[0] );
	echo( null() );
	echo( type(null()) );
	+++,

    "Output 01:":		"automatic"

},



"Parameter sets" :
 {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets" ],
    "Keywords":			[ "parameter set", "parameter sets"  ],
    "Description 01:Parameter Sets"::

	Parameter sets is be considered as the sixth Basic Data Type which allows to hold 0, 1 or more elements.
	Each element is again a value of any of the six Data Types, including nested parameter sets.

	In the program code, sets can be defined with any number of values or expressions inside braces <b>{ }</b> and separated with commas. Nested parameter sets are supported.

	=== 250, 750, noframe_1stcolbold, noheader
	Number of elements		| At least zero (empty set)
	Empty sets			| Empty parameter sets { } are not the same as blank or void values
	Mixed data types		| A parameter set may contain data of different types, e.g. { 1, Abc, true, date(31.12.2020) }
	Nesting				| Parameter sets support nesting, e.g. { { 1, 2 }, { 3, 4 }, 5 }
	Nested empty sets		| Nested empty sets are allowed.  E.g. { {} } is not the same as { } or { { {} } }.
	Sequence of elements		| The sequence of elements is preserved, i.e. {a,b,c,d} and {d,c,b,a} are different.<br>Comparing them with '=' returns true (ordering does not care), but with '==' returns false (elements must be in same order).
	Mulitple identical elements 	| Parameter sets may contain multiple identical elements, e.g. { a, b, a, a, c, c }.  You can use the __trim(__) function to eliminate duplicates.
	Embedding			| A paramter set can be embedded into another parameter set, e.g. a[] = {1,2}; b[] = {a[]};
	__Indexing Parameter Sets__	| One element can be extracted by indexing.  1st element begins wtih 0. Example:  a[] = {a,b,c,d}{1}; Here, the 1st element is accessed, a[] gets value 'b'.
	__Negative indexing__		| Negative indexing supported here. a[] = { a,b,c,d,e }{-2} assigns 'd' to a[].
	__Slicing Parameter Sets__	| Specify multiple index values and ranges to extract subsets.
	Arithmetics			| A broad range of arithmetic operators are available to manipulate parameter sets, for example intersections and unions.
	===	
	+++,

    "Examples 01:"::
	a[] = { 1, a, 2, {b,c}, true, date(today) };
	echo( a[], " / ", type(a[]) );
	echo( "First element: ", a[]{0}, " and last element: ", a[]{1} );
	+++,

    "Output 01:":		"automatic"

  },


  "Indexing Parameter Sets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets indexing" ],
    "Keywords":			[ "Indexing parameter sets", "Indexing elements", "Length of parameter sets" ],
    "Description 01:Parameter Sets - Simple Indexing"::

	<i>Simple indexing</i> is used to retrieve single elements from the parameter set.  Indexing begins with 0 which refers to the 1st
	parameter set element.  The index value is specified in braces and shall not be confused with a parameter set as such.
	<i>Cascaded indexing</i> for retrieving elements from nested parameter sets is also supported. 

	<br><br>
	Following rules apply to the indexing parameter sets:
	* The index must always be a numeric value.
	* Specifying just braces {} without an index will retrieve number of elements (nested elements count 1) of the parameter set.
	* Indexing begins with 0 (zero).
	* The value will be rounded in case it does not contain an integer value.  Example: <b>a[]{2.99}</b> accesses the same member as <b>a[3]</b>.
	* __Negative indexing__ is supported. -1 refers to the last element. -2, -3, etc. refer to the previous elements.
	* Blanks are returned when accessing with index values which lie out of bounds.  Example: <b>Hello{5}</b> returns a blank value.
	* Updating individual characters on the left hand side of assignments not possible.  Exmaple: <b>a[]{3} = 123;</b>


    "Examples 01:"::
	echo( { a,b,c,d      } {0} );                     // Access the 1st element
	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]
	echo( "Last element            : ", a[]{-1} );    // Retrieve the last element
	echo( "Next element to the left: ", a[]{-2} );    // Retrieve the 2nd last element
	echo( "Cascaded indexing       : ", a[]{3}{2} );  // retrieve 3rd element, and inside the subset the 2nd element (cascaded indexing)
	echo( "# elements in           : ", a[]{} );      // Number of elements
	echo( "# elements in nested set: ", a[]{-2}{} );  // Number of elements in subset (cascaded indexing)
	echo( "Out of bounds case      : ", a[]{99} );    // Empty is returned if index lies out of bounds
	+++,

    "Output 01:":		"automatic",

    "Description 02:Parameter Sets - Simple Indexing in Write Accesses"::

	<i>Simple indexing</i> also works with write accesses in __assignments__.  The target variable must contain an existing parameter set.  Values of other types
	are not allowed and will cause error messages.  Any data type may be assigned. For example, a numeric element can be replaced by a string or parameter set
	(a subset).  Using multiple indexes as allowed for read accesses is not possible (e.g. [a]{1,2} = {A,B};).

    "Examples 02:"::
	a[] = { a,b,c, {d,e,f}, g };                      // Assign a parameter set to variable a[]
	a[]{1} = B;
	a[]{-1} = {G,H,I};
	echo( "Modified value in a[] = ", a[] );
	+++,

    "Output 02:":		"automatic"

  },




  "Slicing Parameter Sets" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Slicing Parameter sets" ],


    "Description 01:Parameter Sets - Extracting Subsets"::

	Instead of specifying single index values to retrieve single elements, subsets can be retrieved by listing muliple values and/or ranges.
	In some other programming langauges, this feature is known as slicing.
	The range operator '..' is available to specify a range.  If no value prcedes the range operator, than 0 is assumed.  If no value follows
	the range operator, then the last character is assumed.  The range operator '..' is available to specify a range.  
	The result will always be returned in a parameter set, even if the subset specified results in just one element, e.g. <b>{a,b,c}{1..1}</b> returns <b>{b}</b> and not <b>b</b>.
	Negative indexing is supported.

    "Examples 01:"::
	a[] = { a,b,c, {d,e,f}, g };                          // Assign a parameter set to variable a[]
	echo( "4 elements              : ", a[]{3,1,2,1} );   // Retrieves 4 elements (2 of them repeating here)
	echo( "2nd to 2nd last         : ", a[]{1..3} );      // Use a range
	echo( "2nd to 2nd last         : ", a[]{1..-2} );     // Same output
	echo( "2nd to 2nd last         : ", a[]{-4..3} );     // Same output (-4 = 4th last or 2nd element)
	echo( "1st element             : ", a[]{0..0} );      // Return 1st element, but in a subset and not alone
	echo( "Combinations            : ", a[]{2..4,1} );    // Combination of simple values and ranges
	echo( "First three elements    : ", a[]{..2} );       // Returns first 3 elements
	echo( "Last three elements     : ", a[]{-3..} );      // Returns last 3 elements (negative indexing used here)
	echo( "Entire parameter set    : ", a[]{..} );        // Returns entire parameter set
	echo( "2nd element as subset   : ", a[]{1..1} );      // Must specify 1..1 (a range) to distinguish from __parameter set indexing__.
	+++,

    "Output 01:":		"automatic"
  },



  "Parameter sets - Value Ranges" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value ranges" ],
    "Keywords":			[ "parameter set value ranges"],
    "Description 01:Parameter Sets - Simple Values"::

	Simple parameter set values are 0, 1 or more values of any types, regardless if values, variables, expressions or subsets, embedded inside braces
	and separated with commas. Example:  {} (empty set),  { 1, a, {} } (contains 2 values and nested a empty set), and { {1,2},{3,4} } describing a
	nested parameter set which looks like a 2-dimensional matrix and can be used as such.
	+++,


    "Description 02:Parameter Sets - Value Ranges (Numerals)"::

 	Simple parameter sets become cumbersome when describing a sequence of incrementing values, e.g. { 1,2,3,4,5,6,7,8,9,10 }, especially much bigger
	ones.  One way to do this is with a loop, but is cumbersome.  Alternatively, value ranges can be specified.  A range consists of a starting value
	and an ending value with '..' inbetween, e.g. { 1..10 }.  The increment is 1, unless a <i>second value</i> in the middle is specified, e.g. { 2..4..10 }
	to describe the 2nd value.  It may be bigger (for counting up), smaller (for counting down), but not equal to the 1st value (error message occurs).

	<br><br>
	A mixup of numerals and other types inside a range specification is invalid.
	+++,

    "Examples 02:"::
	print("Start with the classic way : ");
	a[] = {};
	for (i[]=1, i[]<=10, i[]++) a[] += {i[]};
	echo(a[]);

	echo("And the easy way           : ", {1 .. 10});
	echo("Steps of 2.5               : ", {1 .. 3.5 .. 10});
	echo("Steps of -1: Right way     : ", {10 .. 9 .. 1});
	echo("Steps of -1: Wrong way     : ", {10 .. 1}); // Returns empty set
	echo("Combination of 2 ranges    : ", {2..4..10, 20..40..100} );
	echo("Build a 3x3 matrix         : ", {{11..13},{21..23},{31..33}} );
	+++,

    "Output 02:":		"automatic",


    "Description 03:Parameter Sets - Value Ranges (Strings)"::

	Value ranges are also supported for strings.  The string values may consist of one or more characters.  The intial value, optionally <i>second value</i>
	and final values must contain strings with same number of characters and <u>only one character in the same position changing</u>.
	An exception applies if the string contains numeric digits.  Here, up to 8 digits are allowed.  This allows counting from smaller numbers (fewer digits)
	to larger numbers (more digits).  Minus signs are not considered as part of numbers. A mixup of strings and other types inside a range specification is invalid.
	
	<br>
	Following exampls are invalid: 
	<br>{1 .. '5'}  (Type mixup)
	<br>{Option A .. option C } (1st and last characters are different)
	<br>{Option A .. Option   } (final value has fewer characters),
	<br>{Option A .. Option AA} fails because final value has more characters, and
	<br>{Point -3 .. Point 3  } fails because minus sign is an extra character.
	<br>Valid examples: See below

    "Examples 03:"::
	echo("Start simple               : ", {a..z});
	echo("Every 2nd letter           : ", {a..c..z});
	echo("1 letter in string         : ", {'Article A:' .. 'Article F:'} );
	echo("Combination of 2 ranges    : ", {2..4..10, 'Article A:' .. 'Article F:'} );
	echo("Numbers in strings         : ", {'Chapter 9:' .. 'Chapter 12:'} );
	echo("Numbers in strings         : ", {'Chapter 09:' .. 'Chapter 12:'} );
	+++,

    "Output 03:":		"automatic",


    "Description 04:Parameter Sets - Value Ranges (Dates)"::

	Unique to Beyodn4P, Value ranges are also supported for dates and times.  If the value consists of
	both date and time value, then the range may only be applied either on the date (with time kept
	unchanged) or time (with date kept unchanged).

	<br><br>
	For dates, the default increment is +1 day.  For times, the default increment is +1 hour.  Use the <second value>
	to influence the interval.  Both positive and negative intervals are allowed.  Time counting must not pass
	across midnights to cover additional days.


    "Examples 04:"::
	echo("Dates                       : ", { date(30.03.2016) .. date(02.04.2016) });
	echo("Dates, 3 day intervals      : ", { date(01.04.2016) .. date(04.04.2016) .. date(10.04.2016) });
	echo("Today to yesterday - bad    : ", { date(today) .. date(today)-1 });
	echo("Today to yesterday - OK     : ", { date(today) .. date(today)-1 .. date(today)-1 });
	echo("Times, 1 hour intervals     : ", { time("12:15:00")..time("15:15:00") });
	echo("Times, 5 minute intervals   : ", { time("12:15:00")..time("12:20:00")..time("12:30:00") });
	echo("30 seconds back - bad       : ", { time(now) .. time(now)-30/(24*60*60) });
	echo("30 seconds back, 10s interv.: ", { time(now) .. time(now)-10/(24*60*60) .. time(now)-30/(24*60*60) });
	echo("Changing dates              : ", { date("05.06.2016 10:00:00")..date("08.06.2016 10:00:00") });
	echo("Changing times, seconds     : ", { date("05.06.2016 10:00:00")..date("05.06.2016 10:00:01")..date("05.06.2016 10:00:03") });


	+++,

    "Output 04:":		"automatic"

  },


  "Parameter sets - Value Repetitions" :
  {
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "data types parameter sets value repetitions" ],
    "Keywords":			[ "parameter set value repetitions", "value repetition", "value repetitions"],
    "Description 01:Parameter Sets - Value Repetitions"::

	Large parameter sets with same values repeating can be built up with value repetitions.  Repetitions are specified by numeric values following
	a colon symbol and following the paramter set element to repeat.  Multiple repetitions may be specified inside a parameter set value.

    "Examples 01:"::

	echo({ 5:0 } );              // Generates { 0,0,0,0,0 }
	echo({ 2:3,3:2 } );          // Generates { 3,3,2,2,2 }
	echo({ 0.9:A } );            // Generates { A }  Rounded up
	echo({ 0.1:A } );            // Generates { }  Rounded down
	echo({ 2:Hello } );          // Generates { Hello,Hello}
	echo({ 0:Hello } );          // Generates { }
	echo({ -2:Hello } );         // Generates { }
	echo({ 3:{a,b} } );          // Generates { {a,b},{a,b},{a,b} }
	echo({ 2:{3:1} } );          // Generates { {1,1,1},{1,1,1} }
	echo({ 2:{1..4} } );          // Generates { {1,2,3,4},{1,2,3,4} }
	+++,

    "Output 01:":		"automatic"

},





"Data Storage Abstracts" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Data Storage Abstracts",
    "Keywords":                 [ "Variables and Tables" ],
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Data_Storage.png" alt="Programs"></a><br/>

    "Description 02:Overview"::

	B4P provides two abstractions for data storage:

	* __Variables__, which are traditional storage abstractions found in all programming language.  B4P supports __Structures__ with named members and __Arrays__ with indexed members.
	* __Tables__, which are unique to B4P and describe globally accessible storage objects for managing tabular data of any size.

	In contrast to other programming languages, B4P's key focus is on __Tables__, and provides an extensive function library with
	both basic and advanced tabular data processing functions.

	<br><br>
	Dedicated top-level chapters have been devoted to variables and tables.

	+++,
    "See also": [ "Tables", "Variables", "Arrays", "Structures"  ]
},





"Programs" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Programs",
    "Keywords":                 [ "Program", "B4P Program", "B4P Programs" ],
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Programs.png" alt="Programs"></a><br/>

    "Description 02:Overview"::

	Whole B4P program files (or code entered interactively in __interactive mode__) constitute the top level of the B4P programming language.
	These are either user-written B4P programs or function libraries, either user-written or part of the B4P delivery.  Library files are called up
	using the __include(__) function.  Some library files are already loaded automatically in order to minimize code bureaucracy.

	<br><br>
	The B4P programs consist of at least one or more __Statements__ or __block__s which are described in the next sections.
	+++,

    "See also": [ "Blocks and Statements", "Blocks", "Statements" ]

},




"Blocks and Statements" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Blocks and Statements",
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Blocks.png" alt="Programs"></a><br/>

    "Description 02:Introduction"::

	All B4P programs contain one or more of the following:

	* __Statements__ which are standalone instructions in programming 
	* __Blocks__ are lexical structures where multiple statements are grouped together.  For example a single block with all statements inside is executed after __if__ statements and inside loops.


    "Description 03:Syntax Scheme of Blocks and Statements"::

	<br/><img src="Images/LAN_Top_Level.png" alt="B4P Top Level"><br/>

	+++,
    "See also": [ "Blocks", "Statements", "Programs" ]

},



"Blocks" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Blocks",
    "Keywords":                 [ "Block" ],
    "Description 01:Introduction"::

	<b>Blocks</b> are lexical structures where multiple statements are grouped together.  Similar to C/C++	and Java, blocks are defined with braces <b>{</b> ... <b>}</b>.  <br>
	Following rules apply:
	
	* Blocks may be specified any time, even just to improve code readability.
	* Loops and conditional statements decide whether to execute a succeeding single statement or a block with all statements inside.
	* Nested blocks are allowed
	* Empty blocks are allowed
	* Inside the blocks, __statements__ are delimited with semicolons <b>;</b>.


    "Examples 01:"::
echo( One );                                 // Single statement
{
    echo( Two );                             // Multiple statements inside a block
    echo( Three );
    {                                        // Nested blocks
        echo( Four );
        { }                                  // Empty blocks are tolerated
        { {} }
        { ; ;; };;                           // Redundant semicolons are tolerated
    }
    if (true)                                // If statement
    {
        echo ( Five ); echo ( Six );
    }
    else:
    {
        echo( Six and half not shown );
    }
    {                                        // This block lies outside the if-statement
        echo( Seven );
    }
}
    +++,
    "Output 01:": "automatic",
    "See also": [ "Statements" ]
},



"Statements" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		"Statements",
    "Keywords":			[ "Statement" ],
    "Description 01:Language Pyramid Context"::

	<a href="LAN_Features_Language_Guide.html">
	<img src="Images/LAN_Pyramid_Statements.png" alt="Programs"></a><br/>

    "Description 02:Overview"::

	Statements are standalone instructions in programming languages.  All statements are delimited with semicolons.  Multiple statements may be writtin on the
	same line.  Also, individual statements may take multiple lines, without need of any dedicated <i>continue on the next line</i> character as required by
	some other programming languages. B4P supporst 5 different variants of statements described below.

	<br><br><img src="Images/LAN_Statements.png" alt="B4P Statements"><br/>

	* __Procedure Calls__ are actually B4P functions called without making use of the return values they may provide.  Several functions allow \
	  them to be called as procedure calls, others do not.
	* __Control Flow Procedure Calls__ are a variant of procedure calls which decide whether and how frequently the following statement or block will be executed. \
	  Examples are: __if__, __while__, __switch__ / __case__, __break__, etc., and several more specific ones like __for all table rows__.
	* Assignments consist of a __LHS expression__ followed by the assignment symbol <b>=</b> (equal sign) and concluded with a __RHS expression__.
	* <b>Standalone Ad-hoc Operations</b> are __Left-Hand Side Expressions__ with __Ad-hoc Operators__ specied before (prefix) or after (postfix) them in order to apply \
	  simple operations such as incrementing, decrementing and scaling.
	* __Transactions__ are more complex variants than assignments where the whole variable contents including member and sub-member variables or table rows are involved.

	__LHS Expressions__ refer to expresions on the <i>Left-Hand Side</i> of the assignment symbol ( <b>=</b> ), intending to describe a destination variable or a destination location in a table.<br>
	__RHS Expressions__ refer to expresions on the <i>Right-Hand Side</i> of the assignment symbol ( <b>=</b> ), intending is to retrive, caluculate and/or return values.


	+++,
    "See also": [ "Blocks" ]

},








"Directories and Files" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Directory and files" ],
    "Keywords":			[ "directories", "files"],
    "Description 01:Introduction"::

	Special care has been taken with accessing directories and files as well as specifying directory and
	file names in order to achieve an optimum cross-platform portability, able to run on Windows, UNIX/Linux and MacOS platforms.
	They cover issues as little as directory separator symbols in path names, using the right line break character sequences,
	chosen character sets and country-specific differences in files considered highly standardized and generic which they are not.

	<br><br>
	Following aspects are described next:

	* Path and File Names
	* Loading files - character sets
	* Saving files - character sets
	* CSV file format - local differences

	+++
},



"Path and File Names" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "path names" ],
    "Keywords":			[ "path name", "path names", "file name", "file names" ],
    "Description 01:Introduction to portable Path Names"::

	The different operating systems (Windows, Linux, MacOS) use different conventions to specify drives, directory path names
	and file names.  Directory separators (slash or backslash) is one example.  FUll case sensitivity of path and file names in LINUX and MACOS
	environments is another example. B4P supports various measures in order to make path and file naming more portable for the applications.

	* Both directory separator symbols "/" (UNIX/ / LINUX style) and "\" (WINDOWS style) are supported.  They will be changed to the right symbol automatically before accessing directories and files in the present operating system.
	* Returned directory and file names, e.g. in directory listings, __search files(__) function, etc. will use the directory separator native to the operating system (e.g. "/" under LINUX).
	* Under LINUX and MACOS, the file names are fully case sensitive.
	* Under Windows, case sensitivity only applies to creating new directory and file names.
	* Please avoid using following special symbols in file names:
	** : Colon - Used to specify drives in Windows environments
	** ", ' quotation marks - Not valid as part of file name.  Quotation marks may be needed at command level to specify path and file names containing spaces, but not to be done in B4P code.
	** *, ? wildcard symbols specific for directory and file names
	** , comma - B4P uses commas to specify multiple file names, e.g. in the __directory listing(__) function
	** & ampersand - Typically a control symbol for operating system command shells
	** &lt;, &gt;, | - Rediction and piping
	** /, \ - Directory separators
	* Further OS-specific restrictions on path and file names may apply
	* __Wildcard symbols__ are resolved by B4P and not by the operating system.

	+++

},




"Loading Files - Character sets" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "loading files" ],
    "Description 01:Introduction"::

	Beyond4P checks all files (programs and data) opened for <i>Byte Order Marks</i> (BOM) at the beginning of the file.  The BOM is a UNICODE character and used to differentiate between
	UTF-16 big endian, UTF-16 little endian and UTF-8 file formats.  All formats are supported, whereas UTF-8 is by far the most common UNICODE data storage format
	as it is compatible to various legacy systems supporing 8-byte character sets only.

	<br><br>
	<b>Data transparency:</b> The byte order marks will be recognized and then discarded, i.e. not passed on as special characters to the application.
	<br><br>

	How BOM's are checked in files loaded or opened:
	* If the 2 byte sequence FE FF (hexadecimal) is found, then the text file is in UTF-16 big endian format. 
	* If the 2 byte sequence FF FE (hexadecimal) is found, then the text file is in UTF-16 little endian format.
	* If the 3 byte sequence EF BB BF (hexadecimal) is found, then the text file is in UTF-8 format.
	* Some files contain multiple identical BOMs. They have been sighted in export files from relational databases.

	In case no BOM is found, following checks will be applied throughout the first ca. 4000 – 8000 bytes in the file (and not the entire file for performance reasons):
	* NULL-characters / 00 (hexadecimal) in even numbered positions (first byte in file is position 0): File is UTF-16, big endian format.  <br>Example: 00 31   00 30   00 20   20 AC   00 0D   00 0A  (10 € followed by new line sequence CR+LF). <br>Even for <i>difficult</i> contents such as pure Chinese text, the UTF-16 will be identified from space symbols (00 20), numeric digits and CR+LF symbols.
	* NULL-characters / 00 (hexadecimal) in odd numbered positions: File is UTF-16, little endian format.  <br>Example: 31 00   30 00   20 00   AC 20   0D 00   0A 00  (10 € followed by new line sequence CR+LF)

	If the criteria above do not apply, then the file will be checked for typical UTF-8 patterns in the first 4000-8000 bytes, provided the file contains non-ANSI characters.

	* Presence of non-ANSI symbols which make up typical UTF-8 byte patterns.  These are 2, 3 or 4 symbols with specific binary patterns.
	* Presence of non-ANSI symbols which do not match with UTF-8 byte patterns, e.g. simple 8-bit text in a ISO 8859-1 or WIN 1252 format with single non-ANSI characters
	* If the 1st criteria applies, but the 2nd does not, then the file is in UTF-8 format.
	* If the 2nd criteria applies, but the 1st does not, then the assumption will be non-UNICODE file format WIN 1252 which is the West European 8-bit character set.

	If the input file is in HTML format, then the "charset=…" commands will be checked accordingly.  JSON files are assumed in UTF-8 format by default.
	Ambiguities may still apply in the following case:
	* 1 line of UTF-16 text containing foreign characters only and new line sequence, e.g. one sentence in Greek, Cyrillic or Chinese (without digits, spaces, new lines).
	* 8-bit text file without non-ANSI character in the first 4000-8000 bytes (lots of English text in a huge file, a foreign word such as Café follows in a concluding sentence at the end of the file.

	Ambiguities need to be resolved with the system variable <b>local settings [ input file character set ]</b>.
	As long no clear character format has been identified (e.g. UTF-16 or UTF-8), then the local settings will be referenced.  The initial default value is win1252 (American and West European character set).

	<br><br>
	Supported character sets summarized<br>

	=== 200, 300, 500
	Character Set | Format | Description
	ANSI 		| 8 bits, 7 of them used 	| Traditional ANSI characters.  All non-ANSI characters, including foreign characters, the Euro symbol, etc. are converted into question marks. <br>Examples: E  e
	iso8859-1	| 8 bits			| ANSI characters plus West European character set in the range between ex A0 (160) and hex FF (255). <br> This format does not support Windows proprietary character range between hex 80 (128) and hex 9F (159) which affects the Euro symbol (€). <br>Examples: E  e  É  é
	win1252		| 8 bits, <br> default setting for Windows | Same as above, but includes Windows proprietary character range so additional punctuation symbols as well as the Euro symbol (€) will be handled correctly. <br>Examples: E  e  É  é  €
	utf-8		| 8 bits			| UNICODE format.  Characters can take 1, 2, 3 or 4 byes.<br>Examples: E  e  É  é  €  Ə  ə  中国  𐌄 (also applicable in next rows below)
	utf-16		|16 bits (little endian)	| UNICODE format. Every character contains precisely 2 bytes, starting with the least significant byte.  Surrogate pairs are used for characters outside Basic Multilingual Plane.
	utf-16 big endian | 16 bits (big endian)	| UNICODE format like above, but the two bytes are swapped. Surrogate pairs are used for characters outside Basic Multilingual Plane.
	===

	Note: Microsoft Excel does not understand utf-16 big endian, but understands the remaining UNICODE formats.  Use this format only if the recipient (e.g. a UNIX server) operates on big endian format only.

	<br><br>
	JSON files are always loaded assuming that UTF-8 format is used.
	+++

},



"Saving Files - Character sets" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "saving files" ],
    "Description 01:Introduction"::

	The chosen file format either depends on the format specified in a parameter in the __table save(__) function call, 
	or it refers to the default setting stored in the __system variable__ <b>local settings [ output file character set ]</b>. If not modified by the user, 
	this file contains the value UTF-8. Files saved in UNICODE-format (UTF-8 and UTF-16 formats) will always begin start with corresponding Byte Order Marks.
	This allows other applications to recognize and interpret the contents correctly.  This does effectively apply to Excel when reading comma or tab separated
	file formats (.csv format).<br>
	<br>Text files under Windows contain "carriage return + line feed" line breaks. 
	<br>Text files under LINUX contain "line feed" line breaks.
	<br>You can change the setting with by setting system variable <b>runtime settings [ crlf ]</b> to true (enabled) or false (disabled)

	<br><br>
	JSON files are always saved in UTF-8 format.

	+++

},



"CSV File Format" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "CSV" ],
    "Keywords":			[ "CSV" ],
    "Description 01:CSV File Format"::

	The CSV (Comma Separated Values) is a simple structured text file format existing since the nostalgic 1970's along with the introduction of FORTRAN 77 and is supported by
	Beyond4P, along with HTML/MHTML, XML and JSON.

	<br><br>
	THe biggest drawback is the ignorance towards country settings.  CSV generated from Excel files use symbols such as
	* List separator (could be commas, semicolons, tab stops, etc.)
	* Decimal point (as used in US, GB, CH) or decimal comma (as used in DE)
	* Thousand separator (various symbols and blanks exist)

	The files can be loaded with and without specifying the list separators.  If no list separator is specified, then Beyond4P tries to automatically detect the
	applicable separators by checking for commas, semicolons and tabs.

	Regarding decimal symbols, the standard function __table load(__) will check for numerals in text and CSV files (but not HMTL files and likes) with decimal 
	commas and convert them to decimal points.  The new function __table load unchanged(__) will not do the conversion.  You may need this if you need to
	discriminate between actual numbers and other numeric data separated with commas but not considered as regular numeric data. 
	<br/>Consider using the __clean num(__)
	function to prepare numbers containing commas (and possibly more, such as thousand separators, currency symbols, etc.).
	<br/>Consider using __table save with local decimal separator(__) to save CSV files using the decimal separator symbol applicable with your country settings (comma or point).
	<br/>Consider using __table save with decimal comma(__) to make sure all numbers use decimal commas.
	<br>The original function __table save(__) saves numbers with decimal points, regardless of the applicable country settings.
	
	<br><br>

	Notice on files with fixed column widths: The best is to load these files with "new line" as separator symbol so the table contains one item per row.
	Then create additional columns with dedicated data items using the __left(__) / __middle(__) / __right(__) functions where you can specify numeric column positions, 
	and remove redundant white space symbos with the __trim(__) function.
	
	+++
},






"Miscellaneous Features" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Miscellaneous Features" ],
    "Description 01:Introduction"::

	Miscellaneous features descrbed next include:

	* __Negative Indexing__
	* __Locales__
	* Setting __verbose levels__ to facilitate monitoring and debugging program execution, and 
	
	+++
},




"Negative Indexing" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "negative indexing" ],
    "Description 01:Introduction"::

	Python, a common programming language, supports negative indexing for arrays.  B4P applies negative indexing on a broader range.  Typically, the -1
	refers to the last element, with -2, -3, etc. referring to the elements further up (or leftward).  At present, negative indexing is used in the following:

	* Arrays (-1 = last element)
	* Table row numbers (-1 = last row)
	* Table column number (-1 = last column.  Few exceptions exists where -1 refers to a vacant column after the last one, and is documented so if it applies)
	* Parameter set elements (-1 = last parameter set element)
	* Function parameters (in selected functions where documented)

	Negative numbers must be at least big enough in order to access the first element / row / column.  Going further will result in exceptions (error messages).

	+++,
    "Examples 01:Programming example"::
	array( a[], { ha, he, hi, ho, hu } );
	structure( b[], { reptile, mammal, bird, fish }, { turtle, deer, swallow, dorade } );
	c[] = { Hah, Heh, Hih, Hoh, Huh };

	echo( a[-2], "  ", a[-1] ); // ho, hu
	echo( b[-2], "  ", b[-1] ); // deer, turtle (last two acc. to alphabetic order of structure members)
	echo( c[]{-2}, "  ", c[]{-1} ); // Hoh, Huh

	echo(new line, "Example with tables:");
	table initialize( t, { { Last Name, First Name, Street, City, Country }, 
	    { Adams, Abel, Main St, S. Francisco, USA }, { Billson, Bill, South St, London, UK } } );

	echo( [t:-2,-1] ); // Last row, 2nd last column.  It's 'London'.
	echo( [t:-1,-1] ); // Last row, last column.  It's 'UK'.	
	+++,
    "Output 01:Outcome": "automatic"
},




"Locales" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Locales" ],
    "Keywords":			[ "list of Locales", "locale" ],
    "Description 01:Introduction"::

	Beyond4P is able to support different locales (regional and language specific settings) which are managed in 
	a file called "List of locales.csv".  This file comes along with the installation package and will be referenced automatically
	whenever locale information is needed to carry out a particular function, e.g. converting a __date__ to a __string__.

	<br><br>
	The locale settings influence information processing such the following described below:

	* Region-specific number formats (choice of decimal and thousand separator symbols)
	* Date formats (e.g. MM/DD/YYYY or DD/MM/YYYY as default)
	* Weekday and month names in different languages
	* Using the right list separator for loading and saving CSV files for interaction with Excel (some countries-specific installations use comma, others use semicolon)
	* Currency names and symbols

	+++,
    "Description 02:Specifying locales"::
	Locales typical comprise of a combination of abbreviated language name followed by country name with an underscore symbol inbetween, e.g. "de_CH" for
	<b>German language, Switzerland</b>.  You may also specifc country or language names only, however they create ambiguitiess with countries where more than
	one language is spoken (or better: supported, e.g. Canada), and languages which are spoken in several countries (e.g. English).

	<br><br>
	For all functions asking for <i>locale</i> parameters, you can specify the locale, the language or the country.  No case sensitvity applies, meaning that
	both "en_US" and "EN_us" are accepted, as well as "USA" and "usa".  If only the language or the country is chosen, then the first match applies.
	Therefore, make it a habit to specify locales precisely using the pair of abbreviations.

	<br><br>
	Special values:
	* none = Apply no locale specific context
	* local = Apply presently appliable settings, either set during program installation, or modified with __set locale(__) function call.


	+++,
    "Description 03:Functions asking for locales"::

	* __str(__), __soft(__): 2nd function parameter
	* __set locale(__): 1st function parameter (must be a locale value, not country or language name alone=)

	+++,
    "Description 04:Supported locales"::

	=== 100, 100, 100, 700
	Locale		| Language	| Country		| Explanation
	none		| none		| none			| Suppresses thousand separator, date is in universally recognized YYYY-MM-DD format
	en_US		| English	| USA			| Decimal point, 1000-comma, M/D/YYYY
	en_GB		| English	| Great Britain		| Decimal point, 1000-comma, DD/MM/YYYY
	en_UK		| English	| Great Britain		| Decimal point, 1000-comma, DD/MM/YYYY (Same as en_GB)
	en_CA		| English	| Canada		| Decimal point, 1000-comma, DD/MM/YYYY
	en_DE		| English	| Germany		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English
	en_CH		| English	| Switzerland		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English
	en_AT		| English	| Austria		| Decimal comma, 1000-point, DD/MM/YYYY, weekday and month names are in English
	en_FR		| English	| France		| Decimal comma, 1000-space, DD/MM/YYYY, weekday and month names are in English
	en_SE		| English	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD, weekday and month names are in English
	en_IN		| English	| India			| Decimal point, 1000-comma, D/M/YYYY, weekday and month names are in English, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89 
	in_IN		| Indian	| India			| Decimal point, 1000-comma, D/M/YYYY, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89
	hi_IN		| Hindi		| India			| Decimal point, 1000-comma, D/M/YYYY, <br>Note: Different thousand-separation scheme applies in India: 12,34,567.89
	de_CH		| German	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY
	de_CH_HP	| German	| Switzerland		| For HP machines with other settings: Decimal point, 1000-separator with UNICODE 2817 (Typographical Right Single Quotation Mark)
	de_DE		| German	| Germany		| Decimal comma, 1000-point, YYYY-MM-DD
	de_AT		| German	| Austria		| Decimal comma, 1000-space, DD.MM.YYYY
	de_IT		| German	| Italy			| Decimal comma, 1000-point, DD.MM.YYYY, weekday and month names are in German
	fr_CA		| French	| Canada		| Decimal point, 1000-space, YYYY-MM-DD, weekday and month names are in French
	fr_FR		| French	| France		| Decimal comma, 1000-space, DD.MM.YYYY
	fr_CH		| French	| Switzerland		| Decimal comma, 1000-space, DD.MM.YYYY, weekday and month names are in French
	fr_BE		| French	| Belgium		| Decimal comma, 1000-space, D/MM/YYYY, weekday and month names are in French
	it_IT		| Italian	| Italy			| Decimal comma, 1000-point, DD/MM/YYYY
	it_CH		| Italian	| Switzerland		| Decimal point, 1000-apostrophe, DD.MM.YYYY, weekday and month names are in Italian
	it_CH_HP	| Italian	| Switzerland		| For HP machines with other settings: Decimal point, 1000-separator with UNICODE 2817 (Typographical Right Single Quotation Mark)
	es_ES		| Spanish	| Spain			| Decimal point, 1000-comma, D/MM/YYYY
	es_US		| Spanish	| USA			| Decimal point, 1000-comma, M/D/YYYY, weekday and month names are in Spanish
	sv_SE		| Swedish	| Sweden		| Decimal comma, 1000-space, YYYY-MM-DD
	nl_NL		| Dutch		| Netherlands		| Decimal comma, 1000-point, DD-MM-YYYY
	===

	+++

},





"Verbose Levels" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "verbose" ],
    "Keywords":		[ "verbose levels" ],
    "Description 01:Verbose Level Settings"::

	The __system variable__ <b>runtime settings[verbose]</b> rules the amount of additional console output messages to be generated which
	could be helpful for developing the code and monitoring program execution.  The default verbose setting is <b>low</b>.  This setting can be changed anytime.
	In addition, if the B4P program is called from command line, the command line switches <b>-q</b> and <b>-w</b> will set this setting to <b>quiet</b>.

	<br><br>
	Following verbose settings are supported:

	<b>quiet</b><br>
	* No additional output is generated other than explicitly instructed in the B4P programs, e.g. using __echo(__) or __print(__).
	* However, error messages and important warning messages will definitely appear.

	<b>low</b>: in addition to 'quiet' (default setting):

	* Outputs progress info (percentage figures shown) if selected functions are processing big amount of data (e.g. large tables, large variable trees)
	* Short feedback messages on tables and variables loaded and saved (name of file, number of rows, etc.)
	* Info about standard B4P library files loaded (e.g. Support Library)
	* Some warnings, e.g. obsolete character sets found in input files

	<b>medium</b>: in addition to 'low':

	* Outputs the function names for the more sophisticated functions (e.g. __table consolidate(__) is included, but __abs(__) is not in order to avoid excessive messages) with first few paramters
	* Informs about the intermediate processing steps inside selected functions, e.g. __table load excel file(__)

	<b>high</b>: in addition to 'medium':

	* In addition to the function names printed out, all parameters provided will also be shown.
	* Further information on intermediate processing steps inside selected functions, e.g. __table merge(__)

	+++
},




"Language Pitfalls" :
{
    "Documentation":		"General Description", // Required value
    "Feature Names":		[ "Language pitfalls", "Hijacking parameters", "Hijack" ],
    "Description 01:Introduction"::

	The syntactic and semantic structure of B4P allow powerful features such as multiple-word naming for variables, functions and tables, as well as
	other benefits.  However, even experienced programmers trip into some pitfalls.  This section makes you aware of the most the most common pitfalls.

    "Description 02:Brackets follow Variable Names"::

	In regular programming languages, keywords are treated as reserved keywords or variables.  In B4P, they are __plain text__.  To use these strings
	to access variables, do not forget to add <b>[]</b> behind it.  No differnece applies if you access a subscript of an array or a structure, e.g. <b>a[10]</b>.


    "Description 03:For loops - Different from C/C++ and Java"::

	In conventional languages, the three key statements inside for loops are separated by semicolons, e.g. <b>for( a = 1; a < 10; a++ )</b>.  To make things
	even wordse, multiple statements inside the three statements are separted by commas.

	<br><br>

	In B4P, __for(__) is treated like a __procedure call__ where parameters are separated with commas and not with semicolons.  This function accepts
	__code pieces__ as parameters.  Multiple statements inside a parameter are separated with semicolons. Right formulation: <b>for ( a[]=1, a[]<10, a[]++)</b>.

    "Description 04:Comparison Operators Hijack Parameters"::

	If you are comparing things using the <b>=</b> or <b>&lt;&gt;</b> symbols, note that these two __comparison operators__ (but not <b>==</b> and <b>!=</b>) can expect
	more than 1 operand.  For example, <b>a[] = 2,3,5,7,11 </b> is a legitimate expression to compare a[] with five different prime numbers.

	<br><br>

	With b[] = 6, the expression <b>a[] = { 1, b[]=5, 6, 7, 8 }</b> is actually resulting <b>{ 1, true }</b> because the comparison has hijacke the remaining
	parameters in the parameter set.  Add parenthese to avoid this, e.g. <b>a[] = { 1, (b[]=5), 6, 7, 8 }</b> which returns <b>{1, false, 6, 7, 8}</b>.


    "Description 05:Memory Effect on Table Headers"::

	Please see the details on the __Memory Effect__	when referencing table heades with string values as they are normally
	checked once and the column number will be memorized for future use in order accelerate performance significantly.


    "Description 06:Forgetting colon before 'else'"::

	Since B4P's unique cababilties of supporting multi-word identifiers for variables, tables and function names, one drawback needs to be covercome:
	Whenever single __statements__ follows __else__, then a colon is needed to keep them separated.  
	* Correct: <b>... else : a[] = 1;</b>
	* Misleading: <b>... else a[] = 1;</b> Here, 1 is assigned to a variable called <b>else a</b>.
	* No issues with __blocks__: <b>... else { a[] = 1; } </b>

    "Description 07:Error message refers to end of program unexpectedly"::

	You may likely have forgotten a closing parenthesis after the function beginning with <b>table process ...</b> and other functions which expect
	a code piece in the last parameter.  With the missing closing parameter, B4P tries to include the entire remaining code into that function
	parameter.

	<br><br>
	Action: Go back to that function call and ensure that all closing parentheses are included. Example:<br><br>
	<b>table process selected rows(table, [sine] = sin( [angle] );   </b> // Attention: One parenthesis is missing!<br>
	<b>table process selected rows(table, [sine] = sin( [angle] ) ); </b> // This one is OK

	+++
}







B4PDOCU.STOP